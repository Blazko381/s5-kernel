composite_setup_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	composite_setup_complete, .-composite_setup_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_write_complete, %function
diag_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	ldr	r2, [r5, #136]
	sub	ip, r2, #1
	str	ip, [r5, #136]
	ldr	ip, [r1, #44]
	cmp	ip, #0
	bne	.L4
	ldrh	r0, [r0, #20]
	ldr	ip, [r1, #4]
	cmp	ip, r0
	bcc	.L4
	udiv	lr, ip, r0
	mls	r0, r0, lr, ip
	cmp	r0, #0
	bne	.L4
	str	r2, [r5, #136]
	ldr	ip, [r1, #48]
	mov	r2, #32
	str	r0, [r1, #4]
	str	ip, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #88]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L4:
	add	r7, r5, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #104]
	add	ip, r4, #36
	add	r3, r5, #100
	mov	r1, r0
	str	ip, [r5, #104]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	ip, [r2]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L17
.L5:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #124]
	cmp	r3, #0
	beq	.L3
	ldr	lr, [r3, #12]
	cmp	lr, #0
	beq	.L3
	mov	r2, r6
	ldr	r0, [r3, #16]
	mov	r1, #2
	ldrd	r4, [sp]
	mov	r3, lr
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L17:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L5
.L3:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_write_complete, .-diag_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_read_complete, %function
diag_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #108
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	add	r2, r5, #36
	add	ip, r4, #92
	mov	r1, r0
	mov	r0, r7
	str	r2, [r4, #96]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #124]
	ldr	r3, [r4, #132]
	cmp	r1, #0
	add	r3, r3, #1
	str	r3, [r4, #132]
	beq	.L18
	ldr	r3, [r1, #12]
	cmp	r3, #0
	beq	.L18
	mov	r2, r6
	ldr	r0, [r1, #16]
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L18:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_read_complete, .-diag_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_disable, %function
diag_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #108
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r0, r5
	mov	r6, #0
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r6, [r4, #112]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #124]
	cmp	r3, r6
	beq	.L28
	ldr	r5, [r3, #12]
	cmp	r5, r6
	beq	.L28
	mov	r2, r6
	mov	r1, #1
	ldr	r0, [r3, #16]
	blx	r5
.L28:
	ldr	r0, [r4, #88]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	str	r5, [r3]
	ldr	r3, [r4, #124]
	cmp	r3, r5
	strne	r5, [r3, #20]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	diag_function_disable, .-diag_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_reset_stats, %function
debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	lr, #:lower16:.LANCHOR0
	movt	lr, #:upper16:.LANCHOR0
	ldr	r3, [lr]
	cmp	lr, r3
	beq	.L42
	sub	r3, r3, #4
	mov	ip, #0
.L41:
	ldr	r1, [r3, #20]
	cmp	r1, #0
	beq	.L43
	str	ip, [r1, #128]
	str	ip, [r1, #132]
	str	ip, [r1, #136]
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L41
.L42:
	mov	r0, r2
	ldr	pc, [sp], #4
.L43:
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L41
	mov	r0, r2
	ldr	pc, [sp], #4
	.fnend
	.size	debug_reset_stats, .-debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_open, %function
debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_open, .-debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_write_complete, %function
qdss_ctrl_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r2, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r2, #0
	bne	.L49
	ldrh	r2, [r0, #20]
	ldr	r0, [r1, #4]
	cmp	r0, r2
	bcc	.L49
	udiv	ip, r0, r2
	mls	r2, r2, ip, r0
	cmp	r2, #0
	bne	.L49
	ldr	r0, [r1, #48]
	str	r2, [r1, #4]
	mov	r2, #32
	str	r0, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L49:
	add	r7, r5, #188
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #152]
	add	ip, r4, #36
	add	r3, r5, #148
	mov	r1, r0
	str	ip, [r5, #152]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	ip, [r2]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L56
.L50:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #124]
	cmp	lr, #0
	beq	.L48
	mov	r2, r6
	mov	ip, lr
	ldr	r0, [r5, #128]
	ldrd	r4, [sp]
	mov	r3, #0
	mov	r1, #4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L56:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L50
.L48:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_write_complete, .-qdss_ctrl_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_read_complete, %function
qdss_ctrl_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r5, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r5, #188
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #144]
	add	r2, r4, #36
	add	ip, r5, #140
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #144]
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #124]
	cmp	lr, #0
	beq	.L57
	mov	r2, r6
	mov	ip, lr
	ldr	r0, [r5, #128]
	ldrd	r4, [sp]
	mov	r3, #0
	mov	r1, #2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L57:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_read_complete, .-qdss_ctrl_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_txcommand_complete, %function
rmnet_txcommand_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #440]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #440]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
	.fnend
	.size	rmnet_txcommand_complete, .-rmnet_txcommand_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_reset_stats, %function
rmnet_smd_debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #424]
	str	r3, [r4, #428]
	str	r3, [r4, #432]
	str	r3, [r4, #436]
	str	r3, [r4, #440]
	str	r3, [r4, #444]
	str	r3, [r4, #448]
	str	r3, [r4, #452]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_debug_reset_stats, .-rmnet_smd_debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_open, %function
rmnet_smd_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #340]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	rmnet_smd_debug_open, .-rmnet_smd_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_modem_cbits_w, %function
rmnet_sdio_set_modem_cbits_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-12]
	bx	lr
	.fnend
	.size	rmnet_sdio_set_modem_cbits_w, .-rmnet_sdio_set_modem_cbits_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disconnect_work, %function
rmnet_sdio_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	rmnet_sdio_disconnect_work, .-rmnet_sdio_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_reset_stats, %function
rmnet_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #328]
	str	r1, [r3, #356]
	str	r1, [r3, #360]
	str	r1, [r3, #364]
	str	r1, [r3, #368]
	str	r1, [r3, #372]
	bx	lr
	.fnend
	.size	rmnet_sdio_reset_stats, .-rmnet_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_suspend, %function
rmnet_mux_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L68
	ldr	r3, [r0, #352]
	bic	r3, r3, #2
	str	r3, [r0, #352]
.L68:
	bx	lr
	.fnend
	.size	rmnet_mux_suspend, .-rmnet_mux_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_unbind, %function
rmnet_mux_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	str	r3, [r1, #172]
	bx	lr
	.fnend
	.size	rmnet_mux_unbind, .-rmnet_mux_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_reset_stats, %function
rmnet_mux_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #312]
	str	r1, [r3, #400]
	str	r1, [r3, #404]
	str	r1, [r3, #408]
	str	r1, [r3, #412]
	str	r1, [r3, #416]
	str	r1, [r3, #420]
	str	r1, [r3, #424]
	bx	lr
	.fnend
	.size	rmnet_mux_reset_stats, .-rmnet_mux_reset_stats
	.align	2
	.global	usb_rmnet_mux_ctrl_release
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_release, %function
usb_rmnet_mux_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	mov	r4, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r1, #124]
	add	r6, r7, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r7, #356]
	mov	r0, r6
	str	r4, [r5, #124]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	usb_rmnet_mux_ctrl_release, .-usb_rmnet_mux_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_disable, %function
audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldrb	r3, [r0, #152]	@ zero_extendqisi2
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	strb	r3, [r4, #152]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_disable, .-audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_close, %function
audio_pcm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #8]
	add	r5, r6, #108
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #92]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_close, .-audio_pcm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_prepare, %function
audio_pcm_prepare:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	ip, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r1, [ip, #168]
	mov	lr, #0
	mov	r0, lr
	ldr	r4, [r1, #60]
	ldr	r2, [r1, #80]
	ldr	r3, [r1, #200]
	mul	r2, r2, r4
	str	lr, [r3, #128]
	lsr	r2, r2, #3
	str	r2, [r3, #124]
	ldr	r2, [r1, #540]
	str	r2, [r3, #112]
	ldr	ip, [ip, #168]
	ldr	lr, [ip, #68]
	ldr	r1, [ip, #80]
	str	r2, [r3, #120]
	mul	r1, r1, lr
	add	r2, r2, r1, lsr #3
	str	r2, [r3, #116]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_prepare, .-audio_pcm_prepare
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_pointer, %function
audio_pcm_pointer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #168]
	ldr	r0, [r3, #80]
	ldr	r2, [r3, #200]
	ldr	r1, [r2, #112]
	ldr	r3, [r2, #120]
	sub	r3, r3, r1
	lsl	r3, r3, #3
	udiv	r0, r3, r0
	bx	lr
	.fnend
	.size	audio_pcm_pointer, .-audio_pcm_pointer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_ioctl, %function
ffs_ep0_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #26496
	ldr	r0, [r0, #124]
	cmp	r1, ip
	beq	.L105
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L99
	ldr	r3, [r0]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L99
	bx	r3
.L105:
	mov	r3, r2
	ldr	r2, [r0, #136]
	cmp	r2, #0
	beq	.L96
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, [r2, #8]
	ldr	lr, [r2, #32]
	ldrh	r1, [r1, #182]
	cmp	r1, #0
	beq	.L97
	uxtb	r2, r3
	mov	ip, lr
.L95:
	mov	r3, ip
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L94
	cmp	r0, r2
	beq	.L106
.L94:
	subs	r1, r1, #1
	mov	ip, r3
	bne	.L95
.L97:
	mvn	r0, #32
	ldr	pc, [sp], #4
.L106:
	sub	r0, ip, lr
	asr	r0, r0, #1
	ldr	pc, [sp], #4
.L99:
	mvn	r0, #24
	bx	lr
.L96:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	ffs_ep0_ioctl, .-ffs_ep0_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_room, %function
gs_write_room:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r1, r0
	cmp	r3, #0
	moveq	r5, r3
	beq	.L108
	ldr	r2, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
.L108:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_write_room, .-gs_write_room
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_chars_in_buffer, %function
gs_chars_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #92]
	mov	r1, r0
	mov	r0, r4
	ldr	ip, [r4, #100]
	ldr	r3, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, ip
	udiv	r4, r3, r2
	mls	r4, r2, r4, r3
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gs_chars_in_buffer, .-gs_chars_in_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_break_ctl, %function
gs_break_ctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r5, [r0, #280]
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r5, #4]
	cmp	r0, #0
	moveq	r4, r0
	beq	.L114
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L114
	mov	r1, r6
	blx	r4
	mov	r4, r0
.L114:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_break_ctl, .-gs_break_ctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmget, %function
gs_tiocmget:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #280]
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r5, [r6, #4]
	cmp	r5, #0
	mvneq	r4, #18
	beq	.L119
	ldr	r4, [r5, #108]
	cmp	r4, #0
	beq	.L120
	mov	r0, r5
	blx	r4
	cmp	r0, #0
	movne	r4, #2
	moveq	r4, #0
.L120:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L122
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	orrne	r4, r4, #4
.L122:
	ldrh	r3, [r5, #104]
	tst	r3, #64
	orrne	r4, r4, #64
	tst	r3, #128
	orrne	r4, r4, #128
.L119:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_tiocmget, .-gs_tiocmget
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmset, %function
gs_tiocmset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	mov	r8, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #280]
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r4, [r7, #4]
	cmp	r4, #0
	beq	.L145
	ands	r5, r8, #128
	and	r9, r6, #128
	beq	.L142
	ldr	r5, [r4, #132]
	cmp	r5, #0
	beq	.L143
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r5
	mov	r5, r0
.L142:
	cmp	r9, #0
	beq	.L143
	ldr	r2, [r4, #132]
	cmp	r2, #0
	beq	.L143
	ldrh	r3, [r4, #104]
	mov	r1, #0
	mov	r0, r4
	bic	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L143:
	tst	r8, #64
	and	r6, r6, #64
	bne	.L167
.L144:
	cmp	r6, #0
	beq	.L141
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L141
	ldrh	r3, [r4, #104]
	mov	r0, r4
	mov	r1, #0
	bic	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L141:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L167:
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L141
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
	b	.L144
.L145:
	mvn	r5, #18
	b	.L141
	.fnend
	.size	gs_tiocmset, .-gs_tiocmset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_write_reset, %function
debug_write_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r4
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	debug_write_reset, .-debug_write_reset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_reset_stats, %function
debug_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L171
	mov	r5, #0
	add	r6, r7, #4
	mov	r9, r5
.L172:
	ldr	r4, [r6, #24]
	add	r5, r5, #1
	add	r6, r6, #108
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #184]
	mov	r0, r8
	str	r9, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7]
	cmp	r5, r3
	bcc	.L172
.L171:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_sdio_reset_stats, .-debug_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_reset_stats, %function
debug_smd_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #220]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L179
	mov	r5, #0
	add	r6, r7, #224
	mov	r9, r5
.L180:
	ldr	r4, [r6, #24]
	add	r5, r5, #1
	add	r6, r6, #108
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #168]
	mov	r0, r8
	str	r9, [r4, #172]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #220]
	cmp	r5, r3
	bcc	.L180
.L179:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_smd_reset_stats, .-debug_smd_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_wake_cb, %function
gbam_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #16]
	ldr	r3, [r3, #128]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L187
	bx	r3
.L187:
	mvn	r0, #94
	bx	lr
	.fnend
	.size	gbam_wake_cb, .-gbam_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_reset_stats, %function
gbam_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #440]
	cmp	r2, #0
	ble	.L189
	ldr	r4, [r3, #444]
	cmp	r4, #0
	beq	.L189
	add	r5, r4, #4
	add	r6, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #240]
	str	r3, [r4, #244]
	str	r3, [r4, #248]
	str	r3, [r4, #260]
	str	r3, [r4, #264]
	str	r3, [r4, #268]
	str	r3, [r4, #272]
	str	r3, [r4, #276]
	str	r3, [r4, #280]
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L189:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gbam_reset_stats, .-gbam_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_reset_stats, %function
gsmd_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r5, .L203
	strd	r6, [sp, #8]
	mov	r7, #0
	strd	r8, [sp, #16]
	mov	r9, r2
	str	r10, [sp, #24]
	add	r8, r5, #504
	str	lr, [sp, #28]
.L197:
	ldr	r4, [r5]
	add	r5, r5, #84
	cmp	r4, #0
	add	r6, r4, #108
	mov	r0, r6
	beq	.L196
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r7, [r4, #92]
	mov	r0, r6
	str	r7, [r4, #96]
	bl	_raw_spin_unlock_irqrestore
.L196:
	cmp	r5, r8
	bne	.L197
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L204:
	.align	2
.L203:
	.word	.LANCHOR1+528
	.fnend
	.size	gsmd_ctrl_reset_stats, .-gsmd_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_open, %function
rmnet_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #1032]
	str	lr, [sp, #12]
	add	r2, r3, #16
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r0, r5, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L206
	ldr	r0, [r4, #1032]
	str	r0, [r1, #124]
	add	r0, r0, #52
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1032]
	mov	r1, r0
	strb	r5, [r3, #4]
	add	r0, r3, #52
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L205:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L206:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L205
	.fnend
	.size	rmnet_ctrl_open, .-rmnet_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_release, %function
rmnet_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	strb	r5, [r4, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r3, r4, #16
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_ctrl_release, .-rmnet_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_receive, %function
ghsic_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	subs	r4, r0, #0
	str	lr, [sp, #4]
	moveq	r0, r4
	beq	.L211
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L214
	ldr	r0, [r4, #8]
	blx	r3
	ldr	r3, [r4, #100]
	add	r3, r3, #1
	str	r3, [r4, #100]
.L211:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L214:
	mov	r0, r3
	b	.L211
	.fnend
	.size	ghsic_ctrl_receive, .-ghsic_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_status, %function
ghsic_ctrl_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]
	str	r1, [r0, #92]
	cmp	r3, #0
	beq	.L216
	ldr	r2, [r3, #136]
	cmp	r2, #0
	beq	.L216
	mov	r0, r3
	bx	r2
.L216:
	bx	lr
	.fnend
	.size	ghsic_ctrl_status, .-ghsic_ctrl_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_reset_stats, %function
gctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	mov	r10, r2
	ldr	r3, [r9, #1036]
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L225
	mov	r5, #0
	add	r6, r9, #1040
	mov	r8, r5
.L226:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r7, r4, #4
	mov	r0, r7
	beq	.L227
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #96]
	mov	r0, r7
	str	r8, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #104
	str	r8, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #1036]
	cmp	r3, r5
	bhi	.L226
.L225:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L227:
	add	r5, r5, #1
	add	r6, r6, #104
	cmp	r5, r3
	bcc	.L226
	b	.L225
	.fnend
	.size	gctrl_reset_stats, .-gctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_reset_stats, %function
ghsic_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR1
	mov	r10, r2
	strd	r8, [sp, #16]
	movt	fp, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [fp, #1456]
	cmp	r3, #0
	beq	.L234
	ldr	r7, .L242
	mov	r6, #0
	mov	r5, r6
.L235:
	ldr	r4, [r7]
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L236
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r8
	str	r5, [r4, #204]
	add	r6, r6, #1
	add	r7, r7, #104
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r9
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #1456]
	cmp	r3, r6
	bhi	.L235
.L234:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L236:
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r6, r3
	bcc	.L235
	b	.L234
.L243:
	.align	2
.L242:
	.word	.LANCHOR1+1460
	.fnend
	.size	ghsic_data_reset_stats, .-ghsic_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_reset_stats, %function
ghsuart_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #1876]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L245
	ldr	r6, .L253
	mov	r5, #0
	mov	r9, r5
.L246:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r8, r4, #8
	mov	r0, r8
	beq	.L247
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #96]
	mov	r0, r8
	str	r9, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #84
	str	r9, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #1876]
	cmp	r3, r5
	bhi	.L246
.L245:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L247:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L246
	b	.L245
.L254:
	.align	2
.L253:
	.word	.LANCHOR1+1880
	.fnend
	.size	ghsuart_ctrl_reset_stats, .-ghsuart_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_reset_stats, %function
ghsuart_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #2048]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L256
	ldr	r6, .L264
	mov	r5, #0
	mov	r8, r5
.L257:
	ldr	r4, [r6]
	cmp	r4, #0
	add	fp, r4, #104
	add	r9, r4, #72
	mov	r0, fp
	beq	.L258
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #204]
	mov	r0, fp
	str	r8, [r4, #212]
	add	r5, r5, #1
	add	r6, r6, #84
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #208]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #2048]
	cmp	r3, r5
	bhi	.L257
.L256:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L258:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L257
	b	.L256
.L265:
	.align	2
.L264:
	.word	.LANCHOR1+2052
	.fnend
	.size	ghsuart_data_reset_stats, .-ghsuart_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_open, %function
modem_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	str	r2, [r3, #2220]
	bx	lr
	.fnend
	.size	modem_open, .-modem_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_poll, %function
modem_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L268
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L268
	ldr	r1, .L279
	blx	r3
.L268:
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	add	sp, sp, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2220]
	cmp	r0, #0
	movne	r0, #65
	ldr	pc, [sp], #4
.L280:
	.align	2
.L279:
	.word	.LANCHOR1+2224
	.fnend
	.size	modem_poll, .-modem_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_open, %function
ccid_bulk_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #2236]
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L283
	ldr	r5, [r4, #152]
	cmp	r5, #0
	bne	.L284
	mov	r3, #1
	add	r7, r4, #92
	str	r5, [r4, #148]
	mov	r6, r1
	mov	r0, r7
	str	r3, [r4, #152]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
.L281:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L284:
	mvn	r0, #15
	b	.L281
.L283:
	mvn	r0, #18
	b	.L281
	.fnend
	.size	ccid_bulk_open, .-ccid_bulk_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_release, %function
ccid_bulk_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #152]
	bx	lr
	.fnend
	.size	ccid_bulk_release, .-ccid_bulk_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_open, %function
ccid_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #2236]
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L289
	ldr	r5, [r4, #116]
	cmp	r5, #0
	bne	.L290
	mov	r3, #1
	add	r7, r4, #92
	mov	r6, r1
	mov	r0, r7
	str	r3, [r4, #116]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
.L287:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L290:
	mvn	r0, #15
	b	.L287
.L289:
	mvn	r0, #18
	b	.L287
	.fnend
	.size	ccid_ctrl_open, .-ccid_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_release, %function
ccid_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #116]
	bx	lr
	.fnend
	.size	ccid_ctrl_release, .-ccid_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_disable, %function
f_midi_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	bx	r3
	.fnend
	.size	f_midi_disable, .-f_midi_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_snd_free, %function
f_midi_snd_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_snd_free, .-f_midi_snd_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_open, %function
f_midi_in_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	ldr	r2, [r2, #200]
	add	r3, r2, r3, lsl #2
	ldr	r1, [r3, #232]
	cmp	r1, #0
	beq	.L298
	str	r0, [r3, #104]
	ldr	r3, [r0, #12]
	mov	r1, #0
	mov	r0, r1
	add	r3, r3, #58
	ldr	r3, [r2, r3, lsl #2]
	strb	r1, [r3, #9]
	bx	lr
.L298:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	f_midi_in_open, .-f_midi_in_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_open, %function
f_midi_out_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	mov	r2, r0
	ldr	r1, [r0, #28]
	cmp	r3, #15
	ldr	r1, [r1, #200]
	addle	r3, r3, #42
	movle	r0, #0
	mvngt	r0, #21
	strle	r2, [r1, r3, lsl #2]
	bx	lr
	.fnend
	.size	f_midi_out_open, .-f_midi_out_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_available, %function
rndis_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #176
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #172]
	ldr	ip, [r1]
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	beq	.L313
.L302:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L313:
	ldr	r2, [r0, #168]
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L302
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L302
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L302
	.fnend
	.size	rndis_response_available, .-rndis_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_complete, %function
rndis_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L314
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L314
	ldr	r3, [r1, #44]
	cmn	r3, #108
	beq	.L319
	cmn	r3, #104
	beq	.L319
	ldr	r3, [r4, #168]
	cmp	r3, r0
	beq	.L337
.L314:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L319:
	mov	r3, #0
	str	r3, [r4, #176]
	b	.L314
.L337:
	add	r5, r4, #176
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L314
	ldr	r0, [r4, #168]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L314
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L314
	.fnend
	.size	rndis_response_complete, .-rndis_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_alt, %function
ecm_qc_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L340
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L340:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_qc_get_alt, .-ecm_qc_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_get_alt, %function
mbim_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #196]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L343
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L344
	ldrb	r0, [r0, #198]	@ zero_extendqisi2
	bx	lr
.L343:
	mov	r0, #0
	bx	lr
.L344:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	mbim_get_alt, .-mbim_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_get_alt, %function
ecm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L347
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L347:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_get_alt, .-ecm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_change_mtu, %function
ueth_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1216
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r1, r0
	cmp	r3, #0
	bne	.L350
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L351
	str	r6, [r4, #316]
	mov	r4, r3
.L349:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L350:
	mvn	r4, #15
	b	.L349
.L351:
	mvn	r4, #33
	b	.L349
	.fnend
	.size	ueth_change_mtu, .-ueth_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	prealloc, %function
prealloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L376
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r2, r2, #1
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r0, r3
	sub	r3, r3, #36
	bne	.L355
	b	.L379
.L358:
	cmn	r5, #1
	mov	r2, r5
	beq	.L380
.L355:
	ldr	r3, [r3, #36]
	sub	r5, r2, #1
	cmp	r4, r3
	sub	r3, r3, #36
	bne	.L358
	ldr	r3, [r6, #28]
	cmp	r2, #0
	ldrb	r7, [r3, #2]	@ zero_extendqisi2
	lsr	r7, r7, #7
	beq	.L359
.L363:
	movw	r2, #:lower16:tx_complete
	movw	r3, #:lower16:rx_complete
	cmp	r7, #0
	movt	r2, #:upper16:tx_complete
	movt	r3, #:upper16:rx_complete
	movne	r7, r2
	moveq	r7, r3
	b	.L362
.L360:
	str	r7, [r0, #28]
	ldr	r2, [r4]
	cmp	r5, #0
	mov	r5, r1
	str	r3, [r2, #4]
	str	r2, [r0, #36]
	str	r4, [r0, #40]
	str	r3, [r4]
	beq	.L359
.L362:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	sub	r1, r5, #1
	add	r3, r0, #36
	bne	.L360
	ldr	r3, [r4]
	cmp	r4, r3
	beq	.L354
.L359:
	mov	r0, #0
.L353:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L380:
	mov	r8, #256
	mov	r7, #512
.L357:
	ldr	r5, [r3, #36]
	mov	r1, r3
	mov	r0, r6
	ldr	r2, [r3, #40]
	str	r2, [r5, #4]
	str	r5, [r2]
	str	r8, [r3, #36]
	str	r7, [r3, #40]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r4, r5
	sub	r3, r5, #36
	bne	.L357
	b	.L359
.L379:
	ldr	r3, [r1, #28]
	mov	r5, r2
	ldrb	r7, [r3, #2]	@ zero_extendqisi2
	lsr	r7, r7, #7
	b	.L363
.L354:
	mvn	r0, #11
	b	.L353
.L376:
	mvn	r0, #11
	bx	lr
	.fnend
	.size	prealloc, .-prealloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_qc_change_mtu, %function
ueth_qc_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1216
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r1, r0
	cmp	r3, #0
	bne	.L383
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L384
	str	r6, [r4, #316]
	mov	r4, r3
.L382:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L383:
	mvn	r4, #15
	b	.L382
.L384:
	mvn	r4, #33
	b	.L382
	.fnend
	.size	ueth_qc_change_mtu, .-ueth_qc_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_start_xmit, %function
eth_qc_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	eth_qc_start_xmit, .-eth_qc_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_get_alt, %function
f_audio_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L391
	ldrb	r3, [r3, #17]	@ zero_extendqisi2
	cmp	r3, r1
	ldrbeq	r0, [r0, #249]	@ zero_extendqisi2
	movne	r0, #0
	bx	lr
.L391:
	ldrb	r0, [r0, #248]	@ zero_extendqisi2
	bx	lr
	.fnend
	.size	f_audio_get_alt, .-f_audio_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_disable, %function
f_audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2240]
	bx	lr
	.fnend
	.size	f_audio_disable, .-f_audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_set_cmd, %function
generic_set_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	str	r2, [r0, r1, lsl #2]
	mov	r0, #0
	bx	lr
	.fnend
	.size	generic_set_cmd, .-generic_set_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_get_cmd, %function
generic_get_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	ldr	r0, [r0, r1, lsl #2]
	bx	lr
	.fnend
	.size	generic_get_cmd, .-generic_get_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_store, %function
conn_gadget_out_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_out_max_packet_size_store, .-conn_gadget_out_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_notify_complete, %function
ncm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	add	r6, r5, #188
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L398
	cmn	r3, #104
	beq	.L398
.L397:
	cmp	r4, #0
	str	r4, [r5, #168]
	beq	.L400
	ldrb	r2, [r5, #172]	@ zero_extendqisi2
	ldr	r3, [r4]
	cmp	r2, #1
	beq	.L402
	bcc	.L400
	cmp	r2, #2
	bne	.L401
	ldr	r0, [r5, #20]
	mov	r2, #0
	mov	r1, #8
	mov	lr, #42
	mov	ip, #16
	ldr	r0, [r0, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r1, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r1, [r4]
	str	ip, [r4, #4]
	ldr	r2, [r0]
	ldr	r0, [r2, #20]
	cmp	r0, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L404
	ldr	ip, [r2, #16]
	mov	r0, #0
	mov	r2, #28672
	movt	r0, 6500
	movt	r2, 148
	cmp	ip, #3
	moveq	r2, r0
.L404:
	mov	r0, #1
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r0, [r5, #172]
.L401:
	mvn	r1, #94
	mov	r2, #0
	mov	r0, r6
	strb	r1, [r3]
	ldrb	r1, [r5, #148]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r5, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r5, #164]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r4, [r5, #168]
.L400:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L398:
	mov	r3, #0
	strb	r3, [r5, #172]
	b	.L397
.L402:
	mov	r2, #0
	mov	r1, #8
	strb	r2, [r3, #1]
	ldrb	r0, [r5, #173]	@ zero_extendqisi2
	strh	r0, [r3, #2]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	r1, [r4, #4]
	strb	r2, [r5, #172]
	b	.L401
	.fnend
	.size	ncm_notify_complete, .-ncm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ep0out_complete, %function
ncm_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	ldr	ip, [r1, #32]
	ldr	r3, [r1, #44]
	str	r2, [r1, #32]
	cmp	r3, r2
	beq	.L419
.L416:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L419:
	ldr	r3, [r1, #4]
	ldr	r2, [r1, #48]
	cmp	r2, r3
	bne	.L416
	ldr	r3, [r1]
	ldr	r3, [r3]	@ unaligned
	cmp	r3, #2048
	bcc	.L416
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #24]
	cmp	r2, r3
	bcc	.L416
	str	r3, [ip, #112]
	bx	lr
	.fnend
	.size	ncm_ep0out_complete, .-ncm_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_get_alt, %function
ncm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L422
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L422:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ncm_get_alt, .-ncm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_unbind_config, %function
audio_source_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	bx	lr
	.fnend
	.size	audio_source_function_unbind_config, .-audio_source_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_bind_config, %function
uasp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	uasp_function_bind_config, .-uasp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_unbind_config, %function
android_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	ip, .L439
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldr	r3, [r3, #2244]
	ldr	r1, [r0, #24]
	cmp	r3, ip
	beq	.L426
	sub	r2, r3, #424
	ldr	r3, [r3, #-416]
	cmp	r1, r3
	bne	.L427
	b	.L426
.L428:
	ldr	r3, [r3, #-416]
	cmp	r1, r3
	beq	.L426
.L427:
	ldr	r3, [r2, #424]
	cmp	r3, ip
	sub	r2, r3, #424
	bne	.L428
.L426:
	ldr	r3, [r1]
	mov	r6, r5
	ldrb	r2, [r3, #386]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r2, #0
	strbne	r2, [r3, #386]
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L425
.L430:
	ldr	r3, [r4]
	mov	r1, r5
	mov	r0, r3
	ldr	r3, [r3, #44]
	cmp	r3, #0
	beq	.L432
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L430
.L425:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L432:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L430
	b	.L425
.L440:
	.align	2
.L439:
	.word	.LANCHOR1+2244
	.fnend
	.size	android_unbind_config, .-android_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_endpoint_complete, %function
audio_set_endpoint_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r1, #32]
	ldr	r4, [r1, #44]
	str	r3, [sp, #4]
	cmp	r4, r3
	bne	.L441
	ldr	r6, [r5, #272]
	cmp	r6, r3
	beq	.L441
	ldm	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy
	ldr	r2, [sp, #4]
	mov	r0, r6
	ldrb	r1, [r5, #268]	@ zero_extendqisi2
	ldr	r3, [r6, #36]
	blx	r3
	str	r4, [r5, #272]
.L441:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_set_endpoint_complete, .-audio_set_endpoint_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_init, %function
midi_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L453
	mov	r4, r0
	mov	r2, #8
	mov	r0, r3
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #4]
	beq	.L451
.L449:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L447:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L453:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #4]
	b	.L449
.L451:
	mvn	r0, #11
	b	.L447
	.fnend
	.size	midi_function_init, .-midi_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_init, %function
ecm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L461
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #6
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L461:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	ecm_function_init, .-ecm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_init, %function
rndis_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L469
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #272
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L469:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	rndis_function_init, .-rndis_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_init, %function
audio_source_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L473
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L476
.L471:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #4]
.L470:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L473:
	mov	r3, #16
	b	.L471
.L476:
	mvn	r0, #11
	b	.L470
	.fnend
	.size	audio_source_function_init, .-audio_source_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new, %function
adb_request_new:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #208
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L477
	mov	r0, r6
	mov	r1, #208
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L483
.L477:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L483:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L477
	.fnend
	.size	adb_request_new, .-adb_request_new
	.set	conn_gadget_request_new,adb_request_new
	.set	mtp_request_new,adb_request_new
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alloc_ep_req, %function
midi_alloc_ep_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L484
	mov	r0, r5
	mov	r1, #32
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L490
.L484:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L490:
	ldr	r2, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L484
	.fnend
	.size	midi_alloc_ep_req, .-midi_alloc_ep_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_unbind, %function
ccid_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L492
	ldr	r0, [r1, #8]
	bl	kfree
.L492:
	ldr	r0, [r4, #16]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ccid_function_unbind, .-ccid_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_free_buf, %function
rmnet_smd_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r3, [r0, #424]
	str	r3, [r0, #428]
	str	r3, [r0, #432]
	str	r3, [r0, #436]
	str	r3, [r0, #440]
	str	r3, [r0, #444]
	str	r3, [r0, #448]
	str	r3, [r0, #452]
	ldr	r3, [r7, #140]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L495
	mov	r6, r2
	mov	r9, #256
	mov	r8, #512
	b	.L496
.L503:
	mov	r6, r2
.L496:
	ldr	r1, [r3, #4]
	mov	r5, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r10, [r4, #88]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r6
	mov	r3, r6
	ldr	r2, [r6]
	bne	.L503
.L495:
	mov	r7, r4
	ldr	r3, [r7, #148]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L497
	mov	r6, r2
	mov	r9, #256
	mov	r8, #512
	b	.L498
.L504:
	mov	r6, r2
.L498:
	ldr	r1, [r3, #4]
	mov	r5, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r10, [r4, #92]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r6
	mov	r3, r6
	ldr	r2, [r6]
	bne	.L504
.L497:
	mov	r7, r4
	ldr	r3, [r7, #108]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L499
	mov	r6, r2
	mov	r9, #256
	mov	r8, #512
	b	.L500
.L505:
	mov	r6, r2
.L500:
	ldr	r1, [r3, #4]
	mov	r5, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	cmp	r7, r6
	mov	r3, r6
	ldr	r2, [r6]
	bne	.L505
.L499:
	mov	r7, r4
	ldr	r3, [r7, #116]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L501
	mov	r6, r2
	mov	r9, #256
	mov	r8, #512
	b	.L502
.L506:
	mov	r6, r2
.L502:
	ldr	r1, [r3, #4]
	mov	r5, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	cmp	r7, r6
	mov	r3, r6
	ldr	r2, [r6]
	bne	.L506
.L501:
	ldrd	r4, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_smd_free_buf, .-rmnet_smd_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_receive, %function
ghsuart_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	moveq	r4, r5
	mov	r6, r1
	str	lr, [sp, #12]
	beq	.L509
	ldr	r3, [r5, #68]
	cmp	r3, #0
	beq	.L511
	ldr	r0, [r5, #12]
	blx	r3
	ldr	r3, [r5, #100]
	mov	r4, r0
	add	r3, r3, #1
	str	r3, [r5, #100]
.L509:
	mov	r0, r6
	bl	kfree
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L511:
	mov	r4, r3
	b	.L509
	.fnend
	.size	ghsuart_ctrl_receive, .-ghsuart_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_cleanup, %function
ecm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_cleanup, .-ecm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_cleanup, %function
midi_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	midi_function_cleanup, .-midi_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_unbind, %function
frmnet_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L520
.L517:
	cmp	r3, #2
	bls	.L518
	ldr	r0, [r4, #8]
	bl	kfree
.L518:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [sp, #8]
	ldr	r0, [r4]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L520:
	mov	r5, r0
	ldr	r0, [r1, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L517
	.fnend
	.size	frmnet_unbind, .-frmnet_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_rx, %function
gs_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #32
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r1, [r0, #4]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #32]
	ldr	r2, [r0, #40]
	ldr	r5, [r1, #92]
	cmp	r8, r9
	beq	.L522
	ldr	r1, [r0, #8]
	cmp	r1, #0
	beq	.L522
	cmp	r2, #7
	bgt	.L522
	mov	r4, r0
	mov	fp, #256
	mov	r10, #512
	b	.L523
.L524:
	cmp	r7, #0
	ldr	r1, [r4, #32]
	bne	.L534
	ldr	r2, [r4, #40]
	cmp	r8, r1
	mov	r9, r1
	add	r2, r2, #1
	str	r2, [r4, #40]
	beq	.L522
	ldr	r1, [r4, #8]
	cmp	r1, #0
	beq	.L522
	cmp	r2, #7
	bgt	.L522
.L523:
	ldm	r9, {r1, r2}
	mov	r3, #4096
	mov	r0, r4
	sub	r6, r9, #36
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r3, [r9, #-32]
	str	fp, [r9]
	str	r10, [r9, #4]
	bl	_raw_spin_unlock
	ldr	ip, [r5, #8]
	mov	r2, #32
	mov	r1, r6
	mov	r0, r5
	ldr	r7, [ip, #16]
	blx	r7
	mov	r7, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r2, [r4, #4]
	cmp	r2, #0
	bne	.L524
	ldr	r0, [r9, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r2, [r4, #40]
.L522:
	mov	r0, r2
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L534:
	str	r9, [r1, #4]
	stm	r9, {r1, r8}
	ldr	r2, [r4, #40]
	str	r9, [r4, #32]
	b	.L522
	.fnend
	.size	gs_start_rx, .-gs_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_start_rx, %function
rmnet_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #148
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #84]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	b	.L536
.L538:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #88]
	mov	r2, #32
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	fp, r0
	bne	.L542
.L536:
	ldr	r4, [r5, #148]
	mov	r1, fp
	mov	r0, r6
	cmp	r7, r4
	bne	.L538
.L537:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L542:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC0
	mov	r2, r10
	movt	r1, #:upper16:.LC0
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r5, #152]
	str	r4, [r5, #152]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L537
	.fnend
	.size	rmnet_smd_start_rx, .-rmnet_smd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_notify_complete, %function
rmnet_smd_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r5, #84]
	cmn	r2, #104
	beq	.L545
	cmp	r2, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L546
	cmn	r2, #108
	beq	.L545
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1
	movt	r1, #:upper16:.LC1
	add	r0, r0, #32
	bl	dev_err
.L546:
	ldr	r3, [r5, #96]
	cmp	r3, r6
	beq	.L567
.L543:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L567:
	add	r6, r5, #172
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L543
	ldr	r0, [r5, #96]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L543
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC2
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L545:
	mov	r3, #0
	str	r3, [r5, #172]
	b	.L543
	.fnend
	.size	rmnet_smd_notify_complete, .-rmnet_smd_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_notify_complete, %function
rmnet_sdio_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L570
	cmp	r2, #0
	mov	r5, r1
	beq	.L571
	cmn	r2, #108
	beq	.L570
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	movt	r1, #:upper16:.LC3
	add	r0, r0, #32
	bl	dev_err
.L571:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L568
	add	r6, r4, #196
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L568
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L592
.L568:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L570:
	mov	r3, #0
	str	r3, [r4, #196]
	b	.L568
.L592:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC4
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_notify_complete, .-rmnet_sdio_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_control_rx_work, %function
rmnet_sdio_control_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #32
	strd	r8, [sp, #16]
	sub	r8, r0, #112
	mov	r9, #512
	strd	r10, [sp, #24]
	mov	r10, #256
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r0, #-136]
	b	.L596
.L599:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	ldr	r3, [r5, #-104]
	sub	r3, r3, #1
	str	r3, [r5, #-104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-4]
	cmn	r3, #19
	bne	.L598
	ldr	r3, [r5, #152]
	add	r3, r3, #1
	str	r3, [r5, #152]
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L596:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-112]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r4, r8
	sub	r7, r4, #8
	bne	.L599
.L594:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L598:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC5
	movt	r1, #:upper16:.LC5
	add	r0, r0, #32
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	dev_err
	.fnend
	.size	rmnet_sdio_control_rx_work, .-rmnet_sdio_control_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_setup, %function
ecm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17185
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r1]	@ unaligned
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldr	r5, [ip, #24]
	cmp	r2, r3
	ldrh	ip, [r1, #6]	@ unaligned
	ldr	r3, [r5, #4]
	bne	.L605
	cmp	ip, #0
	bne	.L605
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, lr
	bne	.L605
	strh	r6, [r0, #98]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	ip, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	blt	.L608
.L600:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L608:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC6
	str	r6, [sp]
	movt	r1, #:upper16:.LC6
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L600
.L605:
	mvn	r6, #94
	b	.L600
	.fnend
	.size	ecm_setup, .-ecm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_notify_complete, %function
rmnet_mux_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L611
	cmp	r2, #0
	mov	r5, r1
	beq	.L612
	cmn	r2, #108
	beq	.L611
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC7
	movt	r1, #:upper16:.LC7
	add	r0, r0, #32
	bl	dev_err
.L612:
	add	r6, r4, #376
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L609
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L630
.L609:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L630:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC4
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L611:
	mov	r3, #0
	str	r3, [r4, #376]
	b	.L609
	.fnend
	.size	rmnet_mux_notify_complete, .-rmnet_mux_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_setup, %function
rmnet_mux_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r0, #20]
	ldr	r3, [r0, #372]
	ldrh	r8, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldr	r5, [r7, #4]
	beq	.L639
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L633
	movw	r2, #41217
	cmp	r3, r2
	beq	.L634
	cmp	r3, #8448
	beq	.L644
.L641:
	mvn	r4, #94
.L631:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L634:
	cmp	r8, #0
	bne	.L641
	add	r8, r0, #368
	mov	r0, r8
	bl	_raw_spin_lock
	mov	r3, r4
	ldr	r9, [r3, #340]!
	cmp	r9, r3
	beq	.L645
	ldrd	r2, [r9]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r8
	mov	r10, r9
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r9]
	str	r1, [r9, #4]
	ldr	r3, [r4, #348]
	sub	r3, r3, #1
	str	r3, [r4, #348]
	bl	_raw_spin_unlock
	ldmdb	r9, {r1, r8}
	ldr	r0, [r5]
	cmp	r6, r8
	movcc	r8, r6
	mov	r2, r8
	bl	memcpy
	movw	r3, #:lower16:rmnet_mux_response_complete
	str	r4, [r5, #32]
	movt	r3, #:upper16:rmnet_mux_response_complete
	str	r3, [r5, #28]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r3, [r4, #416]
	cmp	r8, r6
	movge	r6, #0
	movlt	r6, #1
	add	r3, r3, #1
	str	r3, [r4, #416]
.L636:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r8, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L631
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC8
	mov	r2, r4
	movt	r1, #:upper16:.LC8
	add	r0, r0, #32
	bl	dev_err
	b	.L631
.L644:
	movw	r3, #:lower16:rmnet_mux_command_complete
	mov	r8, r6
	str	r0, [r5, #32]
	movt	r3, #:upper16:rmnet_mux_command_complete
	mov	r6, #0
	str	r3, [r5, #28]
	b	.L636
.L633:
	ldr	r3, [r0, #352]
	adds	r6, r6, #0
	movne	r6, #1
	ands	r8, r8, #1
	movne	r8, #0
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r0, #352]
	b	.L636
.L639:
	mvn	r4, #106
	b	.L631
.L645:
	mov	r0, r8
	mvn	r4, #94
	bl	_raw_spin_unlock
	b	.L631
	.fnend
	.size	rmnet_mux_setup, .-rmnet_mux_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_start_rx, %function
rmnet_mux_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #368
	add	r7, r0, #112
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #84]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	b	.L647
.L649:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #88]
	mov	r2, #32
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	fp, r0
	bne	.L653
.L647:
	ldr	r4, [r5, #112]
	mov	r1, fp
	mov	r0, r6
	cmp	r7, r4
	bne	.L649
.L648:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L653:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC0
	mov	r2, r10
	movt	r1, #:upper16:.LC0
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r5, #116]
	str	r4, [r5, #116]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L648
	.fnend
	.size	rmnet_mux_smd_start_rx, .-rmnet_mux_smd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_suspend, %function
composite_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L655
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #72
	beq	.L655
.L656:
	ldr	r2, [r4, #56]
	mov	r0, r4
	cmp	r2, #0
	beq	.L657
	blx	r2
	ldr	r3, [r6, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L656
.L655:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2252]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L659
	mov	r0, r6
	blx	r3
.L659:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L654
	mov	r0, r5
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L657:
	ldr	r4, [r4, #72]
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L656
	b	.L655
.L654:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	composite_suspend, .-composite_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_resume, %function
composite_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2252]
	ldr	r3, [r3, #40]
	cmp	r3, #0
	beq	.L670
	blx	r3
.L670:
	ldr	r2, [r5, #12]
	cmp	r2, #0
	beq	.L672
	mov	r1, r2
	ldr	r4, [r1, #36]!
	cmp	r1, r4
	sub	r4, r4, #72
	beq	.L674
.L673:
	ldr	r3, [r4, #60]
	mov	r0, r4
	cmp	r3, #0
	beq	.L675
	blx	r3
	ldr	r2, [r5, #12]
	ldr	r4, [r4, #72]
	add	r1, r2, #36
	cmp	r1, r4
	sub	r4, r4, #72
	bne	.L673
.L674:
	ldrb	r3, [r2, #23]	@ zero_extendqisi2
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	moveq	r1, #500
	mulne	r1, r1, r3
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L672
	mov	r0, r6
	blx	r3
.L672:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #16]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L675:
	ldr	r4, [r4, #72]
	cmp	r1, r4
	sub	r4, r4, #72
	bne	.L673
	b	.L674
	.fnend
	.size	composite_resume, .-composite_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_store, %function
rndis_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	movw	r5, #52429
	str	r6, [sp, #8]
	movt	r5, 52428
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	mov	r2, #0
	mov	r0, #2
	mov	r1, r2
	ldr	r3, .L696
	str	r0, [ip]
	strh	r2, [ip, #4]	@ movhi
	b	.L690
.L691:
	sub	r2, r1, r2
	add	r1, r1, #1
	add	r2, r2, #1
	cmp	r1, #256
	ldrb	lr, [ip, r2]	@ zero_extendqisi2
	eor	r0, r0, lr
	strb	r0, [ip, r2]
	beq	.L694
.L690:
	umull	r0, r2, r5, r1
	ldrb	r0, [r3], #1	@ zero_extendqisi2
	lsr	r2, r2, #2
	cmp	r0, #0
	add	r2, r2, r2, lsl #2
	bne	.L691
.L694:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L697:
	.align	2
.L696:
	.word	.LANCHOR1+2256
	.fnend
	.size	rndis_ethaddr_store, .-rndis_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_params, %function
audio_pcm_hw_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #284]
	movw	r2, #44100
	ldr	ip, [r1, #296]
	cmp	r3, #2
	cmpeq	ip, r2
	bne	.L704
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #132
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [ip]
	ldr	lr, [r3, #500]
	add	lr, lr, #256
	ldrd	r2, [lr]
	orrs	r3, r2, r3
	beq	.L714
.L700:
	mov	r3, #2
	mov	lr, #0
	add	r2, r0, #144
	str	r3, [r0, #132]
	ldr	r3, [ip]
	ldr	r3, [r3, #500]
	str	r3, [r0, #136]
	str	lr, [r0, #152]
	ldr	r3, [ip]
	ldr	lr, [r1, #380]
	ldr	r3, [r3, #500]
	cmp	r3, #0
	beq	.L701
	ldr	ip, [r3, #284]
	cmp	ip, #0
	beq	.L701
.L702:
	mov	r6, #0
	mov	r4, r0
	mov	r7, r1
	mov	r0, r3
	str	r6, [sp]
	mov	r1, lr
	mov	r3, #208
	ldr	r8, [ip]
	blx	r8
	cmp	r0, r6
	str	r0, [r4, #140]
	beq	.L706
	ldr	r2, [r7, #380]
	cmp	r5, r6
	ldr	r3, [r4, #168]
	str	r2, [r4, #148]
	beq	.L703
	str	r5, [r3, #552]
	ldr	r2, [r4, #140]
	mov	r0, r6
	str	r2, [r3, #540]
	ldr	r2, [r4, #144]
	str	r2, [r3, #544]
	ldr	r2, [r4, #148]
	str	r2, [r3, #548]
.L698:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L714:
	mvn	r2, #0
	mov	r3, #0
	strd	r2, [lr]
	ldr	ip, [r0]
	b	.L700
.L701:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L702
	.syntax divided
@ 175 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 175, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L703:
	mov	r0, r5
	str	r5, [r3, #540]
	str	r5, [r3, #544]
	str	r5, [r3, #548]
	str	r5, [r3, #552]
	b	.L698
.L704:
	mvn	r0, #21
	bx	lr
.L706:
	mvn	r0, #11
	b	.L698
	.fnend
	.size	audio_pcm_hw_params, .-audio_pcm_hw_params
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_open, %function
ffs_ep0_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #340]
	ldr	r2, [r3, #96]
	cmp	r2, #3
	beq	.L717
	add	r2, r3, #88
	str	r3, [r1, #124]
	.syntax divided
@ 45 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r2, r3, #92
	.syntax divided
@ 45 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	bx	lr
.L717:
	mvn	r0, #15
	bx	lr
	.fnend
	.size	ffs_ep0_open, .-ffs_ep0_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_open, %function
ffs_epfile_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #340]
	ldr	r3, [r2, #40]
	ldr	r3, [r3, #96]
	cmp	r3, #2
	bne	.L722
	str	r2, [r1, #124]
	ldr	r3, [r2, #40]
	add	r1, r3, #88
	.syntax divided
@ 45 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r1, r3, #92
	.syntax divided
@ 45 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #36]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L722:
	movw	r0, #:lower16:.LC9
	movw	r1, #946
	movt	r0, #:upper16:.LC9
	bl	warn_slowpath_null
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_epfile_open, .-ffs_epfile_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_mode_sense, %function
do_mode_sense:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldrb	r8, [r0, #76]	@ zero_extendqisi2
	ldr	r7, [r0, #104]
	ldr	r5, [r1]
	tst	r3, #247
	bne	.L733
	ldrb	r4, [r0, #78]	@ zero_extendqisi2
	lsr	r9, r4, #6
	and	r4, r4, #63
	cmp	r9, #3
	moveq	r3, #14592
	mvneq	r0, #21
	movteq	r3, 5
	streq	r3, [r7, #28]
	beq	.L723
	mov	r1, #8
	mov	r0, r5
	bl	__memzero
	sub	r3, r4, #63
	cmp	r8, #26
	ldrb	r2, [r7, #24]	@ zero_extendqisi2
	clz	r3, r3
	lsr	r3, r3, #5
	beq	.L739
	lsl	r2, r2, #6
	add	r6, r5, #8
	bic	r2, r2, #127
	movw	r10, #65535
	strb	r2, [r5, #3]
.L728:
	cmp	r4, #8
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L740
	cmp	r4, #42
	beq	.L732
.L733:
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r7, #28]
.L723:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L739:
	lsl	r2, r2, #6
	add	r6, r5, #4
	mov	r10, #255
	bic	r2, r2, #127
	strb	r2, [r5, #2]
	b	.L728
.L740:
	mov	r3, #10
	mov	r2, #8
	mov	r1, r3
	add	r0, r6, #2
	strb	r2, [r6]
	strb	r3, [r6, #1]
	bl	__memzero
	cmp	r9, #1
	beq	.L730
	mvn	r3, #0
	mov	r2, #4
	strb	r2, [r6, #2]
	strb	r3, [r6, #4]
	strb	r3, [r6, #5]
	str	r3, [r6, #8]	@ unaligned
.L730:
	add	r0, r6, #12
.L731:
	sub	r0, r0, r5
	cmp	r10, r0
	blt	.L733
	cmp	r8, #26
	subeq	r3, r0, #1
	strbeq	r3, [r5]
	beq	.L723
	sub	r3, r0, #2
	uxth	r3, r3
	lsr	r2, r3, #8
	strb	r2, [r5]
	strb	r3, [r5, #1]
	b	.L723
.L732:
	mov	r3, #26
	add	r0, r6, #2
	strb	r4, [r6]
	mov	r1, r3
	strb	r3, [r6, #1]
	bl	__memzero
	mov	r3, #2
	mov	r1, #4
	mov	r2, #40
	add	r0, r6, #28
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #4]
	strb	r2, [r6, #6]
	b	.L731
	.fnend
	.size	do_mode_sense, .-do_mode_sense
	.align	2
	.global	usb_rmnet_mux_ctrl_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_open, %function
usb_rmnet_mux_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #2512]
	add	r6, r5, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #356]
	mov	r1, r0
	cmp	r4, #0
	bne	.L745
	mov	r3, #1
	mov	r0, r6
	str	r3, [r5, #356]
	str	r5, [r7, #124]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
.L741:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L745:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r1, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LC10
	movt	r1, #:upper16:.LANCHOR2
	movt	r0, #:upper16:.LC10
	bl	printk
	mvn	r0, #15
	b	.L741
	.fnend
	.size	usb_rmnet_mux_ctrl_open, .-usb_rmnet_mux_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_setup, %function
audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #20]
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldr	r0, [r3, #24]
	cmp	r2, #34
	ldr	r3, [r0, #4]
	beq	.L748
	cmp	r2, #162
	bne	.L756
	ldrh	ip, [r1, #2]	@ unaligned
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	ldr	r1, [r3]
	cmp	ip, #256
	bne	.L756
	sub	r2, r2, #129
	cmp	r2, #3
	bhi	.L756
	mov	r4, #68
	mvn	lr, #83
	mov	ip, #0
	mov	r2, #3
	strb	r4, [r1]
	strb	lr, [r1, #1]
	strb	ip, [r1, #2]
.L751:
	ldrb	lr, [r3, #26]	@ zero_extendqisi2
	movw	ip, #:lower16:audio_control_complete
	str	r2, [r3, #4]
	movt	ip, #:upper16:audio_control_complete
	mov	r1, r3
	mov	r2, #32
	str	ip, [r3, #28]
	bfc	lr, #1, #1
	strb	lr, [r3, #26]
	ldr	r3, [r0]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L746
	movw	r0, #:lower16:.LC11
	mov	r1, r4
	movt	r0, #:upper16:.LC11
	bl	printk
	b	.L746
.L748:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	ldrh	r2, [r1, #6]	@ unaligned
	sub	r1, ip, #1
	cmp	r1, #3
	bls	.L751
.L756:
	mvn	r4, #94
.L746:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_setup, .-audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_start_rx, %function
gsmd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L773
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L761
	add	r9, r5, #12
	mov	fp, #256
	ldr	r8, [r3, #92]
	b	.L762
.L775:
	ldr	r4, [r5, #12]
	cmp	r9, r4
	beq	.L761
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #2048
	str	r3, [r4, #-32]
	mov	r3, #512
	str	fp, [r4]
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r2, #208
	sub	r1, r4, #36
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r7, r0
	bne	.L774
.L762:
	ldr	r3, [r5, #72]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #8]
	tst	r3, #1
	bne	.L775
.L761:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L774:
	movw	r0, #:lower16:.LC13
	ldr	r3, [r5]
	mov	r2, r5
	movt	r0, #:upper16:.LC13
	ldr	r1, .L776
	bl	printk
	ldr	r3, [r5, #16]
	str	r4, [r5, #16]
	str	r9, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L761
.L773:
	ldr	r1, .L776
	movw	r0, #:lower16:.LC12
	movt	r0, #:upper16:.LC12
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L777:
	.align	2
.L776:
	.word	.LANCHOR2+24
	.fnend
	.size	gsmd_start_rx, .-gsmd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_stop, %function
gbam_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L792
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L793
	ldr	r0, [r3, #84]
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	bne	.L794
.L783:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L792:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L795
	ldr	r0, [r3, #88]
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	beq	.L783
	movw	r0, #:lower16:.LC15
	ldr	r1, .L796
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L783
.L794:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L796+4
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L783
.L793:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L796+4
	movw	r0, #:lower16:.LC14
.L791:
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC14
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L795:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC14
	ldr	r1, .L796
	b	.L791
.L797:
	.align	2
.L796:
	.word	.LANCHOR2+40
	.word	.LANCHOR2+64
	.fnend
	.size	gbam_stop, .-gbam_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cpkt_tomodem, %function
ghsic_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, r0
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r3, #1036]
	cmp	r0, r1
	bcs	.L805
	mov	r4, r2
	mov	r2, #104
	mla	r3, r2, r0, r3
	ldr	r5, [r3, #1040]
	cmp	r5, #0
	beq	.L806
	mov	r1, #32
	mov	r0, r4
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L803
	mov	r2, r4
	mov	r1, r6
	bl	memcpy
	ldr	r0, [r5, #84]
	ands	r4, r0, #1
	beq	.L807
	ldr	r3, [r5, #96]
	mov	r4, #0
	add	r3, r3, #1
	str	r3, [r5, #96]
.L798:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L807:
	ldr	r3, [r5, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r5, #104]
	bl	kfree
	b	.L798
.L803:
	mvn	r4, #11
	b	.L798
.L806:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L808
	mvn	r4, #18
	movt	r0, #:upper16:.LC12
	bl	printk
	b	.L798
.L805:
	movw	r0, #:lower16:.LC16
	mov	r2, ip
	ldr	r1, .L808
	movt	r0, #:upper16:.LC16
	mvn	r4, #18
	bl	printk
	b	.L798
.L809:
	.align	2
.L808:
	.word	.LANCHOR2+88
	.fnend
	.size	ghsic_send_cpkt_tomodem, .-ghsic_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_setup, %function
ecm_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r3, #17185
	str	lr, [sp, #8]
	ldr	ip, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r1]	@ unaligned
	ldrh	r4, [r1, #4]	@ unaligned
	ldrh	r5, [r1, #2]	@ unaligned
	ldr	lr, [ip, #24]
	cmp	r2, r3
	ldrh	ip, [r1, #6]	@ unaligned
	ldr	r3, [lr, #4]
	bne	.L815
	cmp	ip, #0
	bne	.L815
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L815
	strh	r5, [r0, #98]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	ip, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [lr]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L818
.L810:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L815:
	mvn	r5, #94
	b	.L810
.L818:
	movw	r0, #:lower16:.LC17
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r5, [sp]
	ldr	r1, .L819
	movt	r0, #:upper16:.LC17
	ldrb	r2, [r4]	@ zero_extendqisi2
	bl	printk
	b	.L810
.L820:
	.align	2
.L819:
	.word	.LANCHOR2+112
	.fnend
	.size	ecm_qc_setup, .-ecm_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ep0out_complete, %function
mbim_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r3, #0
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r1, #32]
	ldr	r2, [r1, #44]
	str	r3, [r1, #32]
	cmp	r2, r3
	bne	.L822
	ldr	ip, [r1, #4]
	ldr	r3, [r1, #48]
	cmp	r3, ip
	bne	.L822
	cmp	r3, #4
	beq	.L834
	cmp	r3, #8
	bne	.L828
	ldr	r3, [r1]
	ldr	r2, [r3]	@ unaligned
	cmp	r2, #2048
	bcc	.L829
	movw	r1, #:lower16:.LANCHOR0
	movt	r1, #:upper16:.LANCHOR0
	ldr	r1, [r1, #52]
	cmp	r1, r2
	bcc	.L829
	ldrb	r1, [r3, #5]	@ zero_extendqisi2
	ldrb	r3, [r3, #4]	@ zero_extendqisi2
	orr	r3, r3, r1, lsl #8
	strh	r3, [r0, #228]	@ movhi
.L827:
	str	r2, [r0, #224]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L834:
	ldr	r3, [r1]
	ldr	r2, [r3]	@ unaligned
	cmp	r2, #2048
	bcc	.L829
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #52]
	cmp	r3, r2
	bcs	.L827
.L829:
	movw	r0, #:lower16:.LC19
	ldr	r1, .L835
	movt	r0, #:upper16:.LC19
	bl	printk
.L824:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r2, .L835
	movw	r0, #:lower16:.LC21
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC21
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	mov	r1, r2
	b	printk
.L822:
	movw	r0, #:lower16:.LC18
	ldr	r1, .L835
	movt	r0, #:upper16:.LC18
	bl	printk
	b	.L824
.L828:
	movw	r0, #:lower16:.LC20
	ldr	r1, .L835
	movt	r0, #:upper16:.LC20
	bl	printk
	b	.L824
.L836:
	.align	2
.L835:
	.word	.LANCHOR2+128
	.fnend
	.size	mbim_ep0out_complete, .-mbim_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_stop, %function
bam_data_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L853
	cmp	r3, #0
	beq	.L837
	ldr	r3, [r3, #8]
	ldr	r1, [r0, #40]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	subs	r3, r0, #0
	bne	.L854
.L837:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L853:
	cmp	r3, #0
	beq	.L837
	ldr	r3, [r3, #12]
	ldr	r1, [r0, #36]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	subs	r3, r0, #0
	ldrne	r2, .L855
	beq	.L837
.L852:
	movw	r0, #:lower16:.LC22
	ldr	r4, [sp]
	mov	r1, r2
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC22
	add	sp, sp, #8
	b	printk
.L854:
	ldr	r2, .L855+4
	b	.L852
.L856:
	.align	2
.L855:
	.word	.LANCHOR2+152
	.word	.LANCHOR2+180
	.fnend
	.size	bam_data_stop, .-bam_data_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_complete, %function
rndis_qc_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r2, [r5, #20]
	cmp	r2, #0
	beq	.L858
	ldr	r2, [r2, #24]
	cmp	r2, #0
	beq	.L858
	cmn	r3, #104
	beq	.L861
	cmp	r3, #0
	mov	r6, r0
	mov	r4, r1
	bne	.L886
.L862:
	ldr	r3, [r5, #156]
	cmp	r3, r6
	beq	.L887
.L857:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L886:
	cmn	r3, #108
	beq	.L861
	ldr	r1, [r1, #4]
	movw	r0, #:lower16:.LC24
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC24
	ldr	r2, [r6, #4]
	str	ip, [sp]
	str	r1, [sp, #4]
	ldr	r1, .L888
	bl	printk
	b	.L862
.L861:
	mov	r3, #0
	str	r3, [r5, #164]
	b	.L857
.L887:
	add	r6, r5, #164
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L857
	ldr	r0, [r5, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L857
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L857
.L858:
	ldr	r2, .L888
	movw	r0, #:lower16:.LC23
	movt	r0, #:upper16:.LC23
	mov	r1, r2
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L889:
	.align	2
.L888:
	.word	.LANCHOR2+208
	.fnend
	.size	rndis_qc_response_complete, .-rndis_qc_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_available, %function
rndis_qc_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #164
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #160]
	ldr	ip, [r1]
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L890
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L898
.L890:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L898:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC25
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC25
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L899
	b	printk
.L900:
	.align	2
.L899:
	.word	.LANCHOR2+236
	.fnend
	.size	rndis_qc_response_available, .-rndis_qc_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_buffer_alloc, %function
f_audio_buffer_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L904
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L906
.L902:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L907
.L901:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L904:
	mov	r4, #16
	b	.L902
.L907:
	movw	r0, #:lower16:.LC27
	ldr	r1, .L908
	movt	r0, #:upper16:.LC27
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L901
.L906:
	movw	r0, #:lower16:.LC26
	ldr	r1, .L908
	mvn	r4, #11
	movt	r0, #:upper16:.LC26
	bl	printk
	b	.L901
.L909:
	.align	2
.L908:
	.word	.LANCHOR2+264
	.fnend
	.size	f_audio_buffer_alloc, .-f_audio_buffer_alloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_setup, %function
f_audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	.pad #24
	sub	sp, sp, #24
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	lr, [r1, #2]	@ unaligned
	ldr	r6, [r3, #24]
	cmp	r2, #34
	ldrh	r5, [r1, #6]	@ unaligned
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldr	r4, [r6, #4]
	beq	.L912
	bls	.L969
	cmp	r2, #161
	beq	.L915
	cmp	r2, #162
	bne	.L911
	ldr	r2, [r7, #260]!
	and	ip, ip, #127
	lsr	lr, lr, #8
	cmp	r7, r2
	beq	.L932
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L952
.L944:
	ldr	ip, [r2, #8]!
	cmp	r2, ip
	beq	.L932
	ldrb	r1, [ip, #12]	@ zero_extendqisi2
	cmp	r1, lr
	beq	.L947
.L951:
	ldr	ip, [ip]
	cmp	r2, ip
	beq	.L932
	ldrb	r1, [ip, #12]	@ zero_extendqisi2
	cmp	lr, r1
	bne	.L951
.L947:
	and	r3, r3, #15
	sub	r2, r3, #1
	cmp	r2, #3
	bhi	.L932
	add	r3, r3, #4
	add	r1, sp, #24
	ldr	r0, [r4]
	ldr	r3, [ip, r3, lsl #2]
	mov	r2, r5
	str	r3, [r1, #-4]!
	bl	memcpy
	b	.L924
.L915:
	ldr	r2, [r0, #252]!
	mvn	r1, #94
	lsr	ip, ip, #8
	str	r1, [sp, #20]
	cmp	r2, r0
	beq	.L925
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L927
	b	.L926
.L930:
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r1
	beq	.L926
.L927:
	ldr	r2, [r2]
	cmp	r2, r0
	bne	.L930
.L925:
	movw	r3, #:lower16:f_audio_complete
	mov	r2, r5
	ldr	r0, [r4]
	movt	r3, #:upper16:f_audio_complete
	add	r1, sp, #20
	str	r3, [r4, #28]
	str	r7, [r4, #32]
	bl	memcpy
.L924:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r5, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	orr	r3, r3, #2
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L970
.L910:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L945:
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r1
	beq	.L944
.L952:
	ldr	r2, [r2]
	cmp	r7, r2
	bne	.L945
	b	.L932
.L969:
	cmp	r2, #33
	bne	.L911
	mov	r8, r0
	lsr	ip, ip, #8
	ldr	r2, [r8, #252]!
	and	r3, r3, #15
	cmp	r2, r8
	beq	.L917
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L919
	b	.L918
.L923:
	ldrb	r0, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r0
	beq	.L918
.L919:
	ldr	r2, [r2]
	cmp	r2, r8
	bne	.L923
.L917:
	movw	r2, #:lower16:f_audio_complete
	strb	r3, [r7, #268]
	movt	r2, #:upper16:f_audio_complete
	str	r2, [r4, #28]
	str	r7, [r4, #32]
	b	.L924
.L912:
	mov	r1, r0
	and	ip, ip, #127
	ldr	r2, [r1, #260]!
	lsr	lr, lr, #8
	cmp	r1, r2
	beq	.L932
	ldrb	r0, [r2, #16]	@ zero_extendqisi2
	cmp	r0, ip
	bne	.L941
.L933:
	ldr	r0, [r2, #8]!
	cmp	r0, r2
	beq	.L932
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	cmp	r1, lr
	beq	.L936
.L940:
	ldr	r0, [r0]
	cmp	r0, r2
	beq	.L932
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	cmp	lr, r1
	bne	.L940
.L936:
	ands	r3, r3, #15
	beq	.L938
	cmp	r3, #4
	bls	.L939
	cmp	r3, #5
	bne	.L938
.L932:
	movw	r0, #:lower16:.LC31
	ldr	r1, .L971
	mvn	r4, #94
	movt	r0, #:upper16:.LC31
	bl	printk
	b	.L910
.L934:
	ldrb	r0, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r0
	beq	.L933
.L941:
	ldr	r2, [r2]
	cmp	r1, r2
	bne	.L934
	b	.L932
.L926:
	ldr	r0, [r2, #8]!
	cmp	r0, r2
	beq	.L925
	lsr	lr, lr, #8
	b	.L929
.L928:
	ldr	r0, [r0]
	cmp	r0, r2
	beq	.L925
.L929:
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	cmp	r1, lr
	bne	.L928
	ldr	r8, [r0, #40]
	cmp	r8, #0
	beq	.L928
	and	r1, r3, #15
	blx	r8
	str	r0, [sp, #20]
	b	.L925
.L918:
	ldr	r0, [r2, #8]!
	cmp	r0, r2
	beq	.L917
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	lsr	lr, lr, #8
	cmp	r1, lr
	bne	.L921
	b	.L920
.L922:
	ldrb	ip, [r0, #12]	@ zero_extendqisi2
	cmp	lr, ip
	beq	.L920
.L921:
	ldr	r0, [r0]
	cmp	r0, r2
	bne	.L922
	b	.L917
.L939:
	movw	r2, #:lower16:audio_set_endpoint_complete
	strb	r3, [r7, #268]
	movt	r2, #:upper16:audio_set_endpoint_complete
	str	r0, [r7, #272]
	str	r2, [r4, #28]
	str	r7, [r4, #32]
	b	.L924
.L920:
	str	r0, [r7, #272]
	b	.L917
.L911:
	movw	r0, #:lower16:.LC29
	ldr	r1, .L971
	str	lr, [sp]
	str	ip, [sp, #4]
	movt	r0, #:upper16:.LC29
	str	r5, [sp, #8]
	bl	printk
	b	.L932
.L970:
	movw	r0, #:lower16:.LC30
	mov	r2, r4
	ldr	r1, .L971
	movt	r0, #:upper16:.LC30
	bl	printk
	b	.L910
.L938:
	movw	r0, #:lower16:.LC28
	ldr	r1, .L971+4
	movt	r0, #:upper16:.LC28
	bl	printk
	b	.L932
.L972:
	.align	2
.L971:
	.word	.LANCHOR2+312
	.word	.LANCHOR2+288
	.fnend
	.size	f_audio_setup, .-f_audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_release, %function
conn_gadget_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC32
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC32
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	printk
	ldr	r0, [r4, #2516]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	ldr	r0, [r4, #2516]
	mov	r3, r0
	ldr	ip, [r3, #136]!
	cmp	ip, r3
	bne	.L978
.L974:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #2516]
	mov	r0, #0
	add	r2, r3, #116
	str	r0, [r3, #216]
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L978:
	ldr	r6, [ip]
	sub	r3, ip, #36
	movw	r7, #:lower16:.LC33
	mov	r5, r3
	movt	r7, #:upper16:.LC33
	sub	r6, r6, #36
.L975:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	printk
	ldr	r3, [r4, #2516]
	mov	r1, r5
	mov	r5, r6
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r0, [r4, #2516]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	ldr	r0, [r4, #2516]
	ldr	r3, [r6, #36]!
	add	r2, r0, #136
	cmp	r6, r2
	sub	r6, r3, #36
	beq	.L974
	b	.L975
	.fnend
	.size	conn_gadget_release, .-conn_gadget_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setup, %function
ncm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	movw	ip, #8586
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrh	r3, [r1]	@ unaligned
	mov	lr, r0
	ldrh	r7, [r1, #4]	@ unaligned
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r1, #6]	@ unaligned
	ldr	r1, [r0, #20]
	rev16	r3, r3
	ldrh	r0, [r4, #2]	@ unaligned
	uxth	r3, r3
	ldr	r5, [r1, #24]
	cmp	r3, ip
	uxth	r1, r0
	ldr	r6, [r5, #4]
	beq	.L981
	bls	.L1026
	movw	r0, #41349
	cmp	r3, r0
	beq	.L988
	bhi	.L989
	movw	r0, #41344
	cmp	r3, r0
	beq	.L990
	movw	r0, #41347
	cmp	r3, r0
	bne	.L1022
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #1
	movhi	r2, r1
	orrls	r2, r1, #1
	cmp	r2, #0
	bne	.L1022
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1022
	ldr	r3, [lr, #176]
	mov	r1, #2
	ldr	ip, .L1030
	ldr	r0, [r6]
	subs	r3, r3, ip
	movne	r3, #1
	strb	r3, [r0]
	strb	r2, [r0, #1]
	b	.L994
.L1026:
	movw	ip, #8580
	cmp	r3, ip
	beq	.L983
	bls	.L1027
	movw	r0, #8582
	cmp	r3, r0
	beq	.L986
	movw	r0, #8584
	cmp	r3, r0
	bne	.L1022
	cmp	r1, #0
	cmpeq	r2, #2
	bne	.L1022
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1022
	movw	r3, #:lower16:ncm_setdgram_complete
	mov	r1, #2
	str	lr, [r6, #32]
	movt	r3, #:upper16:ncm_setdgram_complete
	str	r3, [r6, #28]
.L994:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r1, [r6, #4]
	mov	r2, #32
	mov	r1, r6
	bfc	r3, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	blt	.L1028
.L979:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L989:
	movw	r0, #41351
	cmp	r3, r0
	beq	.L992
	movw	r0, #41353
	cmp	r3, r0
	bne	.L1022
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #1
	movhi	r2, r1
	orrls	r2, r1, #1
	cmp	r2, #0
	bne	.L1022
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1022
	ldrb	r0, [lr, #180]	@ zero_extendqisi2
	mov	r1, #2
	ldr	r3, [r6]
	strb	r0, [r3]
	strb	r2, [r3, #1]
	b	.L994
.L992:
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #1
	orrls	r1, r1, #1
	cmp	r1, #0
	bne	.L1022
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	beq	.L1029
.L1022:
	mvn	r6, #94
	b	.L979
.L986:
	cmp	r1, #0
	cmpeq	r2, #4
	bne	.L1022
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1022
	movw	r3, #:lower16:ncm_ep0out_complete
	mov	r1, #4
	str	lr, [r6, #32]
	movt	r3, #:upper16:ncm_ep0out_complete
	str	r3, [r6, #28]
	b	.L994
.L990:
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #0
	moveq	r1, #1
	cmp	r1, #0
	bne	.L1022
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1022
	cmp	r2, #28
	ldr	r1, .L1030+4
	movcc	r7, r2
	movcs	r7, #28
	ldr	r0, [r6]
	mov	r2, r7
	bl	memcpy
	mov	r1, r7
	b	.L994
.L1028:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC35
	str	r6, [sp]
	movt	r1, #:upper16:.LC35
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L979
.L1027:
	movw	r1, #8515
	cmp	r3, r1
	bne	.L1022
	cmp	r2, #0
	bne	.L1022
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1022
	mov	r1, r2
	strh	r0, [lr, #98]	@ movhi
	b	.L994
.L983:
	cmp	r2, #0
	bne	.L1022
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1022
	cmp	r1, #0
	beq	.L995
	cmp	r1, #1
	bne	.L1022
	ldr	r3, .L1030+8
	mov	r1, r2
	str	r3, [lr, #176]
	b	.L994
.L988:
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #3
	orrls	r1, r1, #1
	cmp	r1, #0
	bne	.L1022
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1022
	ldr	r2, [lr, #112]
	mov	r1, #4
	ldr	r3, [r6]
	lsr	r0, r2, #16
	ubfx	ip, r2, #8, #8
	strb	r2, [r3]
	lsr	r2, r0, #8
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r2, [r3, #3]
	b	.L994
.L981:
	cmp	r2, #0
	bne	.L1022
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1022
	cmp	r1, #0
	beq	.L997
	cmp	r1, #1
	bne	.L1022
	mov	ip, #16777216
	strb	r1, [lr, #180]
.L999:
	ldr	r0, [lr, #176]
	mov	r1, #0
	ldr	r2, [r0, #4]
	bic	r2, r2, #16777216
	str	r2, [r0, #4]
	ldr	r2, [lr, #176]
	ldr	r3, [r2, #4]
	orr	r3, r3, ip
	str	r3, [r2, #4]
	b	.L994
.L997:
	mov	ip, r1
	strb	r1, [lr, #180]
	b	.L999
.L995:
	ldr	r3, .L1030
	str	r3, [lr, #176]
	b	.L994
.L1029:
	ldrh	r2, [lr, #182]
	movw	r0, #:lower16:.LC34
	ldr	r3, [r6]
	movt	r0, #:upper16:.LC34
	ldr	r1, .L1030+12
	lsr	ip, r2, #8
	strb	r2, [r3]
	strb	ip, [r3, #1]
	ldrh	r2, [lr, #182]
	bl	printk
	mov	r1, #2
	b	.L994
.L1031:
	.align	2
.L1030:
	.word	.LANCHOR0+76
	.word	.LANCHOR0+20
	.word	.LANCHOR0+120
	.word	.LANCHOR2+328
	.fnend
	.size	ncm_setup, .-ncm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setdgram_complete, %function
ncm_setdgram_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	mov	r5, #0
	str	lr, [sp, #12]
	ldr	r2, [r3, #24]
	ldr	r0, [r3, #36]
	ldr	ip, [r1, #32]
	str	r5, [r1, #32]
	ldr	lr, [r1, #44]
	cmp	r0, r2
	movcs	r0, r2
	cmp	lr, r5
	bne	.L1033
	ldr	r2, [r1, #4]
	ldr	lr, [r1, #48]
	cmp	lr, r2
	bne	.L1033
	ldr	r1, [r1]
	movw	lr, #7500
	ldrb	r5, [r1, #1]	@ zero_extendqisi2
	ldrb	r2, [r1]	@ zero_extendqisi2
	orr	r2, r2, r5, lsl #8
	sub	r1, r2, #1504
	sub	r1, r1, #10
	cmp	r1, lr
	bhi	.L1043
	ldrh	r1, [r3, #44]
	add	r3, r1, #11
	rsb	r1, r1, #0
	and	r3, r3, r1
	add	r3, r3, #12
	add	r3, r3, r2
	cmp	r3, r0
	bhi	.L1044
	ldr	r3, [ip, #184]
	strh	r2, [ip, #182]	@ movhi
	movw	r0, #:lower16:.LC40
	movt	r0, #:upper16:.LC40
	cmp	r3, #0
	subne	r1, r2, #14
	strne	r1, [r3, #316]
	ldr	r1, .L1045
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1044:
	movw	r0, #:lower16:.LC38
	ldr	r1, .L1045
	movt	r0, #:upper16:.LC38
	bl	printk
	movw	r0, #:lower16:.LC39
	movt	r0, #:upper16:.LC39
	bl	printk
.L1035:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #24]
	bx	r3
.L1033:
	movw	r0, #:lower16:.LC36
	ldr	r1, .L1045
	movt	r0, #:upper16:.LC36
	bl	printk
	b	.L1035
.L1043:
	movw	r0, #:lower16:.LC37
	ldr	r1, .L1045
	movt	r0, #:upper16:.LC37
	bl	printk
	b	.L1035
.L1046:
	.align	2
.L1045:
	.word	.LANCHOR2+340
	.fnend
	.size	ncm_setdgram_complete, .-ncm_setdgram_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable_function, %function
android_enable_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LC41
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #4]
	ldr	r2, [r0, #8]
	movt	r9, #:upper16:.LC41
	ldr	r3, [r0, #48]
	sub	r6, r6, #4
	str	r3, [sp]
	ldr	r3, [r2]
	str	r3, [sp, #4]
.L1048:
	ldr	r5, [r6, #4]!
	mov	r0, r10
	cmp	r5, #0
	beq	.L1059
	ldr	r4, [r5]
	mov	r1, r4
	bl	strcmp
	subs	r8, r0, #0
	bne	.L1048
	ldr	r1, [r5, #20]
	cmp	r1, fp
	cmpne	r1, #0
	bne	.L1060
	movw	r2, #:lower16:kmalloc_caches
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #24]
	cmp	r0, #0
	beq	.L1056
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L1061
.L1051:
	mov	r2, r0
	str	fp, [r5, #20]
	add	r1, r7, #112
	str	r5, [r2], #4
	ldr	r3, [r7, #116]
	str	r2, [r7, #116]
	stmib	r0, {r1, r3}
	str	r2, [r3]
	ldr	r2, [sp]
	ldr	r6, [r5]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	ble	.L1047
	add	r3, r3, r3, lsl #2
	add	r4, r2, #12
	add	r5, r4, r3, lsl #1
	b	.L1054
.L1053:
	cmp	r5, r4
	beq	.L1047
.L1054:
	mov	r1, r4
	mov	r0, r6
	bl	strcmp
	cmp	r0, #0
	add	r4, r4, #10
	bne	.L1053
	ldr	r2, [sp, #4]
	mov	r3, #1
	mov	r8, r0
	strb	r3, [r2, #386]
.L1047:
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1056:
	mov	r0, #16
	b	.L1051
.L1059:
	mvn	r8, #21
	b	.L1047
.L1060:
	mov	r2, r4
	ldr	r1, .L1062
	mov	r0, r9
	bl	printk
	b	.L1048
.L1061:
	movw	r0, #:lower16:.LC42
	ldr	r1, .L1062
	mvn	r8, #11
	movt	r0, #:upper16:.LC42
	bl	printk
	b	.L1047
.L1063:
	.align	2
.L1062:
	.word	.LANCHOR2+364
	.fnend
	.size	android_enable_function, .-android_enable_function
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_string, %function
acc_complete_set_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	ldr	r0, [r0]
	ldr	r6, [r1, #48]
	cmp	r3, #0
	movwne	r0, #:lower16:.LC43
	movne	r1, r3
	movtne	r0, #:upper16:.LC43
	bne	.L1079
	ldr	r3, [r0, #1640]
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L1066
.L1068:
	.word	.L1067
	.word	.L1069
	.word	.L1070
	.word	.L1071
	.word	.L1072
	.word	.L1073
.L1073:
	add	r7, r0, #1376
	add	r7, r7, #5
.L1074:
	cmp	r7, #0
	beq	.L1066
	add	r4, r0, #88
	mov	r5, r1
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r6, #255
	mov	r8, r0
	ldr	r1, [r5]
	movge	r6, #255
	mov	r0, r7
	mov	r2, r6
	bl	memcpy
	mov	r3, #0
	mov	r1, r8
	mov	r0, r4
	strb	r3, [r7, r6]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1067:
	add	r7, r0, #101
	b	.L1074
.L1069:
	add	r7, r0, #356
	add	r7, r7, #1
	b	.L1074
.L1070:
	add	r7, r0, #612
	add	r7, r7, #1
	b	.L1074
.L1071:
	add	r7, r0, #868
	add	r7, r7, #1
	b	.L1074
.L1072:
	add	r7, r0, #1120
	add	r7, r7, #5
	b	.L1074
.L1066:
	movw	r0, #:lower16:.LC44
	mov	r1, r3
	movt	r0, #:upper16:.LC44
.L1079:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
	.fnend
	.size	acc_complete_set_string, .-acc_complete_set_string
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_release, %function
acc_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LC45
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC45
	str	lr, [sp, #4]
	bl	printk
	ldr	r3, [r4, #2520]
	add	r3, r3, #1648
	add	r3, r3, #4
	.syntax divided
@ 37 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r2, #0
	.syntax divided
@ 52 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r1, [r3]
	strex	r0, r2, [r3]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, r2
	beq	.L1083
.L1081:
	ldr	r3, [r4, #2520]
	mov	r0, #0
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #100]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1083:
	movw	r0, #:lower16:.LC46
	movw	r1, #799
	movt	r0, #:upper16:.LC46
	bl	warn_slowpath_null
	b	.L1081
	.fnend
	.size	acc_release, .-acc_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_open, %function
acc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC47
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LC47
	str	lr, [sp, #4]
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2520]
	add	r3, r3, #1648
	add	r3, r3, #4
	.syntax divided
@ 37 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #1
	.syntax divided
@ 52 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	ip, [r3]
	strex	r1, r0, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #0
	bne	.L1086
	ldr	r3, [r2, #2520]
	mov	r0, ip
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfi	r2, ip, #1, #1
	strb	r2, [r3, #100]
	str	r3, [r4, #124]
.L1084:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1086:
	mvn	r0, #15
	b	.L1084
	.fnend
	.size	acc_open, .-acc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_store, %function
sua_version_info_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r6, [r0, #4]
	cmp	r4, #100
	mov	r1, r5
	movls	r2, r4
	movhi	r2, #100
	ldr	r0, [r6, #96]
	add	r0, r0, #235
	bl	memcpy
	ldr	ip, [r6, #96]
	movw	r0, #:lower16:.LC48
	mov	r2, r5
	ldr	r1, .L1092
	mov	r3, #4
	movt	r0, #:upper16:.LC48
	add	ip, ip, #235
	str	ip, [sp]
	bl	printk
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1093:
	.align	2
.L1092:
	.word	.LANCHOR2+388
	.fnend
	.size	sua_version_info_store, .-sua_version_info_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_release_dev, %function
rndis_qc_release_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC49
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r1, .L1099
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC49
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r0, .L1099+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2528]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1098
	add	r2, r3, #152
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L1099+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L1094:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1098:
	movw	r0, #:lower16:.LC50
	ldr	r1, .L1099
	movt	r0, #:upper16:.LC50
	bl	printk
	ldr	r0, .L1099+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L1094
.L1100:
	.align	2
.L1099:
	.word	.LANCHOR2+412
	.word	.LANCHOR1+2524
	.fnend
	.size	rndis_qc_release_dev, .-rndis_qc_release_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open_dev, %function
rndis_qc_open_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC51
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC51
	mov	r6, r1
	ldr	r1, .L1107
	str	lr, [sp, #12]
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r0, .L1107+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2528]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1106
	add	r2, r3, #152
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1104
	ldr	r3, [r4, #2528]
	mov	r1, r5
	ldr	r0, .L1107+4
	str	r3, [r6, #124]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC53
	ldr	r1, .L1107
	movt	r0, #:upper16:.LC53
	bl	printk
	mov	r0, #0
.L1101:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1106:
	movw	r0, #:lower16:.LC52
	ldr	r1, .L1107
	movt	r0, #:upper16:.LC52
	bl	printk
	ldr	r0, .L1107+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L1101
.L1104:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC54
	ldr	r1, .L1107
	movt	r0, #:upper16:.LC54
	bl	printk
	ldr	r0, .L1107+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #15
	b	.L1101
.L1108:
	.align	2
.L1107:
	.word	.LANCHOR2+436
	.word	.LANCHOR1+2524
	.fnend
	.size	rndis_qc_open_dev, .-rndis_qc_open_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_release, %function
mtp_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC55
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC55
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2532]
	add	r2, r3, #108
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_release, .-mtp_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_open, %function
mtp_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC56
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LC56
	str	lr, [sp, #4]
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2532]
	add	r0, r3, #108
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	ip, [r0]
	add	ip, ip, #1
	strex	r1, ip, [r0]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #1
	bne	.L1112
	ldr	r3, [r2, #2532]
	mov	r0, #0
	ldr	r2, [r3, #104]
	cmp	r2, #0
	strne	ip, [r3, #104]
	str	r3, [r4, #124]
.L1111:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1112:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r0]
	sub	r2, r2, #1
	strex	r1, r2, [r0]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L1111
	.fnend
	.size	mtp_open, .-mtp_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_notify_complete, %function
ccid_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r1, #44]
	cmn	r1, #104
	beq	.L1117
	cmp	r1, #0
	beq	.L1117
	cmn	r1, #108
	beq	.L1117
	movw	r0, #:lower16:.LC57
	movt	r0, #:upper16:.LC57
	b	printk
.L1117:
	bx	lr
	.fnend
	.size	ccid_notify_complete, .-ccid_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_setup, %function
frmnet_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #120]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r0, #128]
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	cmp	r3, #0
	ldr	r5, [r7, #4]
	beq	.L1136
	ldrh	ip, [r1]	@ unaligned
	movw	r3, #8482
	mov	r4, r0
	mov	r8, r1
	rev16	ip, ip
	uxth	ip, ip
	cmp	ip, r3
	beq	.L1131
	movw	r3, #41217
	cmp	ip, r3
	beq	.L1132
	cmp	ip, #8448
	beq	.L1142
.L1138:
	mvn	r4, #94
.L1129:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1132:
	cmp	r9, #0
	bne	.L1138
	add	r10, r0, #132
	ldrh	fp, [r1, #4]	@ unaligned
	mov	r0, r10
	bl	_raw_spin_lock
	mov	ip, r4
	ldr	r4, [ip, #144]!
	cmp	r4, ip
	beq	.L1143
	ldrd	r2, [r4]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r10
	mov	r8, r4
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4]
	str	r1, [r4, #4]
	bl	_raw_spin_unlock
	ldmdb	r4, {r1, r3}
	ldr	r0, [r5]
	cmp	r6, r3
	movcc	r4, r6
	movcs	r4, r3
	cmp	r4, r6
	mov	r2, r4
	movge	r6, #0
	movlt	r6, #1
	bl	memcpy
	ldr	r0, [r8, #-8]!
	bl	kfree
	mov	r0, r8
	bl	kfree
.L1134:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r4, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1129
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC59
	mov	r2, r4
	movt	r1, #:upper16:.LC59
	add	r0, r0, #32
	bl	dev_err
	b	.L1129
.L1142:
	movw	r3, #:lower16:frmnet_cmd_complete
	mov	r4, r6
	str	r0, [r5, #32]
	movt	r3, #:upper16:frmnet_cmd_complete
	mov	r6, #0
	str	r3, [r5, #28]
	b	.L1134
.L1131:
	ldr	r8, [r0, #100]
	adds	r6, r6, #0
	movne	r6, #1
	cmp	r8, #0
	beq	.L1139
	ldrb	r1, [r0, #116]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r9
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, #0
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #3
	ldrb	r1, [r3, #2548]	@ zero_extendqisi2
	blx	r8
	b	.L1134
.L1136:
	mvn	r4, #106
	b	.L1129
.L1139:
	mov	r4, r8
	b	.L1134
.L1143:
	movw	r0, #:lower16:.LC58
	ldrb	r2, [r8, #1]	@ zero_extendqisi2
	mov	r3, r9
	str	fp, [sp]
	movt	r0, #:upper16:.LC58
	ldrb	r1, [r8]	@ zero_extendqisi2
	str	r6, [sp, #4]
	mvn	r4, #94
	bl	printk
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L1129
	.fnend
	.size	frmnet_setup, .-frmnet_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_notify_complete, %function
frmnet_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r1, #44]
	ldr	r4, [r5, #32]
	cmn	r1, #104
	beq	.L1146
	cmp	r1, #0
	bne	.L1171
.L1147:
	ldr	r3, [r4, #124]
	cmp	r3, #0
	bne	.L1172
.L1144:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1171:
	cmn	r1, #108
	bne	.L1167
.L1146:
	add	r5, r4, #132
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #152]
.L1169:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L1172:
	add	r6, r4, #132
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L1150
	sub	r3, r3, #1
	mov	r1, r0
	cmp	r3, #0
	mov	r0, r6
	str	r3, [r4, #152]
	beq	.L1169
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #136]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1144
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r2, r4
	mov	r5, r0
	ldr	r3, [r2, #144]!
	cmp	r3, r2
	beq	.L1153
	ldr	r2, [r4, #152]
	cmp	r2, #0
	beq	.L1154
	sub	r2, r2, #1
	mov	ip, #256
	mov	r0, #512
	str	r2, [r4, #152]
	ldm	r3, {r1, r2}
	mov	r4, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
.L1153:
	mov	r1, r5
	b	.L1170
.L1150:
	mov	r1, r0
.L1170:
	mov	r0, r6
	b	.L1169
.L1167:
	movw	r0, #:lower16:.LC60
	movt	r0, #:upper16:.LC60
	bl	printk
	b	.L1147
.L1154:
	movw	r0, #:lower16:.LC61
	ldr	r1, .L1173
	movt	r0, #:upper16:.LC61
	bl	printk
	b	.L1153
.L1174:
	.align	2
.L1173:
	.word	.LANCHOR2+456
	.fnend
	.size	frmnet_notify_complete, .-frmnet_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_ctrlrequest, %function
mbim_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #12]
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r3, #0
	bne	.L1184
	movw	r0, #:lower16:.LANCHOR0
	movt	r0, #:upper16:.LANCHOR0
	ldrb	r3, [r0, #190]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1184
	ldrb	r3, [r2]	@ zero_extendqisi2
	mov	r4, r1
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #128
	beq	.L1186
	ldrh	r2, [r2, #4]	@ unaligned
	cmp	r3, #192
	cmpeq	r1, #165
	moveq	r3, #1
	movne	r3, #0
	cmp	r2, #4
	movne	r3, #0
	andeq	r3, r3, #1
	cmp	r3, #0
	beq	.L1184
	ldr	r3, [r4, #4]
	cmp	r5, #40
	add	r1, r0, #164
	movcc	r6, r5
	movcs	r6, #40
	mov	r2, r6
	ldr	r0, [r3]
	bl	memcpy
.L1178:
	ldr	r3, [r4, #4]
	cmp	r5, r6
	mov	r2, #32
	movle	r5, #0
	movgt	r5, #1
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r5, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r6, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L1187
.L1175:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1186:
	cmp	r1, #6
	beq	.L1188
.L1184:
	mvn	r6, #94
	b	.L1175
.L1188:
	ldrh	r3, [r2, #2]	@ unaligned
	lsr	r2, r3, #8
	cmp	r2, #3
	bne	.L1184
	uxtb	r3, r3
	cmp	r3, #238
	bne	.L1184
	ldr	r3, [r4, #4]
	cmp	r5, #18
	add	r1, r0, #204
	movcc	r6, r5
	movcs	r6, #18
	mov	r2, r6
	ldr	r0, [r3]
	bl	memcpy
	b	.L1178
.L1187:
	movw	r0, #:lower16:.LC62
	ldr	r1, .L1189
	movt	r0, #:upper16:.LC62
	bl	printk
	b	.L1175
.L1190:
	.align	2
.L1189:
	.word	.LANCHOR2+480
	.fnend
	.size	mbim_function_ctrlrequest, .-mbim_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_release, %function
mbim_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC63
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L1193
	movt	r0, #:upper16:.LC63
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2608]
	add	r2, r3, #92
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1194:
	.align	2
.L1193:
	.word	.LANCHOR2+500
	.fnend
	.size	mbim_release, .-mbim_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_open, %function
mbim_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC64
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	movt	r0, #:upper16:.LC64
	ldr	r1, .L1204
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #2608]
	cmp	r3, #0
	beq	.L1202
	add	r2, r3, #92
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1198
	movw	r0, #:lower16:.LC66
	ldr	r1, .L1204
	movt	r0, #:upper16:.LC66
	bl	printk
	ldr	r3, [r4, #2608]
	ldr	r2, [r3, #88]
	cmp	r2, #0
	beq	.L1203
.L1200:
	mov	r4, #0
	movw	r0, #:lower16:.LC68
	str	r3, [r5, #124]
	movt	r0, #:upper16:.LC68
	ldr	r1, .L1204
	str	r4, [r3, #232]
	bl	printk
	mov	r0, r4
.L1195:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1198:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC54
	ldr	r1, .L1204
	movt	r0, #:upper16:.LC54
	bl	printk
	mvn	r0, #15
	b	.L1195
.L1202:
	movw	r0, #:lower16:.LC65
	ldr	r1, .L1204
	movt	r0, #:upper16:.LC65
	bl	printk
	mvn	r0, #18
	b	.L1195
.L1203:
	movw	r0, #:lower16:.LC67
	ldr	r1, .L1204
	movt	r0, #:upper16:.LC67
	bl	printk
	ldr	r3, [r4, #2608]
	b	.L1200
.L1205:
	.align	2
.L1204:
	.word	.LANCHOR2+516
	.fnend
	.size	mbim_open, .-mbim_open
	.align	2
	.global	gsdio_tx_pull
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_tx_pull, %function
gsdio_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #60
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r3, #0
	beq	.L1217
	sub	r5, r0, #56
	sub	r7, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r6, [r4, #-8]
	cmp	r7, r6
	beq	.L1211
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L1218
.L1211:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L1217:
	movw	r0, #:lower16:.LC69
	ldr	r1, .L1221
	movt	r0, #:upper16:.LC69
	bl	printk
	cmp	r8, #0
	beq	.L1219
	ldr	r3, [r4, #60]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L1206
.L1210:
	b	.L1210
.L1206:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1218:
	ldrd	r2, [r6]
	mov	ip, #256
	mov	r1, #512
	ldr	lr, [r4, #36]
	mov	r0, r5
	sub	r10, r6, #36
	ldr	r9, [lr, #88]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r6]
	str	r1, [r6, #4]
	ldr	r3, [r4, #16]
	sub	r3, r3, #1
	str	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mvn	r1, #18
	movw	r0, #:lower16:.LC70
	ldr	r3, [r4, #-60]
	mov	r2, r8
	movt	r0, #:upper16:.LC70
	str	r1, [sp]
	ldr	r1, .L1221
	bl	printk
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L1220
	ldr	r3, [r4, #-8]
	str	r6, [r3, #4]
	stm	r6, {r3, r7}
	ldr	r3, [r4, #16]
	str	r6, [r4, #-8]
	add	r3, r3, #1
	str	r3, [r4, #16]
	b	.L1211
.L1219:
	ldr	r1, .L1221+4
	movw	r0, #:lower16:.LC12
	movt	r0, #:upper16:.LC12
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L1220:
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L1211
.L1222:
	.align	2
.L1221:
	.word	.LANCHOR2+528
	.word	.LANCHOR2+544
	.fnend
	.size	gsdio_tx_pull, .-gsdio_tx_pull
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_open_work, %function
gsdio_open_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, .L1225
	ldr	ip, [r2, #-4]
	.pad #12
	sub	sp, sp, #12
	movw	r0, #:lower16:.LC71
	ldr	r3, [r2, #-124]!
	movt	r0, #:upper16:.LC71
	ldr	ip, [ip]
	str	ip, [sp]
	bl	printk
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1226:
	.align	2
.L1225:
	.word	.LANCHOR2+564
	.fnend
	.size	gsdio_open_work, .-gsdio_open_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_show, %function
remote_wakeup_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #420]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L1227
	ldr	r3, [r0, #412]
	movw	r2, #:lower16:.LC72
	mov	r1, #4096
	movt	r2, #:upper16:.LC72
	mov	r0, r4
	ldrb	r3, [r3, #-98]	@ zero_extendqisi2
	ubfx	r3, r3, #5, #1
	bl	snprintf
	mov	r0, #2
.L1227:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	remote_wakeup_show, .-remote_wakeup_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	state_show, %function
state_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r4, [r0, #8]
	cmp	r4, #0
	movweq	r4, #:lower16:.LC74
	movteq	r4, #:upper16:.LC74
	beq	.L1232
	add	r7, r4, #60
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r1, r0
	cmp	r3, #0
	movwne	r4, #:lower16:.LC73
	movtne	r4, #:upper16:.LC73
	beq	.L1238
.L1233:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L1232:
	movw	r0, #:lower16:.LC76
	mov	r2, r4
	ldr	r1, .L1239
	movt	r0, #:upper16:.LC76
	bl	printk
	movw	r2, #:lower16:.LC77
	mov	r3, r4
	ldrd	r4, [sp]
	mov	r0, r6
	movt	r2, #:upper16:.LC77
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r1, #4096
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	snprintf
.L1238:
	ldrb	r2, [r5, #52]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC75
	movw	r4, #:lower16:.LC74
	movt	r3, #:upper16:.LC75
	movt	r4, #:upper16:.LC74
	cmp	r2, #0
	movne	r4, r3
	b	.L1233
.L1240:
	.align	2
.L1239:
	.word	.LANCHOR2+580
	.fnend
	.size	state_show, .-state_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_show, %function
pm_qos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LC77
	add	r3, r0, #56
	ldr	lr, [sp, #4]
	mov	r0, r4
	movt	r2, #:upper16:.LC77
	ldr	r4, [sp]
	mov	r1, #4096
	add	sp, sp, #8
	b	snprintf
	.fnend
	.size	pm_qos_show, .-pm_qos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_show, %function
enable_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r4, r0
	movw	r0, #:lower16:.LC78
	ldr	r1, .L1245
	ldrb	r2, [r4, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC78
	bl	printk
	movw	r2, #:lower16:.LC72
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r5
	movt	r2, #:upper16:.LC72
	mov	r1, #4096
	bl	snprintf
	ldrd	r4, [sp]
	mov	r0, #2
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1246:
	.align	2
.L1245:
	.word	.LANCHOR2+592
	.fnend
	.size	enable_show, .-enable_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_show, %function
iSerial_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC79
	ldr	r3, .L1248
	movt	r2, #:upper16:.LC79
	mov	r1, #4096
	b	snprintf
.L1249:
	.align	2
.L1248:
	.word	.LANCHOR1+2256
	.fnend
	.size	iSerial_show, .-iSerial_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_show, %function
iProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC79
	ldr	r3, .L1251
	movt	r2, #:upper16:.LC79
	mov	r1, #4096
	b	snprintf
.L1252:
	.align	2
.L1251:
	.word	.LANCHOR1+2612
	.fnend
	.size	iProduct_show, .-iProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_show, %function
iManufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC79
	ldr	r3, .L1254
	movt	r2, #:upper16:.LC79
	mov	r1, #4096
	b	snprintf
.L1255:
	.align	2
.L1254:
	.word	.LANCHOR1+2868
	.fnend
	.size	iManufacturer_show, .-iManufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_show, %function
bDeviceProtocol_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC72
	ldrb	r3, [r3, #230]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC72
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceProtocol_show, .-bDeviceProtocol_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_show, %function
bDeviceSubClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC72
	ldrb	r3, [r3, #229]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC72
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceSubClass_show, .-bDeviceSubClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_show, %function
bDeviceClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC72
	ldrb	r3, [r3, #228]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC72
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceClass_show, .-bDeviceClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_show, %function
bcdDevice_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC80
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC80
	mov	r1, #4096
	ldrh	r3, [r3, #236]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdDevice_show, .-bcdDevice_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_show, %function
idProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC80
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC80
	mov	r1, #4096
	ldrh	r3, [r3, #234]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idProduct_show, .-idProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_show, %function
idVendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC80
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC80
	mov	r1, #4096
	ldrh	r3, [r3, #232]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idVendor_show, .-idVendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_pcm_show, %function
audio_source_pcm_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC81
	mov	r1, #4096
	movt	r2, #:upper16:.LC81
	mov	r0, r4
	ldm	ip, {r3, ip}
	str	ip, [sp]
	bl	snprintf
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_source_pcm_show, .-audio_source_pcm_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_show, %function
mass_storage_inquiry_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC77
	mov	r0, r4
	movt	r2, #:upper16:.LC77
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #96]
	add	r3, r3, #180
	b	snprintf
	.fnend
	.size	mass_storage_inquiry_show, .-mass_storage_inquiry_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_show, %function
ecm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC82
	mov	r1, #4096
	movt	r2, #:upper16:.LC82
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_show, .-ecm_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_show, %function
ecm_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC77
	ldr	r3, .L1272
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
.L1273:
	.align	2
.L1272:
	.word	.LANCHOR1+3124
	.fnend
	.size	ecm_transports_show, .-ecm_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_show, %function
rndis_max_pkt_per_xfer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC72
	mov	r0, r4
	movt	r2, #:upper16:.LC72
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #12]	@ zero_extendqisi2
	b	snprintf
	.fnend
	.size	rndis_max_pkt_per_xfer_show, .-rndis_max_pkt_per_xfer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_show, %function
rndis_vendorID_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC80
	mov	r0, r4
	movt	r2, #:upper16:.LC80
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #8]
	b	snprintf
	.fnend
	.size	rndis_vendorID_show, .-rndis_vendorID_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_show, %function
rndis_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC82
	mov	r1, #4096
	movt	r2, #:upper16:.LC82
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_ethaddr_show, .-rndis_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_show, %function
rndis_wceis_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC72
	mov	r0, r4
	movt	r2, #:upper16:.LC72
	mov	r1, #4096
	ldrb	r3, [r3, #269]	@ zero_extendqisi2
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_wceis_show, .-rndis_wceis_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_show, %function
rndis_manufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC77
	mov	r0, r4
	movt	r2, #:upper16:.LC77
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	add	r3, r3, #13
	b	snprintf
	.fnend
	.size	rndis_manufacturer_show, .-rndis_manufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_show, %function
rmnet_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC77
	ldr	r3, .L1285
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
.L1286:
	.align	2
.L1285:
	.word	.LANCHOR1+3176
	.fnend
	.size	rmnet_xport_names_show, .-rmnet_xport_names_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_show, %function
rmnet_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC77
	ldr	r3, .L1288
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
.L1289:
	.align	2
.L1288:
	.word	.LANCHOR1+3228
	.fnend
	.size	rmnet_transports_show, .-rmnet_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_show, %function
mbim_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC77
	ldr	r3, .L1291
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
.L1292:
	.align	2
.L1291:
	.word	.LANCHOR1+3280
	.fnend
	.size	mbim_transports_show, .-mbim_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_out_transfer, %function
start_out_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L1294
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r6, [r4, #104]
	ldr	r7, [r1, #24]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #28]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L1306
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #28]
	beq	.L1306
	cmn	r3, #95
	bne	.L1298
	ldr	r2, [r7, #4]
	cmp	r2, #0
	beq	.L1306
.L1298:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC85
	movt	r1, #:upper16:.LC85
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
.L1306:
	mov	r0, #1
.L1296:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1294:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC83
	movw	r3, #805
	movt	r1, #:upper16:.LC83
	ldr	r2, .L1307
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC84
	movw	r1, #550
	movt	r0, #:upper16:.LC84
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L1296
.L1308:
	.align	2
.L1307:
	.word	.LANCHOR2+604
	.fnend
	.size	start_out_transfer, .-start_out_transfer
	.section	.text.unlikely,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	override_id, %function
override_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r1
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1310
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L1311
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC86
	movt	r1, #:upper16:.LC86
	add	r0, r0, #32
	bl	dev_warn
	b	.L1310
.L1311:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r0, #48]
	strb	r3, [r1]
.L1310:
	ldrb	r0, [r4]	@ zero_extendqisi2
	pop	{r4, pc}
	.fnend
	.size	override_id, .-override_id
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_response_complete, %function
rmnet_sdio_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	ip, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC87
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [ip, #32]
	movt	r1, #:upper16:.LC87
	ldr	lr, [ip, #4]
	ldr	ip, [ip, #48]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_sdio_response_complete, .-rmnet_sdio_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_response_complete, %function
rmnet_mux_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	ip, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC88
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [ip, #32]
	movt	r1, #:upper16:.LC88
	ldr	lr, [ip, #4]
	ldr	ip, [ip, #48]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_mux_response_complete, .-rmnet_mux_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_show_suspended, %function
composite_show_suspended:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldrb	r2, [r0, #16]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC72
	mov	r0, r4
	movt	r1, #:upper16:.LC72
	and	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	composite_show_suspended, .-composite_show_suspended
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_show, %function
usb30en_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC89
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	movt	r1, #:upper16:.LC89
	ldrb	r2, [r3, #3330]	@ zero_extendqisi2
	b	sprintf
	.fnend
	.size	usb30en_show, .-usb30en_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_ro, %function
fsg_show_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	ldr	r2, [r3, #-48]
	movw	r1, #:lower16:.LC72
	movt	r1, #:upper16:.LC72
	cmp	r2, #0
	ldrb	r2, [r3, #-24]	@ zero_extendqisi2
	ubfxne	r2, r2, #1, #1
	andeq	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_ro, .-fsg_show_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_nofua, %function
fsg_show_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC90
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC90
	mov	r0, r2
	lsr	r2, r3, #7
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_nofua, .-fsg_show_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_cdrom, %function
fsg_show_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC72
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC72
	mov	r0, r2
	ubfx	r2, r3, #3, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_cdrom, .-fsg_show_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_show, %function
sua_version_info_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC91
	mov	r0, r4
	movt	r1, #:upper16:.LC91
	ldr	r2, [r3, #96]
	add	r2, r2, #235
	bl	sprintf
	mov	r5, r0
	movw	r0, #:lower16:.LC92
	ldr	r1, .L1358
	mov	r2, r4
	movt	r0, #:upper16:.LC92
	bl	printk
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1359:
	.align	2
.L1358:
	.word	.LANCHOR2+624
	.fnend
	.size	sua_version_info_show, .-sua_version_info_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_show, %function
mass_storage_product_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC77
	mov	r0, r4
	movt	r1, #:upper16:.LC77
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #218
	b	sprintf
	.fnend
	.size	mass_storage_product_show, .-mass_storage_product_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_show, %function
mass_storage_vendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC77
	mov	r0, r4
	movt	r1, #:upper16:.LC77
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #209
	b	sprintf
	.fnend
	.size	mass_storage_vendor_show, .-mass_storage_vendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_show, %function
acm_instances_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC72
	mov	r0, r4
	movt	r1, #:upper16:.LC72
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3]
	b	sprintf
	.fnend
	.size	acm_instances_show, .-acm_instances_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alsa_show, %function
midi_alsa_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC81
	mov	r0, r4
	movt	r1, #:upper16:.LC81
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrd	r2, [r3]
	b	sprintf
	.fnend
	.size	midi_alsa_show, .-midi_alsa_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_disconnect, %function
composite_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r0, r0, #32
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r8, r0
	mov	r0, #0
	bl	set_string_mode
	movw	r0, #:lower16:.LC93
	ldr	r1, .L1387
	add	r5, r8, #60
	movt	r0, #:upper16:.LC93
	bl	printk
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r8, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L1369
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L1371
	mov	r7, #0
.L1370:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L1372
	blx	r3
	str	r7, [r4, #80]
.L1386:
	ldr	r3, [r8, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L1370
.L1371:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2252]
	str	r2, [r8, #12]
	str	r2, [r8, #56]
	ldr	r3, [r3, #32]
	cmp	r3, r2
	beq	.L1375
.L1374:
	mov	r0, r8
	blx	r3
.L1376:
	ldr	r3, [r8, #56]
	cmp	r3, #0
	beq	.L1375
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC94
	movt	r1, #:upper16:.LC94
	add	r0, r0, #32
	bl	_dev_info
	mov	r3, #0
	str	r3, [r8, #56]
.L1375:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1369:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2252]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L1374
	b	.L1376
.L1372:
	str	r3, [r4, #80]
	b	.L1386
.L1388:
	.align	2
.L1387:
	.word	.LANCHOR2+648
	.fnend
	.size	composite_disconnect, .-composite_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_stop, %function
eth_qc_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #576]
	ldr	r6, [r0, #1220]
	cmp	r1, #0
	beq	.L1401
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L1392:
	add	r5, r4, #1216
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1391
	ldr	r3, [r6, #116]
	cmp	r3, #0
	beq	.L1391
	mov	r0, r6
	blx	r3
.L1391:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1401:
	movw	r0, #:lower16:.LC95
	movw	r1, #1847
	movt	r0, #:upper16:.LC95
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC96
	movt	r0, #:upper16:.LC96
	bl	printk
	b	.L1392
	.fnend
	.size	eth_qc_stop, .-eth_qc_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cpkt_tomodem, %function
ghsuart_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	ip, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r3, #1876]
	cmp	r0, r1
	bcs	.L1413
	mov	r1, #84
	mla	r3, r1, r0, r3
	ldr	r4, [r3, #1880]
	cmp	r4, #0
	beq	.L1414
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L1415
	mov	r1, #32
	mov	r0, r2
	mov	r6, r2
	bl	__kmalloc
	subs	r7, r0, #0
	mvneq	r0, #11
	beq	.L1402
	mov	r2, r6
	mov	r1, r5
	bl	memcpy
	ldr	r1, .L1417
	ldr	r0, .L1417+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L1416
.L1407:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree
	mvn	r0, #18
.L1402:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1415:
	ldr	r3, [r4, #104]
	add	r3, r3, #1
	str	r3, [r4, #104]
	b	.L1402
.L1414:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L1417
	movt	r0, #:upper16:.LC12
	bl	printk
	mvn	r0, #18
	b	.L1402
.L1413:
	movw	r0, #:lower16:.LC16
	mov	r2, ip
	ldr	r1, .L1417
	movt	r0, #:upper16:.LC16
	bl	printk
	mvn	r0, #18
	b	.L1402
.L1416:
	movw	r0, #:lower16:.LC97
	mvn	r2, #18
	ldr	r1, .L1417
	movt	r0, #:upper16:.LC97
	bl	printk
	b	.L1407
.L1418:
	.align	2
.L1417:
	.word	.LANCHOR2+672
	.word	.LANCHOR0+244
	.fnend
	.size	ghsuart_send_cpkt_tomodem, .-ghsuart_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disable, %function
rmnet_smd_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r3, #0
	str	lr, [sp, #4]
	ldr	r0, [r0, #96]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1420
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L1420:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1421
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L1421:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1422
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L1422:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r2, r4, #408
	mov	r0, #4
	ldr	r1, [r4, #388]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	queue_work_on
	.fnend
	.size	rmnet_smd_disable, .-rmnet_smd_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_ch_probe, %function
rmnet_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r3, #3332]
	ldr	r1, [r3, #388]
	add	r2, r3, #392
	bl	queue_work_on
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_ch_probe, .-rmnet_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_read_complete, %function
gs_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	add	r7, r4, #48
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r5, #48]
	add	lr, r5, #36
	movw	r2, #:lower16:.LANCHOR1
	ldr	r3, [r4, #128]
	movt	r2, #:upper16:.LANCHOR1
	mov	r6, r0
	ldr	ip, [r4, #52]
	mov	r0, #4
	str	lr, [r4, #52]
	ldr	r1, [r2, #3336]
	add	r2, r4, #60
	add	r3, r3, r8
	str	r3, [r4, #128]
	str	r7, [r5, #36]
	str	ip, [r5, #40]
	str	lr, [ip]
	bl	queue_work_on
	ldr	r8, [sp, #16]
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_read_complete, .-gs_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_unthrottle, %function
gs_unthrottle:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	cmp	r4, #0
	beq	.L1437
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1439
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3336]
	bl	queue_work_on
.L1439:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L1437:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_unthrottle, .-gs_unthrottle
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_resume, %function
android_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, .L1454
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2244]
	cmp	r3, r2
	sub	r4, r3, #424
	bne	.L1447
	b	.L1445
.L1453:
	ldr	r3, [r4, #424]
	cmp	r3, r2
	sub	r4, r3, #424
	beq	.L1445
.L1447:
	ldr	r3, [r3, #-416]
	cmp	r0, r3
	bne	.L1453
.L1445:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #54]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L1448
	mov	r0, #0
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r4, #140
	strb	r0, [r4, #54]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L1448:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_resume
.L1455:
	.align	2
.L1454:
	.word	.LANCHOR1+2244
	.fnend
	.size	android_resume, .-android_resume
	.align	2
	.global	gsdio_write_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write_complete, %function
gsdio_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	cmp	r4, #0
	beq	.L1468
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	mov	r5, r1
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	add	r2, r5, #36
	ldr	r1, [r3, #52]!
	mov	r8, r0
	str	r2, [r1, #4]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	ldr	r3, [r4, #76]
	str	r2, [r4, #52]
	add	r3, r3, #1
	str	r3, [r4, #76]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L1459
	cmp	r3, #0
	bne	.L1469
.L1460:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3340]
	bl	queue_work_on
.L1459:
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1469:
	ldr	ip, [r6, #4]
	movw	r0, #:lower16:.LC98
	mov	r2, r4
	ldr	r1, .L1470
	movt	r0, #:upper16:.LC98
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
	b	.L1460
.L1468:
	ldr	r1, .L1470
	movw	r0, #:lower16:.LC12
	movt	r0, #:upper16:.LC12
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L1471:
	.align	2
.L1470:
	.word	.LANCHOR2+700
	.fnend
	.size	gsdio_write_complete, .-gsdio_write_complete
	.align	2
	.global	gsdio_ctrl_notify_modem
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_notify_modem, %function
gsdio_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4]
	str	lr, [sp, #12]
	cmp	r1, r3
	bcs	.L1485
	cmp	r0, #0
	beq	.L1486
	mov	r3, #108
	lsl	r2, r2, #1
	mla	r1, r3, r1, r4
	and	r3, r2, #2
	ldr	r5, [r1, #28]
	ldr	r2, [r5, #180]
	cmp	r2, r3
	beq	.L1472
	ldr	r2, [r5, #108]
	str	r3, [r5, #180]
	cmp	r2, #0
	beq	.L1487
	cmp	r3, #0
	beq	.L1477
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L1477
	ldr	r1, [r5, #176]
	blx	r3
.L1477:
	add	r2, r5, #80
	ldr	r1, [r4, #3340]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L1472:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1486:
	movw	r0, #:lower16:.LC100
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC100
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L1488
	b	printk
.L1485:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC99
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L1488
	b	printk
.L1487:
	movw	r0, #:lower16:.LC101
	mov	r2, r5
	ldr	r3, [r5]
	ldr	r1, .L1488
	movt	r0, #:upper16:.LC101
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1489:
	.align	2
.L1488:
	.word	.LANCHOR2+724
	.fnend
	.size	gsdio_ctrl_notify_modem, .-gsdio_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_write_complete, %function
gsmd_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r7, [r0]
	.pad #12
	sub	sp, sp, #12
	cmp	r7, #0
	beq	.L1502
	add	r6, r7, #4
	mov	r5, r0
	mov	r0, r6
	mov	r4, r1
	bl	_raw_spin_lock
	ldr	r3, [r7, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L1492
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L1492
	cmp	r3, #0
	bne	.L1503
.L1494:
	mov	r3, r7
	movw	r1, #:lower16:.LANCHOR1
	ldr	lr, [r3, #44]!
	add	ip, r4, #36
	movt	r1, #:upper16:.LANCHOR1
	ldr	r1, [r1, #3344]
	add	r2, r7, #52
	mov	r0, #4
	str	ip, [lr, #4]
	str	lr, [r4, #36]
	str	r3, [r4, #40]
	str	ip, [r7, #44]
	bl	queue_work_on
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L1492:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L1502:
	ldr	r1, .L1504
	movw	r0, #:lower16:.LC12
	movt	r0, #:upper16:.LC12
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L1503:
	ldr	ip, [r5, #4]
	movw	r0, #:lower16:.LC98
	mov	r2, r7
	ldr	r1, .L1504
	movt	r0, #:upper16:.LC98
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r7]
	bl	printk
	b	.L1494
.L1505:
	.align	2
.L1504:
	.word	.LANCHOR2+748
	.fnend
	.size	gsmd_write_complete, .-gsmd_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_read_complete, %function
gsmd_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	cmp	r5, #0
	beq	.L1514
	add	r7, r5, #4
	mov	r6, r0
	mov	r0, r7
	mov	r4, r1
	bl	_raw_spin_lock
	ldr	r3, [r5, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L1508
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L1508
	ldr	ip, [r5, #24]
	add	lr, r4, #36
	add	r1, r5, #20
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r5, #28
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [r5, #24]
	mov	r0, #4
	str	r1, [r4, #36]
	ldr	r1, [r3, #3344]
	str	ip, [r4, #40]
	str	lr, [ip]
	bl	queue_work_on
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L1508:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r4]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L1514:
	movw	r0, #:lower16:.LC12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC12
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L1515
	b	printk
.L1516:
	.align	2
.L1515:
	.word	.LANCHOR2+768
	.fnend
	.size	gsmd_read_complete, .-gsmd_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_hid_report_desc, %function
acc_complete_set_hid_report_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	r5, [r1, #48]
	ldr	r6, [r4, #12]
	cmp	r3, #0
	bne	.L1521
	ldr	r0, [r4, #20]
	mov	r2, r5
	ldr	r3, [r4, #28]
	ldr	r1, [r1]
	add	r0, r0, r3
	bl	memcpy
	ldr	r3, [r4, #24]
	ldr	r2, [r4, #28]
	add	r5, r5, r2
	cmp	r5, r3
	str	r5, [r4, #28]
	beq	.L1522
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1522:
	movw	r3, #:lower16:system_wq
	add	r2, r6, #1744
	ldrd	r4, [sp]
	movt	r3, #:upper16:system_wq
	ldr	r6, [sp, #8]
	add	r2, r2, #8
	ldr	lr, [sp, #12]
	mov	r0, #4
	add	sp, sp, #16
	ldr	r1, [r3]
	b	queue_work_on
.L1521:
	movw	r0, #:lower16:.LC102
	ldrd	r4, [sp]
	mov	r1, r3
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC102
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
	.fnend
	.size	acc_complete_set_hid_report_desc, .-acc_complete_set_hid_report_desc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_setup, %function
rmnet_sdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #192]
	ldrh	r8, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldr	r5, [r7, #4]
	beq	.L1532
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r9, r1
	mov	r4, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1525
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1526
	cmp	r3, #8448
	beq	.L1537
.L1534:
	mvn	r4, #94
.L1523:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1526:
	cmp	r8, #0
	bne	.L1534
	ldrh	r3, [r1, #4]	@ unaligned
	add	r10, r0, #188
	mov	r0, r10
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r2, r4
	ldr	fp, [r2, #120]!
	cmp	fp, r2
	beq	.L1538
	ldm	fp, {r1, r2}
	mov	lr, #256
	mov	ip, #512
	mov	r0, r10
	mov	r9, fp
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [fp]
	str	ip, [fp, #4]
	ldr	r2, [r4, #128]
	sub	r2, r2, #1
	str	r2, [r4, #128]
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r8}
	ldr	r0, [r5]
	cmp	r6, r8
	movcc	r8, r6
	mov	r2, r8
	bl	memcpy
	movw	r3, #:lower16:rmnet_sdio_response_complete
	str	r4, [r5, #32]
	movt	r3, #:upper16:rmnet_sdio_response_complete
	str	r3, [r5, #28]
	ldr	r0, [r9, #-8]!
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r3, [r4, #368]
	cmp	r8, r6
	movge	r6, #0
	movlt	r6, #1
	add	r3, r3, #1
	str	r3, [r4, #368]
.L1528:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r8, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1523
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC59
	mov	r2, r4
	movt	r1, #:upper16:.LC59
	add	r0, r0, #32
	bl	dev_err
	b	.L1523
.L1537:
	movw	r3, #:lower16:rmnet_sdio_command_complete
	mov	r8, r6
	str	r0, [r5, #32]
	movt	r3, #:upper16:rmnet_sdio_command_complete
	mov	r6, #0
	str	r3, [r5, #28]
	b	.L1528
.L1525:
	ldr	r3, [r0, #332]
	tst	r8, #1
	add	r2, r0, #336
	mov	r8, #0
	mov	r0, #4
	ldr	r1, [r4, #200]
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r4, #332]
	bl	queue_work_on
	subs	r6, r6, r8
	movne	r6, #1
	b	.L1528
.L1532:
	mvn	r4, #106
	b	.L1523
.L1538:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC103
	str	r8, [sp]
	ldr	r2, [sp, #20]
	movt	r1, #:upper16:.LC103
	mvn	r4, #94
	ldrb	r3, [r9, #1]	@ zero_extendqisi2
	add	r0, r0, #32
	str	r2, [sp, #4]
	ldrb	r2, [r9]	@ zero_extendqisi2
	str	r6, [sp, #8]
	bl	_dev_info
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L1523
	.fnend
	.size	rmnet_sdio_setup, .-rmnet_sdio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disconnect, %function
android_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	mov	r7, r0
	add	r0, r0, #32
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	dev_get_drvdata
	ldr	r3, [r4, #2244]
	mov	r6, r0
	ldr	r2, .L1551
	sub	r5, r3, #424
	cmp	r3, r2
	bne	.L1542
	b	.L1540
.L1550:
	ldr	r3, [r5, #424]
	cmp	r3, r2
	sub	r5, r3, #424
	beq	.L1540
.L1542:
	ldr	r3, [r3, #-416]
	cmp	r6, r3
	bne	.L1550
.L1540:
	mov	r0, r7
	bl	composite_disconnect
	ldr	r4, [r4, #2520]
	add	r7, r4, #88
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1768]
	add	lr, r4, #1760
	mov	r1, r0
	add	lr, lr, #8
	cmp	r3, lr
	ldr	r2, [r3]
	beq	.L1543
	add	r8, r4, #1776
	mov	ip, r2
	add	r8, r8, #8
	mov	r10, #256
	mov	r9, #512
	b	.L1544
.L1547:
	mov	ip, r2
.L1544:
	ldr	r0, [r3, #4]
	cmp	lr, ip
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r2, [r4, #1784]
	str	r3, [r2, #4]
	stm	r3, {r2, r8}
	str	r3, [r4, #1784]
	mov	r3, ip
	ldr	r2, [ip]
	bne	.L1547
.L1543:
	mov	r0, r4
	ldr	r3, [r0, #1776]!
	cmp	r0, r3
	ldr	r2, [r3]
	beq	.L1545
	mov	ip, r2
	add	r8, r0, #8
	mov	r10, #256
	mov	r9, #512
	b	.L1546
.L1548:
	mov	ip, r2
.L1546:
	ldr	lr, [r3, #4]
	cmp	r0, ip
	str	lr, [r2, #4]
	str	r2, [lr]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r2, [r4, #1784]
	str	r3, [r2, #4]
	stm	r3, {r2, r8}
	str	r3, [r4, #1784]
	mov	r3, ip
	ldr	r2, [ip]
	bne	.L1548
.L1545:
	mov	r0, r7
	movw	r7, #:lower16:system_wq
	bl	_raw_spin_unlock_irqrestore
	movt	r7, #:upper16:system_wq
	add	r2, r4, #1744
	ldr	r1, [r7]
	add	r6, r6, #60
	add	r2, r2, #8
	mov	r0, #4
	bl	queue_work_on
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r4, r0
	ldr	r1, [r7]
	add	r2, r5, #140
	mov	r0, #4
	strb	r3, [r5, #52]
	bl	queue_work_on
	ldrd	r8, [sp, #16]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L1552:
	.align	2
.L1551:
	.word	.LANCHOR1+2244
	.fnend
	.size	android_disconnect, .-android_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_probe, %function
ghsuart_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	str	r6, [sp, #8]
	movt	r2, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	mov	r0, #1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1880]
	add	r1, r4, #88
	add	r5, r4, #8
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L1554
	add	r2, r4, #36
	mov	r0, #4
	ldr	r1, [r4, #32]
	bl	queue_work_on
.L1554:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ghsuart_ctrl_probe, .-ghsuart_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_probe, %function
ghsuart_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r2, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	ldr	r1, [r2, #2048]
	cmp	r1, r3
	bls	.L1564
	mov	r1, #84
	mov	r0, #1
	mla	r2, r1, r3, r2
	ldr	r4, [r2, #2052]
	add	r1, r4, #188
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L1559
	add	r2, r4, #112
	mov	r0, #4
	ldr	r1, [r4, #108]
	bl	queue_work_on
	mov	r0, #0
.L1559:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1564:
	movw	r0, #:lower16:.LC104
	mov	r2, r3
	ldr	r1, .L1565
	movt	r0, #:upper16:.LC104
	bl	printk
	mvn	r0, #21
	b	.L1559
.L1566:
	.align	2
.L1565:
	.word	.LANCHOR2+788
	.fnend
	.size	ghsuart_data_probe, .-ghsuart_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_suspend, %function
ecm_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3348]
	ldr	r1, [r3, #3352]
	add	r2, r2, #200
	b	queue_work_on
	.fnend
	.size	ecm_qc_suspend, .-ecm_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_suspend, %function
mbim_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC105
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L1570
	movt	r0, #:upper16:.LC105
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #3348]
	ldr	r1, [r3, #3352]
	add	r2, r2, #200
	b	queue_work_on
.L1571:
	.align	2
.L1570:
	.word	.LANCHOR2+808
	.fnend
	.size	mbim_suspend, .-mbim_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_resume, %function
ecm_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3348]
	ldr	r1, [r3, #3352]
	add	r2, r2, #216
	b	queue_work_on
	.fnend
	.size	ecm_qc_resume, .-ecm_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_resume, %function
mbim_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC106
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L1575
	movt	r0, #:upper16:.LC106
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #3348]
	ldr	r1, [r3, #3352]
	add	r2, r2, #216
	b	queue_work_on
.L1576:
	.align	2
.L1575:
	.word	.LANCHOR2+824
	.fnend
	.size	mbim_resume, .-mbim_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_read_stats, %function
rmnet_smd_debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:kmalloc_caches
	strd	r6, [sp, #8]
	movt	r5, #:upper16:kmalloc_caches
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #260
	sub	sp, sp, #260
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	add	lr, r4, #260
	add	ip, r4, #324
	ldrd	r2, [lr]
	ldrd	r0, [lr, #8]
	ldrd	r6, [ip]
	strd	r2, [sp, #128]
	ldrd	r2, [lr, #16]
	strd	r0, [sp, #136]
	ldrd	r0, [lr, #24]
	strd	r2, [sp, #144]
	ldrd	r2, [lr, #32]
	strd	r0, [sp, #152]
	ldrd	r0, [lr, #40]
	strd	r6, [sp, #192]
	ldrd	r6, [ip, #24]
	strd	r2, [sp, #160]
	ldrd	r2, [lr, #48]
	strd	r0, [sp, #168]
	ldrd	r0, [lr, #56]
	strd	r2, [sp, #176]
	ldrd	r2, [ip, #8]
	strd	r0, [sp, #184]
	ldrd	r0, [ip, #16]
	strd	r2, [sp, #200]
	ldrd	r2, [ip, #32]
	strd	r0, [sp, #208]
	ldrd	r0, [ip, #40]
	strd	r6, [sp, #216]
	ldrd	r6, [ip, #48]
	strd	r2, [sp, #224]
	ldrd	r2, [ip, #56]
	strd	r0, [sp, #232]
	ldr	r0, [r5, #36]
	strd	r6, [sp, #240]
	strd	r2, [sp, #248]
	cmp	r0, #0
	beq	.L1580
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1583
.L1578:
	add	r10, r4, #164
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #168]
	ldr	r3, [r4, #440]
	ldr	r2, [r4, #444]
	ldr	r8, [r4, #424]
	ldr	r9, [r4, #428]
	ldr	r7, [r4, #432]
	ldr	ip, [r4, #448]
	strd	r2, [sp, #72]
	ldr	r3, [sp, #172]
	ldr	r2, [sp, #236]
	sub	r1, r9, r8
	ldr	r6, [r4, #436]
	str	r0, [sp, #112]
	ldr	r0, [r4, #260]
	str	ip, [sp, #80]
	ldr	fp, [r4, #452]
	str	lr, [sp, #96]
	strd	r2, [sp, #116]
	str	r1, [sp, #124]
	bl	smd_read_avail
	str	r0, [sp, #100]
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	str	r0, [sp, #104]
	ldr	r0, [r4, #324]
	bl	smd_read_avail
	str	r0, [sp, #108]
	ldr	r0, [r4, #324]
	sub	r4, r7, r6
	bl	smd_write_avail
	ldr	r3, [sp, #76]
	str	r8, [sp, #12]
	ldr	ip, [sp, #80]
	str	r6, [sp, #24]
	ldr	r2, [sp, #116]
	str	r4, [sp, #28]
	ldr	r6, [sp, #72]
	ldr	r1, [sp, #96]
	sub	ip, ip, fp
	ldr	r4, [sp, #76]
	str	r2, [sp]
	ldr	r2, [sp, #72]
	str	r0, [sp, #68]
	mov	r0, r5
	str	ip, [sp, #52]
	ldr	ip, [sp, #100]
	stmib	sp, {r1, r9}
	ldr	r1, [sp, #124]
	sub	lr, r2, r3
	movw	r2, #:lower16:.LC107
	ldr	r3, [sp, #120]
	movt	r2, #:upper16:.LC107
	str	ip, [sp, #56]
	ldr	ip, [sp, #104]
	str	lr, [sp, #40]
	ldr	lr, [sp, #80]
	str	r1, [sp, #16]
	mov	r1, #512
	str	r7, [sp, #20]
	str	r6, [sp, #32]
	str	ip, [sp, #60]
	ldr	ip, [sp, #108]
	str	r4, [sp, #36]
	str	lr, [sp, #44]
	str	fp, [sp, #48]
	str	ip, [sp, #64]
	bl	scnprintf
	mov	r4, r0
	ldr	r1, [sp, #112]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r3, r5
	ldrd	r0, [sp, #84]
	ldr	r2, [sp, #92]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1577:
	mov	r0, r4
	add	sp, sp, #260
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1580:
	mov	r5, #16
	b	.L1578
.L1583:
	mvn	r4, #11
	b	.L1577
	.fnend
	.size	rmnet_smd_debug_read_stats, .-rmnet_smd_debug_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_read_stats, %function
rmnet_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #64
	sub	sp, sp, #64
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L1587
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1590
.L1585:
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #196]
	movw	r2, #:lower16:.LC108
	mov	r10, r0
	ldr	ip, [r4, #324]
	movt	r2, #:upper16:.LC108
	mov	r0, r5
	ldr	r3, [r4, #356]
	str	ip, [sp, #56]
	ldr	ip, [r4, #320]
	str	r1, [sp, #48]
	mov	r1, #4096
	str	ip, [sp, #52]
	ldr	ip, [r4, #128]
	str	ip, [sp, #44]
	ldr	ip, [r4, #368]
	str	ip, [sp, #40]
	ldr	ip, [r4, #332]
	str	ip, [sp, #36]
	ldr	ip, [r4, #116]
	str	ip, [sp, #32]
	ldr	ip, [r4, #372]
	str	ip, [sp, #28]
	ldr	ip, [r4, #328]
	str	ip, [sp, #24]
	ldr	ip, [r4, #180]
	str	ip, [sp, #20]
	ldr	ip, [r4, #168]
	str	ip, [sp, #16]
	ldr	ip, [r4, #360]
	str	ip, [sp, #12]
	ldr	ip, [r4, #364]
	str	ip, [sp, #8]
	ldr	ip, [r4, #152]
	str	ip, [sp, #4]
	ldr	ip, [r4, #140]
	str	ip, [sp]
	bl	scnprintf
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1584:
	mov	r0, r4
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1587:
	mov	r5, #16
	b	.L1585
.L1590:
	mvn	r4, #11
	b	.L1584
	.fnend
	.size	rmnet_sdio_read_stats, .-rmnet_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_read_stats, %function
rmnet_mux_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #92
	sub	sp, sp, #92
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L1595
	mov	r2, #1024
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1599
.L1592:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	ldr	r2, [r4, #364]
	ldr	fp, [r4, #404]
	ldr	r1, [r4, #408]
	str	r3, [sp, #60]
	ldr	r3, [r4, #232]
	str	r0, [sp, #84]
	ldr	r0, [r4, #412]
	sub	r2, r2, #1
	cmp	r2, #9
	ldr	r10, [r4, #416]
	movwhi	ip, #:lower16:.LC109
	ldr	lr, [r4, #424]
	str	r3, [sp, #64]
	ldr	r3, [r4, #312]
	movthi	ip, #:upper16:.LC109
	str	r3, [sp, #68]
	ldr	r3, [r4, #336]
	str	r0, [sp, #72]
	ldr	r0, [r4, #420]
	str	r3, [sp, #76]
	ldr	r3, [r4, #348]
	str	r3, [sp, #80]
	ldr	r3, [r4, #352]
	str	r3, [sp, #56]
	ldr	r3, [r4, #400]
	bls	.L1600
.L1594:
	ldr	r4, [r4, #356]
	movw	r2, #:lower16:.LC110
	str	fp, [sp]
	str	r10, [sp, #12]
	ldr	r10, [sp, #56]
	movt	r2, #:upper16:.LC110
	str	lr, [sp, #36]
	ldr	lr, [sp, #76]
	strd	r0, [sp, #4]
	mov	r1, #1024
	mov	r0, r5
	str	r10, [sp, #16]
	ldr	r10, [sp, #60]
	str	ip, [sp, #48]
	str	r4, [sp, #52]
	str	r10, [sp, #20]
	ldr	r10, [sp, #64]
	str	lr, [sp, #40]
	ldr	lr, [sp, #80]
	str	r10, [sp, #24]
	ldr	r10, [sp, #68]
	str	r10, [sp, #28]
	ldr	r10, [sp, #72]
	str	lr, [sp, #44]
	str	r10, [sp, #32]
	bl	scnprintf
	mov	r4, r0
	ldr	r1, [sp, #84]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1591:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1600:
	movw	ip, #:lower16:.LANCHOR2
	movt	ip, #:upper16:.LANCHOR2
	add	r2, ip, r2, lsl #2
	ldr	ip, [r2, #836]
	b	.L1594
.L1595:
	mov	r5, #16
	b	.L1592
.L1599:
	mvn	r4, #11
	b	.L1591
	.fnend
	.size	rmnet_mux_read_stats, .-rmnet_mux_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_status, %function
debug_read_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #20
	sub	sp, sp, #20
	ldmib	r5, {r7, r8}
	cmp	r7, #0
	cmpne	r8, #0
	beq	.L1614
	mov	fp, r3
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	mov	r9, r1
	ldr	r0, [r3, #36]
	mov	r10, r2
	cmp	r0, #0
	beq	.L1607
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L1615
.L1604:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LC112
	mov	r1, #512
	ldr	r3, [r5, #128]
	movt	r2, #:upper16:.LC112
	str	r0, [sp, #12]
	mov	r0, r6
	bl	scnprintf
	movw	r2, #:lower16:.LC113
	rsb	r1, r0, #512
	ldr	r3, [r5, #132]
	mov	r4, r0
	movt	r2, #:upper16:.LC113
	add	r0, r6, r0
	bl	scnprintf
	ldr	ip, [r5, #128]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC114
	ldr	r3, [r5, #132]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC114
	sub	r3, ip, r3
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC115
	ldr	r3, [r5, #136]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC115
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC116
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC116
	bl	scnprintf
	ldr	ip, [r5, #136]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC117
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC117
	sub	r3, ip, r3
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC118
	ldr	r3, [r8, #164]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC118
	bl	scnprintf
	ldr	r3, [r7, #108]
	add	r4, r4, r0
	cmp	r3, #0
	beq	.L1605
	mov	r0, r7
	blx	r3
	cmp	r0, #0
	movw	r2, #:lower16:.LC119
	rsb	r1, r4, #512
	add	r0, r6, r4
	movne	r3, #2
	moveq	r3, #0
	movt	r2, #:upper16:.LC119
	bl	scnprintf
	add	r4, r4, r0
.L1605:
	mov	r0, r5
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, fp
	mov	r1, r10
	mov	r0, r9
	mov	r3, r6
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L1601:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1607:
	mov	r6, #16
	b	.L1604
.L1615:
	mvn	r4, #11
	b	.L1601
.L1614:
	movw	r0, #:lower16:.LC111
	mvn	r4, #21
	movt	r0, #:upper16:.LC111
	bl	printk
	b	.L1601
	.fnend
	.size	debug_read_status, .-debug_read_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_read_stats, %function
debug_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L1622
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L1626
.L1617:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r5, [r8]
	cmp	r5, #0
	beq	.L1620
	mov	r5, #0
	movw	r3, #:lower16:.LC120
	movt	r3, #:upper16:.LC120
	mov	r6, r5
	add	r7, r8, #4
	str	r3, [sp, #48]
.L1619:
	ldr	r4, [r7, #24]
	add	r7, r7, #108
	add	r9, r4, #4
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #112]
	mov	r3, r6
	rsb	r1, r5, #4096
	mov	fp, r0
	ldr	r2, [sp, #48]
	add	r0, r10, r5
	add	r6, r6, #1
	str	ip, [sp, #40]
	ldr	ip, [r4, #108]
	str	ip, [sp, #36]
	ldr	ip, [r4, #8]
	str	ip, [sp, #32]
	ldr	ip, [r4, #76]
	str	ip, [sp, #28]
	ldr	ip, [r4, #48]
	str	ip, [sp, #24]
	ldr	ip, [r4, #44]
	str	ip, [sp, #20]
	ldr	ip, [r4, #176]
	str	ip, [sp, #16]
	ldr	ip, [r4, #180]
	str	ip, [sp, #12]
	ldr	ip, [r4, #188]
	str	ip, [sp, #8]
	ldr	ip, [r4, #184]
	stm	sp, {r4, ip}
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8]
	cmp	r6, r3
	bcc	.L1619
.L1620:
	mov	r3, r10
	ldrd	r0, [sp, #52]
	str	r5, [sp]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L1616:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1622:
	mov	r10, #16
	b	.L1617
.L1626:
	mvn	r4, #11
	b	.L1616
	.fnend
	.size	debug_sdio_read_stats, .-debug_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_read_stats, %function
debug_smd_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #36]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L1634
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #64]
	beq	.L1640
.L1628:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #220]
	cmp	r3, #0
	beq	.L1632
	add	fp, r7, #224
	mov	r6, #0
	movw	r3, #:lower16:.LC121
	mov	r8, fp
	movt	r3, #:upper16:.LC121
	mov	r9, r6
	mov	fp, r7
	str	r3, [sp, #72]
.L1631:
	ldr	r3, [sp, #64]
	ldr	r7, [r8, #24]
	add	r3, r3, r9
	add	r5, r7, #4
	ldr	r10, [r7, #72]
	str	r3, [sp, #44]
	rsb	r3, r9, #512
	mov	r0, r5
	str	r3, [sp, #48]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #8]
	ldr	r4, [r10]
	str	r3, [sp, #60]
	ldr	r3, [r7, #160]
	cmp	r4, #0
	moveq	lr, r4
	str	r3, [sp, #52]
	ldr	r3, [r7, #164]
	str	r0, [sp, #68]
	mov	r0, r4
	str	r3, [sp, #56]
	ldr	r3, [r7, #168]
	ldr	r7, [r7, #172]
	str	r3, [sp, #48]
	beq	.L1630
	bl	smd_read_avail
	ldr	lr, [r10]
	mov	r4, r0
	cmp	lr, #0
	mov	r0, lr
	beq	.L1630
	bl	smd_write_avail
	mov	lr, r0
.L1630:
	ldr	ip, [r10, #8]
	rsb	r1, r9, #512
	add	r8, r8, #108
	ldr	r10, [r10, #8]
	str	r7, [sp]
	ldr	r0, [sp, #44]
	str	r4, [sp, #20]
	ldr	r7, [sp, #52]
	ldr	r3, [sp, #48]
	and	ip, ip, #1
	ubfx	r10, r10, #1, #1
	ldr	r2, [sp, #72]
	str	lr, [sp, #24]
	str	r7, [sp, #8]
	ldr	r7, [sp, #56]
	str	r3, [sp, #4]
	mov	r3, r6
	add	r6, r6, #1
	str	ip, [sp, #28]
	str	r7, [sp, #12]
	ldr	r7, [sp, #60]
	str	r10, [sp, #32]
	str	r7, [sp, #16]
	bl	scnprintf
	add	r9, r9, r0
	ldr	r1, [sp, #68]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #220]
	cmp	r6, r3
	bcc	.L1631
	mov	r3, r9
.L1632:
	ldr	r5, [sp, #64]
	str	r3, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1627:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1634:
	mov	r3, #16
	str	r3, [sp, #64]
	b	.L1628
.L1640:
	mvn	r4, #11
	b	.L1627
	.fnend
	.size	debug_smd_read_stats, .-debug_smd_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_read_stats, %function
gbam_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r3
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	cmp	r0, #0
	beq	.L1647
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1651
.L1642:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #440]
	cmp	r2, #0
	ble	.L1652
	ldr	r4, [r3, #444]
	cmp	r4, #0
	beq	.L1645
	add	r6, r4, #4
	add	r7, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r4, #20]
	add	ip, r4, #20
	movw	r2, #:lower16:.LC122
	ldr	r1, [r4, #20]
	movt	r2, #:upper16:.LC122
	mov	r3, #0
	ubfx	r0, r0, #1, #1
	ubfx	r1, r1, #2, #1
	strd	r0, [sp, #52]
	ldr	lr, [r4, #68]
	mov	r1, #1024
	mov	r0, r5
	str	lr, [sp, #48]
	ldr	lr, [r4, #44]
	str	lr, [sp, #44]
	ldr	lr, [r4, #280]
	str	lr, [sp, #40]
	ldr	lr, [r4, #276]
	str	lr, [sp, #36]
	ldr	lr, [r4, #272]
	str	lr, [sp, #32]
	ldr	lr, [r4, #268]
	str	lr, [sp, #28]
	ldr	lr, [r4, #248]
	str	lr, [sp, #24]
	ldr	lr, [r4, #244]
	str	lr, [sp, #20]
	ldr	lr, [r4, #240]
	str	lr, [sp, #16]
	ldr	lr, [r4, #260]
	str	lr, [sp, #12]
	ldr	lr, [r4, #264]
	stm	sp, {r4, ip, lr}
	bl	scnprintf
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L1645:
	str	r4, [sp]
	mov	r2, r10
	mov	r1, r9
	mov	r0, r8
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1641:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1652:
	mov	r4, #0
	b	.L1645
.L1647:
	mov	r5, #16
	b	.L1642
.L1651:
	mvn	r4, #11
	b	.L1641
	.fnend
	.size	gbam_read_stats, .-gbam_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_read_stats, %function
gsmd_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L1661
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #60]
	beq	.L1672
.L1654:
	ldr	r4, .L1673
	mov	r10, #0
	movw	r3, #:lower16:.LC124
	movw	r2, #:lower16:.LC123
	movw	r1, #:lower16:.LC125
	movt	r3, #:upper16:.LC124
	movt	r2, #:upper16:.LC123
	movt	r1, #:upper16:.LC125
	mov	fp, r10
	str	r3, [sp, #64]
	str	r2, [sp, #68]
	str	r1, [sp, #72]
.L1659:
	ldr	r9, [r4]
	ldr	r3, [sp, #60]
	cmp	r9, #0
	add	r6, r9, #108
	add	r8, r3, r10
	rsb	r3, r10, #1024
	mov	r0, r6
	str	r3, [sp, #40]
	beq	.L1656
	bl	_raw_spin_lock_irqsave
	ldr	lr, [sp, #68]
	str	r0, [sp, #52]
	ldr	r3, [r9, #92]
	ldr	ip, [r9, #88]
	ldr	r2, [r9]
	ldr	r1, [r9, #8]
	str	r3, [sp, #44]
	ldr	r3, [sp, #64]
	cmp	ip, #0
	ldr	r5, [r9, #8]
	movne	r3, lr
	cmp	r2, #0
	mov	r7, r2
	mov	ip, r2
	str	r3, [sp, #48]
	ldr	r3, [r9, #96]
	mov	r0, r2
	ubfx	r5, r5, #1, #1
	str	r3, [sp, #40]
	and	r3, r1, #1
	str	r3, [sp, #56]
	beq	.L1658
	bl	smd_read_avail
	ldr	ip, [r9]
	mov	r7, r0
	cmp	ip, #0
	mov	r0, ip
	beq	.L1658
	bl	smd_write_avail
	mov	ip, r0
.L1658:
	ldr	lr, [sp, #40]
	rsb	r1, r10, #1024
	mov	r0, r8
	mov	r3, fp
	ldr	r2, [sp, #72]
	str	r9, [sp]
	stmib	sp, {r9, lr}
	ldr	lr, [sp, #44]
	str	r5, [sp, #24]
	str	r7, [sp, #28]
	str	ip, [sp, #32]
	str	lr, [sp, #12]
	ldr	lr, [sp, #48]
	str	lr, [sp, #16]
	ldr	lr, [sp, #56]
	str	lr, [sp, #20]
	bl	scnprintf
	add	r10, r10, r0
	ldr	r1, [sp, #52]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L1656:
	add	fp, fp, #1
	add	r4, r4, #84
	cmp	fp, #6
	bne	.L1659
	ldr	r5, [sp, #60]
	str	r10, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1653:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1661:
	mov	r3, #16
	str	r3, [sp, #60]
	b	.L1654
.L1672:
	mvn	r4, #11
	b	.L1653
.L1674:
	.align	2
.L1673:
	.word	.LANCHOR1+528
	.fnend
	.size	gsmd_ctrl_read_stats, .-gsmd_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_read_stats, %function
gctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L1683
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L1691
.L1676:
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #1036]
	cmp	r3, #0
	beq	.L1692
	mov	r5, #0
	movw	r2, #:lower16:.LC124
	str	r9, [sp, #48]
	movw	r1, #:lower16:.LC123
	movw	r0, #:lower16:.LC126
	movt	r2, #:upper16:.LC124
	movt	r1, #:upper16:.LC123
	movt	r0, #:upper16:.LC126
	mov	r7, r5
	add	r6, r9, #1040
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r0, [sp, #44]
.L1680:
	ldr	r4, [r6]
	mov	r2, r5
	cmp	r4, #0
	add	r8, r4, #4
	mov	r0, r8
	beq	.L1678
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #84]
	mov	fp, r0
	add	r0, r10, r5
	ldr	ip, [r4, #84]
	ldr	r3, [r4, #88]
	ldr	r9, [r4, #104]
	ldr	r2, [r4, #96]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ldr	r1, [r4, #100]
	str	r7, [sp]
	cmp	r3, #0
	str	r4, [sp, #4]
	str	ip, [sp, #28]
	ldr	ip, [sp, #40]
	str	r9, [sp, #16]
	ldr	r9, [sp, #36]
	str	r1, [sp, #8]
	rsb	r1, r5, #1024
	str	r2, [sp, #12]
	ldr	r2, [sp, #44]
	movne	r9, ip
	str	r9, [sp, #20]
	ldr	r3, [r6, #24]
	str	lr, [sp, #24]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #48]
	mov	r2, r5
	ldr	r3, [r3, #1036]
.L1678:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L1680
.L1681:
	str	r2, [sp]
	mov	r3, r10
	ldrd	r0, [sp, #52]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L1675:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1683:
	mov	r10, #16
	b	.L1676
.L1692:
	mov	r2, r3
	b	.L1681
.L1691:
	mvn	r4, #11
	b	.L1675
	.fnend
	.size	gctrl_read_stats, .-gctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_read_stats, %function
ghsic_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #48]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L1701
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L1704
.L1694:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r3, [fp, #1456]
	cmp	r3, #0
	beq	.L1705
	ldr	r7, .L1706
	mov	r5, #0
	movw	r2, #:lower16:.LC127
	movw	r1, #:lower16:.LC128
	movt	r2, #:upper16:.LC127
	movt	r1, #:upper16:.LC128
	mov	r6, r5
	str	r2, [sp, #48]
	str	r1, [sp, #52]
	str	fp, [sp, #56]
.L1696:
	ldr	r4, [r7]
	mov	r2, r5
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L1697
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #180]
	rsb	r1, r5, #4096
	str	r0, [sp, #44]
	ldr	ip, [r4, #180]
	add	r0, r10, r5
	add	r7, r7, #104
	ldr	r3, [r4, #164]
	ldr	r2, [sp, #48]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ubfx	r3, r3, #1, #1
	str	r3, [sp, #36]
	ldr	fp, [r4, #208]
	ldr	r3, [r7, #-80]
	str	fp, [sp, #32]
	ldr	fp, [r4, #204]
	str	fp, [sp, #28]
	ldr	fp, [r4, #72]
	str	fp, [sp, #24]
	ldr	fp, [r4, #212]
	str	fp, [sp, #20]
	ldr	fp, [r4, #188]
	str	r6, [sp]
	add	r6, r6, #1
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	fp, [sp, #16]
	bl	scnprintf
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #164]
	rsb	r1, r5, #4096
	mov	r8, r0
	ldr	r3, [r4, #192]
	add	r0, r10, r5
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #16]
	ldr	ip, [r4, #216]
	str	ip, [sp, #12]
	ldr	ip, [r4, #200]
	str	ip, [sp, #8]
	ldr	ip, [r4, #196]
	str	ip, [sp, #4]
	ldr	ip, [r4, #40]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #56]
	mov	r2, r5
	ldr	r3, [r3, #1456]
	cmp	r3, r6
	bhi	.L1696
.L1699:
	str	r2, [sp]
	mov	r3, r10
	ldrd	r0, [sp, #60]
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L1693:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1697:
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r6, r3
	bcc	.L1696
	b	.L1699
.L1701:
	mov	r10, #16
	b	.L1694
.L1705:
	mov	r2, r3
	b	.L1699
.L1704:
	mvn	r4, #11
	b	.L1693
.L1707:
	.align	2
.L1706:
	.word	.LANCHOR1+1460
	.fnend
	.size	ghsic_data_read_stats, .-ghsic_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_read_stats, %function
ghsuart_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #36]
	strd	r2, [sp, #40]
	cmp	r0, #0
	beq	.L1715
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L1724
.L1709:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r2, [r6, #1876]
	cmp	r2, #0
	beq	.L1725
	mov	r4, #0
	movw	r10, #:lower16:.LC124
	str	r6, [sp, #28]
	movw	r9, #:lower16:.LC123
	movw	fp, #:lower16:.LC129
	movt	r9, #:upper16:.LC123
	mov	r5, r4
	movt	r10, #:upper16:.LC124
	movt	fp, #:upper16:.LC129
	str	r9, [sp, #32]
.L1713:
	mov	r3, #84
	ldr	r0, .L1726
	mov	r1, r4
	mul	r3, r3, r5
	ldr	r9, [r3, r0]
	cmp	r9, #0
	add	r6, r9, #8
	mov	r0, r6
	beq	.L1711
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r9, #92]
	mov	r3, r5
	mov	r7, r0
	ldr	r2, [r9, #96]
	add	r0, r8, r4
	ldr	r1, [r9, #100]
	ldr	lr, [r9, #104]
	str	r9, [sp]
	ldr	r9, [sp, #32]
	cmp	ip, #0
	moveq	r9, r10
	stmib	sp, {r1, r2, lr}
	mov	r2, fp
	rsb	r1, r4, #1024
	str	r9, [sp, #16]
	bl	scnprintf
	add	r4, r4, r0
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #28]
	mov	r1, r4
	ldr	r2, [r3, #1876]
.L1711:
	add	r5, r5, #1
	cmp	r5, r2
	bcc	.L1713
.L1714:
	str	r1, [sp]
	mov	r3, r8
	ldr	r0, [sp, #36]
	ldr	r1, [sp, #40]
	ldr	r2, [sp, #44]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r8
	bl	kfree
.L1708:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1715:
	mov	r8, #16
	b	.L1709
.L1725:
	mov	r1, r2
	b	.L1714
.L1724:
	mvn	r4, #11
	b	.L1708
.L1727:
	.align	2
.L1726:
	.word	.LANCHOR1+1880
	.fnend
	.size	ghsuart_ctrl_read_stats, .-ghsuart_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_read_stats, %function
ghsuart_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L1736
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L1739
.L1729:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r3, [fp, #2048]
	cmp	r3, #0
	beq	.L1734
	ldr	r7, .L1740
	mov	r5, #0
	movw	r1, #:lower16:.LC130
	movw	r0, #:lower16:.LC131
	movt	r1, #:upper16:.LC130
	movt	r0, #:upper16:.LC131
	mov	r2, r3
	mov	r6, r5
	str	r1, [sp, #48]
	str	r0, [sp, #52]
	str	fp, [sp, #56]
.L1731:
	ldr	r4, [r7]
	mov	r3, r5
	cmp	r4, #0
	add	r9, r4, #104
	add	r10, r4, #72
	mov	r0, r9
	beq	.L1732
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #188]
	str	r0, [sp, #44]
	add	r0, r8, r5
	ldr	ip, [r4, #188]
	add	r7, r7, #84
	ldr	r1, [r4, #188]
	ldr	r2, [r4, #184]
	and	lr, lr, #1
	ldr	r3, [r7, #-60]
	ubfx	ip, ip, #1, #1
	ubfx	r1, r1, #2, #1
	ubfx	r2, r2, #1, #1
	str	r2, [sp, #32]
	ldr	r2, [r4, #96]
	str	r2, [sp, #28]
	ldr	fp, [r4, #212]
	ldr	r2, [sp, #48]
	str	fp, [sp, #24]
	ldr	fp, [r4, #204]
	str	r6, [sp]
	add	r6, r6, #1
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	r1, [sp, #16]
	rsb	r1, r5, #1024
	str	fp, [sp, #20]
	bl	scnprintf
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #184]
	rsb	r1, r5, #1024
	mov	r9, r0
	ldr	r3, [r4, #208]
	add	r0, r8, r5
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #4]
	ldr	ip, [r4, #64]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #56]
	ldr	r2, [r3, #2048]
	mov	r3, r5
	cmp	r2, r6
	bhi	.L1731
.L1734:
	str	r3, [sp]
	ldrd	r0, [sp, #60]
	mov	r3, r8
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r8
	bl	kfree
.L1728:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1732:
	add	r6, r6, #1
	add	r7, r7, #84
	cmp	r6, r2
	bcc	.L1731
	b	.L1734
.L1736:
	mov	r8, #16
	b	.L1729
.L1739:
	mvn	r4, #11
	b	.L1728
.L1741:
	.align	2
.L1740:
	.word	.LANCHOR1+2052
	.fnend
	.size	ghsuart_data_read_stats, .-ghsuart_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_stats, %function
debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r9, r1
	ldr	r4, [r6]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	mov	fp, r3
	.pad #28
	sub	sp, sp, #28
	cmp	r6, r4
	moveq	lr, #0
	beq	.L1744
	movw	r8, #:lower16:debug_buffer
	movw	r7, #:lower16:.LC132
	sub	r4, r4, #4
	movt	r8, #:upper16:debug_buffer
	movt	r7, #:upper16:.LC132
	mov	r5, #0
.L1743:
	ldr	ip, [r4, #20]
	rsb	r1, r5, #4096
	add	r0, r8, r5
	mov	r2, r7
	mov	lr, r5
	cmp	ip, #0
	beq	.L1745
	ldr	lr, [ip, #136]
	ldr	r3, [r4]
	str	lr, [sp, #16]
	ldr	lr, [ip, #132]
	str	lr, [sp, #12]
	ldr	lr, [ip, #128]
	str	lr, [sp, #8]
	ldr	lr, [ip, #84]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #88]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	scnprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	mov	lr, r5
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1743
.L1744:
	movw	r3, #:lower16:debug_buffer
	mov	r2, fp
	str	lr, [sp]
	mov	r1, r10
	mov	r0, r9
	movt	r3, #:upper16:debug_buffer
	bl	simple_read_from_buffer
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1745:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1743
	b	.L1744
	.fnend
	.size	debug_read_stats, .-debug_read_stats
	.section	.exit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_exit, %function
gether_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3356]
	b	destroy_workqueue
	.fnend
	.size	gether_exit, .-gether_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_cleanup, %function
qdss_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	str	r10, [sp, #24]
	ldr	r4, [r8, #268]!
	str	lr, [sp, #28]
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L1750
	ldr	r6, .L1757
	mov	r10, #256
	mov	r9, #512
	b	.L1751
.L1753:
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, r8
	ldr	r3, [r5]
	beq	.L1750
.L1754:
	mov	r4, r5
	mov	r5, r3
.L1751:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r4, #80]
	bl	destroy_workqueue
	ldr	r3, [r4, #12]
	mov	r1, r7
	mov	r0, r6
	cmp	r3, #0
	bne	.L1753
	ldrd	r2, [r4]
	sub	r0, r4, #116
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	kfree
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, r8
	ldr	r3, [r5]
	bne	.L1754
.L1750:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1758:
	.align	2
.L1757:
	.word	.LANCHOR1+3360
	.fnend
	.size	qdss_function_cleanup, .-qdss_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_command_complete, %function
rmnet_smd_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r4, #84]
	cmp	r2, #0
	blt	.L1767
	add	r7, r4, #164
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r2, [r4, #308]
	ldr	r3, [r4, #448]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #448]
	beq	.L1768
.L1761:
	mov	r3, r4
	ldr	r5, [r3, #108]!
	cmp	r5, r3
	beq	.L1769
	ldrd	r2, [r5]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5]
	str	r1, [r5, #4]
	bl	_raw_spin_unlock
	ldr	r1, [r6]
	ldr	r2, [r6, #48]
	ldr	r0, [r5, #-8]
	bl	memcpy
	ldr	r3, [r6, #48]
	mov	r0, r7
	str	r3, [r5, #-4]
	bl	_raw_spin_lock
	ldr	r3, [r4, #128]
	add	r2, r4, #124
	mov	r0, r7
	str	r5, [r4, #128]
	strd	r2, [r5]
	str	r5, [r3]
.L1766:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L1768:
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [r6, #48]
	cmp	r0, r3
	strcc	r3, [r4, #308]
	bcc	.L1761
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r4, #260]
	ldr	r1, [r6]
	ldr	r2, [r6, #48]
	bl	smd_write
	ldr	r3, [r6, #48]
	cmp	r3, r0
	beq	.L1763
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC134
	movt	r1, #:upper16:.LC134
	add	r0, r0, #32
	bl	dev_err
.L1763:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #452]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #452]
	b	.L1766
.L1767:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC133
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC133
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L1769:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC135
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC135
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_smd_command_complete, .-rmnet_smd_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epout, %function
rmnet_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r7, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #84]
	add	r6, r4, #164
	cmn	r3, #104
	beq	.L1786
	cmp	r3, #0
	beq	.L1773
	cmn	r3, #108
	beq	.L1786
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC136
	ldr	r0, [r8]
	movt	r1, #:upper16:.LC136
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L1786:
	mov	r0, r6
	bl	_raw_spin_lock
	add	r2, r4, #148
	mov	r0, r6
	ldr	r3, [r4, #152]
	str	r7, [r4, #152]
.L1785:
	strd	r2, [r5, #36]
	str	r7, [r3]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L1773:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #372]
	ldr	r3, [r4, #432]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #432]
	bne	.L1774
	ldr	r0, [r4, #324]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #372]
	bcc	.L1774
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #324]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L1776
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC137
	movt	r1, #:upper16:.LC137
	add	r0, r0, #32
	bl	dev_err
.L1776:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #152]
	add	r1, r4, #148
	str	r7, [r4, #152]
	ldr	r3, [r4, #436]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #436]
	str	r1, [r5, #36]
	str	r2, [r5, #40]
	str	r7, [r2]
	bl	_raw_spin_unlock
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	rmnet_smd_start_rx
.L1774:
	ldr	r3, [r4, #160]
	add	r2, r4, #156
	mov	r0, r6
	str	r7, [r4, #160]
	b	.L1785
	.fnend
	.size	rmnet_smd_complete_epout, .-rmnet_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_rx_tlet, %function
rmnet_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #156
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #84]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #156]
	mov	fp, r0
	cmp	r7, r4
	beq	.L1792
	add	r3, r5, #148
	mov	r9, #256
	mov	r8, #512
	str	r3, [sp]
	b	.L1788
.L1790:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #324]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #12]
	mov	fp, r0
	cmp	r1, r10
	bne	.L1795
	ldr	r1, [r5, #152]
	str	r4, [r5, #152]
	ldr	r3, [r5, #436]
	add	r3, r3, #1
	str	r3, [r5, #436]
	ldr	r3, [sp]
	str	r3, [r4]
	str	r1, [r4, #4]
	str	r4, [r1]
	ldr	r4, [r5, #156]
	cmp	r4, r7
	beq	.L1792
.L1788:
	ldr	r0, [r5, #324]
	bl	smd_write_avail
	ldr	r3, [r4, #12]
	mov	r1, fp
	cmp	r0, r3
	mov	r0, r6
	bcs	.L1790
	str	r3, [r5, #372]
.L1789:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_smd_start_rx
.L1792:
	mov	r3, #0
	str	r3, [r5, #372]
	b	.L1789
.L1795:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC138
	movt	r1, #:upper16:.LC138
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L1789
	.fnend
	.size	rmnet_data_rx_tlet, .-rmnet_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_rx_tlet, %function
rmnet_control_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #124
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #84]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #124]
	mov	fp, r0
	cmp	r7, r4
	beq	.L1801
	add	r3, r5, #108
	mov	r9, #256
	mov	r8, #512
	str	r3, [sp]
	b	.L1797
.L1799:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	ldr	r3, [r5, #448]
	add	r3, r3, #1
	str	r3, [r5, #448]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #260]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #-4]
	mov	fp, r0
	cmp	r1, r10
	bne	.L1804
	ldr	r1, [r5, #112]
	str	r4, [r5, #112]
	ldr	r3, [r5, #452]
	add	r3, r3, #1
	str	r3, [r5, #452]
	ldr	r3, [sp]
	str	r3, [r4]
	str	r1, [r4, #4]
	str	r4, [r1]
	ldr	r4, [r5, #124]
	cmp	r4, r7
	beq	.L1801
.L1797:
	ldr	r0, [r5, #260]
	bl	smd_write_avail
	ldr	r3, [r4, #-4]
	mov	r1, fp
	cmp	r0, r3
	mov	r0, r6
	bge	.L1799
	str	r3, [r5, #308]
.L1798:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L1801:
	mov	r3, #0
	str	r3, [r5, #308]
	b	.L1798
.L1804:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC134
	movt	r1, #:upper16:.LC134
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L1798
	.fnend
	.size	rmnet_control_rx_tlet, .-rmnet_control_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_rx_push, %function
gsmd_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #24
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	sub	r10, r0, #28
	str	lr, [sp, #32]
	ldr	r6, [r0, #44]
	.pad #20
	sub	sp, sp, #20
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L1808
	ldr	r4, [r5, #-8]
	sub	r9, r5, #8
	cmp	r9, r4
	beq	.L1808
	movw	r8, #:lower16:.LC139
	mov	fp, #0
	movt	r8, #:upper16:.LC139
.L1814:
	ldr	r3, [r4, #8]
	cmn	r3, #108
	beq	.L1808
	cmp	r3, #0
	bne	.L1841
.L1809:
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L1808
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1810
	ldr	r2, [r5, #-20]
	ldr	r1, [r4, #-36]
	ldr	r0, [r6]
	cmp	r2, #0
	subne	r3, r3, r2
	addne	r1, r1, r2
	mov	r2, r3
	str	r3, [sp, #12]
	bl	smd_write
	cmp	r0, #0
	ldr	r3, [sp, #12]
	blt	.L1842
	cmp	r0, r3
	bne	.L1843
	ldr	r2, [r5, #140]
	add	r3, r2, r3
	str	r3, [r5, #140]
.L1810:
	str	fp, [r5, #-20]
	ldm	r4, {r1, r2}
	mov	r3, r5
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-16]!
	str	r4, [r2, #4]
	strd	r2, [r4]
	str	r4, [r5, #-16]
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L1808
	ldr	r4, [r5, #-8]
	cmp	r9, r4
	bne	.L1814
.L1808:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L1843:
	ldr	r3, [r5, #-20]
	add	r2, r3, r0
	str	r2, [r5, #-20]
	b	.L1808
.L1841:
	str	r3, [sp]
	mov	r2, r10
	ldr	r1, .L1844
	mov	r0, r8
	ldr	r3, [r5, #-28]
	bl	printk
	ldr	r0, [r6]
	b	.L1809
.L1842:
	mov	r2, r0
	movw	r0, #:lower16:.LC140
	ldr	r1, .L1844
	movt	r0, #:upper16:.LC140
	bl	printk
	b	.L1808
.L1845:
	.align	2
.L1844:
	.word	.LANCHOR2+876
	.fnend
	.size	gsmd_rx_push, .-gsmd_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_write_w, %function
grmnet_ctrl_smd_write_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #16]
	.pad #4
	sub	sp, sp, #4
	add	r6, r6, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r5, #-68]
	cmp	r0, #0
	beq	.L1847
	ldr	r4, [r5, #-28]
	sub	r8, r5, #28
	cmp	r8, r4
	beq	.L1847
	mov	r10, #256
	b	.L1848
.L1856:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #512
	str	r10, [r4]
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #-68]
	bl	smd_write
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-4]
	mov	r7, r0
	cmp	r3, r9
	bne	.L1855
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, fp
	bl	kfree
	ldr	r0, [r5, #-68]
	ldr	r3, [r5, #24]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r5, #24]
	beq	.L1847
	ldr	r4, [r5, #-28]
	cmp	r8, r4
	beq	.L1847
.L1848:
	bl	smd_write_avail
	ldr	r3, [r4, #-4]
	sub	fp, r4, #8
	mov	r1, r7
	cmp	r0, r3
	mov	r0, r6
	bge	.L1856
.L1847:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L1855:
	movw	r0, #:lower16:.LC141
	mov	r2, r9
	ldr	r1, .L1857
	movt	r0, #:upper16:.LC141
	bl	printk
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, fp
	bl	kfree
	b	.L1847
.L1858:
	.align	2
.L1857:
	.word	.LANCHOR2+892
	.fnend
	.size	grmnet_ctrl_smd_write_w, .-grmnet_ctrl_smd_write_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_rx_tlet, %function
rmnet_mux_smd_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #368
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #84]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #372]
	mov	fp, r0
	cmp	r3, #0
	beq	.L1860
	ldr	r4, [r5, #120]
	add	r7, r5, #120
	cmp	r7, r4
	beq	.L1861
	add	r3, r5, #112
	mov	r9, #256
	mov	r8, #512
	str	r3, [sp]
	b	.L1862
.L1863:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #128]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #12]
	mov	fp, r0
	cmp	r1, r10
	bne	.L1871
	ldr	r1, [r5, #116]
	str	r4, [r5, #116]
	ldr	r3, [r5, #400]
	add	r3, r3, #1
	str	r3, [r5, #400]
	ldr	r3, [sp]
	str	r3, [r4]
	str	r1, [r4, #4]
	str	r4, [r1]
	ldr	r3, [r5, #372]
	cmp	r3, #0
	beq	.L1860
	ldr	r4, [r5, #120]
	cmp	r4, r7
	beq	.L1861
.L1862:
	ldr	r0, [r5, #128]
	bl	smd_write_avail
	ldr	r3, [r4, #12]
	mov	r1, fp
	cmp	r0, r3
	mov	r0, r6
	bcs	.L1863
	str	r3, [r5, #176]
.L1860:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_mux_smd_start_rx
.L1861:
	mov	r3, #0
	str	r3, [r5, #176]
	b	.L1860
.L1871:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC142
	movt	r1, #:upper16:.LC142
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L1860
	.fnend
	.size	rmnet_mux_smd_data_rx_tlet, .-rmnet_mux_smd_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epout, %function
rmnet_mux_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #24]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r5, #364]
	cmp	r3, #0
	beq	.L1890
	ldr	r3, [r1, #44]
	add	r7, r1, #36
	add	r6, r5, #368
	ldr	r9, [r5, #84]
	cmn	r3, #104
	beq	.L1889
	cmp	r3, #0
	beq	.L1876
	cmn	r3, #108
	beq	.L1889
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC143
	ldr	r0, [r9]
	movt	r1, #:upper16:.LC143
	ldr	lr, [r4, #4]
	ldr	ip, [r4, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L1889:
	mov	r0, r6
	bl	_raw_spin_lock
	add	r2, r5, #112
	mov	r0, r6
	ldr	r3, [r5, #116]
	str	r7, [r5, #116]
.L1888:
	strd	r2, [r4, #36]
	str	r7, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L1876:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #176]
	cmp	r3, #0
	bne	.L1877
	ldr	r0, [r5, #128]
	bl	smd_write_avail
	ldr	r3, [r4, #48]
	cmp	r0, r3
	strcc	r3, [r5, #176]
	bcs	.L1891
.L1877:
	ldr	r3, [r5, #124]
	add	r2, r5, #120
	mov	r0, r6
	str	r7, [r5, #124]
	b	.L1888
.L1890:
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L1891:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r1, [r4]
	ldr	r2, [r4, #48]
	ldr	r0, [r5, #128]
	bl	smd_write
	ldr	r3, [r4, #48]
	cmp	r3, r0
	beq	.L1879
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC144
	movt	r1, #:upper16:.LC144
	add	r0, r0, #32
	bl	dev_err
.L1879:
	ldr	r3, [r5, #400]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r5, #400]
	bl	_raw_spin_lock
	ldr	r3, [r5, #116]
	add	r2, r5, #112
	str	r7, [r5, #116]
	mov	r0, r6
	strd	r2, [r4, #36]
	str	r7, [r3]
	bl	_raw_spin_unlock
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	rmnet_mux_smd_start_rx
	.fnend
	.size	rmnet_mux_smd_complete_epout, .-rmnet_mux_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epin, %function
rmnet_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	add	r8, r4, #140
	add	r7, r4, #164
	cmn	r2, #104
	beq	.L1894
	cmp	r2, #0
	beq	.L1895
	cmn	r2, #108
	beq	.L1894
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC145
	movt	r1, #:upper16:.LC145
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L1895:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #140]
	cmp	r3, r8
	beq	.L1913
	ldr	r3, [r4, #144]
	str	r6, [r4, #144]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r6, [r3]
	ldr	r3, [r4, #424]
	add	r3, r3, #1
	str	r3, [r4, #424]
.L1899:
	mov	r0, r7
.L1912:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L1913:
	ldr	r3, [r4, #144]
	str	r6, [r4, #144]
	add	r1, r4, #332
	str	r8, [r5, #36]
	mov	r0, #0
	add	r8, r4, #328
	str	r3, [r5, #40]
	str	r6, [r3]
	ldr	r3, [r4, #424]
	add	r3, r3, #1
	str	r3, [r4, #424]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L1899
	mov	r0, r8
	bl	__tasklet_schedule
	b	.L1899
.L1894:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #144]
	mov	r0, r7
	str	r6, [r4, #144]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r6, [r3]
	b	.L1912
	.fnend
	.size	rmnet_smd_complete_epin, .-rmnet_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epin, %function
rmnet_mux_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r3, [r4, #364]
	cmp	r3, #0
	beq	.L1933
	ldr	r2, [r1, #44]
	add	r6, r1, #36
	add	r8, r4, #104
	add	r7, r4, #368
	cmn	r2, #104
	beq	.L1917
	cmp	r2, #0
	beq	.L1918
	cmn	r2, #108
	beq	.L1917
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC146
	movt	r1, #:upper16:.LC146
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L1918:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #104]
	cmp	r3, r8
	ldr	r3, [r4, #108]
	str	r6, [r4, #108]
	beq	.L1919
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r6, [r3]
.L1920:
	mov	r0, r7
.L1932:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L1933:
	mov	r6, r0
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L1917:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #108]
	mov	r0, r7
	str	r6, [r4, #108]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r6, [r3]
	b	.L1932
.L1919:
	add	r1, r4, #136
	str	r8, [r5, #36]
	mov	r0, #0
	str	r3, [r5, #40]
	add	r4, r4, #132
	str	r6, [r3]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L1920
	mov	r0, r4
	bl	__tasklet_schedule
	b	.L1920
	.fnend
	.size	rmnet_mux_smd_complete_epin, .-rmnet_mux_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_setup, %function
rmnet_smd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #168]
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r8, [r2, #24]
	cmp	r3, #0
	ldr	r7, [r8, #4]
	beq	.L1945
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r5, r1
	mov	r4, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1936
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1937
	cmp	r3, #8448
	beq	.L1950
.L1947:
	mvn	r6, #94
.L1934:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1937:
	cmp	r9, #0
	bne	.L1947
	ldrh	r3, [r1, #4]	@ unaligned
	add	r10, r0, #164
	mov	r0, r10
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r2, r4
	ldr	fp, [r2, #132]!
	cmp	fp, r2
	beq	.L1951
	ldm	fp, {r1, r2}
	mov	lr, #256
	mov	ip, #512
	mov	r0, r10
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [fp]
	str	ip, [fp, #4]
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r2}
	ldr	r0, [r7]
	bl	memcpy
	mov	r0, r10
	ldr	r6, [fp, #-4]
	bl	_raw_spin_lock
	ldr	r1, [r4, #116]
	add	r2, r4, #116
	cmp	r2, r1
	beq	.L1941
	ldr	r1, [r4, #120]
	str	fp, [r4, #120]
	str	r2, [fp]
	str	r1, [fp, #4]
	str	fp, [r1]
.L1942:
	mov	r0, r10
	bl	_raw_spin_unlock
	movw	r3, #:lower16:rmnet_txcommand_complete
	str	r4, [r7, #32]
	movt	r3, #:upper16:rmnet_txcommand_complete
	str	r3, [r7, #28]
	b	.L1943
.L1950:
	movw	r3, #:lower16:rmnet_smd_command_complete
	str	r0, [r7, #32]
	movt	r3, #:upper16:rmnet_smd_command_complete
	str	r3, [r7, #28]
.L1939:
	ldrb	r3, [r7, #26]	@ zero_extendqisi2
	str	r6, [r7, #4]
	mov	r1, r7
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r7, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L1934
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC59
	mov	r2, r6
	movt	r1, #:upper16:.LC59
	add	r0, r0, #32
	bl	dev_err
	b	.L1934
.L1936:
	ands	r1, r9, #1
	ldr	r0, [r0, #260]
	movne	r2, #0
	movne	r1, #2
	moveq	r2, #2
	bl	smd_tiocmset
	mov	r6, r0
.L1943:
	cmp	r6, #0
	bge	.L1939
	b	.L1934
.L1941:
	ldr	ip, [r4, #120]
	mov	r0, r9
	str	fp, [r4, #120]
	add	r1, r4, #268
	add	r5, r4, #264
	stm	fp, {r2, ip}
	str	fp, [ip]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L1942
	mov	r0, r5
	bl	__tasklet_schedule
	b	.L1942
.L1945:
	mvn	r6, #106
	b	.L1934
.L1951:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC103
	str	r9, [sp]
	ldr	r2, [sp, #20]
	movt	r1, #:upper16:.LC103
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	add	r0, r0, #32
	str	r2, [sp, #4]
	ldrb	r2, [r5]	@ zero_extendqisi2
	str	r6, [sp, #8]
	mvn	r6, #94
	bl	_dev_info
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L1934
	.fnend
	.size	rmnet_smd_setup, .-rmnet_smd_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_unbind, %function
rmnet_smd_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #284
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	tasklet_kill
	add	r0, r4, #264
	bl	tasklet_kill
	add	r0, r4, #348
	bl	tasklet_kill
	add	r0, r4, #328
	bl	tasklet_kill
	ldr	r0, [r4, #388]
	bl	flush_workqueue
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	ldr	r0, [r4, #388]
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	bl	destroy_workqueue
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3364]
	bl	debugfs_remove_recursive
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	rmnet_smd_unbind, .-rmnet_smd_unbind
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_exit, %function
ghsuart_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3368]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_ctrl_exit, .-ghsuart_ctrl_exit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_exit, %function
ghsuart_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3372]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_data_exit, .-ghsuart_data_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_cleanup, %function
diag_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR0
	str	r10, [sp, #24]
	movt	r8, #:upper16:.LANCHOR0
	str	lr, [sp, #28]
	ldr	r0, [r3, #3376]
	bl	debugfs_remove_recursive
	ldr	r5, [r8]
	cmp	r5, r8
	ldr	r4, [r5]
	beq	.L1956
	ldr	r6, .L1963
	mov	r10, #256
	mov	r9, #512
	b	.L1957
.L1959:
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	beq	.L1956
.L1960:
	mov	r5, r4
	mov	r4, r3
.L1957:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r7, r0
	mov	r0, r6
	mov	r1, r7
	cmp	r3, #0
	bne	.L1959
	ldrd	r2, [r5]
	sub	r0, r5, #4
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r5]
	str	r9, [r5, #4]
	bl	kfree
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	bne	.L1960
.L1956:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1964:
	.align	2
.L1963:
	.word	.LANCHOR1+3380
	.fnend
	.size	diag_function_cleanup, .-diag_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_cleanup, %function
rmnet_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #3384]
	str	lr, [sp, #12]
	cmp	r3, #0
	beq	.L1966
	ldr	r6, .L1973
	mov	r5, #0
.L1967:
	ldr	r0, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #24
	bl	kfree
	ldr	r3, [r4, #3384]
	cmp	r5, r3
	bcc	.L1967
.L1966:
	ldr	r0, [r4, #3388]
	bl	debugfs_remove_recursive
	mov	r3, #0
	ldr	r6, [sp, #8]
	str	r3, [r4, #3384]
	str	r3, [r4, #3392]
	str	r3, [r4, #3396]
	str	r3, [r4, #3400]
	str	r3, [r4, #3404]
	str	r3, [r4, #3408]
	str	r3, [r4, #3412]
	str	r3, [r4, #3416]
	str	r3, [r4, #3420]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1974:
	.align	2
.L1973:
	.word	.LANCHOR1+2536
	.fnend
	.size	rmnet_function_cleanup, .-rmnet_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_tx_tlet, %function
rmnet_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #140
	strd	r8, [sp, #16]
	mov	r8, #256
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #84]
	b	.L1979
.L1986:
	ldr	r0, [r5, #324]
	bl	smd_read_avail
	cmp	r0, r10
	mov	r0, r6
	blt	.L1975
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #140]
	mov	r3, r0
	mov	ip, #512
	mov	r0, r6
	mov	r1, r3
	cmp	r7, r4
	beq	.L1984
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	stm	r4, {r8, ip}
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r10
	ldr	r1, [r4, #-36]
	ldr	r0, [r5, #324]
	bl	smd_read
	str	r0, [r4, #-32]
	ldr	r0, [r5, #92]
	mov	r2, #32
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	mov	r0, r6
	bne	.L1985
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #428]
	mov	r1, r0
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r5, #428]
	bl	_raw_spin_unlock_irqrestore
.L1979:
	ldr	r0, [r5, #324]
	bl	smd_cur_packet_size
	subs	r10, r0, #0
	bne	.L1986
.L1975:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1985:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC147
	movt	r1, #:upper16:.LC147
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #144]
	mov	r1, r0
	mov	r0, r6
	str	r4, [r5, #144]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
.L1984:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_data_tx_tlet, .-rmnet_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_tx_tlet, %function
rmnet_control_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LC2
	str	lr, [sp, #32]
	ldr	r3, [r0, #84]
	.pad #12
	sub	sp, sp, #12
	movt	r10, #:upper16:.LC2
	str	r3, [sp]
.L1992:
	add	r9, r4, #116
.L1991:
	mov	r8, #256
.L1990:
	ldr	r0, [r4, #260]
	add	r5, r4, #172
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	beq	.L1987
	ldr	r0, [r4, #260]
	bl	smd_read_avail
	cmp	r0, r7
	mov	r0, r6
	blt	.L1987
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r4, #116]
	mov	r2, r0
	mov	ip, #512
	mov	r0, r6
	mov	r1, r2
	cmp	fp, r9
	beq	.L1999
	ldr	lr, [fp]
	ldr	r2, [fp, #4]
	str	r2, [lr, #4]
	str	lr, [r2]
	stm	fp, {r8, ip}
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	ldr	r1, [fp, #-8]
	ldr	r0, [r4, #260]
	bl	smd_read
	str	r0, [fp, #-4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #136]
	add	r2, r4, #132
	str	fp, [r4, #136]
	ldr	ip, [r4, #444]
	mov	r1, r0
	mov	r0, r6
	add	ip, ip, #1
	str	ip, [r4, #444]
	stm	fp, {r2, lr}
	str	fp, [lr]
	bl	_raw_spin_unlock_irqrestore
	ldr	r7, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r5]
	add	r2, r2, #1
	strex	r1, r2, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L1990
	mov	r1, #0
	mvn	r0, #94
	strb	r0, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r0, [r4, #104]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L1991
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	mov	r1, r10
	add	r0, r0, #32
	bl	dev_err
	b	.L1992
.L1987:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1999:
	ldr	r3, [sp]
	movw	r1, #:lower16:.LC148
	str	r2, [sp, #4]
	movt	r1, #:upper16:.LC148
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r2, [sp, #4]
	mov	r0, r6
	mov	r1, r2
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_control_tx_tlet, .-rmnet_control_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_tx_pull, %function
gsmd_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #52
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #48
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #20]
	mov	r0, r6
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2031
	ldr	r0, [r7]
	sub	r10, r5, #8
	ldr	r8, [r3, #88]
	cmp	r0, #0
	beq	.L2010
	ldr	r3, [r5, #-8]
	cmp	r3, r10
	bne	.L2015
	b	.L2010
.L2033:
	ldr	r4, [r5, #-8]
	cmp	r0, #2048
	movlt	r2, r0
	movge	r2, #2048
	ldm	r4, {r1, r3}
	sub	r9, r4, #36
	str	r3, [r1, #4]
	str	r1, [r3]
	mov	r3, #256
	ldr	r1, [r4, #-36]
	str	r3, [r4]
	mov	r3, #512
	str	r3, [r4, #4]
	ldr	r0, [r7]
	bl	smd_read
	str	r0, [r4, #-32]
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	fp, #0
	bne	.L2032
	ldr	r2, [r4, #-32]
	ldr	r3, [r5, #120]
	add	r3, r3, r2
	str	r3, [r5, #120]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L2014
	ldr	r3, [r5, #-8]
	cmp	r10, r3
	beq	.L2014
.L2015:
	bl	smd_read_avail
	cmp	r0, #0
	bne	.L2033
.L2014:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	bne	.L2010
.L2016:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L2010:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2016
	ldr	r3, [r5, #-8]
	cmp	r10, r3
	beq	.L2016
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r5
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3344]
	bl	queue_work_on
	b	.L2016
.L2031:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	sub	r3, r5, #52
	cmp	r3, #0
	beq	.L2000
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L2005
	b	.L2000
.L2006:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
.L2005:
	bl	smd_read_avail
	subs	r2, r0, #0
	mov	r1, #0
	bne	.L2006
.L2000:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2032:
	movw	r0, #:lower16:.LC149
	ldr	r3, [r5, #-52]
	str	fp, [sp]
	movt	r0, #:upper16:.LC149
	ldr	r1, .L2035
	ldr	r2, [sp, #12]
	bl	printk
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2034
	ldr	r3, [r5, #-8]
	str	r4, [r3, #4]
	stm	r4, {r3, r10}
	str	r4, [r5, #-8]
	b	.L2014
.L2034:
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2014
.L2036:
	.align	2
.L2035:
	.word	.LANCHOR2+916
	.fnend
	.size	gsmd_tx_pull, .-gsmd_tx_pull
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_tx_tlet, %function
rmnet_mux_smd_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #84]
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L2037
	mov	r4, r0
	add	r6, r0, #368
	add	r7, r0, #104
	mov	r8, #256
	b	.L2041
.L2052:
	ldr	r0, [r4, #128]
	bl	smd_read_avail
	cmp	r0, r10
	mov	r0, r6
	blt	.L2037
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #104]
	mov	r3, r0
	mov	ip, #512
	mov	r0, r6
	mov	r1, r3
	cmp	r7, r5
	beq	.L2050
	ldrd	r2, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	stm	r5, {r8, ip}
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r10
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #128]
	bl	smd_read
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r2, #32
	sub	r1, r5, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2051
	ldr	r2, [r4, #372]
	ldr	r3, [r4, #408]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #408]
	beq	.L2037
.L2041:
	ldr	r0, [r4, #128]
	bl	smd_cur_packet_size
	subs	r10, r0, #0
	bne	.L2052
.L2037:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2051:
	ldr	r3, [r9]
	movw	r1, #:lower16:.LC147
	mov	r2, r0
	movt	r1, #:upper16:.LC147
	add	r0, r3, #32
	bl	dev_err
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #108]
	mov	r1, r0
	mov	r0, r6
	str	r5, [r4, #108]
	str	r7, [r5]
	str	r3, [r5, #4]
	str	r5, [r3]
.L2050:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_smd_data_tx_tlet, .-rmnet_mux_smd_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect_work, %function
gsmd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #-56]
	ldr	r0, [r3]
	bl	smd_close
	ldr	r3, [r4, #-56]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gsmd_disconnect_work, .-gsmd_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disconnect_work, %function
rmnet_smd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	sub	r0, r0, #124
	str	r6, [sp, #8]
	mov	r5, #0
	str	lr, [sp, #12]
	bl	tasklet_kill
	sub	r0, r4, #144
	bl	tasklet_kill
	sub	r0, r4, #60
	bl	tasklet_kill
	sub	r0, r4, #80
	bl	tasklet_kill
	ldr	r0, [r4, #-148]
	bl	smd_close
	ldr	r0, [r4, #-84]
	str	r5, [r4, #-104]
	bl	smd_close
	mov	ip, r4
	str	r5, [r4, #-236]
	str	r5, [r4, #-40]
	ldr	r3, [ip, #-252]!
	cmp	r3, ip
	ldr	r2, [r3]
	beq	.L2056
	sub	r6, r4, #260
	mov	r1, r2
	mov	r5, #256
	mov	lr, #512
	b	.L2057
.L2063:
	mov	r1, r2
.L2057:
	ldr	r0, [r3, #4]
	cmp	ip, r1
	str	r0, [r2, #4]
	str	r2, [r0]
	stm	r3, {r5, lr}
	ldr	r2, [r4, #-256]
	str	r3, [r4, #-256]
	str	r6, [r3]
	str	r2, [r3, #4]
	str	r3, [r2]
	mov	r3, r1
	ldr	r2, [r1]
	bne	.L2063
.L2056:
	mov	ip, r4
	ldr	r3, [ip, #-284]!
	cmp	r3, ip
	ldr	r2, [r3]
	beq	.L2058
	sub	r6, r4, #300
	mov	r1, r2
	mov	r5, #256
	mov	lr, #512
	b	.L2059
.L2064:
	mov	r1, r2
.L2059:
	ldr	r0, [r3, #4]
	cmp	ip, r1
	str	r0, [r2, #4]
	str	r2, [r0]
	stm	r3, {r5, lr}
	ldr	r2, [r4, #-296]
	str	r3, [r4, #-296]
	str	r6, [r3]
	str	r2, [r3, #4]
	str	r3, [r2]
	mov	r3, r1
	ldr	r2, [r1]
	bne	.L2064
.L2058:
	mov	ip, r4
	ldr	r3, [ip, #-276]!
	cmp	r3, ip
	ldr	r2, [r3]
	beq	.L2060
	sub	r6, r4, #292
	mov	r1, r2
	mov	r5, #256
	mov	lr, #512
	b	.L2061
.L2065:
	mov	r1, r2
.L2061:
	ldr	r0, [r3, #4]
	cmp	ip, r1
	str	r0, [r2, #4]
	str	r2, [r0]
	stm	r3, {r5, lr}
	ldr	r2, [r4, #-288]
	str	r3, [r4, #-288]
	str	r6, [r3]
	str	r2, [r3, #4]
	str	r3, [r2]
	mov	r3, r1
	ldr	r2, [r1]
	bne	.L2065
.L2060:
	ldrb	r3, [r4, #-152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L2055
	sub	r0, r4, #232
	bl	platform_driver_unregister
	mov	r3, #0
	strb	r3, [r4, #-152]
.L2055:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_disconnect_work, .-rmnet_smd_disconnect_work
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	cleanup, %function
cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L2071
	b	platform_driver_unregister
.L2072:
	.align	2
.L2071:
	.word	.LANCHOR0+276
	.fnend
	.size	cleanup, .-cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_connect_work, %function
rmnet_smd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r2, r0, #132
	movw	r3, #:lower16:rmnet_smd_event_notify
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	mov	r1, r2
	movt	r6, #:upper16:.LANCHOR0
	str	r8, [sp, #16]
	mov	r4, r0
	str	lr, [sp, #20]
	movt	r3, #:upper16:rmnet_smd_event_notify
	ldr	r8, [r0, #-308]
	.pad #24
	sub	sp, sp, #24
	ldr	r0, [r6, #356]
	bl	smd_open
	subs	r2, r0, #0
	bne	.L2085
	ldr	r3, [r4, #-88]
	ands	r3, r3, #1
	bne	.L2077
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r7, r4, #80
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2079
.L2086:
	bl	schedule
.L2079:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #-88]
	tst	r3, #1
	beq	.L2086
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait
.L2077:
	sub	r2, r4, #68
	movw	r3, #:lower16:rmnet_smd_event_notify
	ldr	r0, [r6, #360]
	mov	r1, r2
	movt	r3, #:upper16:rmnet_smd_event_notify
	bl	smd_open
	cmp	r0, #0
	bne	.L2087
	ldr	r3, [r4, #-24]
	ands	r3, r3, #1
	bne	.L2081
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r6, r4, #16
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2083
.L2088:
	bl	schedule
.L2083:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #-24]
	tst	r3, #1
	beq	.L2088
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait
.L2081:
	mov	r3, #1
	sub	r0, r4, #392
	str	r3, [r4, #-224]
	bl	rmnet_smd_start_rx
.L2073:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2085:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC150
	movt	r1, #:upper16:.LC150
	add	r0, r0, #32
	bl	dev_err
	ldrb	r3, [r4, #-136]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L2073
	sub	r0, r4, #216
	bl	platform_driver_register
	subs	r3, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #-136]
	beq	.L2073
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC151
	movt	r1, #:upper16:.LC151
	ldr	r2, [r4, #-196]
	add	r0, r0, #32
	bl	dev_err
	b	.L2073
.L2087:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC152
	movt	r1, #:upper16:.LC152
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #-132]
	bl	smd_close
	b	.L2073
	.fnend
	.size	rmnet_smd_connect_work, .-rmnet_smd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_read_w, %function
grmnet_ctrl_smd_read_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #32]
	.pad #36
	sub	sp, sp, #36
	add	r10, r3, #108
	str	r3, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2090
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L2101:
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	ble	.L2090
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L2089
	mov	r5, #0
.L2099:
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	bne	.L2092
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2093
	ldr	r0, [r9, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r3, #:upper16:autoremove_wake_function
	sub	r6, r4, #28
	str	fp, [sp, #12]
	str	r1, [sp, #24]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #28]
	b	.L2095
.L2123:
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2094
	bl	schedule
.L2095:
	mov	r2, #2
	add	r1, sp, #12
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	beq	.L2123
.L2094:
	add	r1, sp, #12
	mov	r0, r6
	bl	finish_wait
.L2092:
	cmp	fp, #0
	ldr	r3, [r4, #-52]
	blt	.L2093
	cmp	r3, #0
	beq	.L2093
	add	r1, fp, r5
	cmp	r1, r7
	bgt	.L2124
	mov	r2, fp
	mov	r0, r3
	add	r1, r8, r5
	bl	smd_read
	subs	r2, r0, #0
	ble	.L2125
	add	r5, r5, r2
	cmp	r7, r5
	bgt	.L2099
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r5, r0
	ldr	r0, [r3, #104]
	cmp	r0, #0
	beq	.L2100
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L2100
	mov	r2, r7
	mov	r1, r8
	blx	r3
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
.L2100:
	mov	r0, r8
	bl	kfree
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	bne	.L2101
.L2090:
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L2089:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2093:
	movw	r0, #:lower16:.LC153
	ldr	r1, .L2126
	mov	r2, fp
	movt	r0, #:upper16:.LC153
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2089
.L2125:
	movw	r0, #:lower16:.LC155
	ldr	r1, .L2126
	movt	r0, #:upper16:.LC155
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2089
.L2124:
	movw	r0, #:lower16:.LC154
	ldr	r1, .L2126
	movt	r0, #:upper16:.LC154
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2089
.L2127:
	.align	2
.L2126:
	.word	.LANCHOR2+932
	.fnend
	.size	grmnet_ctrl_smd_read_w, .-grmnet_ctrl_smd_read_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_disable, %function
conn_gadget_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC156
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC156
	mov	r5, #1
	str	lr, [sp, #12]
	ldr	r1, [r4, #84]
	mov	r6, #0
	bl	printk
	ldr	r3, [r4, #92]
	str	r5, [r4, #104]
	ldr	r2, [r4, #100]
	str	r6, [r4, #100]
	mov	r0, r3
	str	r2, [r4, #212]
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, r6
	mov	r2, r5
	add	r0, r4, #200
	mov	r1, #3
	bl	__wake_up
	ldr	lr, [sp, #12]
	mov	r3, r6
	mov	r2, r5
	add	r0, r4, #144
	mov	r1, #3
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	conn_gadget_function_disable, .-conn_gadget_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_disable, %function
acc_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	r3, [r0, #100]	@ zero_extendqisi2
	ldr	r2, [r0, #92]
	and	r3, r3, #254
	orr	r3, r3, #2
	mov	r0, r2
	strb	r3, [r4, #100]
	ldr	r3, [r2, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
	.fnend
	.size	acc_function_disable, .-acc_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_out, %function
acc_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2520]
	str	r2, [r0, #1696]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	bne	.L2133
	ldrb	r3, [r0, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r0, #100]
.L2133:
	add	r0, r0, #1664
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	acc_complete_out, .-acc_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_ctrlrequest, %function
mtp_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r1, [r2]	@ zero_extendqisi2
	ldrh	r6, [r2, #2]	@ unaligned
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r1, #128
	beq	.L2155
	and	r0, r1, #96
	ldrh	r3, [r2, #4]	@ unaligned
	cmp	r0, #64
	beq	.L2156
	cmp	r0, #32
	bne	.L2151
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r7, [r2, #2532]
	cmp	r1, #100
	beq	.L2157
	cmp	r1, #103
	bne	.L2151
	orrs	r3, r3, r6
	bne	.L2151
	ldr	r3, [r4, #4]
	mov	r6, #4
	add	r9, r7, #88
	mov	r0, r9
	ldr	r8, [r3]
	strh	r6, [r8]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r7, #104]
	movw	r2, #8217
	movw	r3, #8193
	mov	r1, r0
	mov	r0, r9
	cmp	ip, #3
	moveq	r3, r2
	strh	r3, [r8, #2]	@ movhi
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, r6
	mov	r3, r6
	movls	r5, #0
	movhi	r5, #1
.L2137:
	ldr	r1, [r4, #4]
	mov	r2, #32
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfi	r0, r5, #1, #1
	strb	r0, [r1, #26]
	ldr	r1, [r4, #4]
	str	r3, [r1, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2158
.L2134:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2156:
	ldrb	r2, [r2, #1]	@ zero_extendqisi2
	cmp	r2, #1
	bne	.L2151
	tst	r1, #128
	beq	.L2151
	sub	r3, r3, #4
	cmp	r3, #1
	bhi	.L2151
	ldr	r1, .L2161
	cmp	r5, #40
	ldr	r3, [r4, #4]
	movcc	r6, r5
	movcs	r6, #40
.L2154:
	ldr	r0, [r3]
	mov	r2, r6
	bl	memcpy
	cmp	r6, r5
	mov	r3, r6
	movge	r5, #0
	movlt	r5, #1
	b	.L2137
.L2157:
	orrs	r6, r3, r6
	beq	.L2159
.L2151:
	mvn	r6, #94
	b	.L2134
.L2155:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	bne	.L2151
	lsr	r3, r6, #8
	cmp	r3, #3
	bne	.L2151
	uxtb	r6, r6
	cmp	r6, #238
	bne	.L2151
	cmp	r5, #18
	ldr	r1, .L2161+4
	movcc	r6, r5
	movcs	r6, #18
	ldr	r3, [r4, #4]
	b	.L2154
.L2158:
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC157
	movt	r1, #:upper16:.LC157
	ldr	r2, .L2161+8
	add	r0, r0, #32
	bl	dev_err
	b	.L2134
.L2159:
	add	r8, r7, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #104]
	mov	r9, r0
	cmp	r3, #2
	beq	.L2160
.L2140:
	mov	r1, r9
	mov	r0, r8
	mov	r6, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r3, r5
	mov	r5, #0
	b	.L2137
.L2160:
	mov	r10, #3
	mov	r3, r6
	mov	r1, r10
	add	r0, r7, #132
	mov	r2, #1
	str	r10, [r7, #104]
	bl	__wake_up
	mov	r3, r6
	mov	r1, r10
	add	r0, r7, #144
	mov	r2, #1
	bl	__wake_up
	b	.L2140
.L2162:
	.align	2
.L2161:
	.word	.LANCHOR0+384
	.word	.LANCHOR0+364
	.word	.LANCHOR2+956
	.fnend
	.size	mtp_function_ctrlrequest, .-mtp_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_disable, %function
mtp_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r5, [r0, #104]
	ldr	r0, [r0, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r6, [sp, #8]
	mov	r3, r5
	add	r0, r4, #132
	mov	r2, #1
	ldrd	r4, [sp]
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	mtp_function_disable, .-mtp_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_out, %function
mtp_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2532]
	str	r2, [r0, #176]
	ldr	r3, [r1, #44]
	add	r0, r0, #132
	mov	r2, #1
	mov	r1, #3
	cmp	r3, #0
	movne	r3, #4
	strne	r3, [r0, #-28]
	mov	r3, #0
	b	__wake_up
	.fnend
	.size	mtp_complete_out, .-mtp_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_setup, %function
ccid_function_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r0, #20]
	ldr	r2, [r0, #96]
	ldrh	r3, [r1, #6]	@ unaligned
	ldr	r4, [ip, #24]
	cmp	r2, #0
	ldr	lr, [r4, #4]
	beq	.L2176
	ldrh	r2, [r1]	@ unaligned
	mov	ip, r0
	movw	r0, #41218
	rev16	r2, r2
	uxth	r2, r2
	cmp	r2, r0
	beq	.L2172
	movw	r0, #41219
	cmp	r2, r0
	beq	.L2173
	movw	r0, #8449
	cmp	r2, r0
	beq	.L2183
.L2180:
	mvn	r4, #94
.L2171:
.L2170:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2173:
	ldr	r2, [lr, #4]
	cmp	r3, r2
	bhi	.L2180
	movw	r2, #:lower16:.LANCHOR0
	ldr	r1, [lr]
	cmp	r3, #4
	movt	r2, #:upper16:.LANCHOR0
	movcs	r3, #4
	ldr	r2, [r2, #443]	@ unaligned
	str	r2, [r1]
.L2175:
	str	r3, [lr, #4]
	ldr	r3, [r4]
	mov	r1, lr
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2170
	movw	r0, #:lower16:.LC158
	mov	r1, r4
	movt	r0, #:upper16:.LC158
	bl	printk
	b	.L2170
.L2183:
	cmp	r3, #0
	bne	.L2180
	ldrh	lr, [r1, #2]	@ unaligned
	mov	r1, #1
	add	r0, ip, #128
	mov	r2, r1
	mov	r4, r3
	strb	r1, [ip, #140]
	lsr	r5, lr, #8
	strb	lr, [ip, #141]
	str	r1, [ip, #144]
	mov	r1, #3
	strb	r5, [ip, #142]
	strb	r3, [ip, #143]
	bl	__wake_up
	b	.L2170
.L2172:
	ldr	r2, [lr, #4]
	cmp	r3, r2
	bhi	.L2180
	movw	r2, #:lower16:.LANCHOR0
	ldr	r1, [lr]
	cmp	r3, #4
	movt	r2, #:upper16:.LANCHOR0
	movcs	r3, #4
	ldr	r2, [r2, #434]	@ unaligned
	str	r2, [r1]
	b	.L2175
.L2176:
	mvn	r4, #106
	b	.L2170
	.fnend
	.size	ccid_function_setup, .-ccid_function_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_out, %function
ccid_bulk_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	movw	r3, #:lower16:.LANCHOR1
	mov	ip, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2236]
	cmp	r2, #0
	mov	r2, ip
	movne	r3, #1
	add	r0, r1, #160
	str	ip, [r1, #188]
	strne	r3, [r1, #148]
	mov	r3, #0
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_out, .-ccid_bulk_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_disable, %function
adb_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r6, #1
	str	lr, [sp, #12]
	str	r5, [r0, #100]
	strb	r5, [r0, #160]
	ldr	r0, [r0, #92]
	str	r6, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #12]
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #128
	mov	r1, #3
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	adb_function_disable, .-adb_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_out, %function
adb_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3424]
	str	r2, [r0, #156]
	ldr	r3, [r1, #44]
	add	r0, r0, #128
	mov	r1, #3
	cmp	r3, #0
	cmnne	r3, #104
	mov	r3, #0
	strne	r2, [r0, #-24]
	mov	r2, #1
	b	__wake_up
	.fnend
	.size	adb_complete_out, .-adb_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_command_complete, %function
rmnet_mux_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r5, #84]
	cmp	r2, #0
	blt	.L2210
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r1
	ldr	r7, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L2204
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L2199
.L2198:
	movw	r1, #32800
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	beq	.L2211
	add	r8, r5, #368
	str	r7, [r6, #4]
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r5, #356]
	cmp	r3, #0
	bne	.L2212
	mov	r0, r8
	bl	_raw_spin_unlock
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r3, [r5, #424]
	ldr	r1, .L2214
	ldr	r0, .L2214+4
	add	r3, r3, #1
	str	r3, [r5, #424]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L2213
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2204:
	mov	r6, #16
	b	.L2198
.L2210:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC159
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC159
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	r0, r0, #32
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err
.L2212:
	mov	r9, r6
	ldr	r1, [r4]
	mov	r2, r7
	ldr	r0, [r9], #8
	bl	memcpy
	ldr	r3, [r5, #320]
	add	r2, r5, #316
	mov	r0, r8
	str	r9, [r5, #320]
	strd	r2, [r6, #8]
	str	r9, [r3]
	ldr	r3, [r5, #336]
	add	r3, r3, #1
	str	r3, [r5, #336]
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	add	r0, r5, #324
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L2211:
	mov	r0, r6
	bl	kfree
.L2199:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC160
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC160
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	r0, r0, #32
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err
.L2213:
	movw	r0, #:lower16:.LC161
	ldr	r2, [r5, #424]
	ldr	r1, .L2214
	movt	r0, #:upper16:.LC161
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L2215:
	.align	2
.L2214:
	.word	.LANCHOR2+972
	.word	.LANCHOR0+480
	.fnend
	.size	rmnet_mux_command_complete, .-rmnet_mux_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_setup, %function
acm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r0, #8482
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r1]	@ unaligned
	ldr	ip, [r5, #20]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r2, [r1, #6]	@ unaligned
	rev16	r3, r3
	uxth	r3, r3
	ldr	r7, [ip, #24]
	cmp	r3, r0
	ldr	r4, [r7, #4]
	beq	.L2218
	movw	r1, #41249
	cmp	r3, r1
	beq	.L2219
	movw	r1, #8480
	cmp	r3, r1
	beq	.L2229
.L2226:
	mvn	r4, #94
.L2216:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2229:
	cmp	r2, #7
	bne	.L2226
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L2226
	ldr	r1, [r7]
	mov	r6, r2
	movw	r3, #:lower16:acm_complete_set_line_coding
	movt	r3, #:upper16:acm_complete_set_line_coding
	ldr	r2, [r1, #4]
	str	r5, [r2]
	str	r3, [r4, #28]
.L2221:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r6, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2216
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC162
	mov	r3, r4
	ldrb	r2, [r5, #146]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC162
	add	r0, r0, #32
	bl	dev_err
	b	.L2216
.L2219:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L2226
	cmp	r2, #7
	add	r1, r5, #160
	ldr	r0, [r4]
	movcc	r6, r2
	movcs	r6, #7
	mov	r2, r6
	bl	memcpy
	b	.L2221
.L2218:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L2226
	ldrh	lr, [r1, #2]	@ unaligned
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #1
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, r3
	mov	r1, r3
	add	r0, ip, #2224
	str	r3, [ip, #2220]
	mov	r3, #0
	strh	lr, [r5, #168]	@ movhi
	mov	r6, r3
	str	lr, [ip, #3428]
	bl	__wake_up
	b	.L2221
	.fnend
	.size	acm_setup, .-acm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_event_notify, %function
rmnet_smd_event_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #48]
	beq	.L2232
	cmp	r1, #3
	beq	.L2233
	cmp	r1, #1
	beq	.L2248
.L2230:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2248:
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #168]
	cmp	r3, #0
	beq	.L2230
	cmp	r5, #0
	ldr	r0, [r0]
	bne	.L2249
.L2236:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2230
	add	r4, r4, #4
	mov	r0, #0
	add	r1, r4, #4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L2230
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2233:
	add	r1, r0, #44
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2232:
	add	r1, r0, #44
	mov	r0, #0
	bl	_set_bit
	ldr	r6, [sp, #8]
	add	r0, r4, #52
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2249:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2237
.L2247:
	ldr	r0, [r4]
	b	.L2236
.L2237:
	add	r1, r4, #28
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #24
	bne	.L2247
	bl	__tasklet_schedule
	b	.L2247
	.fnend
	.size	rmnet_smd_event_notify, .-rmnet_smd_event_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_notify, %function
grmnet_ctrl_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L2252
	cmp	r1, #3
	beq	.L2253
	cmp	r1, #1
	beq	.L2284
.L2251:
	add	r0, r4, #24
	mov	r3, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L2284:
	ldr	r0, [r0]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2255
	ldr	r2, [r4, #28]
	add	r3, r4, #28
	cmp	r2, r3
	beq	.L2285
.L2255:
	ldr	r0, [r4]
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L2251
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #68
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3432]
	bl	queue_work_on
	b	.L2251
.L2253:
	add	r1, r0, #8
	mov	r0, #0
	bl	_clear_bit
	cmp	r4, #0
	beq	.L2258
	ldr	r0, [r4, #104]
	cmp	r0, #0
	beq	.L2258
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L2258
	blx	r3
.L2258:
	add	r9, r4, #108
	add	r6, r4, #40
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #40]
	mov	r10, r0
	cmp	r3, r6
	beq	.L2259
	mov	r8, #256
	mov	r7, #512
.L2260:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r4, #40]
	cmp	r3, r6
	bne	.L2260
.L2259:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L2251
.L2252:
	add	r1, r0, #8
	mov	r0, #0
	bl	_set_bit
	cmp	r4, #0
	beq	.L2251
	ldr	r0, [r4, #104]
	cmp	r0, #0
	beq	.L2251
	ldr	r3, [r0, #108]
	cmp	r3, #0
	beq	.L2251
	blx	r3
	b	.L2251
.L2285:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3432]
	bl	queue_work_on
	b	.L2255
	.fnend
	.size	grmnet_ctrl_smd_notify, .-grmnet_ctrl_smd_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_disconnect_w, %function
gctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #52]
	tst	r3, #1
	bne	.L2288
	bx	lr
.L2288:
	add	r1, r0, #52
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	gctrl_disconnect_w, .-gctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect_w, %function
ghsic_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #76]
	tst	r3, #1
	bne	.L2291
	bx	lr
.L2291:
	add	r1, r0, #76
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	ghsic_data_disconnect_w, .-ghsic_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_remove, %function
ghsuart_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	str	r6, [sp, #8]
	movt	r2, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1880]
	add	r6, r4, #8
	add	r5, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r4, #12]
	mov	r1, r0
	mov	r0, r6
	cmp	r4, #0
	beq	.L2300
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L2295
	mov	r0, r4
	blx	r3
.L2295:
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit
	mov	r1, r5
	mov	r0, #2
	bl	_clear_bit
.L2294:
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2300:
	bl	_raw_spin_unlock_irqrestore
	b	.L2294
	.fnend
	.size	ghsuart_ctrl_remove, .-ghsuart_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_trigger, %function
f_midi_out_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #28]
	cmp	r1, #0
	ldr	r0, [r0, #12]
	ldr	r1, [r3, #200]
	add	r1, r1, #296
	bne	.L2303
	b	_clear_bit
.L2303:
	b	_set_bit
	.fnend
	.size	f_midi_out_trigger, .-f_midi_out_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_notify, %function
rmnet_mux_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #176]
	beq	.L2306
	cmp	r1, #3
	beq	.L2307
	cmp	r1, #1
	beq	.L2322
.L2304:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2322:
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L2304
	cmp	r5, #0
	ldr	r0, [r0, #128]
	bne	.L2323
.L2310:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2304
	add	r1, r4, #136
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #132
	bne	.L2304
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2307:
	add	r1, r0, #172
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2306:
	add	r1, r0, #172
	mov	r0, #0
	bl	_set_bit
	ldr	r6, [sp, #8]
	add	r0, r4, #180
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2323:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2311
.L2321:
	ldr	r0, [r4, #128]
	b	.L2310
.L2311:
	add	r1, r4, #156
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #152
	bne	.L2321
	bl	__tasklet_schedule
	b	.L2321
	.fnend
	.size	rmnet_mux_smd_notify, .-rmnet_mux_smd_notify
	.section	.init.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_init, %function
gsmd_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC163
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC163
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r3
	str	r0, [r3, #3436]
	bhi	.L2326
	ldr	ip, .L2333
	mov	r2, r0
	movw	r0, #:lower16:.LC164
	movt	r0, #:upper16:.LC164
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3440]
	beq	.L2327
	cmn	r0, #4096
	bls	.L2326
.L2327:
	ldr	r0, [r4, #3436]
	bl	debugfs_remove
.L2326:
	mov	r3, #0
	mov	r0, r3
	strb	r3, [r4, #3444]
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2334:
	.align	2
.L2333:
	.word	.LANCHOR2+1000
	.fnend
	.size	gsmd_ctrl_init, .-gsmd_ctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_exit, %function
gsmd_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3440]
	bl	debugfs_remove
	ldr	r0, [r4, #3436]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gsmd_ctrl_exit, .-gsmd_ctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_init, %function
gctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC165
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC165
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3448]
	bhi	.L2339
	ldr	ip, .L2346
	mov	r2, r0
	movw	r0, #:lower16:.LC164
	mov	r4, r3
	movt	r0, #:upper16:.LC164
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3452]
	beq	.L2340
	cmn	r0, #4096
	bls	.L2339
.L2340:
	ldr	r0, [r4, #3448]
	bl	debugfs_remove
.L2339:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2347:
	.align	2
.L2346:
	.word	.LANCHOR2+1108
	.fnend
	.size	gctrl_init, .-gctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_exit, %function
gctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3452]
	bl	debugfs_remove
	ldr	r0, [r4, #3448]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gctrl_exit, .-gctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_init, %function
ghsic_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC166
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	mov	r1, #0
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC166
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3456]
	bhi	.L2352
	ldr	r5, .L2364
	mov	r2, r0
	movw	r0, #:lower16:.LC164
	mov	r4, r3
	movt	r0, #:upper16:.LC164
	mov	r3, #0
	mov	r1, #292
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3460]
	beq	.L2355
	cmn	r0, #4096
	ldr	r2, [r4, #3456]
	bhi	.L2355
	add	r5, r5, #108
	movw	r0, #:lower16:.LC167
	movt	r0, #:upper16:.LC167
	mov	r3, #0
	mov	r1, #420
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3464]
	beq	.L2355
	cmn	r0, #4096
	bls	.L2352
.L2355:
	ldr	r0, [r4, #3456]
	bl	debugfs_remove
.L2352:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L2365:
	.align	2
.L2364:
	.word	.LANCHOR2+1216
	.fnend
	.size	ghsic_data_init, .-ghsic_data_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_exit, %function
ghsic_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3460]
	bl	debugfs_remove
	ldr	r0, [r4, #3464]
	bl	debugfs_remove
	ldr	r0, [r4, #3456]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	ghsic_data_exit, .-ghsic_data_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_init, %function
ghsuart_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC168
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC168
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3368]
	beq	.L2372
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2372
	ldr	ip, .L2378
	movw	r0, #:lower16:.LC164
	mov	r4, r3
	movt	r0, #:upper16:.LC164
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2370
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2368
.L2370:
	ldr	r0, [r4, #3368]
	bl	debugfs_remove
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r4, #3368]
	b	.L2368
.L2372:
	mvn	r0, #18
.L2368:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2379:
	.align	2
.L2378:
	.word	.LANCHOR2+1432
	.fnend
	.size	ghsuart_ctrl_init, .-ghsuart_ctrl_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_init, %function
ghsuart_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC169
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC169
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3372]
	beq	.L2384
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2384
	ldr	ip, .L2390
	movw	r0, #:lower16:.LC164
	mov	r4, r3
	movt	r0, #:upper16:.LC164
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2382
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2380
.L2382:
	ldr	r0, [r4, #3372]
	bl	debugfs_remove
	mvn	r0, #18
	b	.L2380
.L2384:
	mvn	r0, #18
.L2380:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2391:
	.align	2
.L2390:
	.word	.LANCHOR2+1540
	.fnend
	.size	ghsuart_data_init, .-ghsuart_data_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_init, %function
diag_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2401
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC170
	str	lr, [sp, #4]
	movt	r0, #:upper16:.LC170
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	str	r3, [r4, #3468]
	str	r3, [r4, #3472]
	bl	debugfs_create_dir
	cmp	r0, #0
	str	r0, [r4, #3376]
	beq	.L2394
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2394
	ldr	ip, .L2401+4
	movw	r0, #:lower16:.LC164
	mov	r3, #0
	movt	r0, #:upper16:.LC164
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2396
	cmn	r0, #4096
	bhi	.L2396
.L2394:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2396:
	ldr	r0, [r4, #3376]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r4, #3376]
	b	.L2394
.L2402:
	.align	2
.L2401:
	.word	.LANCHOR1+3468
	.word	.LANCHOR2+1648
	.fnend
	.size	diag_function_init, .-diag_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_free_buf, %function
rmnet_sdio_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #188
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r7, #0
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r0, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave
	str	r7, [r4, #328]
	str	r7, [r4, #356]
	str	r7, [r4, #360]
	str	r7, [r4, #364]
	str	r7, [r4, #368]
	str	r7, [r4, #372]
	ldr	r3, [r8, #132]!
	str	r0, [sp, #4]
	cmp	r3, r8
	ldr	r2, [r3]
	beq	.L2404
	mov	fp, r2
	mov	r10, #256
	mov	r9, #512
	b	.L2405
.L2416:
	mov	fp, r2
.L2405:
	ldr	ip, [r3, #4]
	mov	r6, r3
	mov	r0, #0
	str	ip, [r2, #4]
	str	r2, [ip]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #140]
	sub	r3, r3, #1
	str	r3, [r4, #140]
	str	r7, [r6, #-36]!
	ldr	r5, [r4, #88]
	bl	kfree
	mov	r1, r6
	ldr	r2, [r5, #8]
	mov	r0, r5
	ldr	r3, [r2, #12]
	blx	r3
	cmp	r8, fp
	mov	r3, fp
	ldr	r2, [fp]
	bne	.L2416
.L2404:
	mov	r7, r4
	ldr	r3, [r7, #160]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L2406
	mov	fp, r2
	mov	r10, #256
	mov	r9, #512
	mov	r8, #0
	b	.L2407
.L2417:
	mov	fp, r2
.L2407:
	ldr	ip, [r3, #4]
	mov	r5, r3
	mov	r0, #0
	str	ip, [r2, #4]
	str	r2, [ip]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #168]
	sub	r3, r3, #1
	str	r3, [r4, #168]
	str	r8, [r5, #-36]!
	ldr	r6, [r4, #92]
	bl	kfree
	mov	r1, r5
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	cmp	r7, fp
	mov	r3, fp
	ldr	r2, [fp]
	bne	.L2417
.L2406:
	mov	r7, r4
	ldr	r3, [r7, #108]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L2408
	mov	fp, r2
	mov	r9, #256
	mov	r8, #512
	b	.L2409
.L2418:
	mov	fp, r2
.L2409:
	ldr	r1, [r3, #4]
	mov	r10, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r4, #116]
	sub	r3, r3, #1
	str	r3, [r4, #116]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r7, fp
	mov	r3, fp
	ldr	r2, [fp]
	bne	.L2418
.L2408:
	mov	r7, r4
	ldr	r3, [r7, #120]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L2410
	mov	fp, r2
	mov	r9, #256
	mov	r8, #512
	b	.L2411
.L2419:
	mov	fp, r2
.L2411:
	ldr	r1, [r3, #4]
	mov	r10, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r4, #128]
	sub	r3, r3, #1
	str	r3, [r4, #128]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r7, fp
	mov	r3, fp
	ldr	r2, [fp]
	bne	.L2419
.L2410:
	ldr	r3, [r4, #144]
	add	r7, r4, #144
	cmp	r7, r3
	beq	.L2412
	mov	r8, #0
	b	.L2413
.L2429:
	ldr	r2, [r4, #152]
	sub	r2, r2, #1
	str	r2, [r4, #152]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #144]
	cmp	r3, r7
	beq	.L2412
.L2413:
	subs	r0, r3, #0
	bne	.L2429
.L2412:
	ldr	r3, [r4, #172]
	add	r7, r4, #172
	cmp	r3, r7
	beq	.L2414
	mov	r8, #0
	b	.L2415
.L2430:
	ldr	r2, [r4, #180]
	sub	r2, r2, #1
	str	r2, [r4, #180]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #172]
	cmp	r3, r7
	beq	.L2414
.L2415:
	subs	r0, r3, #0
	bne	.L2430
.L2414:
	ldr	r7, [r4, #100]
	ldr	r4, [r4, #96]
	ldr	r0, [r7]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldrd	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_sdio_free_buf, .-rmnet_sdio_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disable, %function
rmnet_sdio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #192]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r4
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	bl	rmnet_sdio_free_buf
	add	r2, r4, #204
	ldr	r1, [r4, #200]
	mov	r0, #4
	bl	queue_work_on
	str	r5, [r4, #332]
	add	r2, r4, #336
	ldr	r1, [r4, #200]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
	.fnend
	.size	rmnet_sdio_disable, .-rmnet_sdio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epin, %function
rmnet_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r2, [r1, #44]
	ldr	r6, [r1, #32]
	cmn	r2, #104
	beq	.L2438
	cmp	r2, #0
	beq	.L2438
	cmn	r2, #108
	beq	.L2438
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC145
	movt	r1, #:upper16:.LC145
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2438:
	add	r7, r4, #188
	add	r8, r4, #132
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #136]
	add	r2, r5, #36
	mov	r0, r7
	str	r2, [r4, #136]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #140]
	add	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #192]
	cmp	r3, #0
	beq	.L2436
	ldr	r3, [r4, #320]
	tst	r3, #2
	bne	.L2471
.L2436:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2471:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #132]
	str	r0, [sp, #8]
	cmp	r8, r3
	beq	.L2441
	ldr	r5, [r4, #144]
	add	r3, r4, #144
	str	r3, [sp, #4]
	cmp	r5, r3
	beq	.L2441
	mov	r9, #0
	b	.L2443
.L2473:
	ldr	r3, [r4, #152]
	sub	r3, r3, #1
	str	r3, [r4, #152]
	ldrd	r2, [r5]
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #132]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	sub	r10, r6, #36
	ldrd	r2, [r6]
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	str	r1, [r6, #-32]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #512
	strd	r2, [r6]
	ldr	r3, [r4, #140]
	sub	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, r10
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L2472
	ldr	r2, [r4, #132]
	ldr	r3, [r4, #356]
	cmp	r8, r2
	add	r3, r3, #1
	str	r3, [r4, #356]
	beq	.L2441
	ldr	r5, [r4, #144]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L2441
.L2443:
	cmp	r5, #0
	mov	r0, r7
	bne	.L2473
.L2441:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2472:
	ldr	r0, [r4, #192]
	cmp	r0, #0
	beq	.L2446
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC147
	mov	r2, fp
	movt	r1, #:upper16:.LC147
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #136]
	str	r6, [r4, #136]
	str	r8, [r6]
	str	r3, [r6, #4]
	str	r6, [r3]
	ldr	r3, [r4, #140]
	ldr	r2, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #140]
	ldr	r3, [sp, #4]
	str	r2, [r5]
	str	r3, [r5, #4]
	str	r5, [r4, #144]
	str	r5, [r2, #4]
	ldr	r3, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #152]
	b	.L2441
.L2446:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L2441
	.fnend
	.size	rmnet_sdio_complete_epin, .-rmnet_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_data_rx_work, %function
rmnet_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r8, [r0, #-152]
	ldr	r3, [r0, #84]
	tst	r3, #2
	beq	.L2481
	sub	r6, r0, #48
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r7, r0
	ldr	r5, [r3, #-64]!
	cmp	r5, r3
	beq	.L2476
	cmp	r5, #0
	beq	.L2476
	ldr	r3, [r4, #-56]
	mov	ip, #0
	mov	r1, r0
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #-56]
	ldrd	r2, [r5]
	str	ip, [r5]
	str	ip, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC172
	movt	r1, #:upper16:.LC172
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r5
	bl	dev_kfree_skb_any
.L2476:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L2481:
	movw	r0, #:lower16:.LC171
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC171
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L2482
	b	printk
.L2483:
	.align	2
.L2482:
	.word	.LANCHOR2+1756
	.fnend
	.size	rmnet_sdio_data_rx_work, .-rmnet_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost, %function
gbam_write_data_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	str	r0, [sp, #12]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L2501
	ldr	r2, [r6, #28]
	add	r1, r6, #28
	ldr	r9, [r3, #84]
	str	r1, [sp]
	cmp	r2, r1
	beq	.L2487
	ldr	r5, [r6, #36]
	add	r3, r6, #36
	str	r3, [sp, #8]
	cmp	r5, r3
	beq	.L2487
	movw	r3, #:lower16:.LANCHOR0
	movw	r8, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR1
	mov	r10, #0
	str	r3, [sp, #4]
	b	.L2489
.L2503:
	ldr	r2, [r6, #44]
	mov	ip, #256
	mov	r0, r7
	ldr	r3, [r8, #3476]
	sub	r2, r2, #1
	add	r3, r3, lr
	str	r2, [r6, #44]
	ldm	r5, {r1, r2}
	str	r10, [r5]
	str	r10, [r5, #4]
	str	r3, [r8, #3476]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r4, [r6, #28]
	mov	r1, #512
	str	r5, [r4, #-4]
	ldr	r2, [r5, #172]
	sub	fp, r4, #36
	str	r2, [r4, #-36]
	ldr	r2, [r5, #80]
	str	r2, [r4, #-32]
	ldr	r2, [sp, #4]
	ldr	r2, [r2, #504]
	cmp	r3, r2
	moveq	lr, #0
	streq	r10, [r8, #3476]
	ldrb	r3, [r4, #-10]	@ zero_extendqisi2
	bfi	r3, lr, #0, #1
	ldm	r4, {r2, lr}
	uxtb	r3, r3
	orr	r3, r3, #2
	strb	r3, [r4, #-10]
	str	lr, [r2, #4]
	str	r2, [lr]
	str	ip, [r4]
	str	r1, [r4, #4]
	bl	_raw_spin_unlock
	ldr	r3, [r9, #8]
	mov	r1, fp
	mov	r2, #32
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L2502
	ldr	r2, [r6, #28]
	ldr	r3, [r6, #264]
	ldr	r1, [sp]
	add	r3, r3, #1
	cmp	r2, r1
	str	r3, [r6, #264]
	beq	.L2487
	ldr	r5, [r6, #36]
	ldr	r3, [sp, #8]
	cmp	r5, r3
	beq	.L2487
.L2489:
	cmp	r5, #0
	mov	lr, #1
	bne	.L2503
.L2487:
	ldr	r1, [sp, #12]
.L2501:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2502:
	movw	r0, #:lower16:.LC173
	mov	r2, fp
	ldr	r1, .L2504
	movt	r0, #:upper16:.LC173
	bl	printk
	ldr	r3, [r6, #28]
	mov	r0, r5
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp]
	str	r3, [r4, #4]
	str	r4, [r6, #28]
	bl	dev_kfree_skb_any
	b	.L2487
.L2505:
	.align	2
.L2504:
	.word	.LANCHOR2+1780
	.fnend
	.size	gbam_write_data_tohost, .-gbam_write_data_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost_w, %function
gbam_write_data_tohost_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #-20]
	b	gbam_write_data_tohost
	.fnend
	.size	gbam_write_data_tohost_w, .-gbam_write_data_tohost_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_free_buffers, %function
gbam_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r5, r0, #4
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #8
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r4, #0
	beq	.L2508
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L2508
	ldr	r3, [r4, #28]
	add	r8, r4, #28
	ldr	fp, [r2, #84]
	cmp	r8, r3
	beq	.L2509
	mov	r10, #256
	mov	r9, #512
.L2510:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, fp
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #28]
	cmp	r8, r3
	bne	.L2510
	ldr	r2, [r4, #12]
.L2509:
	ldr	r3, [r4, #52]
	add	r8, r4, #52
	ldr	fp, [r2, #88]
	cmp	r8, r3
	beq	.L2511
	mov	r10, #256
	mov	r9, #512
.L2512:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, fp
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #52]
	cmp	r8, r3
	bne	.L2512
.L2511:
	ldr	r3, [r4, #36]
	add	r8, r4, #36
	cmp	r8, r3
	beq	.L2513
	mov	r9, #0
	b	.L2514
.L2533:
	ldr	r2, [r4, #44]
	sub	r2, r2, #1
	str	r2, [r4, #44]
	ldm	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #36]
	cmp	r3, r8
	beq	.L2513
.L2514:
	subs	r0, r3, #0
	bne	.L2533
.L2513:
	ldr	r3, [r4, #60]
	add	r8, r4, #60
	cmp	r3, r8
	beq	.L2508
	mov	r9, #0
	b	.L2515
.L2534:
	ldr	r2, [r4, #68]
	sub	r2, r2, #1
	str	r2, [r4, #68]
	ldm	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #60]
	cmp	r3, r8
	beq	.L2508
.L2515:
	subs	r0, r3, #0
	bne	.L2534
.L2508:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gbam_free_buffers, .-gbam_free_buffers
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epin_complete, %function
gbam_epin_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r2, [r1, #44]
	ldr	r7, [r1, #32]
	cmn	r2, #104
	beq	.L2537
	cmp	r2, #0
	bne	.L2551
.L2538:
	mov	r0, r7
	bl	dev_kfree_skb_any
	cmp	r6, #0
	beq	.L2535
	add	r5, r6, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r6, #32]
	add	r2, r4, #36
	add	r1, r6, #28
	mov	r0, r5
	str	r2, [r6, #32]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r6, #96
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, [r3, #3480]
	b	queue_work_on
.L2551:
	cmn	r2, #108
	bne	.L2549
.L2537:
	mov	r0, r7
	bl	dev_kfree_skb_any
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L2535:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2549:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L2552
	movt	r0, #:upper16:.LC174
	bl	printk
	b	.L2538
.L2553:
	.align	2
.L2552:
	.word	.LANCHOR2+1804
	.fnend
	.size	gbam_epin_complete, .-gbam_epin_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_receive, %function
ghsic_data_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L2555
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L2555
	add	r6, r4, #48
	add	r7, r4, #136
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #36]
	add	r1, r4, #32
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	mov	r8, r0
	stm	r5, {r1, r3}
	str	r5, [r3]
	ldr	r3, [r4, #40]
	ldr	r1, [r2, #508]
	str	r5, [r4, #36]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #40]
	beq	.L2558
	ldr	r2, [r2, #512]
	cmp	r2, r3
	bls	.L2566
.L2558:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mov	r0, #0
.L2554:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2555:
	mov	r0, r5
	bl	dev_kfree_skb_any
	mvn	r0, #106
	b	.L2554
.L2566:
	add	r1, r4, #164
	mov	r0, #2
	bl	_set_bit
	ldr	r3, [r4, #196]
	mov	r1, r8
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mvn	r0, #15
	b	.L2554
	.fnend
	.size	ghsic_data_receive, .-ghsic_data_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_start_xmit, %function
eth_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r6, r1, #1216
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r1, r0
	cmp	r3, #0
	beq	.L2627
	ldr	r10, [r3, #88]
	mov	r0, r6
	ldrh	fp, [r3, #98]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	str	r3, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L2569
	add	r8, r4, #1232
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r2, r0
	cmp	r3, #0
	beq	.L2572
	ldr	r9, [r4, #1264]
	cmp	r9, #0
	beq	.L2628
.L2572:
	mov	r1, r2
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	tst	fp, #1
	bne	.L2579
	ldr	r2, [r7, #172]
	ldrb	r3, [r2]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L2579
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldrb	ip, [r2, #2]	@ zero_extendqisi2
	ldrb	r0, [r2, #3]	@ zero_extendqisi2
	and	r3, r3, r1
	ldrb	r1, [r2, #4]	@ zero_extendqisi2
	ldrb	r2, [r2, #5]	@ zero_extendqisi2
	and	r3, r3, ip
	and	r3, r3, r0
	and	r3, r3, r1
	and	r3, r3, r2
	cmp	r3, #255
	movne	r3, #2
	moveq	r3, #8
	tst	r3, fp
	beq	.L2569
.L2579:
	mov	r0, r8
	add	r5, r6, #20
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r4, #1236]
	mov	r9, r0
	cmp	r5, fp
	beq	.L2629
	ldrd	r2, [fp]
	mov	r0, #256
	mov	r1, #512
	sub	ip, fp, #36
	str	ip, [sp, #8]
	str	r3, [r2, #4]
	str	r2, [r3]
	strd	r0, [fp]
	ldr	r3, [r4, #1236]
	cmp	r5, r3
	beq	.L2630
.L2582:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1296]
	mov	r9, r0
	cmp	r3, #0
	beq	.L2584
	ldr	r0, [r4, #1220]
	cmp	r0, #0
	beq	.L2585
	mov	r1, r7
	blx	r3
	mov	r7, r0
.L2585:
	cmp	r7, #0
	beq	.L2631
.L2584:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	bne	.L2632
	mov	r0, r6
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r7, #80]
	ldr	r3, [r7, #172]
	str	r3, [fp, #-36]
	str	r7, [fp, #-4]
.L2590:
	ldr	r3, [r4, #1220]
	ldrb	r2, [r3, #104]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L2603
	ldr	r3, [r3, #112]
	cmp	r3, r6
	beq	.L2633
.L2603:
	mov	r2, #1
.L2591:
	ldrb	r3, [fp, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #1, #1
	uxtb	r2, r3
	strb	r3, [fp, #-10]
	tst	r2, #2
	beq	.L2592
	ldrb	r3, [r4, #1340]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L2592
	ldrh	r1, [r10, #20]
	sdiv	r3, r6, r1
	mls	r3, r1, r3, r6
	cmp	r3, #0
	bne	.L2592
	bfi	r2, r3, #1, #1
	add	r6, r6, #1
	strb	r2, [fp, #-10]
.L2592:
	str	r6, [fp, #-32]
	ldr	r3, [r4, #1228]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L2593
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	beq	.L2634
.L2593:
	ldrb	r3, [fp, #-10]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [fp, #-10]
.L2595:
	ldr	r3, [r10, #8]
	sub	r1, fp, #36
	mov	r0, r10
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2624
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r4, #604]
.L2567:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2632:
	ldr	r3, [r4, #1220]
	ldrd	r0, [fp, #-36]
	ldr	r2, [r4, #1284]
	add	r0, r0, r1
	ldr	r1, [r3, #144]
	bl	memcpy
	ldr	r2, [r4, #1284]
	mov	r0, r6
	mov	r1, r9
	ldr	r3, [fp, #-32]
	add	r3, r3, r2
	str	r3, [fp, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [fp, #-36]
	ldr	r3, [fp, #-32]
	ldr	r2, [r7, #80]
	ldr	r1, [r7, #172]
	add	r0, r0, r3
	bl	memcpy
	ldr	r2, [r7, #80]
	mov	r0, r7
	ldr	r3, [fp, #-32]
	add	r3, r3, r2
	mov	r6, r3
	str	r3, [fp, #-32]
	bl	dev_kfree_skb_any
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1260]
	mov	r1, r0
	ldr	r2, [r4, #1292]
	add	r3, r3, #1
	cmp	r3, r2
	str	r3, [r4, #1260]
	ldr	r3, [r4, #1256]
	bcs	.L2589
	cmp	r3, #5
	ble	.L2589
	ldr	r3, [r4, #1236]
	mov	r0, r8
	str	fp, [r3, #4]
	stm	fp, {r3, r5}
	str	fp, [r4, #1236]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L2567
.L2589:
	add	r3, r3, #1
	mov	r2, #0
	mov	r0, r8
	str	r3, [r4, #1256]
	str	r2, [r4, #1260]
	bl	_raw_spin_unlock_irqrestore
	b	.L2590
.L2627:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L2569:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, #0
	b	.L2567
.L2624:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	movne	r3, #0
	strne	r3, [fp, #-32]
	beq	.L2635
.L2586:
	ldr	r2, [r4, #1224]
	mov	r0, r8
	ldr	r3, [r2, #220]
	add	r3, r3, #1
	str	r3, [r2, #220]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1236]
	mov	r6, r0
	cmp	r5, r3
	beq	.L2636
.L2598:
	ldr	r3, [r4, #1240]
	mov	r0, r8
	str	fp, [r4, #1240]
	mov	r1, r6
	str	r5, [fp]
	str	r3, [fp, #4]
	str	fp, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L2567
.L2630:
	ldr	r1, [r4, #576]
	cmp	r1, #0
	beq	.L2637
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
	b	.L2582
.L2628:
	ldr	r0, [r4, #1224]
	add	r3, r6, #20
	ldr	r5, [r4, #1236]
	ldr	r1, [r4, #1292]
	ldr	r0, [r0, #316]
	cmp	r5, r3
	add	r0, r0, #80
	mul	r1, r1, r0
	str	r1, [r4, #1264]
	beq	.L2572
	str	r7, [sp, #8]
	mov	r7, r3
	str	r6, [sp, #12]
	mov	r6, r5
	mov	r5, r2
	b	.L2574
.L2575:
	str	r9, [r6, #-4]
	ldr	r6, [r6]
	cmp	r6, r7
	beq	.L2638
.L2574:
	ldr	r1, [r6, #-36]
	cmp	r1, #0
	bne	.L2575
	movw	r1, #32800
	ldr	r0, [r4, #1264]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6, #-36]
	bne	.L2575
.L2576:
	mov	r2, r5
	ldr	r5, [r4, #1236]
	mov	r3, r7
	str	r0, [r4, #1264]
	cmp	r5, r7
	beq	.L2577
	mov	r4, r0
	mov	r7, r2
	mov	r6, r3
.L2578:
	ldr	r0, [r5, #-36]
	bl	kfree
	str	r4, [r5, #-36]
	ldr	r5, [r5]
	cmp	r5, r6
	bne	.L2578
	mov	r2, r7
.L2577:
	mov	r0, r8
	mov	r1, r2
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
	b	.L2567
.L2634:
	movw	r1, #:lower16:.LANCHOR0
	ldr	r2, [r4, #1252]
	movt	r1, #:upper16:.LANCHOR0
	ldr	r1, [r1, #516]
	add	r2, r2, #1
	cmp	r2, r1, lsr #1
	str	r2, [r4, #1252]
	beq	.L2639
	ldrb	r3, [fp, #-10]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [fp, #-10]
	b	.L2595
.L2635:
	mov	r0, r7
	bl	dev_kfree_skb_any
	b	.L2586
.L2633:
	ldrh	r3, [r10, #20]
	sdiv	r2, r6, r3
	mls	r2, r3, r2, r6
	adds	r2, r2, #0
	movne	r2, #1
	b	.L2591
.L2631:
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L2586
.L2638:
	mov	r2, r5
	ldr	r7, [sp, #8]
	ldr	r6, [sp, #12]
	b	.L2572
.L2636:
	ldr	r1, [r4, #576]
	mov	r0, #0
	add	r1, r1, #80
	bl	_clear_bit
	b	.L2598
.L2629:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #16
	b	.L2567
.L2639:
	ldrb	r2, [fp, #-10]	@ zero_extendqisi2
	bfi	r2, r3, #0, #1
	strb	r2, [fp, #-10]
	str	r3, [r4, #1252]
	b	.L2595
.L2637:
	movw	r0, #:lower16:.LC95
	movw	r1, #1847
	movt	r0, #:upper16:.LC95
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC96
	movt	r0, #:upper16:.LC96
	bl	printk
	b	.L2582
	.fnend
	.size	eth_start_xmit, .-eth_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disconnect_work, %function
rmnet_mux_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-20]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #3
	beq	.L2676
.L2641:
	sub	r5, r4, #16
	sub	r7, r4, #192
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-192]
	str	r0, [sp, #4]
	cmp	r7, r3
	beq	.L2642
	mov	r10, #256
	mov	r9, #512
	mov	r8, #0
.L2643:
	ldm	r3, {r1, r2}
	mov	fp, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	str	r8, [fp, #-36]!
	ldr	r6, [r4, #-296]
	bl	kfree
	mov	r1, fp
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-192]
	cmp	r7, r3
	bne	.L2643
.L2642:
	ldr	r3, [r4, #-168]
	sub	r7, r4, #168
	cmp	r7, r3
	beq	.L2644
	mov	r10, #256
	mov	r9, #512
	mov	r8, #0
.L2645:
	ldm	r3, {r1, r2}
	mov	fp, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	str	r8, [fp, #-36]!
	ldr	r6, [r4, #-292]
	bl	kfree
	mov	r1, fp
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-168]
	cmp	r7, r3
	bne	.L2645
.L2644:
	ldr	r3, [r4, #-184]
	sub	r7, r4, #184
	cmp	r3, r7
	beq	.L2646
	mov	r8, #0
	b	.L2647
.L2677:
	ldr	r2, [r4, #-176]
	sub	r2, r2, #1
	str	r2, [r4, #-176]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-184]
	cmp	r3, r7
	beq	.L2646
.L2647:
	subs	r0, r3, #0
	bne	.L2677
.L2646:
	ldr	r3, [r4, #-160]
	sub	r7, r4, #160
	cmp	r7, r3
	beq	.L2648
	mov	r8, #0
	b	.L2649
.L2678:
	ldr	r2, [r4, #-152]
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-160]
	cmp	r3, r7
	beq	.L2648
.L2649:
	subs	r0, r3, #0
	bne	.L2678
.L2648:
	ldr	r3, [r4, #-280]
	sub	r8, r4, #280
	cmp	r8, r3
	beq	.L2650
	mov	r10, #256
	mov	r9, #512
.L2651:
	ldm	r3, {r1, r2}
	mov	r7, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	fp, [r4, #-296]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-280]
	cmp	r8, r3
	bne	.L2651
.L2650:
	ldr	r3, [r4, #-272]
	sub	r8, r4, #272
	cmp	r8, r3
	beq	.L2652
	mov	r10, #256
	mov	r9, #512
.L2653:
	ldm	r3, {r1, r2}
	mov	r7, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	fp, [r4, #-292]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-272]
	cmp	r8, r3
	bne	.L2653
.L2652:
	ldr	r3, [r4, #-264]
	sub	r8, r4, #264
	cmp	r3, r8
	beq	.L2654
	mov	r10, #256
	mov	r9, #512
.L2655:
	ldm	r3, {r1, r2}
	mov	r7, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	fp, [r4, #-292]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-264]
	cmp	r8, r3
	bne	.L2655
.L2654:
	ldr	r3, [r4, #-68]
	sub	r7, r4, #68
	cmp	r7, r3
	beq	.L2656
	mov	r9, #256
	mov	r8, #512
.L2657:
	ldm	r3, {r1, r2}
	mov	r10, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r3, [r4, #-68]
	ldr	r2, [r4, #-48]
	cmp	r7, r3
	sub	r2, r2, #1
	str	r2, [r4, #-48]
	bne	.L2657
.L2656:
	ldr	r3, [r4, #-44]
	sub	r7, r4, #44
	cmp	r7, r3
	beq	.L2658
	mov	r9, #256
	mov	r8, #512
.L2659:
	ldm	r3, {r1, r2}
	mov	r10, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r3, [r4, #-44]
	ldr	r2, [r4, #-36]
	cmp	r7, r3
	sub	r2, r2, #1
	str	r2, [r4, #-36]
	bne	.L2659
.L2658:
	mov	r0, r5
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #0
	sub	r0, r4, #60
	mov	r3, r1
	mov	r2, #1
	str	r1, [r4, #-20]
	mov	r1, #3
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__wake_up
.L2676:
	sub	r0, r0, #232
	bl	tasklet_kill
	sub	r0, r4, #252
	bl	tasklet_kill
	b	.L2641
	.fnend
	.size	rmnet_mux_disconnect_work, .-rmnet_mux_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_data_rx_work, %function
rmnet_mux_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #128
	strd	r8, [sp, #16]
	sub	r8, r0, #16
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #-156]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-16]
	mov	fp, r0
	cmp	r8, r4
	beq	.L2680
	movw	r7, #:lower16:.LC175
	mov	r10, #0
	movt	r7, #:upper16:.LC175
	b	.L2681
.L2687:
	ldr	r3, [r5, #-8]
	sub	r3, r3, #1
	str	r3, [r5, #-8]
	ldrd	r2, [r4]
	str	r10, [r4]
	str	r10, [r4, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	ldr	r0, [r9]
	mov	r1, r7
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r4
	bl	dev_kfree_skb_any
	ldr	r4, [r5, #-16]
	cmp	r8, r4
	beq	.L2680
.L2681:
	cmp	r4, #0
	mov	r1, fp
	mov	r0, r6
	bne	.L2687
.L2680:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_sdio_data_rx_work, .-rmnet_mux_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epin, %function
rmnet_mux_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	r8, [r1, #32]
	ldr	r7, [r4, #364]
	cmp	r7, #0
	beq	.L2719
	ldr	r2, [r1, #44]
	cmn	r2, #104
	beq	.L2691
	cmp	r2, #0
	beq	.L2691
	cmn	r2, #108
	beq	.L2691
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC146
	movt	r1, #:upper16:.LC146
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2691:
	add	r7, r4, #368
	add	r10, r4, #192
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #196]
	add	r2, r5, #36
	mov	r0, r7
	str	r2, [r4, #196]
	str	r10, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #372]
	cmp	r3, #0
	bne	.L2720
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2720:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #192]
	str	r0, [sp, #8]
	cmp	r10, r3
	beq	.L2694
	ldr	r5, [r4, #200]
	add	r3, r4, #200
	str	r3, [sp, #4]
	cmp	r5, r3
	beq	.L2694
	mov	r8, #0
	b	.L2696
.L2722:
	ldr	r3, [r4, #208]
	sub	r3, r3, #1
	str	r3, [r4, #208]
	ldrd	r2, [r5]
	str	r8, [r5]
	str	r8, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #192]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	sub	fp, r6, #36
	ldrd	r2, [r6]
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	str	r1, [r6, #-32]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #512
	strd	r2, [r6]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r9, #0
	bne	.L2721
	ldr	r2, [r4, #192]
	ldr	r3, [r4, #408]
	cmp	r10, r2
	add	r3, r3, #1
	str	r3, [r4, #408]
	beq	.L2694
	ldr	r5, [r4, #200]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L2694
.L2696:
	cmp	r5, #0
	mov	r0, r7
	bne	.L2722
.L2694:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2719:
	mov	r6, r0
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, r7
	str	r7, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L2721:
	ldr	r0, [r4, #372]
	mov	r3, r9
	mov	r9, fp
	cmp	r0, #0
	beq	.L2699
	mov	r2, r3
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC147
	movt	r1, #:upper16:.LC147
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #196]
	str	r6, [r4, #196]
	ldr	r2, [sp, #4]
	str	r10, [r6]
	str	r3, [r6, #4]
	str	r6, [r3]
	ldr	r3, [r4, #200]
	str	r3, [r5]
	str	r2, [r5, #4]
	str	r5, [r4, #200]
	str	r5, [r3, #4]
	ldr	r3, [r4, #208]
	add	r3, r3, #1
	str	r3, [r4, #208]
	b	.L2694
.L2699:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L2694
	.fnend
	.size	rmnet_mux_sdio_complete_epin, .-rmnet_mux_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epout, %function
rmnet_mux_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r1, #32]
	ldr	r8, [r4, #364]
	cmp	r8, #0
	beq	.L2745
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #84]
	cmn	r3, #104
	beq	.L2726
	cmp	r3, #0
	beq	.L2727
	cmn	r3, #108
	beq	.L2726
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC143
	add	r6, r4, #368
	ldr	lr, [r5, #4]
	movt	r1, #:upper16:.LC143
	ldr	ip, [r5, #48]
	ldr	r0, [r8]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock
.L2728:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #312]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #520]
	cmp	r2, r3
	bcs	.L2746
	mov	r0, r6
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L2732
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r5
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r5, {r3, ip}
	str	r6, [r5, #32]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L2747
.L2723:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2727:
	ldr	r1, [r1, #48]
	mov	r0, r7
	add	r6, r4, #368
	bl	skb_put
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #228]
	add	r1, r4, #224
	add	r2, r4, #240
	mov	r0, #4
	stm	r7, {r1, r3}
	str	r7, [r3]
	ldr	r3, [r4, #232]
	str	r7, [r4, #228]
	ldr	r1, [r4, #380]
	add	r3, r3, #1
	str	r3, [r4, #232]
	bl	queue_work_on
	b	.L2728
.L2745:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r8
	str	r8, [r5]
.L2744:
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L2726:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	b	.L2744
.L2746:
	ldr	r3, [r4, #220]
	add	r2, r5, #36
	add	r1, r4, #216
	mov	r0, r6
	str	r2, [r4, #220]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2747:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L2730:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC176
	mov	r2, r7
	movt	r1, #:upper16:.LC176
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #220]
	add	r2, r5, #36
	add	r1, r4, #216
	str	r2, [r4, #220]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	b	.L2723
.L2732:
	mvn	r7, #11
	b	.L2730
	.fnend
	.size	rmnet_mux_sdio_complete_epout, .-rmnet_mux_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_unbind, %function
rmnet_sdio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r0, r1, #252
	mov	r4, r1
	str	lr, [sp, #4]
	bl	cancel_delayed_work_sync
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
	ldr	r2, [r4, #320]
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	tst	r2, #2
	str	r3, [r4, #96]
	bne	.L2758
.L2749:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L2750
	add	r1, r4, #324
	mov	r0, #1
	bl	_clear_bit
.L2750:
	ldr	r0, [r4, #352]
	bl	debugfs_remove_recursive
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L2758:
	add	r1, r4, #320
	mov	r0, #1
	bl	_clear_bit
	b	.L2749
	.fnend
	.size	rmnet_sdio_unbind, .-rmnet_sdio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_connect_w, %function
grmnet_ctrl_smd_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #-104]
	tst	r3, #2
	bne	.L2760
	ldr	r3, [r0, #-104]
	tst	r3, #4
	beq	.L2769
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2769:
	sub	r1, r0, #104
	mov	r0, #2
	ldr	r4, [r4, #-12]
	bl	_set_bit
	ldr	r0, .L2770
	mov	r3, #84
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	mla	r0, r3, r4, r0
	ldrd	r4, [sp]
	add	sp, sp, #24
	add	r0, r0, #4
	b	platform_driver_register
.L2760:
	sub	r2, r0, #112
	movw	r3, #:lower16:grmnet_ctrl_smd_notify
	ldr	r0, [r0, #-108]
	movt	r3, #:upper16:grmnet_ctrl_smd_notify
	mov	r1, r2
	bl	smd_open
	subs	r3, r0, #0
	beq	.L2762
	cmn	r3, #11
	bne	.L2763
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3432]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r0, #4
	mov	r1, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_delayed_work_on
.L2762:
	sub	r5, r4, #4
	ldr	r6, [r4, #-24]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-8]
	mov	r7, r0
	cmp	r3, #0
	beq	.L2764
	orr	r2, r6, #4
	mov	r1, r6
	ldr	r0, [r4, #-112]
	mvn	r2, r2
	bl	smd_tiocmset
.L2764:
	mov	r1, r7
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L2763:
	movw	r0, #:lower16:.LC177
	ldr	r2, [r4, #-108]
	ldr	r1, .L2770+4
	movt	r0, #:upper16:.LC177
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L2771:
	.align	2
.L2770:
	.word	.LANCHOR1+528
	.word	.LANCHOR2+1824
	.fnend
	.size	grmnet_ctrl_smd_connect_w, .-grmnet_ctrl_smd_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_open_sdio_work, %function
rmnet_mux_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3484]
	cmp	r2, #90
	bgt	.L2776
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r2, r2, #1
	str	r6, [sp, #8]
	mov	r0, #2000
	str	lr, [sp, #12]
	ldr	r5, [r4, #124]
	str	r2, [r3, #3484]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L2776:
	ldr	r3, [r0, #-172]
	movw	r1, #:lower16:.LC178
	movt	r1, #:upper16:.LC178
	ldr	r0, [r3]
	add	r0, r0, #32
	b	dev_err
	.fnend
	.size	rmnet_mux_open_sdio_work, .-rmnet_mux_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_rx, %function
gbam_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #4
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	mov	r8, r0
	cmp	r3, #0
	beq	.L2781
	movw	r5, #:lower16:.LANCHOR0
	ldr	r9, [r3, #88]
	add	r3, r6, #52
	movt	r5, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
.L2779:
	ldr	r4, [r6, #52]
	mvn	r3, #0
	mov	r2, #0
	ldr	r0, [sp, #4]
	mov	r1, #32
	sub	r10, r4, #36
	cmp	r4, r0
	beq	.L2781
	ldr	r0, [r5, #524]
	cmp	r0, #0
	beq	.L2780
	ldr	r0, [r5, #528]
	ldr	ip, [r6, #68]
	cmp	ip, r0
	bcs	.L2781
.L2780:
	ldr	r0, [r5, #532]
	add	r0, r0, #8
	bl	__alloc_skb
	subs	r3, r0, #0
	mov	lr, #256
	mov	ip, #512
	mov	r1, r8
	mov	r0, r7
	beq	.L2781
	ldr	r8, [r3, #160]
	str	r3, [sp]
	ldr	r2, [r3, #172]
	add	r8, r8, #8
	add	r2, r2, #8
	str	r8, [r3, #160]
	str	r2, [r3, #172]
	ldr	r8, [r4]
	ldr	r2, [r4, #4]
	str	r2, [r8, #4]
	str	r8, [r2]
	str	lr, [r4]
	str	ip, [r4, #4]
	ldr	r2, [r3, #172]
	str	r2, [r4, #-36]
	ldr	r2, [r5, #532]
	str	r2, [r4, #-32]
	str	r3, [r4, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r9, #8]
	mov	r2, #32
	mov	r1, r10
	mov	r0, r9
	ldr	r8, [ip, #16]
	blx	r8
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r8, r0
	ldr	r3, [sp]
	bne	.L2799
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L2779
.L2781:
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2799:
	mov	r0, r3
	bl	dev_kfree_skb_any
	ldr	r0, .L2802
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L2800
.L2783:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L2801
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2781
.L2801:
	ldr	r3, [r6, #52]
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #4]
	str	r3, [r4, #4]
	str	r4, [r6, #52]
	b	.L2781
.L2800:
	movw	r0, #:lower16:.LC179
	mov	r2, fp
	ldr	r1, .L2802
	movt	r0, #:upper16:.LC179
	bl	printk
	b	.L2783
.L2803:
	.align	2
.L2802:
	.word	.LANCHOR2+1852
	.fnend
	.size	gbam_start_rx, .-gbam_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epout_complete, %function
gbam_epout_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0]
	ldr	r6, [r1, #44]
	ldr	r8, [r1, #32]
	cmn	r6, #104
	beq	.L2806
	cmp	r6, #0
	beq	.L2807
	cmn	r6, #108
	beq	.L2806
	ldr	r0, .L2835
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L2833
.L2809:
	mov	r0, r8
	add	r9, r5, #4
	bl	dev_kfree_skb_any
	mov	r0, r9
	bl	_raw_spin_lock
.L2808:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r3, [r6, #524]
	cmp	r3, #0
	beq	.L2810
	ldr	r2, [r5, #68]
	ldr	r3, [r6, #528]
	cmp	r2, r3
	bcc	.L2810
	ldr	r3, [r5, #276]
	cmp	r3, #0
	bne	.L2832
	ldr	r3, [r5, #272]
	mov	r2, #1
	str	r2, [r5, #276]
	add	r3, r3, r2
	str	r3, [r5, #272]
.L2832:
	ldr	r3, [r5, #56]
	add	r2, r4, #36
	add	r1, r5, #52
	mov	r0, r9
	str	r2, [r5, #56]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L2806:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L2810:
	mov	r0, r9
	bl	_raw_spin_unlock
	ldr	r0, [r6, #532]
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	add	r0, r0, #8
	bl	__alloc_skb
	subs	r8, r0, #0
	beq	.L2814
	ldr	ip, [r8, #160]
	mov	r0, r7
	mov	r2, #32
	ldr	r3, [r8, #172]
	mov	r1, r4
	add	ip, ip, #8
	add	r3, r3, #8
	str	ip, [r8, #160]
	str	r3, [r8, #172]
	str	r3, [r4]
	ldr	r3, [r6, #532]
	str	r3, [r4, #4]
	str	r8, [r4, #32]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bne	.L2834
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2807:
	ldr	r1, [r1, #48]
	mov	r0, r8
	add	r9, r5, #4
	bl	skb_put
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r0, [r5, #64]
	add	r2, r5, #60
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r8]
	ldr	r1, [r3, #3480]
	add	r2, r5, #80
	str	r0, [r8, #4]
	str	r8, [r0]
	ldr	r3, [r5, #68]
	mov	r0, #4
	str	r8, [r5, #64]
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	queue_work_on
	b	.L2808
.L2834:
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r0, .L2835
	bl	__printk_ratelimit
	cmp	r0, #0
	beq	.L2814
	movw	r0, #:lower16:.LC181
	mov	r2, r6
	ldr	r1, .L2835
	movt	r0, #:upper16:.LC181
	bl	printk
.L2814:
	mov	r0, r9
	bl	_raw_spin_lock
	b	.L2832
.L2833:
	ldr	r1, [r4, #4]
	movw	r0, #:lower16:.LC180
	mov	r3, r6
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC180
	ldr	r2, [r7, #4]
	str	ip, [sp]
	str	r1, [sp, #4]
	ldr	r1, .L2835
	bl	printk
	b	.L2809
.L2836:
	.align	2
.L2835:
	.word	.LANCHOR2+1868
	.fnend
	.size	gbam_epout_complete, .-gbam_epout_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_ioctl, %function
usb_rmnet_mux_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #65024
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2839
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2841
	mov	r0, #4
	bx	lr
.L2841:
	ldr	r1, [r0, #124]
	mov	r0, r2
	mov	r2, #4
	add	r1, r1, #352
	b	__copy_to_user
.L2839:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_rmnet_mux_ctrl_ioctl, .-usb_rmnet_mux_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_ioctl, %function
acc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #19714
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, 16640
	str	r6, [sp, #8]
	cmp	r1, r3
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	beq	.L2844
	bls	.L2858
	movw	r3, #19716
	movt	r3, 16640
	cmp	r1, r3
	beq	.L2849
	bcc	.L2850
	movw	r3, #19717
	movt	r3, 16640
	cmp	r1, r3
	beq	.L2851
	movw	r3, #19718
	movt	r3, 16640
	cmp	r1, r3
	addeq	r4, r4, #1376
	addeq	r4, r4, #5
	bne	.L2856
.L2853:
	cmp	r4, #0
	beq	.L2856
	mov	r0, r4
	mov	r6, r2
	bl	strlen
	mov	r3, sp
	add	r5, r0, #1
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2859
.L2854:
	mvn	r0, #13
	b	.L2842
.L2858:
	movw	r3, #19720
	cmp	r1, r3
	beq	.L2846
	movw	r3, #19713
	movt	r3, 16640
	cmp	r1, r3
	beq	.L2847
	movw	r3, #19719
	cmp	r1, r3
	beq	.L2860
.L2856:
	mvn	r0, #21
.L2842:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2847:
	add	r4, r4, #101
	b	.L2853
.L2851:
	add	r4, r4, #1120
	add	r4, r4, #5
	b	.L2853
.L2859:
	mov	r1, r4
	mov	r0, r6
	mov	r2, r5
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L2854
	mov	r0, r5
	b	.L2842
.L2850:
	add	r4, r4, #612
	add	r4, r4, #1
	b	.L2853
.L2846:
	ldr	r0, [r4, #1648]
	b	.L2842
.L2860:
	ldr	r0, [r4, #1644]
	b	.L2842
.L2849:
	add	r4, r4, #868
	add	r4, r4, #1
	b	.L2853
.L2844:
	add	r4, r4, #356
	add	r4, r4, #1
	b	.L2853
	.fnend
	.size	acc_ioctl, .-acc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_ioctl, %function
ffs_epfile_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	ldr	r0, [r4, #40]
	ldr	r3, [r0, #96]
	cmp	r3, #2
	bne	.L2882
	add	r0, r0, #28
	mov	r5, r1
	mov	r6, r2
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #44]
	cmp	r3, #0
	mvneq	r5, #18
	beq	.L2864
	movw	r2, #26371
	cmp	r5, r2
	beq	.L2865
	bhi	.L2866
	movw	r2, #26369
	cmp	r5, r2
	beq	.L2867
	movw	r2, #26370
	cmp	r5, r2
	bne	.L2877
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L2879
	mov	r5, #0
	blx	r3
.L2864:
	ldr	r0, [r4, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
.L2861:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2866:
	movw	r2, #26497
	cmp	r5, r2
	beq	.L2869
	movw	r2, #26498
	movt	r2, 32777
	cmp	r5, r2
	bne	.L2877
	ldr	r0, [r4, #40]
	ldr	r2, [r0]
	ldr	r2, [r2, #16]
	cmp	r2, #3
	moveq	r2, #1
	beq	.L2873
	cmp	r2, #5
	moveq	r2, #2
	movne	r2, #0
.L2873:
	add	r2, r2, #2
	add	r0, r0, #28
	ldr	r4, [r3, r2, lsl #2]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2874
.L2875:
	mvn	r5, #13
	b	.L2861
.L2877:
	mvn	r5, #24
	b	.L2864
.L2867:
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	beq	.L2878
	blx	r3
	mov	r5, r0
	b	.L2864
.L2869:
	ldrb	r5, [r3, #20]	@ zero_extendqisi2
	b	.L2864
.L2865:
	ldr	r0, [r3]
	mov	r1, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r5, r0
	b	.L2864
.L2882:
	movw	r0, #:lower16:.LC9
	movw	r1, #978
	movt	r0, #:upper16:.LC9
	mvn	r5, #18
	bl	warn_slowpath_null
	b	.L2861
.L2874:
	mov	r1, r4
	mov	r0, r6
	mov	r2, #9
	bl	__copy_to_user
	subs	r5, r0, #0
	beq	.L2861
	b	.L2875
.L2878:
	mvn	r5, #94
	b	.L2864
.L2879:
	mov	r5, r3
	b	.L2864
	.fnend
	.size	ffs_epfile_ioctl, .-ffs_epfile_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_ioctl, %function
rmnet_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #124]
	.pad #12
	sub	sp, sp, #12
	add	r5, r4, #28
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L2884
	movw	r3, #29186
	mov	r0, r2
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2894
	ldr	r2, [r4, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2888
.L2890:
	movw	r0, #:lower16:.LC182
	movt	r0, #:upper16:.LC182
	bl	printk
	mvn	r0, #13
.L2889:
	ldr	r3, [r4, #12]
.L2891:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L2883:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L2888:
	mov	r2, #4
	add	r1, sp, r2
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L2889
	b	.L2890
.L2884:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L2883
.L2894:
	movw	r0, #:lower16:.LC183
	movt	r0, #:upper16:.LC183
	bl	printk
	mvn	r0, #21
	b	.L2891
	.fnend
	.size	rmnet_ctrl_ioctl, .-rmnet_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_ioctl, %function
rndis_qc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r0, .L2914
	movt	r4, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	mov	r7, r2
	mov	r8, r1
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	strb	r3, [sp, #3]
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2528]
	mov	r6, r0
	cmp	r3, #0
	beq	.L2911
	ldrb	r0, [r3, #132]	@ zero_extendqisi2
	add	r2, r3, #148
	ldr	r1, [r3, #136]
	strb	r0, [sp, #3]
	str	r1, [sp, #4]
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	beq	.L2912
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r5, #15
.L2897:
	mov	r1, r6
	ldr	r0, .L2914
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2911:
	movw	r0, #:lower16:.LC50
	ldr	r1, .L2914+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC50
	bl	printk
	b	.L2897
.L2912:
	mov	r1, r6
	ldr	r0, .L2914
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC184
	mov	r2, r8
	ldr	r1, .L2914+4
	movt	r0, #:upper16:.LC184
	bl	printk
	movw	r3, #26881
	movt	r3, 32769
	cmp	r8, r3
	beq	.L2900
	movw	r3, #26882
	movt	r3, 32772
	cmp	r8, r3
	bne	.L2913
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2906
.L2907:
	movw	r0, #:lower16:.LC185
	ldr	r1, .L2914+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC185
	bl	printk
.L2905:
	ldr	r0, .L2914
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2528]
	mov	r6, r0
	cmp	r3, #0
	beq	.L2911
	add	r2, r3, #148
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L2897
.L2906:
	mov	r2, #4
	mov	r0, r7
	add	r1, sp, r2
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L2907
	mov	r5, r0
	b	.L2905
.L2913:
	movw	r0, #:lower16:.LC187
	ldr	r1, .L2914+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC187
	bl	printk
	b	.L2905
.L2900:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #1; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2902
.L2904:
	movw	r0, #:lower16:.LC185
	ldr	r1, .L2914+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC185
	bl	printk
.L2903:
	movw	r0, #:lower16:.LC186
	ldrb	r2, [sp, #3]	@ zero_extendqisi2
	ldr	r1, .L2914+4
	movt	r0, #:upper16:.LC186
	bl	printk
	b	.L2905
.L2902:
	mov	r2, r5
	mov	r0, r7
	add	r1, sp, #3
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L2904
	mov	r5, r0
	b	.L2903
.L2915:
	.align	2
.L2914:
	.word	.LANCHOR1+2524
	.word	.LANCHOR2+1888
	.fnend
	.size	rndis_qc_ioctl, .-rndis_qc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ioctl, %function
mbim_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #96
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L2917
	movw	r3, #28419
	movt	r3, 32770
	cmp	r1, r3
	beq	.L2919
	movw	r3, #28418
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2931
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2922
.L2924:
	movw	r0, #:lower16:.LC185
	ldr	r1, .L2932
	mvn	r6, #13
	movt	r0, #:upper16:.LC185
	bl	printk
.L2923:
	movw	r0, #:lower16:.LC188
	ldr	r1, .L2932
	ldr	r2, [r4, #224]
	movt	r0, #:upper16:.LC188
	bl	printk
	b	.L2925
.L2931:
	movw	r0, #:lower16:.LC190
	ldr	r1, .L2932
	mvn	r6, #21
	movt	r0, #:upper16:.LC190
	bl	printk
.L2925:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L2916:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2919:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2926
.L2928:
	movw	r0, #:lower16:.LC185
	ldr	r1, .L2932
	mvn	r6, #13
	movt	r0, #:upper16:.LC185
	bl	printk
.L2927:
	movw	r0, #:lower16:.LC189
	ldrh	r2, [r4, #228]
	ldr	r1, .L2932
	movt	r0, #:upper16:.LC189
	bl	printk
	b	.L2925
.L2922:
	mov	r0, r2
	add	r1, r4, #224
	mov	r2, #4
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L2923
	b	.L2924
.L2926:
	mov	r0, r2
	add	r1, r4, #228
	mov	r2, #2
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L2927
	b	.L2928
.L2917:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L2916
.L2933:
	.align	2
.L2932:
	.word	.LANCHOR2+1904
	.fnend
	.size	mbim_ioctl, .-mbim_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_read, %function
usb_rmnet_mux_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r1
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #124]
	mov	r3, sp
	bic	r8, r3, #8128
	bic	r8, r8, #63
.L2935:
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L2944
	add	r6, r4, #368
	add	r5, r4, #316
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #316]
	mov	r1, r0
	cmp	r5, r7
	bne	.L2937
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L2935
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L2935
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r6, r4, #324
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2941
.L2954:
	bl	schedule
.L2941:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L2939
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L2939
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2954
	mov	r5, #65024
	add	r1, sp, #4
	mov	r0, r6
	movt	r5, 65535
	bl	finish_wait
.L2934:
	mov	r0, r5
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2944:
	mvn	r5, #18
	b	.L2934
.L2939:
	add	r1, sp, #4
	mov	r0, r6
	bl	finish_wait
	b	.L2935
.L2937:
	ldr	r3, [r7, #-4]
	sub	r8, r7, #8
	cmp	r3, r10
	bhi	.L2955
	ldrd	r2, [r7]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r6
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r7]
	str	ip, [r7, #4]
	ldr	r3, [r4, #336]
	sub	r3, r3, #1
	str	r3, [r4, #336]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	ldr	r5, [r7, #-4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	mov	r0, r5
	beq	.L2956
.L2943:
	ldr	r3, [r4, #420]
	cmp	r0, #0
	movne	r5, r0
	add	r3, r3, #1
	str	r3, [r4, #420]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L2934
.L2956:
	mov	r0, r9
	mov	r2, r5
	ldr	r1, [r7, #-8]
	bl	__copy_to_user
	b	.L2943
.L2955:
	mov	r0, r6
	mvn	r5, #11
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC191
	mov	r3, r10
	ldr	r1, .L2957
	ldr	r2, [r7, #-4]
	movt	r0, #:upper16:.LC191
	bl	printk
	b	.L2934
.L2958:
	.align	2
.L2957:
	.word	.LANCHOR2+1916
	.fnend
	.size	usb_rmnet_mux_ctrl_read, .-usb_rmnet_mux_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_read, %function
rmnet_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #2048
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r2
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	str	r1, [sp, #4]
	bhi	.L2975
	add	r9, r4, #20
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r9]
	add	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L2962
	mov	r3, sp
	add	r7, r4, #44
	bic	r8, r3, #8128
	add	r6, r4, #52
	bic	r8, r8, #63
	b	.L2965
.L2977:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r10, [r4, #44]
	cmp	r10, r7
	beq	.L2976
.L2965:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #44]
	mov	r1, r0
	cmp	r5, r7
	beq	.L2977
	ldrd	r2, [r5]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r6
	sub	r6, r5, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r5, #-4]
	cmp	r1, fp
	bhi	.L2978
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #4]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2979
.L2970:
	cmp	r2, #0
	ldreq	r4, [r5, #-4]
	bne	.L2980
.L2972:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
.L2959:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2976:
	ldr	ip, [r8, #12]
	movw	r1, #:lower16:autoremove_wake_function
	add	r0, sp, #24
	movt	r1, #:upper16:autoremove_wake_function
	mov	r2, #0
	add	r5, r4, #32
	str	r2, [sp, #12]
	str	ip, [sp, #16]
	str	r1, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
	b	.L2968
.L2981:
	bl	schedule
.L2968:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r2, [r4, #44]
	cmp	r10, r2
	bne	.L2966
	ldr	r2, [r8, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L2981
	add	r1, sp, #12
	mov	r0, r5
	bl	finish_wait
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L2959
.L2966:
	add	r1, sp, #12
	mov	r0, r5
	bl	finish_wait
	b	.L2965
.L2979:
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L2970
.L2980:
	movw	r0, #:lower16:.LC195
	mov	r1, r2
	movt	r0, #:upper16:.LC195
	mvn	r4, #13
	bl	printk
	b	.L2972
.L2978:
	movw	r0, #:lower16:.LC194
	mov	r2, fp
	movt	r0, #:upper16:.LC194
	bl	printk
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5, #-8]
	mvn	r4, #11
	bl	kfree
	mov	r0, r6
	bl	kfree
	b	.L2959
.L2962:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC193
	mvn	r4, #15
	movt	r0, #:upper16:.LC193
	bl	printk
	b	.L2959
.L2975:
	movw	r0, #:lower16:.LC192
	mov	r1, r2
	movt	r0, #:upper16:.LC192
	mov	r2, #2048
	bl	printk
	mvn	r4, #21
	b	.L2959
	.fnend
	.size	rmnet_ctrl_read, .-rmnet_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_read, %function
acc_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L2997
	cmp	r2, #16384
	mov	r8, r1
	movcc	r6, r2
	movcs	r6, #16384
	ands	r3, r3, #1
	bne	.L2984
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r7, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r7, r7, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r7, #12]
	add	r5, sp, #4
	add	r9, r4, #1664
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2987
.L3003:
	bl	schedule
.L2987:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r9
	bl	prepare_to_wait
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L2985
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3003
	mov	r4, #65024
	mov	r1, r5
	mov	r0, r9
	movt	r4, 65535
	bl	finish_wait
.L2982:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2985:
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
.L2984:
	ldr	r10, [r4, #1688]
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L2988
.L2989:
	str	r6, [r10, #4]
	ldr	r0, [r4, #96]
	mov	r3, #0
	mov	r2, #208
	mov	r1, r10
	str	r3, [r4, #1696]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2994
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L2988
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r7, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r7, r7, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r7, #12]
	add	r5, sp, #4
	add	r9, r4, #1664
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2993
.L3004:
	bl	schedule
.L2993:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L2991
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3004
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r1, r10
	mov	r4, #65024
	movt	r4, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L2982
.L2991:
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
.L2988:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r4, #1696]
	tst	r3, #1
	beq	.L2994
	ldr	r2, [r10, #48]
	cmp	r2, #0
	bne	.L2995
	ldr	r10, [r4, #1688]
	b	.L2989
.L2995:
	mov	r3, sp
	cmp	r2, r6
	bic	r3, r3, #8128
	movcs	r2, r6
	bic	r3, r3, #63
	mov	r4, r2
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r8, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3005
.L2996:
	cmp	r2, #0
	mvnne	r4, #13
	b	.L2982
.L3005:
	mov	r0, r8
	ldr	r1, [r10]
	bl	__copy_to_user
	mov	r2, r0
	b	.L2996
.L2997:
	mvn	r4, #18
	b	.L2982
.L2994:
	mvn	r4, #4
	b	.L2982
	.fnend
	.size	acc_read, .-acc_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_read, %function
mtp_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	sub	r6, r2, #1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	movw	r0, #:lower16:.LANCHOR0
	movt	r0, #:upper16:.LANCHOR0
	.pad #36
	sub	sp, sp, #36
	ldr	ip, [r0, #536]
	ldr	r0, [fp, #96]
	ldrh	r0, [r0, #20]
	add	r6, r6, r0
	rsb	r0, r0, #0
	and	r6, r6, r0
	cmp	r6, ip
	bhi	.L3028
	mov	r9, r2
	ldr	r2, [fp, #104]
	str	r1, [sp, #4]
	cmp	r2, #0
	bne	.L3008
	mov	r3, sp
	str	r2, [sp, #12]
	movw	r1, #:lower16:autoremove_wake_function
	bic	r4, r3, #8128
	add	r0, sp, #24
	bic	r4, r4, #63
	movt	r1, #:upper16:autoremove_wake_function
	ldr	ip, [r4, #12]
	add	r5, sp, #12
	add	r7, fp, #132
	str	ip, [sp, #16]
	str	r1, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
	b	.L3011
.L3051:
	bl	schedule
.L3011:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r2, [fp, #104]
	cmp	r2, #0
	bne	.L3009
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3051
	mov	r1, r5
	mov	r0, r7
	mov	r9, #65024
	add	r8, fp, #88
	bl	finish_wait
	movt	r9, 65535
	b	.L3014
.L3009:
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait
.L3008:
	add	r8, fp, #88
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r2, [fp, #104]
	cmp	r2, #3
	beq	.L3052
	mov	r2, #2
	mov	r0, r8
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
	b	.L3013
.L3054:
	cmp	r2, #3
	beq	.L3017
.L3016:
	cmp	r2, #2
	bne	.L3031
	ldr	r2, [r4, #48]
	cmp	r2, #0
	bne	.L3053
.L3013:
	ldr	r4, [fp, #168]
	mov	ip, #0
	mov	r2, #208
	str	r6, [r4, #4]
	mov	r1, r4
	ldr	r0, [fp, #96]
	str	ip, [fp, #176]
	ldr	ip, [r0, #8]
	ldr	r5, [ip, #16]
	blx	r5
	cmp	r0, #0
	blt	.L3031
	ldr	r2, [fp, #104]
	ldr	r1, [fp, #176]
	cmp	r1, #0
	bne	.L3054
	cmp	r2, #2
	beq	.L3018
	cmp	r2, #3
	beq	.L3022
.L3031:
	mvn	r9, #4
.L3014:
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r2, [fp, #104]
	cmp	r2, #3
	mvneq	r9, #124
	beq	.L3025
	cmp	r2, #0
	movne	r2, #1
	strne	r2, [fp, #104]
.L3025:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
.L3006:
	mov	r0, r9
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3018:
	ldr	ip, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r0, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, sp, #12
	str	r1, [sp, #12]
	add	r10, fp, #132
	str	ip, [sp, #16]
	str	r2, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
	b	.L3021
.L3055:
	bl	schedule
.L3021:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r2, [fp, #176]
	cmp	r2, #0
	bne	.L3019
	ldr	r2, [fp, #104]
	cmp	r2, #2
	bne	.L3019
	ldr	r2, [r7, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3055
	mov	r1, r5
	mov	r0, r10
	bl	finish_wait
	ldr	r2, [fp, #104]
	cmp	r2, #3
	beq	.L3026
	ldr	r0, [fp, #96]
	mov	r1, r4
	mov	r9, #65024
	movt	r9, 65535
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L3014
.L3019:
	mov	r1, r5
	mov	r0, r10
	bl	finish_wait
	ldr	r2, [fp, #104]
	cmp	r2, #3
	bne	.L3016
.L3026:
	ldr	r2, [fp, #176]
	cmp	r2, #0
	bne	.L3017
.L3022:
	ldr	r0, [fp, #96]
	mov	r1, r4
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
.L3017:
	mov	r0, r8
	mvn	r9, #124
	bl	_raw_spin_lock_irq
	mov	r2, #3
	mov	r0, r8
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq
	b	.L3014
.L3053:
	mov	r3, sp
	cmp	r2, r9
	bic	r1, r3, #8128
	movcc	r9, r2
	ldr	r3, [sp, #4]
	bic	r1, r1, #63
	ldr	r2, [r1, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r9; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	movne	r0, r9
	beq	.L3056
.L3024:
	cmp	r0, #0
	mvnne	r9, #13
	b	.L3014
.L3056:
	mov	r0, r3
	mov	r2, r9
	ldr	r1, [r4]
	bl	__copy_to_user
	b	.L3024
.L3028:
	mvn	r9, #21
	b	.L3006
.L3052:
	mov	r2, #1
	mov	r0, r8
	mvn	r9, #124
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq
	b	.L3006
	.fnend
	.size	mtp_read, .-mtp_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_read, %function
ccid_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L3064
	ldr	r3, [r5, #144]
	cmp	r2, #4
	mov	r7, r1
	movcc	r4, r2
	movcs	r4, #4
	cmp	r3, #0
	bne	.L3060
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r8, r5, #128
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3063
.L3072:
	bl	schedule
.L3063:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r5, #144]
	cmp	r3, #0
	bne	.L3061
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3072
	mov	r0, r8
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3057
.L3061:
	add	r1, sp, #4
	mov	r0, r8
	bl	finish_wait
.L3060:
	ldr	r3, [r5, #96]
	mov	r2, #0
	str	r2, [r5, #144]
	cmp	r3, r2
	beq	.L3064
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r4
	beq	.L3073
.L3065:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
.L3057:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3073:
	add	r1, r5, #140
	mov	r0, r7
	mov	r2, r4
	bl	__copy_to_user
	b	.L3065
.L3064:
	mvn	r0, #18
	b	.L3057
	.fnend
	.size	ccid_ctrl_read, .-ccid_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_read, %function
modem_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #32]
	tst	r3, #2048
	bne	.L3082
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #57344
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r1
	ldr	r3, [r4, #2220]
	str	lr, [sp, #12]
	.pad #24
	sub	sp, sp, #24
	movt	r2, 65535
	mov	r1, sp
	and	r1, r1, r2
	cmp	r3, #0
	bne	.L3076
	str	r3, [sp, #4]
	movw	r0, #:lower16:autoremove_wake_function
	mov	r6, r1
	str	r3, [sp, #8]
	movt	r0, #:upper16:autoremove_wake_function
	str	r3, [sp, #12]
	str	r0, [sp, #12]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	ldr	r2, [r1, #12]
	add	r3, sp, #16
	str	r2, [sp, #8]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	b	.L3079
.L3087:
	bl	schedule
.L3079:
	mov	r2, #1
	add	r1, sp, #4
	ldr	r0, .L3088
	bl	prepare_to_wait
	ldr	r3, [r4, #2220]
	cmp	r3, #0
	bne	.L3077
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3087
	ldr	r0, .L3088
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3074
.L3077:
	add	r1, sp, #4
	ldr	r0, .L3088
	bl	finish_wait
	mov	r3, sp
	bic	r1, r3, #8128
	bic	r1, r1, #63
.L3076:
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3081
	mov	r0, r5
	mov	r2, #4
	ldr	r1, .L3088+4
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3081
	str	r0, [r4, #2220]
	mov	r0, #4
.L3074:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3081:
	mvn	r0, #13
	b	.L3074
.L3082:
	mvn	r0, #10
	bx	lr
.L3089:
	.align	2
.L3088:
	.word	.LANCHOR1+2224
	.word	.LANCHOR1+3428
	.fnend
	.size	modem_read, .-modem_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_read, %function
adb_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #3424]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	cmp	r3, #0
	beq	.L3110
	cmp	r2, #4096
	bhi	.L3111
	add	r7, r4, #108
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r0, r3, [r7]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3122
	mov	r3, sp
	mov	r6, r2
	bic	r5, r3, #8128
	mov	r8, r1
	bic	r5, r5, #63
	b	.L3093
.L3125:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3098
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L3124
.L3093:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L3125
.L3098:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3107
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L3100
.L3103:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3107
	ldr	r3, [r5, #48]
	cmp	r3, #0
	bne	.L3126
.L3100:
	ldr	r5, [r4, #152]
	mov	r1, #4096
	mov	r3, #0
	mov	r2, #32
	str	r1, [r5, #4]
	ldr	r0, [r4, #96]
	mov	r1, r5
	str	r3, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3127
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L3103
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3103
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, sp, #4
	str	r3, [sp, #4]
	add	fp, r4, #128
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3106
.L3128:
	bl	schedule
.L3106:
	mov	r2, #1
	mov	r1, r10
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L3104
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3104
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3128
	mov	r1, r10
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r1, r5
	mov	r6, #65024
	movt	r6, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L3109
.L3129:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #140
	bl	__wake_up
	b	.L3109
.L3107:
	mvn	r6, #4
.L3101:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3129
.L3109:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3090:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3124:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3093
	ldr	r0, [r5, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, sp, #4
	str	r3, [sp, #4]
	add	r9, r4, #128
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3097
.L3130:
	bl	schedule
.L3097:
	mov	r2, #1
	mov	r1, r10
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3095
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3095
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3130
	mov	r1, r10
	mov	r0, r9
	bl	finish_wait
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r6, #65024
	movt	r6, 65535
	b	.L3090
.L3104:
	mov	r1, r10
	mov	r0, fp
	bl	finish_wait
	b	.L3103
.L3127:
	mov	r3, #1
	mvn	r6, #4
	str	r3, [r4, #104]
	b	.L3101
.L3126:
	mov	r2, sp
	cmp	r3, r6
	bic	r1, r2, #8128
	movcc	r2, r3
	bic	r1, r1, #63
	movcs	r2, r6
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r8, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3131
.L3108:
	cmp	r2, #0
	mvnne	r6, #13
	b	.L3101
.L3131:
	mov	r0, r8
	ldr	r1, [r5]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3108
.L3122:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L3090
.L3111:
	mvn	r6, #21
	b	.L3090
.L3095:
	mov	r1, r10
	mov	r0, r9
	bl	finish_wait
	b	.L3093
.L3110:
	mvn	r6, #18
	b	.L3090
	.fnend
	.size	adb_read, .-adb_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_write, %function
rmnet_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r2, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r3, #2048
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	bcs	.L3143
	mov	r7, r1
	mov	r5, r2
	add	r6, r4, #24
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3134
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L3152
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L3153
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3154
	mov	r1, r5
	bl	__memzero
	mov	r1, r5
.L3139:
	cmp	r1, #0
	bne	.L3155
	add	r9, r4, #52
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3141
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L3141
	mov	r2, r5
	mov	r1, r8
	blx	r3
	subs	r7, r0, #0
	bne	.L3156
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r7, r5
.L3132:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3154:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	mov	r1, r0
	b	.L3139
.L3143:
	mvn	r7, #21
	b	.L3132
.L3152:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #31
	b	.L3132
.L3141:
	movw	r0, #:lower16:.LC200
	movt	r0, #:upper16:.LC200
	bl	printk
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #21
	b	.L3132
.L3155:
	movw	r0, #:lower16:.LC198
	movt	r0, #:upper16:.LC198
	bl	printk
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #13
	b	.L3132
.L3156:
	movw	r0, #:lower16:.LC199
	mov	r1, r7
	movt	r0, #:upper16:.LC199
	bl	printk
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L3132
.L3134:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC196
	mvn	r7, #15
	movt	r0, #:upper16:.LC196
	bl	printk
	b	.L3132
.L3153:
	movw	r0, #:lower16:.LC197
	movt	r0, #:upper16:.LC197
	bl	printk
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #11
	b	.L3132
	.fnend
	.size	rmnet_ctrl_write, .-rmnet_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_ioctl, %function
ccid_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17154
	str	r6, [sp, #8]
	movt	r3, 16388
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r1, r3
	ldr	r5, [r4, #112]
	ldr	r0, [r5]
	beq	.L3159
	movw	r3, #17155
	movt	r3, 32772
	cmp	r1, r3
	beq	.L3160
	movw	r3, #17153
	movt	r3, 16388
	cmp	r1, r3
	beq	.L3172
.L3158:
	ldr	r0, [r4, #100]
	mov	r1, r5
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L3173
.L3168:
	mov	r4, #0
.L3157:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3172:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3165
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3171
	mov	r3, #2
	str	r3, [r5, #4]
	ldr	r5, [r4, #112]
	b	.L3158
.L3160:
	mov	r3, sp
	add	r1, r4, #200
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r0, r2, #4; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3171
	mov	r0, r2
	mov	r2, #4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L3168
.L3171:
	mvn	r4, #13
	b	.L3157
.L3159:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3165
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3171
	mov	r3, #4
	str	r3, [r5, #4]
	ldr	r5, [r4, #112]
	b	.L3158
.L3165:
	mov	r1, #4
	bl	__memzero
	b	.L3171
.L3173:
	movw	r0, #:lower16:.LC201
	mov	r1, r4
	movt	r0, #:upper16:.LC201
	bl	printk
	b	.L3157
	.fnend
	.size	ccid_ctrl_ioctl, .-ccid_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_prepare_buffer, %function
ffs_prepare_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L3176
	mov	r5, r0
	mov	r1, #208
	mov	r0, r4
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L3177
	mov	r2, r4
	mov	r1, r5
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3182
.L3174:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3176:
	mov	r6, r4
	b	.L3174
.L3177:
	mvn	r6, #11
	b	.L3174
.L3182:
	mov	r0, r6
	mvn	r6, #13
	bl	kfree
	b	.L3174
	.fnend
	.size	ffs_prepare_buffer, .-ffs_prepare_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_get_drvinfo, %function
eth_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC202
	mov	r5, r0
	movt	r1, #:upper16:.LC202
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC203
	add	r0, r4, #36
	movt	r1, #:upper16:.LC203
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_get_drvinfo, .-eth_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_get_drvinfo, %function
eth_qc_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC204
	mov	r5, r0
	movt	r1, #:upper16:.LC204
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC203
	add	r0, r4, #36
	movt	r1, #:upper16:.LC203
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_qc_get_drvinfo, .-eth_qc_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_store, %function
pm_qos_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	add	r0, r0, #56
	mov	r1, r5
	mov	r2, #5
	bl	strlcpy
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	pm_qos_store, .-pm_qos_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_store, %function
ecm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3193
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3194:
	.align	2
.L3193:
	.word	.LANCHOR1+3124
	.fnend
	.size	ecm_transports_store, .-ecm_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_update_pid_and_serial_num, %function
usb_diag_update_pid_and_serial_num:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movw	r5, #:lower16:.LANCHOR1
	movt	r4, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	mov	r2, #140
	ldr	r3, [r4]
	str	lr, [sp, #16]
	.pad #148
	sub	sp, sp, #148
	movt	r5, #:upper16:.LANCHOR1
	mov	r7, r0
	mov	r6, r1
	mov	r0, sp
	mov	r1, #0
	str	r3, [sp, #140]
	bl	memset
	ldr	r3, [r5, #3488]
	cmp	r3, #0
	beq	.L3201
	movw	r3, #10505
	cmp	r6, #0
	str	r7, [sp]
	movt	r3, 28995
	str	r3, [sp, #132]
	beq	.L3204
	movw	r3, #21364
	mov	r1, r6
	movt	r3, 24980
	mov	r2, #128
	add	r0, sp, #4
	str	r3, [sp, #136]
	bl	strlcpy
.L3198:
	ldr	r2, [r5, #3488]
	mov	r3, sp
	add	r0, sp, #140
	sub	r2, r2, #4
.L3199:
	ldr	r1, [r3], #4
	cmp	r3, r0
	str	r1, [r2, #4]!
	bne	.L3199
	mov	r0, #0
.L3195:
	ldr	r2, [sp, #140]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L3205
	add	sp, sp, #148
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3204:
	mov	r1, #128
	add	r0, sp, #4
	bl	__memzero
	b	.L3198
.L3201:
	mvn	r0, #18
	b	.L3195
.L3205:
	bl	__stack_chk_fail
	.fnend
	.size	usb_diag_update_pid_and_serial_num, .-usb_diag_update_pid_and_serial_num
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	clients_store, %function
clients_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3208
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3209:
	.align	2
.L3208:
	.word	.LANCHOR1+3492
	.fnend
	.size	clients_store, .-clients_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_store, %function
rmnet_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3212
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3213:
	.align	2
.L3212:
	.word	.LANCHOR1+3176
	.fnend
	.size	rmnet_xport_names_store, .-rmnet_xport_names_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_store, %function
rmnet_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3216
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3217:
	.align	2
.L3216:
	.word	.LANCHOR1+3228
	.fnend
	.size	rmnet_transports_store, .-rmnet_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_store, %function
mbim_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3220
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3221:
	.align	2
.L3220:
	.word	.LANCHOR1+3280
	.fnend
	.size	mbim_transports_store, .-mbim_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_send, %function
audio_send:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #108
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	cmp	r3, #0
	moveq	r1, r0
	moveq	r0, r8
	beq	.L3242
	ldr	r2, [r5, #120]
	mov	r1, r0
	mov	r0, r8
	cmp	r2, #0
	beq	.L3242
	ldr	r3, [r3, #168]
	movw	r4, #44100
	adr	fp, .L3248
	ldrd	r10, [fp]
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	add	r0, sp, #16
	bl	ktime_get
	ldr	r2, [sp, #16]
	mov	ip, #0
	ldr	r3, [r5, #136]
	mov	r1, ip
	mov	lr, ip
	ldr	r9, [r5, #140]
	ldr	r0, [sp, #20]
	subs	r6, r2, r3
	sbc	r7, r0, r9
	ldr	r9, [r5, #144]
	.syntax divided
@ 350 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r6
	mov	r2, #0
@ 0 "" 2
@ 350 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r6
	umlal	r3, r1, r10, r7
	mov	r3, #0
	adds	r2, r1, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r7
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r0, r2, #18
	mov	r7, r3
	adr	fp, .L3248+8
	ldrd	r10, [fp]
	lsr	r2, r7, #18
	orr	r0, r0, r7, lsl #14
	mov	r6, #440
	mov	r7, #0
	umull	r0, r1, r0, r4
	mla	r1, r4, r2, r1
	.syntax divided
@ 352 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r0
	cmn	r2, r10
	adcs	r3, r3, fp
	adc	r2, ip, #0
@ 0 "" 2
@ 352 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r0
	umlal	r3, lr, r10, r1
	mov	r3, #0
	adds	r2, lr, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r1
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r2, r2, #9
	mov	fp, r3
	lsr	r1, fp, #9
	orr	r2, r2, fp, lsl #23
	subs	r3, r2, r9
	str	r3, [sp]
	ldr	r3, [r5, #148]
	sbc	r3, r1, r3
	str	r3, [sp, #4]
	ldrd	r10, [sp]
	cmp	r6, r10
	sbcs	r3, r7, fp
	blt	.L3244
	mov	r3, fp
	cmp	r10, #1
	sbcs	r3, r3, #0
	bge	.L3227
	mov	r2, #44
	mov	r3, #0
	strd	r2, [sp]
.L3227:
	add	r3, r5, #96
	ldrd	r10, [sp]
	ldr	r9, [sp, #12]
	str	r3, [sp, #8]
	b	.L3236
.L3247:
	sub	r7, r7, r1
	mov	r2, r7
	bl	memcpy
	cmp	r4, r7
	mov	r3, r7
	ble	.L3233
	ldr	r0, [r6]
	sub	r3, r4, r7
	mov	r2, r3
	ldr	r1, [r5, #112]
	str	r3, [sp, #12]
	add	r0, r0, r7
	bl	memcpy
	ldr	r3, [sp, #12]
	ldr	r2, [r5, #112]
	add	r3, r2, r3
	str	r3, [r5, #120]
.L3234:
	mov	r0, r8
	ldr	r1, [sp]
	str	r4, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #104]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3245
	ldr	r0, [r9, #80]
	lsl	r4, r4, #3
	mov	r1, #0
	ldr	r3, [r5, #144]
	ldr	r2, [r5, #148]
	udiv	r4, r4, r0
	subs	r10, r10, r4
	sbc	fp, fp, r1
	adds	r4, r3, r4
	adc	r3, r2, r1
	cmp	r10, #1
	sbcs	r2, fp, #0
	str	r4, [r5, #144]
	str	r3, [r5, #148]
	blt	.L3246
.L3236:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	mov	r1, r0
	ldr	r3, [r5, #96]
	cmp	r2, r3
	beq	.L3238
	ldr	ip, [r3]
	mov	r0, #256
	sub	r6, r3, #36
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	mov	r2, #512
	stm	r3, {r0, r2}
.L3228:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	str	r0, [sp]
	cmp	r3, #0
	beq	.L3243
	ldr	r1, [r5, #120]
	cmp	r1, #0
	beq	.L3243
	cmp	r6, #0
	beq	.L3243
	ldr	r4, [r9, #80]
	ldr	r7, [r5, #116]
	ldr	r0, [r6]
	mul	r4, r10, r4
	lsr	r4, r4, #3
	cmp	r4, #256
	movcs	r4, #256
	add	r3, r1, r4
	cmp	r7, r3
	bcc	.L3247
	mov	r2, r4
	str	r4, [sp, #12]
	bl	memcpy
	ldr	r3, [sp, #12]
.L3233:
	ldr	r1, [r5, #116]
	ldr	r2, [r5, #120]
	add	r3, r2, r3
	cmp	r3, r1
	str	r3, [r5, #120]
	ldrcs	r3, [r5, #112]
	strcs	r3, [r5, #120]
	b	.L3234
.L3245:
	mov	r1, r0
	movw	r0, #:lower16:.LC205
	movt	r0, #:upper16:.LC205
	bl	printk
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	ip, [sp, #8]
	add	r2, r6, #36
	mov	r1, r0
	ldr	r3, [r5, #100]
	mov	r0, r8
	str	r2, [r5, #100]
	str	ip, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
.L3242:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3244:
	subs	r2, r2, #44
	mov	r3, #0
	sbc	r1, r1, #0
	str	r2, [r5, #144]
	mov	r2, #44
	str	r1, [r5, #148]
	strd	r2, [sp]
	b	.L3227
.L3243:
	mov	r1, r0
	mov	r0, r8
	b	.L3242
.L3238:
	mov	r6, #0
	b	.L3228
.L3246:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3249:
	.align	3
.L3248:
	.word	-675924773
	.word	1125899906
	.word	-1924145349
	.word	-2095944041
	.fnend
	.size	audio_send, .-audio_send
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_playback_trigger, %function
audio_pcm_playback_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #168]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r3, #200]
	cmp	r1, #6
	ldrls	pc, [pc, r1, asl #2]
	b	.L3255
.L3253:
	.word	.L3252
	.word	.L3254
	.word	.L3255
	.word	.L3255
	.word	.L3255
	.word	.L3252
	.word	.L3254
.L3254:
	mov	r0, sp
	mov	r6, #0
	bl	ktime_get
	ldrd	r2, [sp]
	mov	r7, #0
	mov	r0, r5
	strd	r2, [r5, #136]
	strd	r6, [r5, #144]
	bl	audio_send
	mov	r0, #0
.L3250:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3252:
	add	r6, r5, #108
	mov	r4, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r5, #112]
	mov	r0, r6
	str	r4, [r5, #116]
	str	r4, [r5, #120]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L3250
.L3255:
	mvn	r0, #21
	b	.L3250
	.fnend
	.size	audio_pcm_playback_trigger, .-audio_pcm_playback_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_open, %function
audio_pcm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1944
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	ldrd	r4, [r3, r2]
	add	ip, r3, r2
	strd	r10, [sp, #20]
	ldrd	r2, [ip, #16]
	str	lr, [sp, #28]
	ldr	r8, [r0, #8]
	ldr	r6, [r0, #168]
	ldrd	r0, [ip, #8]
	ldrd	r10, [ip, #56]
	add	lr, r6, #208
	str	r8, [r6, #200]
	strd	r4, [r6, #208]
	ldrd	r4, [ip, #24]
	strd	r0, [r6, #216]
	ldrd	r0, [ip, #32]
	strd	r2, [r6, #224]
	ldrd	r2, [ip, #40]
	strd	r4, [r6, #232]
	ldrd	r4, [ip, #48]
	strd	r0, [r6, #240]
	mov	r0, r6
	strd	r2, [r6, #248]
	strd	r4, [lr, #48]
	strd	r10, [lr, #56]
	bl	snd_pcm_limit_hw_rates
	mov	r3, #2
	mov	r0, #0
	str	r3, [r6, #240]
	str	r7, [r8, #92]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_open, .-audio_pcm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_show, %function
functions_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r9, r0
	mov	r0, r3
	str	r3, [sp, #4]
	bl	mutex_lock
	ldr	r7, [r9, #412]!
	cmp	r9, r7
	beq	.L3271
	movw	r8, #:lower16:.LC206
	sub	r7, r7, #120
	mov	r5, r10
	movt	r8, #:upper16:.LC206
	mov	fp, #58
.L3260:
	mov	r6, r7
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L3263
.L3264:
	ldr	r3, [r4]
	mov	r0, r5
	mov	r2, r8
	mov	r1, #4096
	ldr	r3, [r3]
	bl	snprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L3264
.L3263:
	ldr	r7, [r7, #120]
	cmp	r9, r7
	sub	r7, r7, #120
	beq	.L3272
	cmp	r10, r5
	strbne	fp, [r5, #-1]
	b	.L3260
.L3272:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	cmp	r10, r5
	sub	r0, r5, r10
	beq	.L3259
	mov	r3, #10
	strb	r3, [r5, #-1]
.L3259:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3271:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	mov	r0, #0
	b	.L3259
	.fnend
	.size	functions_show, .-functions_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_show, %function
ffs_aliases_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r5, [r3, #2244]
	sub	r4, r5, #400
	mov	r0, r4
	bl	mutex_lock
	movw	r1, #:lower16:.LC77
	sub	r2, r5, #268
	mov	r0, r6
	movt	r1, #:upper16:.LC77
	bl	sprintf
	mov	r5, r0
	mov	r0, r4
	bl	mutex_unlock
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_aliases_show, .-ffs_aliases_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_rx_push, %function
gs_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #60
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #12
	mov	r0, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irq
	ldr	r7, [r5, #-52]
	ldr	r4, [r5, #-12]
	cmp	r8, r4
	beq	.L3276
	mov	r9, #0
	movw	r3, #:lower16:.LC207
	movt	r3, #:upper16:.LC207
	mov	r10, r9
	mov	fp, r9
	str	r3, [sp, #4]
.L3285:
	cmp	r7, #0
	beq	.L3277
	ldr	r3, [r7, #164]
	tst	r3, #1
	bne	.L3278
	ldr	r2, [r4, #8]
	cmn	r2, #108
	moveq	r10, #1
	beq	.L3280
	cmp	r2, #0
	bne	.L3315
.L3280:
	ldr	r6, [r4, #12]
	cmp	r6, #0
	beq	.L3277
	ldr	r3, [r5, #-4]
	mov	r2, #0
	mov	r0, r7
	ldr	r1, [r4, #-36]
	cmp	r3, #0
	subne	r6, r6, r3
	addne	r1, r1, r3
	mov	r3, r6
	bl	tty_insert_flip_string_fixed_flag
	ldr	r3, [r5, #72]
	cmp	r0, #0
	movne	r9, #1
	cmp	r0, r6
	add	r3, r3, r0
	str	r3, [r5, #72]
	bne	.L3316
	str	fp, [r5, #-4]
.L3277:
	ldm	r4, {r1, r2}
	mov	r3, r5
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-28]!
	str	r4, [r2, #4]
	strd	r2, [r4]
	ldr	r3, [r5, #-20]
	str	r4, [r5, #-28]
	ldr	r4, [r5, #-12]
	sub	r3, r3, #1
	cmp	r8, r4
	str	r3, [r5, #-20]
	bne	.L3285
	cmp	r7, #0
	moveq	r9, #0
	andne	r9, r9, #1
	cmp	r9, #0
	bne	.L3292
.L3289:
	cmp	r10, #0
	bne	.L3291
.L3276:
	ldr	r3, [r5, #-56]
	cmp	r3, #0
	beq	.L3291
	ldr	r0, [sp]
	bl	gs_start_rx
.L3291:
	ldr	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L3316:
	ldr	r3, [r5, #-4]
	add	r0, r3, r0
	str	r0, [r5, #-4]
.L3278:
	cmp	r9, #0
	bne	.L3292
	ldr	r3, [r5, #-12]
	cmp	r8, r3
	beq	.L3289
	ldr	r3, [r7, #164]
	tst	r3, #1
	bne	.L3289
	movw	r0, #:lower16:.LC208
	ldrb	r1, [r5, #-43]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC208
	bl	printk
	b	.L3289
.L3292:
	mov	r0, r7
	bl	tty_flip_buffer_push
	ldr	r3, [r5, #-12]
	cmp	r8, r3
	beq	.L3289
	ldr	r3, [r7, #164]
	tst	r3, #1
	bne	.L3289
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r5
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3336]
	bl	queue_work_on
	b	.L3289
.L3315:
	ldrb	r1, [r5, #-43]	@ zero_extendqisi2
	ldr	r0, [sp, #4]
	bl	printk
	b	.L3280
	.fnend
	.size	gs_rx_push, .-gs_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_probe, %function
gsdio_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r4]
	ldr	r6, [r0]
	cmp	r7, #0
	beq	.L3318
	ldr	r5, [r4, #28]
	mov	r2, #9
	mov	r1, r6
	ldr	r3, [r5, #120]
	ldr	r0, [r3]
	bl	strncmp
	cmp	r0, #0
	beq	.L3319
	cmp	r7, #1
	bls	.L3318
	ldr	r5, [r4, #136]
	mov	r2, #9
	mov	r1, r6
	ldr	r3, [r5, #120]
	ldr	r0, [r3]
	bl	strncmp
	cmp	r0, #0
	beq	.L3319
.L3318:
	movw	r0, #:lower16:.LC209
	mov	r2, r6
	ldr	r1, .L3328
	movt	r0, #:upper16:.LC209
	bl	printk
	mvn	r0, #18
.L3317:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3319:
	mov	r3, #1
	ldr	r4, [r4, #3340]
	movw	r0, #10000
	str	r3, [r5, #112]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r1, r4
	mov	r0, #4
	add	r2, r5, #124
	bl	queue_delayed_work_on
	mov	r0, #0
	b	.L3317
.L3329:
	.align	2
.L3328:
	.word	.LANCHOR2+2008
	.fnend
	.size	gsdio_ch_probe, .-gsdio_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_remove, %function
gsmd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r4, #220]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L3333
	ldr	r3, [r4, #248]
	mov	r2, #20
	mov	r1, r7
	ldr	r5, [r3, #72]
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3332
	cmp	r6, #1
	bls	.L3333
	ldr	r3, [r4, #356]
	mov	r1, r7
	mov	r2, #20
	ldr	r5, [r3, #72]
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3332
.L3333:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3332:
	add	r4, r5, #8
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L3333
	bl	smd_close
	mov	r3, #0
	str	r3, [r5]
	b	.L3333
	.fnend
	.size	gsmd_ch_remove, .-gsmd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_probe, %function
gsmd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r4, #220]
	ldr	r8, [r0]
	cmp	r7, #0
	beq	.L3345
	ldr	r5, [r4, #248]
	mov	r2, #20
	mov	r1, r8
	ldr	r6, [r5, #72]
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3346
	cmp	r7, #1
	bls	.L3345
	ldr	r5, [r4, #356]
	mov	r1, r8
	mov	r2, #20
	ldr	r6, [r5, #72]
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3346
.L3345:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3346:
	add	r1, r6, #8
	mov	r0, #1
	add	r6, r5, #4
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L3347
	ldr	r4, [r4, #3344]
	mov	r0, #0
	bl	msecs_to_jiffies
	mov	r3, r0
	add	r2, r5, #76
	mov	r0, #4
	mov	r1, r4
	bl	queue_delayed_work_on
.L3347:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L3345
	.fnend
	.size	gsmd_ch_probe, .-gsmd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_probe, %function
gbam_data_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r3, [r4, #440]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0]
	cmp	r3, #0
	ble	.L3359
	movw	r0, #:lower16:.LC210
	mov	r2, #20
	movt	r0, #:upper16:.LC210
	bl	strncmp
	cmp	r0, #0
	beq	.L3365
.L3359:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3365:
	ldr	r5, [r4, #444]
	mov	r0, #2
	add	r1, r5, #20
	add	r6, r5, #4
	bl	_set_bit
	mov	r0, r6
	add	r7, r5, #8
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L3360
	add	r2, r5, #284
	mov	r0, #4
	ldr	r1, [r4, #3480]
	bl	queue_work_on
.L3360:
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L3359
	.fnend
	.size	gbam_data_ch_probe, .-gbam_data_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_remove, %function
grmnet_ctrl_smd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r5, #528]
	ldr	r6, [r0]
	cmp	r4, #0
	beq	.L3367
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3368
.L3367:
	ldr	r4, [r5, #612]
	cmp	r4, #0
	beq	.L3369
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3368
.L3369:
	ldr	r4, [r5, #696]
	cmp	r4, #0
	beq	.L3370
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3368
.L3370:
	ldr	r4, [r5, #780]
	cmp	r4, #0
	beq	.L3371
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3368
.L3371:
	ldr	r4, [r5, #864]
	cmp	r4, #0
	beq	.L3372
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3368
.L3372:
	ldr	r4, [r5, #948]
	cmp	r4, #0
	beq	.L3374
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3368
.L3374:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3368:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3374
	bl	smd_close
	mov	r3, #0
	str	r3, [r4]
	b	.L3374
	.fnend
	.size	grmnet_ctrl_smd_ch_remove, .-grmnet_ctrl_smd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_probe, %function
grmnet_ctrl_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r4, [r5, #528]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	cmp	r4, #0
	beq	.L3413
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3414
.L3413:
	ldr	r4, [r5, #612]
	cmp	r4, #0
	beq	.L3415
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3414
.L3415:
	ldr	r4, [r5, #696]
	cmp	r4, #0
	beq	.L3416
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3414
.L3416:
	ldr	r4, [r5, #780]
	cmp	r4, #0
	beq	.L3417
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3414
.L3417:
	ldr	r4, [r5, #864]
	cmp	r4, #0
	beq	.L3418
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3414
.L3418:
	ldr	r4, [r5, #948]
	cmp	r4, #0
	beq	.L3419
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3414
.L3419:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3414:
	add	r6, r4, #8
	mov	r0, #2
	mov	r1, r6
	add	r7, r4, #108
	bl	_clear_bit
	mov	r1, r6
	mov	r0, #1
	bl	_set_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #104]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3420
	add	r2, r4, #112
	mov	r3, #0
	ldr	r1, [r5, #3432]
	mov	r0, #4
	bl	queue_delayed_work_on
.L3420:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L3419
	.fnend
	.size	grmnet_ctrl_smd_ch_probe, .-grmnet_ctrl_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_remove, %function
ghsic_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r5, #1036]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L3459
	ldr	r4, [r5, #1040]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3460
	cmp	r6, #1
	bls	.L3459
	ldr	r4, [r5, #1144]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3460
	cmp	r6, #2
	beq	.L3459
	ldr	r4, [r5, #1248]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3460
	cmp	r6, #3
	beq	.L3459
	ldr	r4, [r5, #1352]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3460
.L3459:
	movw	r0, #:lower16:.LC104
	mvn	r2, #21
	ldr	r1, .L3496
	movt	r0, #:upper16:.LC104
	bl	printk
	mvn	r0, #21
.L3458:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3460:
	add	r6, r4, #4
	add	r7, r4, #84
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #8]
	mov	r1, r0
	cmp	r5, #0
	beq	.L3494
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L3495
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L3467
.L3466:
	mov	r0, r5
	blx	r3
.L3467:
	mov	r1, r7
	mov	r0, #0
	bl	_clear_bit
.L3464:
	mov	r0, #1
	mov	r1, r7
	bl	_clear_bit
	mov	r0, #0
	b	.L3458
.L3495:
	str	r3, [r4, #92]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #120]
	cmp	r3, #0
	bne	.L3466
	b	.L3467
.L3494:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L3464
.L3497:
	.align	2
.L3496:
	.word	.LANCHOR2+2024
	.fnend
	.size	ghsic_ctrl_remove, .-ghsic_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify_modem, %function
gsmd_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #220]
	cmp	r1, ip
	bcs	.L3527
	cmp	r0, #0
	beq	.L3528
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ands	ip, r2, #1
	str	r6, [sp, #8]
	movne	ip, #2
	str	lr, [sp, #12]
	mov	lr, #108
	mla	r1, lr, r1, r3
	ldr	r4, [r1, #248]
	moveq	r1, #4
	movne	r1, #6
	tst	r2, #2
	moveq	r1, ip
	ldr	r3, [r4, #160]
	cmp	r3, r1
	beq	.L3498
	ldr	r3, [r4, #72]
	str	r1, [r4, #160]
	ldr	r2, [r3, #8]
	tst	r2, #1
	beq	.L3498
	tst	r1, #2
	ldr	r3, [r3]
	bne	.L3529
.L3506:
	ldrd	r4, [sp]
	mov	r0, r3
	mvn	r2, r1
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L3498:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3529:
	mov	r5, r0
	mov	r0, r3
	bl	smd_tiocmget
	ands	r1, r0, #128
	movne	r1, #8
	movne	r3, #9
	moveq	r3, #1
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	ldr	r3, [r5, #136]
	cmp	r3, #0
	beq	.L3526
	ldr	r0, [r4, #68]
	blx	r3
.L3526:
	ldr	r3, [r4, #72]
	ldr	r1, [r4, #160]
	ldr	r3, [r3]
	b	.L3506
.L3527:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldr	r1, .L3530
	movt	r0, #:upper16:.LC99
	b	printk
.L3528:
	movw	r0, #:lower16:.LC100
	ldr	r1, .L3530
	movt	r0, #:upper16:.LC100
	b	printk
.L3531:
	.align	2
.L3530:
	.word	.LANCHOR2+2044
	.fnend
	.size	gsmd_notify_modem, .-gsmd_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_remove, %function
gbam_data_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r7, [r4, #440]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r7, #0
	ble	.L3533
	mov	r5, #0
	movw	r6, #:lower16:.LC210
	mov	fp, r0
	mov	r9, r5
	mov	r8, r5
	movt	r6, #:upper16:.LC210
.L3538:
	mov	r2, #20
	mov	r0, r6
	ldr	r1, [fp]
	bl	strncmp
	cmp	r0, #0
	beq	.L3556
.L3534:
	add	r5, r5, #1
	cmp	r5, r7
	blt	.L3538
.L3533:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3556:
	mov	r3, #84
	ldr	r2, .L3557
	mul	r3, r3, r5
	ldr	r7, [r3, r2]
	add	r3, r7, #8
	add	r10, r7, #4
	mov	r0, r10
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r0, r7, #8
	bl	_raw_spin_lock
	ldr	r3, [r7, #12]
	cmp	r3, #0
	ldrdne	r8, [r3, #84]
.L3535:
	add	r0, r7, #8
	bl	_raw_spin_unlock
	ldr	r1, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L3536
	ldr	r3, [r8, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L3536
	mov	r0, r8
	blx	r3
.L3536:
	cmp	r9, #0
	beq	.L3537
	ldr	r3, [r9, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L3537
	mov	r0, r9
	blx	r3
.L3537:
	mov	r0, r7
	add	r10, r7, #20
	bl	gbam_free_buffers
	ldr	r0, [r7, #24]
	bl	msm_bam_dmux_close
	mov	r3, #0
	mov	r1, r10
	mov	r0, #2
	str	r3, [r7, #240]
	bl	_clear_bit
	mov	r1, r10
	mov	r0, #1
	bl	_clear_bit
	ldr	r7, [r4, #440]
	b	.L3534
.L3558:
	.align	2
.L3557:
	.word	.LANCHOR1+444
	.fnend
	.size	gbam_data_ch_remove, .-gbam_data_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_tobam, %function
gbam_data_write_tobam:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	add	r6, r5, #4
	str	r5, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	fp, r0
	cmp	r3, #0
	beq	.L3560
	movw	r10, #:lower16:.LANCHOR0
	sub	r7, r4, #20
	ldr	r3, [r4, #160]
	movt	r10, #:upper16:.LANCHOR0
	mov	r9, #0
	b	.L3561
.L3576:
	str	r3, [r4, #-12]
	ldrd	r2, [r5]
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r2, [r4, #160]
	ldr	r3, [r4, #180]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #160]
	str	r3, [r4, #180]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r5
	ldr	r0, [r4, #-56]
	bl	msm_bam_dmux_write
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	fp, r0
	bne	.L3575
	ldr	r3, [r4, #160]
	ldr	r2, [r4, #200]
	cmp	r3, r2
	strhi	r3, [r4, #200]
.L3561:
	ldr	ip, [r10, #540]
	mov	r1, fp
	mov	r0, r6
	ldr	r2, [r4, #-12]
	cmp	ip, r3
	sub	r3, r2, #1
	bls	.L3562
	ldr	r5, [r4, #-20]
	cmp	r5, r7
	beq	.L3562
	cmp	r5, #0
	bne	.L3576
.L3562:
	mov	r1, fp
	mov	r0, r6
	str	r2, [sp]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp]
	ldr	r3, [r10, #544]
	cmp	r3, r2
	bls	.L3559
	ldr	r3, [r4, #196]
	cmp	r3, #0
	beq	.L3567
	ldr	r3, [r4, #188]
	mov	r2, #0
	str	r2, [r4, #196]
	add	r3, r3, #1
	str	r3, [r4, #188]
.L3567:
	ldr	r0, [sp, #4]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L3559:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3575:
	ldr	r1, [r4, #160]
	mov	r0, r5
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #180]
	sub	r1, r1, #1
	add	r2, r2, #1
	sub	r3, r3, #1
	str	r1, [r4, #160]
	str	r2, [r4, #168]
	str	r3, [r4, #180]
	bl	dev_kfree_skb_any
	ldr	r2, [r4, #-12]
	b	.L3562
.L3560:
	mov	r1, r0
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gbam_data_write_tobam, .-gbam_data_write_tobam
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect_work, %function
gbam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #280
	strd	r8, [sp, #16]
	sub	r8, r0, #276
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	mov	r0, r8
	cmp	r3, #0
	beq	.L3600
	bl	_raw_spin_unlock
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-264]
	tst	r3, #4
	bne	.L3601
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3601:
	sub	r3, r4, #284
	movw	r2, #:lower16:gbam_notify
	ldr	r0, [r4, #-260]
	mov	r1, r3
	movt	r2, #:upper16:gbam_notify
	str	r3, [sp, #4]
	bl	msm_bam_dmux_open
	subs	r7, r0, #0
	bne	.L3602
	sub	r1, r4, #264
	mov	r0, #1
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	str	r0, [sp]
	cmp	r3, #0
	beq	.L3603
	movw	r2, #:lower16:.LANCHOR0
	ldr	fp, [r3, #88]
	sub	r9, r4, #232
	movt	r2, #:upper16:.LANCHOR0
	ldr	r3, [r2, #548]
	str	r2, [sp, #12]
	cmp	r3, #0
	ble	.L3582
	movw	r10, #:lower16:gbam_epout_complete
	str	r6, [sp, #8]
	mov	r5, r7
	movt	r10, #:upper16:gbam_epout_complete
	mov	r6, r4
	mov	r4, r10
	mov	r10, r3
	b	.L3584
.L3583:
	str	r4, [r0, #28]
	ldr	r1, [r6, #-232]
	cmp	r10, r5
	str	r2, [r1, #4]
	str	r1, [r0, #36]
	str	r9, [r0, #40]
	str	r2, [r6, #-232]
	beq	.L3604
.L3584:
	ldr	r2, [fp, #8]
	mov	r1, #32
	mov	r0, fp
	add	r5, r5, #1
	ldr	r2, [r2, #8]
	blx	r2
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L3583
	ldr	r2, [r6, #-232]
	mov	r4, r6
	ldr	r6, [sp, #8]
	cmp	r9, r2
	beq	.L3605
.L3582:
	mov	r0, r6
	ldr	r1, [sp]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #-272]
	str	r0, [sp]
	cmp	r2, #0
	beq	.L3606
	ldr	r3, [sp, #12]
	sub	fp, r4, #256
	ldr	r6, [r2, #84]
	ldr	r10, [r3, #552]
	cmp	r10, #0
	ble	.L3588
	movw	r5, #:lower16:gbam_epin_complete
	movt	r5, #:upper16:gbam_epin_complete
	b	.L3591
.L3589:
	str	r5, [r0, #28]
	ldr	r2, [r4, #-256]
	cmp	r10, r7
	str	r3, [r2, #4]
	str	r2, [r0, #36]
	str	fp, [r0, #40]
	str	r3, [r4, #-256]
	beq	.L3588
.L3591:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	add	r7, r7, #1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L3589
	ldr	r2, [r4, #-256]
	cmp	fp, r2
	beq	.L3607
.L3588:
	mov	r0, r8
	ldr	r1, [sp]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [sp, #4]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L3600:
	bl	_raw_spin_unlock
	mov	r1, r5
.L3597:
	mov	r0, r6
.L3598:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3606:
	ldr	r2, [r4, #-232]
	cmp	r9, r2
	beq	.L3599
	mov	r7, #256
	mov	r5, #512
.L3587:
	ldr	ip, [r2]
	sub	r1, r2, #36
	mov	r0, fp
	ldr	r3, [r2, #4]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r7, [r2]
	str	r5, [r2, #4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r2, [r4, #-232]
	cmp	r9, r2
	bne	.L3587
.L3599:
	mov	r0, r8
	ldr	r1, [sp]
	b	.L3598
.L3604:
	mov	r4, r6
	ldr	r6, [sp, #8]
	b	.L3582
.L3603:
	mov	r1, r0
	b	.L3597
.L3602:
	ldr	r1, .L3608
	movw	r0, #:lower16:.LC211
	mov	r3, r7
	ldr	r2, [r4, #-260]
	movt	r0, #:upper16:.LC211
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L3607:
	movw	r0, #:lower16:.LC213
	ldr	r1, .L3608+4
	mov	r5, #256
	movt	r0, #:upper16:.LC213
	mov	r7, #512
	bl	printk
	b	.L3590
.L3592:
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r5, r7}
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L3590:
	ldr	r3, [r4, #-232]
	mov	r0, r6
	cmp	r9, r3
	sub	r1, r3, #36
	bne	.L3592
	b	.L3599
.L3605:
	movw	r0, #:lower16:.LC212
	ldr	r1, .L3608+4
	movt	r0, #:upper16:.LC212
	bl	printk
	ldr	r1, [sp]
	b	.L3597
.L3609:
	.align	2
.L3608:
	.word	.LANCHOR2+2064
	.word	.LANCHOR2+2084
	.fnend
	.size	gbam_connect_work, .-gbam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_resume_work, %function
gbam2bam_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r1, r2
	ldrb	r0, [r0, #-203]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-200]
	cmp	r3, #7
	beq	.L3613
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3613:
	sub	r0, r4, #196
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
	.fnend
	.size	gbam2bam_resume_work, .-gbam2bam_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_resume_work, %function
bam2bam_data_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r1, r2
	ldrb	r0, [r0, #-163]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-156]
	cmp	r3, #7
	beq	.L3617
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3617:
	sub	r0, r4, #152
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
	.fnend
	.size	bam2bam_data_resume_work, .-bam2bam_data_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_suspend_work, %function
gbam2bam_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r1, #:lower16:gbam_wake_cb
	sub	r5, r0, #316
	mov	r4, r0
	str	r6, [sp, #8]
	movt	r1, #:upper16:gbam_wake_cb
	str	lr, [sp, #12]
	mov	r2, r5
	ldrb	r0, [r0, #-187]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-184]
	cmp	r3, #7
	beq	.L3621
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3621:
	movw	r1, #:lower16:gbam_stop
	movw	r0, #:lower16:gbam_start
	mov	r2, r5
	movt	r1, #:upper16:gbam_stop
	movt	r0, #:upper16:gbam_start
	bl	usb_bam_register_start_stop_cbs
	ldr	r6, [sp, #8]
	sub	r0, r4, #180
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
	.fnend
	.size	gbam2bam_suspend_work, .-gbam2bam_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_suspend_work, %function
bam2bam_data_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r1, #:lower16:bam_data_wake_cb
	sub	r5, r0, #200
	mov	r4, r0
	str	r6, [sp, #8]
	movt	r1, #:upper16:bam_data_wake_cb
	str	lr, [sp, #12]
	mov	r2, r5
	ldrb	r0, [r0, #-147]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-140]
	cmp	r3, #7
	beq	.L3625
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3625:
	movw	r1, #:lower16:bam_data_stop
	movw	r0, #:lower16:bam_data_start
	mov	r2, r5
	movt	r1, #:upper16:bam_data_stop
	movt	r0, #:upper16:bam_data_start
	bl	usb_bam_register_start_stop_cbs
	ldr	r6, [sp, #8]
	sub	r0, r4, #136
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
	.fnend
	.size	bam2bam_data_suspend_work, .-bam2bam_data_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_connect_work, %function
gbam2bam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #284
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-152]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #6
	beq	.L3658
	cmp	r3, #7
	beq	.L3659
.L3629:
	sub	r6, r4, #280
	sub	r5, r4, #276
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L3660
	ldr	r0, [r3, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-172]
	beq	.L3661
	str	r7, [r0, #32]
	ldr	r2, [r4, #-172]
	movw	r3, #:lower16:gbam_endless_rx_complete
	movt	r3, #:upper16:gbam_endless_rx_complete
	mov	fp, #0
	movw	r10, #65439
	mov	r8, #32
	movt	r10, 65534
	movt	r8, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-172]
	mov	r1, #32
	str	fp, [r3, #4]
	ldr	r2, [r4, #-172]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-172]
	ldr	r2, [r4, #-164]
	and	r2, r2, r10
	orr	r2, r2, r8
	str	r2, [r3, #52]
	ldr	r3, [r4, #-272]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	str	r0, [r4, #-168]
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-168]
	cmp	r3, fp
	beq	.L3657
	str	r7, [r3, #32]
	ldr	r2, [r4, #-168]
	movw	r3, #:lower16:gbam_endless_tx_complete
	movt	r3, #:upper16:gbam_endless_tx_complete
	mov	r0, r6
	str	r3, [r2, #28]
	ldr	r3, [r4, #-168]
	str	fp, [r3, #4]
	ldr	r2, [r4, #-168]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-168]
	ldr	r3, [r4, #-160]
	and	r3, r3, r10
	orr	r3, r3, r8
	str	r3, [r2, #52]
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L3662
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #-172]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3663
.L3635:
	mov	r0, r6
	bl	_raw_spin_unlock
.L3634:
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L3664
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #-168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3665
.L3638:
	mov	r0, r5
	bl	_raw_spin_unlock
.L3637:
	ldr	r3, [r4, #-152]
	cmp	r3, #6
	beq	.L3666
.L3626:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3666:
	ldr	r3, [r4, #-284]
	cmp	r3, #0
	bne	.L3626
	movw	r0, #:lower16:gbam_peer_reset_cb
	mov	r1, r7
	movt	r0, #:upper16:gbam_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r2, r0, #0
	beq	.L3626
	ldr	r1, .L3668
	movw	r0, #:lower16:.LC219
	movt	r0, #:upper16:.LC219
.L3655:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L3658:
	bl	usb_bam_reset_complete
	sub	r1, r4, #164
	ldrb	r0, [r4, #-156]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L3667
	sub	r1, r4, #160
	ldrb	r0, [r4, #-155]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L3629
	movw	r0, #:lower16:.LC215
	ldr	r1, .L3668
	movt	r0, #:upper16:.LC215
	b	.L3655
.L3660:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3661:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L3657:
	ldr	r1, .L3668
	movw	r0, #:lower16:.LC217
	movt	r0, #:upper16:.LC217
.L3656:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L3663:
	movw	r0, #:lower16:.LC218
	ldr	r1, .L3668+4
	movt	r0, #:upper16:.LC218
	bl	printk
	b	.L3635
.L3665:
	movw	r0, #:lower16:.LC218
	ldr	r1, .L3668+8
	movt	r0, #:upper16:.LC218
	bl	printk
	b	.L3638
.L3662:
	mov	r0, r6
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC14
	ldr	r1, .L3668+4
	movt	r0, #:upper16:.LC14
	bl	printk
	b	.L3634
.L3664:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC14
	ldr	r1, .L3668+8
	movt	r0, #:upper16:.LC14
	bl	printk
	b	.L3637
.L3659:
	movw	r0, #:lower16:.LC216
	ldr	r1, .L3668
	movt	r0, #:upper16:.LC216
	b	.L3656
.L3667:
	movw	r0, #:lower16:.LC214
	ldr	r1, .L3668
	movt	r0, #:upper16:.LC214
	b	.L3655
.L3669:
	.align	2
.L3668:
	.word	.LANCHOR2+2100
	.word	.LANCHOR2+2124
	.word	.LANCHOR2+2148
	.fnend
	.size	gbam2bam_connect_work, .-gbam2bam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_connect_work, %function
bam2bam_data_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	sub	r5, r0, #168
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #-108]
	cmp	r3, #7
	bne	.L3671
	ldr	r3, [r0, #-112]
	cmp	r3, #1
	beq	.L3715
	cmp	r3, #0
	mov	r2, #5
	mov	r3, #0
	str	r3, [r0, #-92]
	str	r2, [r0, #-80]
	beq	.L3716
.L3673:
	sub	r6, r4, #104
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L3714
	ldr	r3, [r4, #-112]
	mov	r2, #17
	mov	r1, #1
	str	r1, [r4, #-92]
	str	r2, [r4, #-80]
	cmp	r3, #0
	beq	.L3717
.L3675:
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L3714
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L3718
.L3677:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L3719
	ldr	r0, [r3, #12]
	cmp	r0, #0
	beq	.L3720
	ldr	r3, [r0, #8]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-132]
	beq	.L3670
	str	r5, [r0, #32]
	ldr	r2, [r4, #-132]
	movw	r3, #:lower16:bam_data_endless_rx_complete
	movt	r3, #:upper16:bam_data_endless_rx_complete
	mov	r8, #0
	movw	r7, #65439
	mov	r6, #32
	movt	r7, 65534
	movt	r6, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-132]
	mov	r1, #208
	str	r8, [r3, #4]
	ldr	r2, [r4, #-132]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-132]
	ldr	r3, [r4, #-124]
	and	r3, r3, r7
	orr	r3, r3, r6
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, r8
	str	r0, [r4, #-128]
	beq	.L3670
	str	r5, [r0, #32]
	ldr	r2, [r4, #-128]
	movw	r3, #:lower16:bam_data_endless_tx_complete
	movt	r3, #:upper16:bam_data_endless_tx_complete
	str	r3, [r2, #28]
	ldr	r3, [r4, #-128]
	str	r8, [r3, #4]
	ldr	r2, [r4, #-128]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-128]
	ldr	r3, [r4, #-120]
	and	r7, r7, r3
	orr	r6, r7, r6
	str	r6, [r2, #52]
	ldr	r3, [r4, #-164]
	cmp	r3, r8
	beq	.L3685
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #-132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3721
.L3686:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L3685
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #-128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3722
.L3685:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	beq	.L3670
	movw	r0, #:lower16:bam_data_peer_reset_cb
	mov	r1, r5
	movt	r0, #:upper16:bam_data_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r3, r0, #0
	bne	.L3723
.L3670:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3716:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3524]
	str	r2, [r0, #-12]
	ldr	r3, [r3, #3544]
	str	r3, [r0, #-16]
	b	.L3673
.L3717:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3528]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3544]
	str	r3, [r4, #-16]
	b	.L3675
.L3671:
	bl	usb_bam_reset_complete
	sub	r1, r4, #124
	ldrb	r0, [r4, #-116]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L3724
	sub	r1, r4, #120
	ldrb	r0, [r4, #-115]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L3677
	ldr	r1, .L3725
	movw	r0, #:lower16:.LC215
	movt	r0, #:upper16:.LC215
.L3713:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L3723:
	ldr	r2, .L3725
	movw	r0, #:lower16:.LC225
	movt	r0, #:upper16:.LC225
.L3711:
	ldrd	r4, [sp]
	mov	r1, r2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L3719:
	ldr	r1, .L3725
	movw	r0, #:lower16:.LC223
	movt	r0, #:upper16:.LC223
.L3712:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L3714:
	movw	r0, #:lower16:.LC221
	ldr	r2, .L3725
	movt	r0, #:upper16:.LC221
	b	.L3711
.L3720:
	movw	r0, #:lower16:.LC224
	ldr	r1, .L3725
	movt	r0, #:upper16:.LC224
	b	.L3712
.L3718:
	ldr	r2, .L3725
	movw	r0, #:lower16:.LC222
	movt	r0, #:upper16:.LC222
.L3710:
	mov	r1, r2
	b	.L3713
.L3721:
	movw	r0, #:lower16:.LC218
	ldr	r1, .L3725+4
	movt	r0, #:upper16:.LC218
	bl	printk
	b	.L3686
.L3722:
	movw	r0, #:lower16:.LC218
	ldr	r1, .L3725+8
	movt	r0, #:upper16:.LC218
	bl	printk
	b	.L3685
.L3724:
	movw	r0, #:lower16:.LC214
	ldr	r1, .L3725
	movt	r0, #:upper16:.LC214
	b	.L3713
.L3715:
	movw	r0, #:lower16:.LC220
	ldr	r2, .L3725
	movt	r0, #:upper16:.LC220
	b	.L3710
.L3726:
	.align	2
.L3725:
	.word	.LANCHOR2+2172
	.word	.LANCHOR2+2200
	.word	.LANCHOR2+2228
	.fnend
	.size	bam2bam_data_connect_work, .-bam2bam_data_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_peer_reset_cb, %function
bam_data_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #0
	str	lr, [sp, #4]
	bl	usb_bam_a2_reset
	subs	r4, r0, #0
	bne	.L3731
	mov	r1, r4
	bl	usb_bam_register_peer_reset_cb
.L3727:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3731:
	ldr	r2, .L3732
	movw	r0, #:lower16:.LC226
	mov	r3, r4
	movt	r0, #:upper16:.LC226
	mov	r1, r2
	bl	printk
	b	.L3727
.L3733:
	.align	2
.L3732:
	.word	.LANCHOR2+2256
	.fnend
	.size	bam_data_peer_reset_cb, .-bam_data_peer_reset_cb
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_init, %function
gqti_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3737
	mov	r2, #56
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L3735
	movw	r0, #:lower16:.LC227
	mvn	r7, #11
	movt	r0, #:upper16:.LC227
	bl	printk
	b	.L3734
.L3737:
	mov	r4, #16
.L3735:
	mov	r5, #0
	add	r3, r4, #44
	movw	r6, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC228
	movt	r6, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC228
	str	r5, [r4, #8]
	add	r2, r6, #3552
	add	r0, r4, #32
	str	r5, [r4, #12]
	str	r5, [r4, #16]
	str	r5, [r4, #20]
	str	r5, [r4, #24]
	str	r5, [r4, #28]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r5, [r4, #52]
	bl	__init_waitqueue_head
	ldr	r0, .L3742
	str	r4, [r6, #1032]
	bl	misc_register
	subs	r7, r0, #0
	beq	.L3734
	movw	r0, #:lower16:.LC229
	movt	r0, #:upper16:.LC229
	bl	printk
	mov	r0, r4
	bl	kfree
	str	r5, [r6, #1032]
.L3734:
	mov	r0, r7
	pop	{r4, r5, r6, r7, r8, pc}
.L3743:
	.align	2
.L3742:
	.word	.LANCHOR0+556
	.fnend
	.size	gqti_ctrl_init, .-gqti_ctrl_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_init, %function
accessory_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L3748
	mov	r2, #1792
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L3754
.L3745:
	mov	r7, #0
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC230
	add	r2, r5, #3552
	movt	r1, #:upper16:.LC230
	str	r7, [r4, #88]
	add	r0, r4, #1664
	mov	r6, #65024
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC231
	add	r0, r4, #1664
	add	r2, r5, #3552
	movt	r1, #:upper16:.LC231
	add	r0, r0, #12
	movt	r6, 65535
	bl	__init_waitqueue_head
	add	r0, r4, #1648
	add	r2, r4, #1760
	str	r7, [r4, #1652]
	add	r0, r0, #8
	add	ip, r4, #1776
	add	r1, r4, #1696
	movw	r3, #:lower16:acc_start_work
	add	ip, ip, #8
	add	lr, r4, #1776
	str	r0, [r4, #1656]
	add	r2, r2, #8
	add	r1, r1, #8
	str	r0, [r4, #1660]
	movt	r3, #:upper16:acc_start_work
	add	r0, r4, #1712
	str	r6, [r4, #1700]
	str	r1, [r4, #1704]
	add	r0, r0, #4
	str	r1, [r4, #1708]
	mov	r1, r7
	str	r3, [r4, #1712]
	mov	r3, r7
	str	r2, [r4, #1768]
	str	r2, [r4, #1772]
	mov	r2, r7
	str	lr, [r4, #1776]
	str	lr, [r4, #1780]
	str	ip, [r4, #1784]
	str	ip, [r4, #1788]
	bl	init_timer_key
	movw	ip, #:lower16:delayed_work_timer_fn
	add	r1, r4, #1696
	ldr	r0, .L3756
	add	r3, r4, #1744
	movw	r2, #:lower16:acc_hid_work
	str	r6, [r4, #1752]
	add	r3, r3, #12
	movt	ip, #:upper16:delayed_work_timer_fn
	str	r4, [r5, #2520]
	add	r1, r1, #4
	movt	r2, #:upper16:acc_hid_work
	str	ip, [r4, #1732]
	str	r1, [r4, #1736]
	str	r3, [r4, #1756]
	str	r3, [r4, #1760]
	str	r2, [r4, #1764]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L3755
.L3744:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3748:
	mov	r4, #16
	b	.L3745
.L3754:
	mvn	r5, #11
	b	.L3744
.L3755:
.L3747:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC232
	movt	r0, #:upper16:.LC232
	bl	printk
	b	.L3744
.L3757:
	.align	2
.L3756:
	.word	.LANCHOR0+592
	.fnend
	.size	accessory_function_init, .-accessory_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_init, %function
rndis_qc_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L3760
	mov	r2, #272
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	beq	.L3758
.L3760:
	movw	r0, #:lower16:.LC233
	ldr	r1, .L3768
	movt	r0, #:upper16:.LC233
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, .L3768+4
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2524]
	bl	misc_register
	subs	r4, r0, #0
	bne	.L3767
.L3758:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3767:
	movw	r0, #:lower16:.LC234
	ldr	r1, .L3768
	movt	r0, #:upper16:.LC234
	bl	printk
	b	.L3758
.L3769:
	.align	2
.L3768:
	.word	.LANCHOR2+2280
	.word	.LANCHOR0+628
	.fnend
	.size	rndis_qc_function_init, .-rndis_qc_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_init, %function
mtp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L3775
	mov	r2, #256
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L3782
.L3771:
	mov	r6, #0
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC230
	add	r2, r5, #3552
	movt	r1, #:upper16:.LC230
	str	r6, [r4, #88]
	add	r0, r4, #132
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC231
	add	r2, r5, #3552
	movt	r1, #:upper16:.LC231
	add	r0, r4, #144
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC235
	add	r2, r5, #3552
	movt	r1, #:upper16:.LC235
	add	r0, r4, #156
	bl	__init_waitqueue_head
	movw	ip, #:lower16:.LC236
	add	r2, r4, #116
	str	r6, [r4, #108]
	add	r3, r4, #124
	movt	ip, #:upper16:.LC236
	str	r6, [r4, #112]
	mov	r1, #10
	movw	r0, #:lower16:.LC79
	str	r2, [r4, #116]
	strd	r2, [r4, #120]
	movt	r1, 2
	movt	r0, #:upper16:.LC79
	str	r3, [r4, #128]
	mov	r2, #1
	mov	r3, r6
	stm	sp, {r6, ip}
	bl	__alloc_workqueue_key
	cmp	r0, r6
	str	r0, [r4, #180]
	beq	.L3777
	mov	r2, #65024
	movw	r1, #:lower16:send_file_work
	ldr	r0, .L3784
	movw	r3, #:lower16:receive_file_work
	movt	r2, 65535
	str	r4, [r5, #2532]
	add	lr, r4, #188
	add	ip, r4, #204
	movt	r1, #:upper16:send_file_work
	movt	r3, #:upper16:receive_file_work
	str	r2, [r4, #184]
	str	lr, [r4, #188]
	str	lr, [r4, #192]
	str	r1, [r4, #196]
	str	r2, [r4, #200]
	str	ip, [r4, #204]
	str	ip, [r4, #208]
	str	r3, [r4, #212]
	bl	misc_register
	subs	r6, r0, #0
	bne	.L3783
.L3770:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3775:
	mov	r4, #16
	b	.L3771
.L3782:
	mvn	r6, #11
	b	.L3770
.L3783:
.L3774:
	ldr	r0, [r4, #180]
	bl	destroy_workqueue
.L3773:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #2532]
	bl	kfree
	movw	r0, #:lower16:.LC237
	movt	r0, #:upper16:.LC237
	bl	printk
	b	.L3770
.L3777:
	mvn	r6, #11
	b	.L3773
.L3785:
	.align	2
.L3784:
	.word	.LANCHOR0+664
	.fnend
	.size	mtp_function_init, .-mtp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_init, %function
adb_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r4, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r4, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4]
	beq	.L3788
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4]
	beq	.L3791
.L3788:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L3793
	mov	r2, #164
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L3791
.L3790:
	mov	r6, #0
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC230
	add	r2, r5, #3552
	movt	r1, #:upper16:.LC230
	str	r6, [r4, #88]
	add	r0, r4, #128
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC231
	add	r2, r5, #3552
	movt	r1, #:upper16:.LC231
	add	r0, r4, #140
	bl	__init_waitqueue_head
	add	r3, r4, #120
	mov	r2, #1
	ldr	r0, .L3802
	str	r6, [r4, #108]
	str	r6, [r4, #112]
	str	r6, [r4, #116]
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	strb	r2, [r4, #161]
	str	r4, [r5, #3424]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L3801
.L3786:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3793:
	mov	r4, #16
	b	.L3790
.L3791:
	mvn	r5, #11
	b	.L3786
.L3801:
.L3792:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC238
	movt	r0, #:upper16:.LC238
	bl	printk
	b	.L3786
.L3803:
	.align	2
.L3802:
	.word	.LANCHOR0+700
	.fnend
	.size	adb_function_init, .-adb_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_init, %function
rmnet_smd_sdio_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L3811
	mov	r2, #428
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L3815
.L3805:
	movw	r2, #:lower16:.LC239
	mov	r5, #0
	movt	r2, #:upper16:.LC239
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r1, #10
	str	r5, [sp]
	movw	r0, #:lower16:.LC79
	str	r2, [sp, #4]
	mov	r3, r5
	movt	r1, 2
	movt	r0, #:upper16:.LC79
	str	r4, [r6, #2512]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #380]
	beq	.L3813
	mov	r7, #65024
	movw	r3, #:lower16:rmnet_mux_disconnect_work
	str	r5, [r4, #176]
	movt	r3, #:upper16:rmnet_mux_disconnect_work
	movt	r7, 65535
	str	r5, [r4, #368]
	add	r0, r4, #388
	movw	r1, #:lower16:rmnet_mux_smd_data_rx_tlet
	str	r5, [r4, #372]
	movt	r1, #:upper16:rmnet_mux_smd_data_rx_tlet
	mov	r2, r4
	str	r5, [r4, #376]
	str	r7, [r4, #384]
	add	r8, r4, #104
	str	r0, [r4, #388]
	str	r0, [r4, #392]
	add	r0, r4, #152
	str	r3, [r4, #396]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_mux_smd_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #132
	movt	r1, #:upper16:rmnet_mux_smd_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC240
	add	r2, r6, #3552
	movt	r1, #:upper16:.LC240
	add	r0, r4, #180
	bl	__init_waitqueue_head
	movw	r2, #:lower16:rmnet_mux_sdio_data_rx_work
	movw	ip, #:lower16:rmnet_mux_open_sdio_work
	str	r8, [r4, #104]
	movt	r2, #:upper16:rmnet_mux_sdio_data_rx_work
	movt	ip, #:upper16:rmnet_mux_open_sdio_work
	str	r8, [r4, #108]
	add	r1, r4, #112
	add	r0, r4, #260
	add	r3, r4, #120
	str	r1, [r4, #112]
	str	r2, [r4, #252]
	add	r2, r4, #244
	str	r1, [r4, #116]
	mov	r1, r5
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	mov	r3, r5
	str	r7, [r4, #240]
	str	r2, [r4, #244]
	str	r2, [r4, #248]
	mov	r2, r5
	str	r7, [r4, #256]
	add	r7, r4, #192
	str	r0, [r4, #260]
	str	r0, [r4, #264]
	add	r0, r4, #272
	str	ip, [r4, #268]
	bl	init_timer_key
	mov	r3, r7
	add	r1, r4, #216
	movw	r0, #:lower16:delayed_work_timer_fn
	add	ip, r4, #316
	add	lr, r4, #256
	add	r2, r4, #224
	str	r3, [r4, #192]
	movt	r0, #:upper16:delayed_work_timer_fn
	add	r7, r4, #200
	str	r3, [r4, #196]
	add	r3, r4, #340
	str	r7, [r4, #200]
	str	r1, [r4, #216]
	str	r1, [r4, #220]
	movw	r1, #:lower16:.LC241
	str	r7, [r4, #204]
	movt	r1, #:upper16:.LC241
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	str	r2, [r4, #224]
	str	r2, [r4, #228]
	add	r2, r6, #3552
	str	r5, [r4, #232]
	str	r5, [r4, #236]
	str	r0, [r4, #288]
	add	r0, r4, #324
	str	lr, [r4, #292]
	str	ip, [r4, #316]
	str	ip, [r4, #320]
	str	r3, [r4, #340]
	str	r3, [r4, #344]
	bl	__init_waitqueue_head
	ldr	r0, .L3817
	bl	misc_register
	subs	r5, r0, #0
	bne	.L3808
	movw	r0, #:lower16:.LC242
	mov	r1, r5
	movt	r0, #:upper16:.LC242
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3552]
	beq	.L3804
	cmn	r0, #4096
	bhi	.L3804
	ldr	ip, .L3817+4
	movw	r0, #:lower16:.LC164
	mov	r3, r4
	movt	r0, #:upper16:.LC164
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L3816
.L3804:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3808:
	movw	r0, #:lower16:.LC243
	ldr	r1, .L3817+8
	movt	r0, #:upper16:.LC243
	bl	printk
	ldr	r0, [r4, #380]
	bl	destroy_workqueue
.L3807:
	mov	r0, r4
	bl	kfree
	b	.L3804
.L3811:
	mov	r4, #16
	b	.L3805
.L3813:
	mvn	r5, #11
	b	.L3807
.L3816:
	ldr	r0, [r6, #3552]
	bl	debugfs_remove
	str	r5, [r6, #3552]
	b	.L3804
.L3815:
	mvn	r5, #11
	b	.L3804
.L3818:
	.align	2
.L3817:
	.word	.LANCHOR0+736
	.word	.LANCHOR2+2324
	.word	.LANCHOR2+2296
	.fnend
	.size	rmnet_smd_sdio_function_init, .-rmnet_smd_sdio_function_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_cleanup, %function
gqti_ctrl_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L3821
	bl	misc_deregister
	ldr	r0, [r4, #1032]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #1032]
	pop	{r4, pc}
.L3822:
	.align	2
.L3821:
	.word	.LANCHOR0+556
	.fnend
	.size	gqti_ctrl_cleanup, .-gqti_ctrl_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_cleanup, %function
accessory_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	ldr	r0, .L3825
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	bl	misc_deregister
	ldr	r0, [r4, #2520]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2520]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3826:
	.align	2
.L3825:
	.word	.LANCHOR0+592
	.fnend
	.size	accessory_function_cleanup, .-accessory_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_cleanup, %function
ncm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L3829
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3556]
	bl	kfree
	ldr	r0, [r5, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r5, #4]
	str	r3, [r4, #3556]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3830:
	.align	2
.L3829:
	.word	.LANCHOR0+772
	.fnend
	.size	ncm_function_cleanup, .-ncm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_cleanup, %function
rndis_qc_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC244
	ldr	r1, .L3833
	movt	r0, #:upper16:.LC244
	str	lr, [sp, #4]
	bl	printk
	ldr	r0, .L3833+4
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, [r4, #4]
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2528]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L3834:
	.align	2
.L3833:
	.word	.LANCHOR2+2432
	.word	.LANCHOR0+628
	.fnend
	.size	rndis_qc_function_cleanup, .-rndis_qc_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_cleanup, %function
mtp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #2532]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L3835
	ldr	r0, .L3838
	bl	misc_deregister
	ldr	r0, [r5, #180]
	bl	destroy_workqueue
	mov	r3, #0
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #2532]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L3835:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3839:
	.align	2
.L3838:
	.word	.LANCHOR0+664
	.fnend
	.size	mtp_function_cleanup, .-mtp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_cleanup, %function
ccid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	add	r0, r4, #808
	bl	misc_deregister
	add	r0, r4, #844
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r0, [r3, #2236]
	b	kfree
	.fnend
	.size	ccid_function_cleanup, .-ccid_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_cleanup, %function
adb_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L3844
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3424]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r5, #4]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #3424]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L3845:
	.align	2
.L3844:
	.word	.LANCHOR0+700
	.fnend
	.size	adb_function_cleanup, .-adb_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_cleanup, %function
rmnet_smd_sdio_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r4, [r3, #2512]
	ldr	r0, [r3, #3552]
	bl	debugfs_remove_recursive
	ldr	r0, .L3848
	bl	misc_deregister
	ldr	r0, [r4, #128]
	bl	smd_close
	ldr	r0, [r4, #380]
	bl	destroy_workqueue
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L3849:
	.align	2
.L3848:
	.word	.LANCHOR0+736
	.fnend
	.size	rmnet_smd_sdio_function_cleanup, .-rmnet_smd_sdio_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_cleanup, %function
mbim_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC245
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L3856
	movt	r0, #:upper16:.LC245
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #3560]
	cmp	r3, #0
	beq	.L3851
	ldr	r0, [r4, #3564]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #3564]
.L3851:
	mov	r5, #0
	ldr	r0, .L3856+4
	str	r5, [r4, #3560]
	bl	misc_deregister
	ldr	r6, [sp, #8]
	str	r5, [r4, #2608]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3857:
	.align	2
.L3856:
	.word	.LANCHOR2+2452
	.word	.LANCHOR0+880
	.fnend
	.size	mbim_function_cleanup, .-mbim_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io_complete, %function
ffs_epfile_io_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L3858
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L3858
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L3858
	ldr	r2, [r1, #44]
	cmp	r2, #0
	ldreq	r2, [r1, #48]
	str	r2, [r3, #24]
	ldr	r0, [r1, #32]
	b	complete
.L3858:
	bx	lr
	.fnend
	.size	ffs_epfile_io_complete, .-ffs_epfile_io_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_transmit, %function
f_midi_transmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #88]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	str	r3, [sp, #4]
	beq	.L3870
	cmp	r1, #0
	mov	r10, r0
	mov	r5, r1
	beq	.L3917
.L3872:
	mov	r1, #0
	movw	r3, #:lower16:f_midi_complete
	movt	r3, #:upper16:f_midi_complete
	mov	r2, r1
	add	r7, r10, #100
	add	r9, r10, #228
	str	r1, [r5, #4]
	add	fp, r10, #164
	str	r3, [r5, #28]
.L3904:
	ldr	r4, [r9, #4]!
	ldr	r6, [r7, #4]!
	cmp	r4, #0
	beq	.L3873
	ldr	r3, [r4, #4]
	cmp	r6, #0
	cmpne	r3, #0
	beq	.L3873
	ldr	r1, [r10, #336]
	add	r3, r2, #3
	cmp	r1, r3
	bls	.L3873
.L3903:
	mov	r2, #1
	add	r1, sp, #15
	mov	r0, r6
	bl	snd_rawmidi_transmit
	cmp	r0, #1
	bne	.L3918
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	r1, [sp, #15]	@ zero_extendqisi2
	lsl	r3, r3, #4
	cmp	r1, #247
	uxtb	r3, r3
	bhi	.L3919
	cmp	r1, #239
	bls	.L3877
	sub	r2, r1, #241
	cmp	r2, #6
	ldrls	pc, [pc, r2, asl #2]
	b	.L3878
.L3880:
	.word	.L3879
	.word	.L3881
	.word	.L3879
	.word	.L3885
	.word	.L3885
	.word	.L3883
	.word	.L3884
.L3884:
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L3886
	cmp	r2, #6
	bne	.L3920
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	orr	r3, r3, #7
	mvn	r0, #8
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
.L3915:
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	lr, [r3, #1]
	strb	ip, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
.L3885:
	mov	r3, #0
	strb	r3, [r4, #9]
	ldr	r2, [r5, #4]
.L3876:
	ldr	r3, [r10, #336]
	add	r1, r2, #3
	cmp	r1, r3
	bcc	.L3903
.L3873:
	cmp	fp, r7
	bne	.L3904
.L3922:
	cmp	r2, #0
	beq	.L3905
	ldr	r0, [sp, #4]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
.L3870:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3881:
	mov	r2, #2
	mvn	r3, #13
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L3876
.L3879:
	mov	r3, #1
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L3876
.L3878:
	mov	r2, #5
	mvn	r3, #15
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L3876
.L3883:
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #9
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	strb	r0, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L3876
.L3919:
	ldm	r5, {r0, r2}
	orr	r3, r3, #15
	mov	ip, #0
	strb	r3, [r0, r2]
	add	r0, r0, r2
	add	r2, r2, #4
	strb	r1, [r0, #1]
	strb	ip, [r0, #2]
	strb	ip, [r0, #3]
	str	r2, [r5, #4]
	b	.L3876
.L3877:
	tst	r1, #128
	bne	.L3921
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	sub	r2, r2, #1
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L3916
.L3893:
	.word	.L3892
	.word	.L3894
	.word	.L3895
	.word	.L3896
	.word	.L3897
	.word	.L3898
.L3898:
	ldr	r0, [r5]
	orr	r3, r3, #4
	ldr	r8, [r5]
	ldr	r2, [r5, #4]
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	add	r0, r0, r2
	strb	r3, [r8, r2]
	add	r2, r2, #4
	mov	r3, #4
	strb	lr, [r0, #1]
	strb	ip, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	strb	r3, [r4, #9]
.L3916:
	ldr	r2, [r5, #4]
	b	.L3876
.L3897:
	mov	r3, #6
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L3876
.L3896:
	mov	r3, #5
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L3876
.L3895:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	ldrb	lr, [r4, #11]	@ zero_extendqisi2
	cmp	ip, #239
	orrls	r2, r3, ip, lsr #4
	orrhi	r2, r3, #3
	movls	r3, #2
	movhi	r3, #0
	strb	r3, [r4, #9]
	ldr	r0, [r5]
	ldr	r8, [r5]
	ldr	r3, [r5, #4]
	strb	r2, [r8, r3]
	add	r0, r0, r3
	add	r2, r3, #4
	strb	ip, [r0, #1]
	strb	lr, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	b	.L3876
.L3894:
	mov	r3, #3
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L3876
.L3892:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	mov	lr, #0
	cmp	ip, #239
	movhi	r2, #0
	orrls	r3, r3, ip, lsr #4
	orrhi	r3, r3, #2
	strbhi	r2, [r4, #9]
	ldm	r5, {r0, r2}
	strb	r3, [r0, r2]
	add	r0, r0, r2
	add	r2, r2, #4
	strb	ip, [r0, #1]
	strb	r1, [r0, #2]
	strb	lr, [r0, #3]
	str	r2, [r5, #4]
	b	.L3876
.L3921:
	add	r3, r1, #64
	strb	r1, [r4, #10]
	uxtb	r3, r3
	cmp	r3, #31
	movhi	r3, #2
	strbls	r0, [r4, #9]
	strbhi	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L3876
.L3918:
	mov	r3, #0
	cmp	fp, r7
	str	r3, [r4, #4]
	ldr	r2, [r5, #4]
	bne	.L3904
	b	.L3922
.L3920:
	cmp	r2, #4
	bne	.L3885
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #8
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	b	.L3885
.L3886:
	orr	r3, r3, #6
	mvn	ip, #8
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
	b	.L3915
.L3917:
	mov	r0, r3
	ldr	r1, [r10, #336]
	bl	midi_alloc_ep_req
	subs	r5, r0, #0
	bne	.L3872
	ldr	r0, [r10, #84]
	movw	r1, #:lower16:.LC246
	movt	r1, #:upper16:.LC246
	add	r0, r0, #32
	bl	dev_err
	b	.L3870
.L3905:
	ldr	r0, [r5]
	bl	kfree
	ldr	r0, [sp, #4]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L3870
	.fnend
	.size	f_midi_transmit, .-f_midi_transmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_tasklet, %function
f_midi_in_tasklet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	b	f_midi_transmit
	.fnend
	.size	f_midi_in_tasklet, .-f_midi_in_tasklet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_register_card, %function
f_midi_register_card:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r0, [r0, #328]
	add	r2, sp, #8
	ldr	r1, [r4, #332]
	str	r2, [sp]
	mov	r2, r3
	bl	snd_card_create
	subs	r5, r0, #0
	blt	.L3935
	ldr	r0, [sp, #8]
	mov	r2, r4
	mov	r1, #8192
	ldr	r3, .L3938
	str	r0, [r4, #96]
	bl	snd_device_new
	subs	r5, r0, #0
	blt	.L3936
	movw	r2, #:lower16:.LC249
	movw	r3, #:lower16:.LC250
	ldr	r0, [sp, #8]
	movt	r2, #:upper16:.LC249
	movt	r3, #:upper16:.LC250
	ldm	r2, {r5, lr}
	movw	r1, #:lower16:.LC251
	ldr	ip, [r2, #8]
	movt	r1, #:upper16:.LC251
	ldrh	r7, [r3, #4]
	ldr	r8, [r3]
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	str	r5, [r0, #20]	@ unaligned
	str	lr, [r0, #24]	@ unaligned
	str	ip, [r0, #28]	@ unaligned
	str	r8, [r0, #36]	@ unaligned
	strh	r7, [r0, #40]	@ unaligned
	strb	r3, [r0, #42]
	str	r5, [r0, #68]	@ unaligned
	str	lr, [r0, #72]	@ unaligned
	str	ip, [r0, #76]	@ unaligned
	bl	snd_component_add
	ldr	r0, [sp, #8]
	add	ip, sp, #12
	mov	r2, #0
	ldr	r1, [r4, #320]
	ldr	r3, [r4, #324]
	stm	sp, {r1, ip}
	add	r1, r0, #68
	bl	snd_rawmidi_new
	subs	r5, r0, #0
	blt	.L3937
	ldr	r1, [sp, #8]
	ldr	r5, [sp, #12]
	add	r1, r1, #36
	add	r0, r5, #84
	str	r5, [r4, #100]
	bl	strcpy
	mov	r3, #7
	mov	r0, r5
	ldr	r2, .L3938+4
	mov	r1, #0
	str	r3, [r5, #16]
	str	r4, [r5, #200]
	bl	snd_rawmidi_set_ops
	ldr	r0, [sp, #12]
	mov	r1, #1
	ldr	r2, .L3938+8
	bl	snd_rawmidi_set_ops
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r5, r0, #0
	movge	r5, #0
	bge	.L3924
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC253
	movt	r1, #:upper16:.LC253
	add	r0, r0, #32
	bl	dev_err
	b	.L3926
.L3936:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC248
	mov	r2, r5
	movt	r1, #:upper16:.LC248
	add	r0, r0, #32
	bl	dev_err
.L3926:
	ldr	r0, [r4, #96]
	cmp	r0, #0
	beq	.L3924
	bl	snd_card_free
	mov	r3, #0
	str	r3, [r4, #96]
.L3924:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3935:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC247
	movt	r1, #:upper16:.LC247
	add	r0, r0, #32
	bl	dev_err
	b	.L3926
.L3937:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC252
	mov	r2, r5
	movt	r1, #:upper16:.LC252
	add	r0, r0, #32
	bl	dev_err
	b	.L3926
.L3939:
	.align	2
.L3938:
	.word	.LANCHOR0+916
	.word	.LANCHOR0+928
	.word	.LANCHOR0+944
	.fnend
	.size	f_midi_register_card, .-f_midi_register_card
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_trigger, %function
f_midi_in_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	add	r3, r3, #58
	ldr	r2, [r2, #200]
	ldr	r3, [r2, r3, lsl #2]
	cmp	r3, #0
	bxeq	lr
	cmp	r1, #0
	str	r1, [r3, #4]
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r1, r2, #304
	mov	r0, #0
	add	r4, r2, #300
	str	lr, [sp, #4]
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L3951
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3951:
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__tasklet_hi_schedule
	.fnend
	.size	f_midi_in_trigger, .-f_midi_in_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	tx_complete, %function
tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L3953
.L3991:
	ldr	r3, [r3, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L3953:
	ldr	ip, [r4, #4]
	cmp	ip, #0
	beq	.L3991
	ldr	r3, [r1, #44]
	mov	r5, r1
	ldr	r7, [r4, #8]
	cmn	r3, #104
	beq	.L3974
	cmp	r3, #0
	beq	.L3957
	cmn	r3, #108
	beq	.L3974
	ldr	r3, [r7, #212]
	add	r3, r3, #1
	str	r3, [r7, #212]
	ldr	r1, [r4, #8]
.L3956:
	ldr	r3, [r1, #196]
	add	r6, r4, #16
	add	r8, r4, #20
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r1, #196]
	bl	_raw_spin_lock
	ldr	r3, [r4, #24]
	add	r2, r5, #36
	str	r2, [r4, #24]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #4]
	ldr	r9, [r5, #32]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L3972
	cmp	r9, #0
	beq	.L3992
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L3972
	movw	r1, #32800
	bl	__kmalloc
	mov	r3, #0
	str	r0, [r5]
	str	r3, [r5, #32]
.L3968:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r9
	bl	dev_kfree_skb_any
.L3967:
	ldr	r3, [r4, #8]
	ldr	r0, [r3, #120]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L3993
.L3952:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3957:
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	ldr	r3, [r1, #4]
	ldr	r1, [r7, #204]
	tst	r0, #2
	subeq	r3, r3, #1
	add	r3, r1, r3
	str	r3, [r7, #204]
	ldr	r1, [r4, #8]
	b	.L3956
.L3972:
	mov	r3, #0
	str	r3, [r5]
	b	.L3968
.L3993:
	ldr	r4, [r3, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L3952
	ldr	r0, [r4, #4]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__netif_schedule
.L3974:
	mov	r1, r7
	b	.L3956
.L3992:
	ldr	r3, [r4, #40]
	sub	r3, r3, #1
	str	r3, [r4, #40]
	str	r9, [r5, #4]
	ldr	r5, [r4, #20]
	cmp	r8, r5
	beq	.L3961
	ldr	lr, [r4, #4]
	mov	ip, #256
	mov	r1, #512
	ldrd	r2, [r5]
	mov	r0, r6
	ldr	r9, [lr, #88]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5]
	str	r1, [r5, #4]
	bl	_raw_spin_unlock
	ldr	r3, [r5, #-32]
	cmp	r3, #0
	beq	.L3962
	ldr	r2, [r4, #4]
	mov	r0, r3
	ldrb	r1, [r2, #104]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L3976
	ldr	r2, [r2, #112]
	cmp	r3, r2
	beq	.L3994
.L3976:
	mov	r1, #1
.L3963:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	uxtb	r1, r2
	strb	r2, [r5, #-10]
	tst	r1, #2
	beq	.L3964
	ldrb	r2, [r4, #124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L3964
	ldrh	ip, [r9, #20]
	sdiv	r2, r3, ip
	mls	r2, ip, r2, r3
	cmp	r2, #0
	bne	.L3964
	bfi	r1, r2, #1, #1
	add	r0, r3, #1
	strb	r1, [r5, #-10]
.L3964:
	str	r0, [r5, #-32]
	ldr	r3, [r9, #8]
	mov	r2, #32
	sub	r1, r5, #36
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3995
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #40]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #40]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r7, #604]
	b	.L3967
.L3961:
	mov	r0, r6
	bl	_raw_spin_unlock
	b	.L3967
.L3962:
	mov	r0, r6
.L3990:
	bl	_raw_spin_lock
	ldr	r3, [r4, #24]
	mov	r0, r6
	str	r5, [r4, #24]
	str	r8, [r5]
	str	r3, [r5, #4]
	str	r5, [r3]
	bl	_raw_spin_unlock
	b	.L3967
.L3994:
	ldrh	r2, [r9, #20]
	sdiv	r1, r3, r2
	mls	r1, r2, r1, r3
	adds	r1, r1, #0
	movne	r1, #1
	b	.L3963
.L3995:
	movw	r0, #:lower16:.LC254
	ldr	r1, .L3996
	movt	r0, #:upper16:.LC254
	bl	printk
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #-32]
	b	.L3990
.L3997:
	.align	2
.L3996:
	.word	.LANCHOR2+2468
	.fnend
	.size	tx_complete, .-tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_open, %function
eth_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #1224]
	ldr	r5, [r0, #120]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L4013
.L4000:
	add	r5, r4, #1216
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1220]
	cmp	r0, #0
	beq	.L4002
	ldr	r3, [r0, #112]
	cmp	r3, #0
	beq	.L4002
	blx	r3
.L4002:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4013:
	bl	netif_carrier_off
	ldr	r0, [r4, #1224]
	bl	netif_carrier_on
	ldr	r3, [r4, #1224]
	mov	r0, r5
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L4000
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L4000
	.fnend
	.size	eth_qc_open, .-eth_qc_open
	.align	2
	.global	rndis_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_rm_hdr, %function
rndis_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	mov	r8, r2
	movt	r9, #:upper16:.LANCHOR1
	str	lr, [sp, #24]
	ldr	ip, [r1, #80]
	ldr	r3, [r9, #3572]
	.pad #12
	sub	sp, sp, #12
	cmp	ip, r3
	strhi	ip, [r9, #3572]
	bhi	.L4016
	cmp	ip, #0
	beq	.L4030
.L4016:
	cmp	ip, #43
	bls	.L4018
	ldr	r3, [r4, #172]
	ldr	r6, [r3, #4]	@ unaligned
	ldr	r1, [r3, #8]	@ unaligned
	ldr	r5, [r3, #12]	@ unaligned
	ldr	lr, [r3]	@ unaligned
	cmp	ip, r6
	bcc	.L4019
	add	r3, r5, r1
	add	r3, r3, #8
	cmp	r3, r6
	bhi	.L4019
	cmp	lr, #1
	bne	.L4020
	mov	r7, #0
	b	.L4021
.L4035:
	cmp	r2, r5
	beq	.L4025
	bl	skb_clone
	sub	r1, r6, #44
	subs	r6, r0, #0
	mov	r0, r4
	beq	.L4034
	bl	skb_pull
	mov	r1, r5
	mov	r0, r6
	bl	skb_trim
	mov	r1, r6
	mov	r0, r8
	bl	skb_queue_tail
	ldr	ip, [r4, #80]
	cmp	ip, #0
	beq	.L4017
	cmp	ip, #43
	bls	.L4018
	ldr	r0, [r4, #172]
	ldr	r6, [r0, #4]	@ unaligned
	ldr	r1, [r0, #8]	@ unaligned
	ldr	r5, [r0, #12]	@ unaligned
	ldr	lr, [r0]	@ unaligned
	cmp	ip, r6
	add	r2, r1, r5
	bcc	.L4019
	add	r2, r2, #8
	cmp	r2, r6
	bhi	.L4019
	cmp	lr, #1
	bne	.L4020
.L4021:
	add	r1, r1, #8
	mov	r0, r4
	bl	skb_pull
	ldr	r3, [r4, #80]
	mov	r1, #32
	mov	r0, r4
	add	r7, r7, #1
	cmp	r3, r5
	sub	r2, r3, #1
	bne	.L4035
.L4025:
	mov	r1, r5
	mov	r0, r4
	bl	skb_trim
.L4017:
	ldr	r3, [r9, #3576]
	mov	r0, r8
	mov	r1, r4
	cmp	r3, r7
	strlt	r7, [r9, #3576]
	bl	skb_queue_tail
	mov	r0, #0
.L4014:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4030:
	mov	r7, ip
	b	.L4017
.L4019:
	movw	r0, #:lower16:.LC256
	mov	r3, r1
	stm	sp, {r5, ip}
	mov	r2, r6
	mov	r1, lr
	movt	r0, #:upper16:.LC256
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L4014
.L4018:
	movw	r0, #:lower16:.LC255
	mov	r1, ip
	mov	r2, #44
	movt	r0, #:upper16:.LC255
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4014
.L4034:
	movw	r0, #:lower16:.LC257
	ldr	r1, .L4036
	movt	r0, #:upper16:.LC257
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #11
	b	.L4014
.L4020:
	movw	r0, #:lower16:.LC256
	mov	r3, r1
	stm	sp, {r5, ip}
	mov	r2, r6
	mov	r1, lr
	movt	r0, #:upper16:.LC256
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4014
.L4037:
	.align	2
.L4036:
	.word	.LANCHOR2+2480
	.fnend
	.size	rndis_rm_hdr, .-rndis_rm_hdr
	.align	2
	.global	rndis_qc_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_rm_hdr, %function
rndis_qc_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #172]
	ldr	r3, [r5]	@ unaligned
	cmp	r3, #1
	bne	.L4043
	ldr	r1, [r5, #8]	@ unaligned
	mov	r0, r4
	mov	r6, r2
	add	r1, r1, #8
	bl	skb_pull
	cmp	r0, #0
	beq	.L4044
	ldr	r1, [r5, #12]	@ unaligned
	mov	r0, r4
	bl	skb_trim
	mov	r0, r6
	mov	r1, r4
	bl	skb_queue_tail
	mov	r0, #0
.L4038:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4043:
	mov	r0, r1
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4038
.L4044:
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L4038
	.fnend
	.size	rndis_qc_rm_hdr, .-rndis_qc_rm_hdr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_open, %function
rndis_proc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-20]
	mov	r0, r1
	movw	r1, #:lower16:rndis_proc_show
	movt	r1, #:upper16:rndis_proc_show
	ldr	r2, [r3, #44]
	b	single_open
	.fnend
	.size	rndis_proc_open, .-rndis_proc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_show, %function
rndis_proc_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r1, #:lower16:.LC259
	movw	r3, #:lower16:.LC258
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC259
	movt	r3, #:upper16:.LC258
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	ip, [r0, #80]
	.pad #44
	sub	sp, sp, #44
	ldrb	r4, [ip, #1]	@ zero_extendqisi2
	ldr	lr, [ip, #4]
	ldrb	r2, [ip]	@ zero_extendqisi2
	cmp	r4, #0
	moveq	r3, r1
	cmp	lr, #2
	movwhi	r7, #:lower16:.LC260
	movthi	r7, #:upper16:.LC260
	bhi	.L4048
	movw	r1, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR2
	add	r1, r1, lr, lsl #2
	ldr	r7, [r1, #2496]
.L4048:
	ldr	r8, [ip, #8]
	ldr	r1, [ip, #16]
	cmp	r1, #0
	bne	.L4052
	ldr	r1, [ip, #12]
	mov	r6, #100
	movw	r5, #:lower16:.LC262
	movt	r5, #:upper16:.LC262
	mul	r6, r6, r1
.L4049:
	movw	lr, #:lower16:.LANCHOR1
	ldrb	r4, [ip, #36]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC263
	movt	lr, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC263
	ldr	r9, [lr, #3572]
	ldr	lr, [lr, #3576]
	str	r9, [sp, #28]
	str	r4, [sp, #32]
	str	lr, [sp, #36]
	ldr	lr, [ip, #28]
	ldr	lr, [lr, #316]
	add	lr, lr, #80
	mul	lr, r4, lr
	str	lr, [sp, #24]
	ldr	lr, [ip, #40]
	str	lr, [sp, #20]
	ldr	ip, [ip, #32]
	stm	sp, {r7, r8}
	str	r6, [sp, #8]
	str	r5, [sp, #12]
	str	ip, [sp, #16]
	bl	seq_printf
	mov	r0, #0
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4052:
	movw	r5, #:lower16:.LC261
	mov	r6, #0
	movt	r5, #:upper16:.LC261
	b	.L4049
	.fnend
	.size	rndis_proc_show, .-rndis_proc_show
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	get_ether_addr, %function
get_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r5, r0, #0
	mov	r4, r1
	subne	r6, r1, #1
	addne	r9, r1, #5
	bne	.L4058
.L4059:
	mov	r0, r4
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r4]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r4]
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L4058:
	ldrb	r3, [r5]	@ zero_extendqisi2
	mov	r8, r5
	cmp	r3, #58
	cmpne	r3, #46
	addeq	r8, r5, #1
	mov	r5, r8
	ldrb	r0, [r5], #2	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r7, r0
	ldrb	r0, [r8, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r7, lsl #4
	strb	r0, [r6, #1]!
	cmp	r9, r6
	bne	.L4058
	ldrb	r3, [r4]	@ zero_extendqisi2
	ands	r0, r3, #1
	bne	.L4059
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	ldrb	lr, [r4, #2]	@ zero_extendqisi2
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	ldrb	r1, [r4, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r4, #5]	@ zero_extendqisi2
	orr	r3, r3, lr
	orr	r3, r3, ip
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L4059
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
	.fnend
	.size	get_ether_addr, .-get_ether_addr
	.set	get_qc_ether_addr,get_ether_addr
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_open, %function
fsg_lun_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r4, [r0, #24]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ands	r4, r4, #1
	beq	.L4067
.L4069:
	mov	r2, #0
	mov	r1, #131072
	mov	r0, r7
	mov	r4, #1
	bl	filp_open
	mov	r5, r0
	cmn	r5, #4096
	bhi	.L4113
.L4070:
	ldr	r3, [r5, #12]
	ldr	r2, [r5, #36]
	tst	r2, #2
	moveq	r4, #1
	cmp	r3, #0
	beq	.L4073
	ldr	r2, [r3, #32]
	cmp	r2, #0
	beq	.L4073
	ldrh	r3, [r2]
	and	r3, r3, #61440
	sub	r3, r3, #24576
	tst	r3, #53248
	beq	.L4074
.L4073:
	movw	r1, #:lower16:.LC265
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC265
	mvn	r7, #21
	bl	_dev_info
.L4075:
	mov	r3, sp
	mov	r0, r5
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #728]
	bl	filp_close
.L4066:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4074:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L4076
	ldr	r1, [r3, #8]
	cmp	r1, #0
	beq	.L4114
.L4077:
	ldr	r1, [r3, #12]
	cmp	r1, #0
	beq	.L4115
.L4078:
	ldr	r3, [r2, #32]
	ldr	r3, [r3]
.L4112:
	ldr	r1, [r3, #104]
	tst	r1, #1
	bne	.L4080
	.syntax divided
@ 165 "/home/pascua14/Desktop/s5-kernel/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r8, [r3, #96]
	.syntax divided
@ 221 "/home/pascua14/Desktop/s5-kernel/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r3, #104]
	cmp	r0, r1
	bne	.L4112
	cmp	r8, #0
	sbcs	r3, r9, #0
	blt	.L4116
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L4083
	adr	fp, .L4118
	ldrd	r10, [fp]
	lsr	r2, r8, #11
	mov	r1, #11
	asr	r3, r9, r1
	orr	r2, r2, r9, lsl #21
	str	r1, [r6, #40]
	mov	r0, #2048
	cmp	r10, r2
	sbcs	r1, fp, r3
	str	r0, [r6, #44]
	blt	.L4084
	mov	r0, #300
	mov	r1, #0
.L4085:
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L4117
.L4090:
	add	r1, r5, #28
	.syntax divided
@ 45 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r1, [r6, #24]	@ zero_extendqisi2
	mov	r7, #0
	str	r5, [r6]
	strd	r8, [r6, #8]
	strd	r2, [r6, #16]
	bfi	r1, r4, #1, #1
	strb	r1, [r6, #24]
	b	.L4075
.L4067:
	mov	r1, #2
	mov	r2, r4
	movt	r1, 2
	mov	r0, r7
	bl	filp_open
	cmn	r0, #30
	cmnne	r0, #13
	mov	r5, r0
	beq	.L4069
	cmn	r5, #4096
	bls	.L4070
.L4113:
	movw	r1, #:lower16:.LC264
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC264
	mov	r7, r5
	bl	_dev_info
	b	.L4066
.L4114:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L4077
.L4076:
	movw	r1, #:lower16:.LC266
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC266
	bl	_dev_info
	mvn	r7, #21
	b	.L4075
.L4083:
	ldr	r3, [r2, #324]
	cmp	r3, #0
	beq	.L4086
	ldr	r3, [r3, #92]
	ldr	r3, [r3, #500]
	cmp	r3, #0
	moveq	r3, #512
	beq	.L4087
	add	r3, r3, #776
	ldrh	r3, [r3]
	cmp	r3, #0
	moveq	r3, #512
.L4087:
	mov	r1, #8
	str	r3, [r6, #44]
.L4088:
	lsr	r3, r3, #1
	add	r1, r1, #1
	cmp	r3, #256
	bhi	.L4088
	str	r1, [r6, #40]
.L4089:
	rsb	r0, r1, #32
	lsr	r2, r8, r1
	subs	ip, r1, #32
	orr	r2, r2, r9, lsl r0
	mov	r0, #1
	asr	r3, r9, r1
	orrpl	r2, r2, r9, asr ip
	mov	r1, #0
	b	.L4085
.L4115:
	ldr	r3, [r3, #20]
	cmp	r3, #0
	moveq	r4, #1
	b	.L4078
.L4117:
	movw	r1, #:lower16:.LC270
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC270
	bl	_dev_info
	mvn	r7, #524
	b	.L4075
.L4116:
	movw	r1, #:lower16:.LC267
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC267
	mov	r7, r8
	bl	_dev_info
	b	.L4075
.L4084:
	add	r3, r6, #48
	movw	r1, #:lower16:.LC268
	mov	r2, r7
	mov	r0, r3
	movt	r1, #:upper16:.LC268
	mov	r7, r3
	bl	_dev_info
	movw	r2, #37887
	movw	r1, #:lower16:.LC269
	movt	r2, 17
	mov	r0, r7
	movt	r1, #:upper16:.LC269
	bl	_dev_info
	mov	r2, r10
	mov	r3, fp
	b	.L4090
.L4080:
	.syntax divided
@ 147 "/home/pascua14/Desktop/s5-kernel/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	b	.L4112
.L4086:
	mov	r3, #512
	mov	r1, #9
	str	r1, [r6, #40]
	str	r3, [r6, #44]
	b	.L4089
.L4119:
	.align	3
.L4118:
	.word	1151999
	.word	0
	.fnend
	.size	fsg_lun_open, .-fsg_lun_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_cleanup, %function
conn_gadget_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC271
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L4128
	movt	r0, #:upper16:.LC271
	str	lr, [sp, #4]
	movw	r4, #:lower16:.LANCHOR1
	bl	printk
	movw	r0, #:lower16:.LC272
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC272
	bl	printk
	ldr	r3, [r4, #2516]
	cmp	r3, #0
	beq	.L4127
	ldr	r0, .L4128+4
	bl	misc_deregister
	ldr	r0, [r4, #2516]
	ldr	r3, [r0, #188]
	cmp	r3, #0
	beq	.L4122
	mov	r0, r3
	bl	vfree
	ldr	r0, [r4, #2516]
.L4122:
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2516]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4127:
	movw	r0, #:lower16:.LC273
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC273
	add	sp, sp, #8
	ldr	r1, .L4128+8
	b	printk
.L4129:
	.align	2
.L4128:
	.word	.LANCHOR2+2508
	.word	.LANCHOR0+960
	.word	.LANCHOR2+2540
	.fnend
	.size	conn_gadget_function_cleanup, .-conn_gadget_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_init, %function
conn_gadget_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC274
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r1, .L4147
	movt	r0, #:upper16:.LC274
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	movw	r0, #:lower16:.LC275
	movt	r0, #:upper16:.LC275
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L4136
	mov	r2, #220
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4144
.L4131:
	mov	r5, #0
	movw	r1, #:lower16:.LC230
	ldr	r2, .L4147+4
	movt	r1, #:upper16:.LC230
	add	r0, r4, #144
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC231
	ldr	r2, .L4147+4
	add	r0, r4, #156
	movt	r1, #:upper16:.LC231
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC277
	ldr	r2, .L4147+4
	add	r0, r4, #200
	movt	r1, #:upper16:.LC277
	bl	__init_waitqueue_head
	add	r1, r4, #128
	add	r0, r4, #120
	str	r5, [r4, #108]
	add	r2, r4, #136
	mov	r3, #262144
	str	r5, [r4, #112]
	mov	ip, #4096
	str	r5, [r4, #116]
	str	r0, [r4, #120]
	strd	r0, [r4, #124]
	mov	r0, r3
	str	r1, [r4, #132]
	str	r2, [r4, #136]
	str	r2, [r4, #140]
	str	ip, [r4, #192]
	str	r3, [r4, #196]
	str	r5, [r4, #216]
	bl	vmalloc
	cmp	r0, r5
	mov	r1, r0
	str	r0, [r4, #188]
	beq	.L4145
	mov	r3, #1
	ldr	r2, [r4, #196]
	add	r0, r4, #168
	bl	__kfifo_init
	ldr	r0, .L4147+8
	str	r4, [r6, #2516]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4146
.L4130:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4136:
	mov	r4, #16
	b	.L4131
.L4146:
	movw	r0, #:lower16:.LC279
	mov	r2, r5
	ldr	r1, .L4147+12
	movt	r0, #:upper16:.LC279
	bl	printk
.L4134:
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L4135
	bl	vfree
.L4135:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #2516]
	bl	kfree
	movw	r0, #:lower16:.LC280
	ldr	r1, .L4147+12
	movt	r0, #:upper16:.LC280
	bl	printk
	b	.L4130
.L4145:
	movw	r0, #:lower16:.LC278
	ldr	r1, .L4147+12
	mvn	r5, #11
	movt	r0, #:upper16:.LC278
	bl	printk
	b	.L4134
.L4144:
	movw	r0, #:lower16:.LC276
	mvn	r5, #11
	movt	r0, #:upper16:.LC276
	bl	printk
	b	.L4130
.L4148:
	.align	2
.L4147:
	.word	.LANCHOR2+2560
	.word	.LANCHOR1+3580
	.word	.LANCHOR0+960
	.word	.LANCHOR2+2588
	.fnend
	.size	conn_gadget_function_init, .-conn_gadget_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_store, %function
conn_gadget_usb_buffer_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r3
	str	lr, [sp, #16]
	ldr	r3, [r5, #2516]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #0
	beq	.L4159
	ldr	r3, [r3, #100]
	cmp	r3, #0
	bne	.L4160
	movw	r1, #:lower16:.LC283
	mov	r0, r2
	movt	r1, #:upper16:.LC283
	add	r2, sp, #4
	bl	sscanf
	ldr	r4, [sp, #4]
	lsl	r4, r4, #16
	mov	r0, r4
	bl	vmalloc
	subs	r7, r0, #0
	beq	.L4161
	ldr	ip, [r5, #2516]
	ldr	r0, [ip, #188]
	cmp	r0, #0
	beq	.L4154
	bl	vfree
	ldr	ip, [r5, #2516]
.L4154:
	ldr	lr, [sp, #4]
	mov	r5, #0
	mov	r0, ip
	mov	r1, r7
	mov	r2, r4
	str	r5, [ip, #172]
	mov	r3, #1
	str	r7, [ip, #188]
	lsl	lr, lr, #10
	str	lr, [ip, #192]
	str	r4, [ip, #196]
	str	r5, [r0, #168]!
	bl	__kfifo_init
.L4149:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4159:
	movw	r0, #:lower16:.LC281
	ldr	r1, .L4162
	movt	r0, #:upper16:.LC281
	bl	printk
	b	.L4149
.L4161:
	movw	r0, #:lower16:.LC284
	ldr	r1, .L4162
	movt	r0, #:upper16:.LC284
	bl	printk
	b	.L4149
.L4160:
	movw	r0, #:lower16:.LC282
	ldr	r1, .L4162
	movt	r0, #:upper16:.LC282
	bl	printk
	b	.L4149
.L4163:
	.align	2
.L4162:
	.word	.LANCHOR2+2608
	.fnend
	.size	conn_gadget_usb_buffer_size_store, .-conn_gadget_usb_buffer_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_store, %function
remote_wakeup_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	add	r2, sp, #8
	mov	r3, #0
	movw	r1, #:lower16:.LC283
	mov	r4, r0
	str	r3, [r2, #-4]!
	mov	r0, r6
	movt	r1, #:upper16:.LC283
	bl	sscanf
	mov	r0, r4
	ldr	r3, [sp, #4]
	ldr	r2, [r0, #412]!
	cmp	r0, r2
	beq	.L4165
	cmp	r3, #0
	sub	r2, r2, #120
	bne	.L4166
.L4167:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	r3, [r2, #120]
	bic	r1, r1, #32
	cmp	r0, r3
	strb	r1, [r2, #22]
	sub	r2, r3, #120
	bne	.L4167
.L4165:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4166:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	r3, [r2, #120]
	orr	r1, r1, #32
	cmp	r0, r3
	strb	r1, [r2, #22]
	sub	r2, r3, #120
	bne	.L4166
	b	.L4165
	.fnend
	.size	remote_wakeup_store, .-remote_wakeup_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_store, %function
bDeviceProtocol_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC72
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC72
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4175
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #230]
.L4173:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4175:
	mvn	r0, #0
	b	.L4173
	.fnend
	.size	bDeviceProtocol_store, .-bDeviceProtocol_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_store, %function
bDeviceSubClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC72
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC72
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4179
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #229]
.L4177:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4179:
	mvn	r0, #0
	b	.L4177
	.fnend
	.size	bDeviceSubClass_store, .-bDeviceSubClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_store, %function
bDeviceClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC72
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC72
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4183
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #228]
.L4181:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4183:
	mvn	r0, #0
	b	.L4181
	.fnend
	.size	bDeviceClass_store, .-bDeviceClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_store, %function
bcdDevice_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC80
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC80
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4187
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #236]	@ movhi
.L4185:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4187:
	mvn	r0, #0
	b	.L4185
	.fnend
	.size	bcdDevice_store, .-bcdDevice_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_store, %function
idProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC80
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC80
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4191
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #234]	@ movhi
.L4189:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4191:
	mvn	r0, #0
	b	.L4189
	.fnend
	.size	idProduct_store, .-idProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_store, %function
idVendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC80
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC80
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4195
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #232]	@ movhi
.L4193:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4195:
	mvn	r0, #0
	b	.L4193
	.fnend
	.size	idVendor_store, .-idVendor_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_store, %function
mass_storage_product_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #16
	ldr	r5, [r0, #4]
	bhi	.L4200
	ldr	r2, [r5, #96]
	movw	r1, #:lower16:.LC79
	mov	r0, r6
	movt	r1, #:upper16:.LC79
	add	r2, r2, #218
	bl	sscanf
	cmp	r0, #1
	beq	.L4202
.L4200:
	mvn	r0, #21
.L4197:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4202:
	ldr	r2, [r5, #96]
	movw	r0, #:lower16:.LC285
	movt	r0, #:upper16:.LC285
	ldr	r1, .L4203
	add	r2, r2, #218
	bl	printk
	mov	r0, r4
	b	.L4197
.L4204:
	.align	2
.L4203:
	.word	.LANCHOR2+2644
	.fnend
	.size	mass_storage_product_store, .-mass_storage_product_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_store, %function
mass_storage_vendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #8
	ldr	r5, [r0, #4]
	bhi	.L4208
	ldr	r2, [r5, #96]
	movw	r1, #:lower16:.LC79
	mov	r0, r6
	movt	r1, #:upper16:.LC79
	add	r2, r2, #209
	bl	sscanf
	cmp	r0, #1
	beq	.L4210
.L4208:
	mvn	r0, #21
.L4205:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4210:
	ldr	r2, [r5, #96]
	movw	r0, #:lower16:.LC286
	movt	r0, #:upper16:.LC286
	ldr	r1, .L4211
	add	r2, r2, #209
	bl	printk
	mov	r0, r4
	b	.L4205
.L4212:
	.align	2
.L4211:
	.word	.LANCHOR2+2672
	.fnend
	.size	mass_storage_vendor_store, .-mass_storage_vendor_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_store, %function
mass_storage_inquiry_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #28
	ldr	r3, [r0, #4]
	bhi	.L4216
	ldr	r2, [r3, #96]
	movw	r1, #:lower16:.LC287
	mov	r0, r5
	movt	r1, #:upper16:.LC287
	add	r2, r2, #180
	bl	sscanf
	cmp	r0, #1
	bne	.L4216
	mov	r0, r4
.L4213:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4216:
	mvn	r0, #21
	b	.L4213
	.fnend
	.size	mass_storage_inquiry_store, .-mass_storage_inquiry_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_store, %function
ecm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC82
	movt	r1, #:upper16:.LC82
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_store, .-ecm_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_store, %function
rndis_max_pkt_per_xfer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC283
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC283
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	strbeq	r3, [r6, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_max_pkt_per_xfer_store, .-rndis_max_pkt_per_xfer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_store, %function
rndis_vendorID_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC288
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC288
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streq	r3, [r6, #8]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_vendorID_store, .-rndis_vendorID_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_store, %function
rndis_wceis_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC283
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC283
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	bne	.L4232
	ldr	r3, [sp, #4]
	mov	r0, r4
	adds	r3, r3, #0
	movne	r3, #1
	strb	r3, [r6, #269]
.L4230:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4232:
	mvn	r0, #21
	b	.L4230
	.fnend
	.size	rndis_wceis_store, .-rndis_wceis_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_store, %function
rndis_manufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #255
	ldr	r2, [r0, #4]
	bhi	.L4236
	movw	r1, #:lower16:.LC289
	add	r2, r2, #13
	mov	r0, r5
	movt	r1, #:upper16:.LC289
	bl	sscanf
	cmp	r0, #1
	moveq	r0, r4
	mvnne	r0, #0
.L4234:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4236:
	mvn	r0, #21
	b	.L4234
	.fnend
	.size	rndis_manufacturer_store, .-rndis_manufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_store, %function
acm_instances_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC283
	ldr	r4, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC283
	mov	r0, r6
	bl	sscanf
	ldr	r2, [sp, #4]
	mov	r0, r5
	cmp	r2, #4
	movge	r2, #4
	str	r2, [r4]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	acm_instances_store, .-acm_instances_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unwrap_ntb, %function
ncm_unwrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #176]
	.pad #44
	sub	sp, sp, #44
	ldr	r1, [r1, #172]
	ldrb	r3, [r0, #180]	@ zero_extendqisi2
	ldr	r0, [r6]
	ldr	r2, [r1]	@ unaligned
	cmp	r3, #0
	moveq	fp, #14
	movne	fp, #18
	moveq	r8, #0
	movne	r8, #4
	cmp	r0, r2
	bne	.L4293
	ldrb	ip, [r1, #5]	@ zero_extendqisi2
	ldrb	r0, [r1, #4]	@ zero_extendqisi2
	ldr	r2, [r6, #8]
	orr	r0, r0, ip, lsl #8
	cmp	r0, r2
	bne	.L4294
	ldr	ip, [r6, #24]
	add	r9, r1, #8
	cmp	ip, #1
	beq	.L4247
	cmp	ip, #2
	ldreq	lr, [r1, #8]	@ unaligned
	bne	.L4288
.L4249:
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #36]
	cmp	r2, lr
	bcc	.L4295
	ldr	r2, [r6, #28]
	add	lr, r9, ip, lsl #1
	cmp	r2, #1
	beq	.L4252
	cmp	r2, #2
	ldreq	r2, [lr]	@ unaligned
	bne	.L4288
.L4254:
	cmp	r0, r2
	movls	r0, #0
	movhi	r0, #1
	ands	ip, r2, #3
	movne	ip, r0
	cmp	ip, #0
	bne	.L4296
	add	r1, r1, r2
	ldr	r0, [r6, #4]
	ldr	r2, [r1]	@ unaligned
	cmp	r0, r2
	beq	.L4256
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC296
	mvn	r5, #21
	movt	r1, #:upper16:.LC296
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4244
.L4294:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC293
	mvn	r5, #21
	movt	r1, #:upper16:.LC293
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
.L4244:
	mov	r0, r7
	bl	skb_queue_purge
	mov	r0, r4
	bl	dev_kfree_skb_any
.L4241:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4293:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC290
	mvn	r5, #21
	ldr	r2, [r4, #80]
	movt	r1, #:upper16:.LC290
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r4, #172]
	mov	ip, #0
	mov	r3, #32
	mov	r2, #1
	movw	r1, #:lower16:.LC291
	movt	r1, #:upper16:.LC291
	str	r2, [sp]
	stmib	sp, {r0, r3, ip}
	movw	r0, #:lower16:.LC292
	movt	r0, #:upper16:.LC292
	bl	print_hex_dump
	b	.L4244
.L4247:
	ldrb	r2, [r1, #9]	@ zero_extendqisi2
	ldrb	lr, [r1, #8]	@ zero_extendqisi2
	orr	lr, lr, r2, lsl #8
	b	.L4249
.L4252:
	ldrb	lr, [lr, #1]	@ zero_extendqisi2
	ldrb	r2, [r9, ip, lsl #1]	@ zero_extendqisi2
	orr	r2, r2, lr, lsl #8
	b	.L4254
.L4295:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC294
	mvn	r5, #21
	movt	r1, #:upper16:.LC294
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4244
.L4256:
	ldrb	ip, [r1, #5]	@ zero_extendqisi2
	ldrb	r2, [r1, #4]	@ zero_extendqisi2
	ldr	lr, [r6, #12]
	ldr	r0, [r6, #20]
	orr	r2, r2, ip, lsl #8
	add	ip, lr, r0, lsl #3
	cmp	ip, r2
	bhi	.L4257
	ldr	r9, [r6, #16]
	udiv	ip, r2, r9
	mls	ip, r9, ip, r2
	cmp	ip, #0
	bne	.L4257
	ldr	ip, [r6, #32]
	sub	r3, r2, lr
	cmp	r0, #1
	ldr	r2, [r6, #36]
	add	r1, r1, #6
	ldr	r9, [r6, #40]
	str	r3, [sp, #16]
	add	lr, ip, r9
	add	lr, lr, r2
	add	ip, r1, lr, lsl #1
	beq	.L4260
	cmp	r0, #2
	bne	.L4288
	ldr	r3, [ip, #4]	@ unaligned
	mov	r2, ip
	mov	r1, #4
	str	r3, [sp, #36]
	ldr	r3, [r2], #4	@ unaligned
.L4262:
	ldr	r10, [sp, #16]
	add	r9, r2, r1
	str	r7, [sp, #16]
	str	r4, [sp, #20]
	ldr	r7, [sp, #36]
	str	r6, [sp, #24]
	str	r5, [sp, #28]
	str	fp, [sp, #32]
	b	.L4272
.L4301:
	mov	r1, #32
	ldr	r0, [sp, #20]
	str	r3, [sp, #36]
	bl	skb_clone
	subs	fp, r0, #0
	ldr	r3, [sp, #36]
	beq	.L4297
	mov	r1, r3
	bl	skb_pull
	cmp	r0, #0
	beq	.L4298
	sub	r1, r7, r8
	mov	r0, fp
	bl	skb_trim
	ldr	r0, [sp, #16]
	mov	r1, fp
	mov	r7, r5
	bl	skb_queue_tail
	ldr	r3, [sp, #24]
	ldr	r0, [r3, #20]
	mov	r3, r6
	lsl	r2, r0, #2
	sub	r10, r10, r2
	cmp	r2, r10
	bcs	.L4292
.L4272:
	ldr	r2, [sp, #32]
	cmp	r7, r2
	bcc	.L4299
	ldr	r2, [sp, #28]
	ldrb	r2, [r2, #180]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L4300
.L4264:
	cmp	r0, #1
	beq	.L4267
	cmp	r0, #2
	bne	.L4288
	mov	r2, r9
	ldr	r5, [r9, #4]	@ unaligned
	mov	r1, #4
	ldr	r6, [r2], #4	@ unaligned
.L4269:
	clz	r4, r5
	cmp	r6, #0
	lsr	r4, r4, #5
	moveq	r4, #1
	add	r9, r2, r1
	cmp	r4, #0
	beq	.L4301
	ldr	r4, [sp, #20]
	mov	r1, r3
	str	r7, [sp, #36]
	ldr	r7, [sp, #16]
	mov	r0, r4
	bl	skb_pull
	cmp	r0, #0
	bne	.L4302
.L4275:
	mvn	r5, #74
	b	.L4244
.L4257:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC297
	movt	r1, #:upper16:.LC297
.L4291:
	ldr	r3, [r3, #24]
	mvn	r5, #21
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4244
.L4267:
	mov	r2, r9
	ldrb	ip, [r9, #1]	@ zero_extendqisi2
	mov	r1, #2
	ldrb	r6, [r2], #2	@ zero_extendqisi2
	ldrb	r0, [r9, #3]	@ zero_extendqisi2
	ldrb	r5, [r9, #2]	@ zero_extendqisi2
	orr	r6, r6, ip, lsl #8
	orr	r5, r5, r0, lsl #8
	b	.L4269
.L4300:
	ldr	r2, [sp, #20]
	add	ip, r3, r7
	mvn	r0, #0
	sub	ip, ip, r8
	str	r3, [sp, #36]
	ldr	r1, [r2, #172]
	sub	r2, r7, r8
	ldr	r4, [r1, ip]	@ unaligned
	add	r1, r1, r3
	bl	crc32_le
	mvn	r0, r0
	cmp	r0, r4
	bne	.L4265
	ldr	r3, [sp, #24]
	ldr	r0, [r3, #20]
	ldr	r3, [sp, #36]
	b	.L4264
.L4296:
	movw	r1, #:lower16:.LC295
	ldr	r3, [r5, #20]
	movt	r1, #:upper16:.LC295
	b	.L4291
.L4260:
	ldrb	r9, [r1, lr, lsl #1]	@ zero_extendqisi2
	add	r2, ip, #2
	mov	r1, #2
	ldrb	r10, [ip, #1]	@ zero_extendqisi2
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	ldrb	ip, [ip, #2]	@ zero_extendqisi2
	orr	r3, r9, r10, lsl #8
	orr	ip, ip, lr, lsl #8
	str	ip, [sp, #36]
	b	.L4262
.L4302:
	ldr	r3, [sp, #36]
	mov	r0, r4
	sub	r1, r3, r8
	bl	skb_trim
	mov	r1, r4
	mov	r0, r7
	bl	skb_queue_tail
.L4292:
	mov	r5, #0
	b	.L4241
.L4299:
	movw	r1, #:lower16:.LC298
	mov	r2, r7
	ldr	r7, [sp, #16]
	ldr	r5, [sp, #28]
	movt	r1, #:upper16:.LC298
	ldr	r4, [sp, #20]
	ldr	r3, [r5, #20]
	b	.L4291
.L4297:
	mvn	r5, #21
	ldr	r7, [sp, #16]
	ldr	r4, [sp, #20]
	b	.L4244
.L4265:
	movw	r1, #:lower16:.LC299
	ldr	r7, [sp, #16]
	ldr	r5, [sp, #28]
	movt	r1, #:upper16:.LC299
	ldr	r4, [sp, #20]
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4244
.L4288:
	.syntax divided
@ 463 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 463, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L4298:
	ldr	r7, [sp, #16]
	ldr	r4, [sp, #20]
	b	.L4275
	.fnend
	.size	ncm_unwrap_ntb, .-ncm_unwrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_wrap_ntb, %function
ncm_wrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r9, r0
	movw	r0, #:lower16:.LANCHOR0
	strd	r10, [sp, #24]
	movt	r0, #:upper16:.LANCHOR0
	str	lr, [sp, #32]
	ldr	r5, [r9, #176]
	.pad #20
	sub	sp, sp, #20
	ldrh	ip, [r0, #32]
	ldrh	r1, [r0, #28]
	ldrh	r0, [r0, #30]
	ldr	r8, [r5, #8]
	ldr	r3, [r5, #12]
	sub	r2, ip, #1
	rsb	ip, ip, #0
	ldr	lr, [r5, #20]
	sub	r4, r1, #1
	rsb	r1, r1, #0
	add	r2, r2, r8
	and	r2, r2, ip
	ldrb	ip, [r9, #180]	@ zero_extendqisi2
	add	r3, r3, lr, lsl #3
	sub	r8, r2, r8
	add	r3, r3, r2
	ldr	r2, [r6, #80]
	add	r4, r4, r3
	cmp	ip, #0
	and	r4, r4, r1
	ldr	r1, [r9, #112]
	moveq	r10, #0
	add	r4, r4, r0
	movne	r10, #4
	sub	r3, r4, r3
	add	r2, r4, r2
	str	r3, [sp, #4]
	add	r3, r2, r10
	cmp	r3, r1
	bhi	.L4342
	bcc	.L4343
.L4330:
	mov	fp, #0
	str	fp, [sp, #8]
.L4307:
	mov	r3, #32
	mov	r2, fp
	mov	r1, r4
	mov	r0, r6
	bl	skb_copy_expand
	mov	r7, r0
	mov	r0, r6
	bl	dev_kfree_skb_any
	cmp	r7, #0
	beq	.L4344
	mov	r1, r4
	mov	r0, r7
	bl	skb_push
	cmp	r4, #0
	mov	r6, r0
	bne	.L4345
.L4309:
	ldr	r3, [r5]
	add	ip, r6, #8
	lsr	r2, r3, #16
	strb	r3, [r6]
	ubfx	r1, r3, #8, #8
	lsr	r3, r2, #8
	strb	r1, [r6, #1]
	strb	r2, [r6, #2]
	strb	r3, [r6, #3]
	ldr	r3, [r5, #8]
	ubfx	r2, r3, #8, #8
	strb	r3, [r6, #4]
	strb	r2, [r6, #5]
	ldr	r0, [r5, #24]
	ldr	r3, [r7, #80]
	cmp	r0, #1
	add	fp, fp, r3
	beq	.L4311
	cmp	r0, #2
	bne	.L4340
	lsr	r3, fp, #16
	ubfx	r2, fp, #8, #8
	strb	fp, [r6, #8]
	lsr	r1, r3, #8
	strb	r2, [r6, #9]
	strb	r3, [r6, #10]
	strb	r1, [r6, #11]
.L4313:
	ldr	r2, [r5, #8]
	add	r1, ip, r0, lsl #1
	ldr	r3, [r5, #28]
	add	r2, r8, r2
	cmp	r3, #1
	beq	.L4315
	cmp	r3, #2
	bne	.L4340
	lsr	lr, r2, #16
	ubfx	r6, r2, #8, #8
	lsr	fp, lr, #8
	strb	lr, [r1, #2]
	strb	fp, [r1, #3]
	strb	r2, [ip, r0, lsl #1]
	strb	r6, [r1, #1]
.L4317:
	ldr	r0, [r5, #4]
	add	r3, r8, r3, lsl #1
	uxth	r6, r4
	add	r2, r1, r3
	add	fp, r2, #6
	lsr	r8, r0, #16
	ubfx	ip, r0, #8, #8
	lsr	lr, r8, #8
	strb	r8, [r2, #2]
	strb	lr, [r2, #3]
	strb	r0, [r1, r3]
	ldr	r1, [sp, #4]
	strb	ip, [r2, #1]
	ldr	r3, [r5, #8]
	sub	r3, r6, r3
	sub	r3, r3, r1
	uxth	r3, r3
	lsr	r1, r3, #8
	strb	r3, [r2, #4]
	strb	r1, [r2, #5]
	ldrb	r1, [r9, #180]	@ zero_extendqisi2
	ldr	r8, [r5, #32]
	ldr	r3, [r5, #36]
	ldr	r2, [r5, #40]
	cmp	r1, #0
	add	r8, r8, r2
	add	r8, r8, r3
	add	r9, fp, r8, lsl #1
	bne	.L4346
.L4318:
	ldr	r2, [r5, #20]
	cmp	r2, #1
	beq	.L4320
	cmp	r2, #2
	bne	.L4340
	lsr	r3, r4, #16
	lsr	r6, r6, #8
	lsr	r1, r3, #8
	strb	r3, [r9, #2]
	strb	r1, [r9, #3]
	strb	r4, [fp, r8, lsl #1]
	strb	r6, [r9, #1]
.L4322:
	ldr	r0, [r5, #20]
	add	r1, r9, r2, lsl #1
	ldr	r3, [r7, #80]
	cmp	r0, #1
	sub	r4, r3, r4
	beq	.L4324
	cmp	r0, #2
	bne	.L4340
	lsr	r3, r4, #16
	ubfx	r0, r4, #8, #8
	lsr	ip, r3, #8
	strb	r3, [r1, #2]
	strb	ip, [r1, #3]
	strb	r4, [r9, r2, lsl #1]
	strb	r0, [r1, #1]
.L4326:
	ldr	r3, [sp, #8]
	cmp	r3, #0
	bne	.L4327
.L4303:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4343:
	ldr	r2, [r9, #88]
	ldr	r2, [r2, #28]
	ldrh	r1, [r2, #4]	@ unaligned
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L4330
	movw	r0, #:lower16:.LC300
	mov	fp, #1
	movt	r0, #:upper16:.LC300
	bl	printk
	str	fp, [sp, #8]
	b	.L4307
.L4311:
	ubfx	r3, fp, #8, #8
	strb	fp, [r6, #8]
	strb	r3, [r6, #9]
	b	.L4313
.L4324:
	ubfx	r3, r4, #8, #8
	strb	r4, [r9, r2, lsl #1]
	strb	r3, [r1, #1]
	b	.L4326
.L4320:
	lsr	r6, r6, #8
	strb	r4, [fp, r8, lsl #1]
	strb	r6, [r9, #1]
	b	.L4322
.L4315:
	ubfx	lr, r2, #8, #8
	strb	r2, [ip, r0, lsl #1]
	strb	lr, [r1, #1]
	b	.L4317
.L4346:
	ldr	r2, [r7, #80]
	mvn	r0, #0
	ldr	r1, [r7, #172]
	sub	r2, r2, r4
	add	r1, r1, r4
	bl	crc32_le
	ldr	lr, [r7, #80]
	mvn	r2, r0
	mov	r1, r10
	ldr	r3, [r7, #172]
	lsr	ip, r2, #16
	ubfx	r0, r2, #8, #8
	lsr	r10, ip, #8
	str	r3, [sp, #4]
	add	r3, r3, lr
	str	r0, [sp, #12]
	mov	r0, r7
	strb	ip, [r3, #2]
	ldr	ip, [sp, #4]
	strb	r10, [r3, #3]
	strb	r2, [ip, lr]
	ldr	r2, [sp, #12]
	strb	r2, [r3, #1]
	bl	skb_put
	b	.L4318
.L4345:
	mov	r1, r4
	bl	__memzero
	b	.L4309
.L4342:
	mov	r0, r6
	mov	r7, #0
	bl	dev_kfree_skb_any
	b	.L4303
.L4340:
	.syntax divided
@ 445 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 445, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L4327:
	mov	r1, #1
	mov	r0, r7
	bl	skb_put
	mov	r1, #1
	bl	__memzero
	movw	r0, #:lower16:.LC302
	ldr	r1, .L4347
	ldr	r2, [r7, #80]
	movt	r0, #:upper16:.LC302
	bl	printk
	b	.L4303
.L4344:
	movw	r0, #:lower16:.LC301
	movt	r0, #:upper16:.LC301
	bl	printk
	b	.L4303
.L4348:
	.align	2
.L4347:
	.word	.LANCHOR2+2700
	.fnend
	.size	ncm_wrap_ntb, .-ncm_wrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	macos_show, %function
macos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L4350
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r4, r0
	bl	get_host_os_type
	cmp	r4, #1
	cmpeq	r0, #1
	mov	r3, r0
	movne	r6, #1
	beq	.L4355
.L4351:
	movw	r0, #:lower16:.LC304
	ldr	r1, .L4356
	mov	r2, r4
	movt	r0, #:upper16:.LC304
	bl	printk
.L4352:
	movw	r1, #:lower16:.LC72
	mov	r2, r6
	mov	r0, r5
	movt	r1, #:upper16:.LC72
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf
.L4350:
	movw	r0, #:lower16:.LC305
	ldr	r1, .L4356
	mvn	r6, #0
	movt	r0, #:upper16:.LC305
	bl	printk
	b	.L4352
.L4355:
	movw	r0, #:lower16:.LC303
	ldr	r1, .L4356
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC303
	mov	r6, #0
	bl	printk
	ldr	r3, [sp, #4]
	b	.L4351
.L4357:
	.align	2
.L4356:
	.word	.LANCHOR2+2716
	.fnend
	.size	macos_show, .-macos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ss_host_available_show, %function
ss_host_available_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L4359
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r5, r0
	bl	get_host_os_type
	cmp	r5, #1
	cmpeq	r0, #1
	mov	r3, r0
	moveq	r4, #1
	movne	r4, #0
	beq	.L4364
.L4360:
	movw	r0, #:lower16:.LC304
	ldr	r1, .L4365
	mov	r2, r5
	movt	r0, #:upper16:.LC304
	bl	printk
.L4361:
	movw	r1, #:lower16:.LC72
	mov	r2, r4
	mov	r0, r6
	movt	r1, #:upper16:.LC72
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf
.L4359:
	movw	r0, #:lower16:.LC305
	ldr	r1, .L4365
	mvn	r4, #0
	movt	r0, #:upper16:.LC305
	bl	printk
	b	.L4361
.L4364:
	movw	r0, #:lower16:.LC303
	ldr	r1, .L4365
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC303
	mov	r4, #1
	bl	printk
	ldr	r3, [sp, #4]
	b	.L4360
.L4366:
	.align	2
.L4365:
	.word	.LANCHOR2+2728
	.fnend
	.size	ss_host_available_show, .-ss_host_available_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_store, %function
usb30en_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	mov	r4, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	mov	r6, r0
	bl	get_host_os_type
	subs	r3, r0, #0
	beq	.L4386
	movw	r1, #:lower16:.LC283
	mov	r0, r4
	movt	r1, #:upper16:.LC283
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	bne	.L4370
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L4370
	movw	r4, #:lower16:.LANCHOR1
	ldr	r2, [sp, #4]
	movt	r4, #:upper16:.LANCHOR1
	ldrb	r3, [r4, #3330]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L4387
	uxtb	r2, r2
	strb	r2, [r4, #3330]
	ldr	r0, [r1]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L4372
	mov	r1, #0
	blx	r3
	ldr	r3, [r6, #8]
	ldrb	r2, [r4, #3330]	@ zero_extendqisi2
	ldr	r0, [r3]
.L4372:
	cmp	r2, #0
	moveq	r1, #3
	movne	r1, #5
	bl	sec_set_speedlimit
	movw	r0, #:lower16:.LC308
	ldr	r1, .L4388
	movt	r0, #:upper16:.LC308
	bl	printk
	mov	r0, #200
	bl	msleep
	ldr	r3, [r6, #8]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L4374
	mov	r1, #1
	blx	r3
.L4374:
	movw	r0, #:lower16:.LC309
	ldr	r1, .L4388
	movt	r0, #:upper16:.LC309
	bl	printk
.L4367:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4387:
	movw	r0, #:lower16:.LC307
	ldr	r1, .L4388
	mov	r2, r3
	movt	r0, #:upper16:.LC307
	bl	printk
	b	.L4367
.L4370:
	movw	r0, #:lower16:.LC310
	ldr	r1, .L4388
	mvn	r5, #0
	movt	r0, #:upper16:.LC310
	bl	printk
	b	.L4367
.L4386:
	movw	r2, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC306
	ldr	r1, .L4388
	movt	r2, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC306
	strb	r3, [r2, #3330]
	bl	printk
	b	.L4367
.L4389:
	.align	2
.L4388:
	.word	.LANCHOR2+2752
	.fnend
	.size	usb30en_store, .-usb30en_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_store, %function
iSerial_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4392
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L4397
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L4397
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4392:
	mvn	r0, #21
	bx	lr
.L4398:
	.align	2
.L4397:
	.word	.LANCHOR1+2256
	.fnend
	.size	iSerial_store, .-iSerial_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_store, %function
iProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4401
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L4406
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L4406
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4401:
	mvn	r0, #21
	bx	lr
.L4407:
	.align	2
.L4406:
	.word	.LANCHOR1+2612
	.fnend
	.size	iProduct_store, .-iProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_store, %function
iManufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4410
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L4415
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L4415
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4410:
	mvn	r0, #21
	bx	lr
.L4416:
	.align	2
.L4415:
	.word	.LANCHOR1+2868
	.fnend
	.size	iManufacturer_store, .-iManufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_store, %function
ffs_aliases_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movt	r1, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	str	r8, [sp, #16]
	mov	r5, r3
	ldr	r3, [r4]
	str	lr, [sp, #20]
	ldr	r6, [r1, #2244]
	.pad #264
	sub	sp, sp, #264
	mov	r8, r2
	str	r3, [sp, #260]
	sub	r7, r6, #400
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r6, #-408]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L4422
	mov	r1, r8
	mov	r2, #256
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	mov	r1, r0
	mov	r2, #256
	sub	r0, r6, #268
	bl	strlcpy
	mov	r0, r7
	bl	mutex_unlock
	mov	r0, r5
.L4417:
	ldr	r2, [sp, #260]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L4423
	add	sp, sp, #264
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4422:
	mov	r0, r7
	bl	mutex_unlock
	mvn	r0, #15
	b	.L4417
.L4423:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_aliases_store, .-ffs_aliases_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_store, %function
functions_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 552
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r1, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r1, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #556
	sub	sp, sp, #556
	str	r3, [sp, #16]
	ldr	r3, [r1]
	str	r1, [sp, #20]
	str	r3, [sp, #548]
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r8, r0
	add	fp, r0, #412
	mov	r0, r3
	str	r3, [sp, #12]
	bl	mutex_lock
	ldrb	r5, [r8, #16]	@ zero_extendqisi2
	cmp	r5, #0
	bne	.L4468
	ldr	r4, [r8, #412]
	cmp	fp, r4
	sub	r4, r4, #120
	beq	.L4428
	mov	r7, #256
	mov	r6, #512
.L4427:
	mov	r10, r4
	ldr	r3, [r10, #112]!
	cmp	r10, r3
	beq	.L4430
.L4429:
	ldr	r2, [r3, #-4]
	sub	r0, r3, #4
	str	r5, [r2, #20]
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r7, [r3]
	str	r6, [r3, #4]
	bl	kfree
	ldr	r3, [r4, #112]
	cmp	r3, r10
	bne	.L4429
.L4430:
	ldr	r3, [r4, #120]
	str	r10, [r4, #112]
	str	r10, [r4, #116]
	cmp	fp, r3
	sub	r4, r3, #120
	bne	.L4427
.L4428:
	mov	r1, r9
	mov	r2, #256
	add	r0, sp, #36
	movw	r5, #:lower16:.LC313
	bl	strlcpy
	add	r0, sp, #36
	movt	r5, #:upper16:.LC313
	bl	strim
	movw	r3, #:lower16:.LC311
	cmp	r0, #0
	str	fp, [sp]
	movt	r3, #:upper16:.LC311
	mov	r9, #0
	stmib	sp, {r3, fp}
	str	r0, [sp, #28]
	beq	.L4469
.L4444:
	add	r0, sp, #28
	ldr	r1, [sp, #4]
	bl	strsep
	cmp	r0, #0
	str	r0, [sp, #24]
	beq	.L4432
	ldr	r3, [sp]
	ldr	r2, [sp, #8]
	ldr	r3, [r3]
	cmp	r3, r2
	beq	.L4433
	sub	r10, r3, #120
	str	r3, [sp]
.L4434:
	cmp	r0, #0
	movw	fp, #:lower16:.LC316
	movt	fp, #:upper16:.LC316
	beq	.L4432
.L4443:
	mov	r1, r5
	add	r0, sp, #24
	add	r7, sp, #292
	bl	strsep
	mov	r6, r0
	mov	r2, #256
	mov	r0, r7
	add	r1, r8, #156
	bl	strlcpy
	add	r4, sp, #552
	str	r7, [r4, #-520]!
.L4439:
	mov	r1, r5
	mov	r0, r4
	bl	strsep
	subs	r1, r0, #0
	beq	.L4437
	mov	r0, r6
	bl	strcmp
	cmp	r0, #0
	beq	.L4438
.L4437:
	ldr	r3, [sp, #32]
	cmp	r3, #0
	bne	.L4439
	mov	r2, r6
	mov	r1, r10
	mov	r0, r8
	bl	android_enable_function
	cmp	r0, #0
	bne	.L4470
.L4442:
	ldr	r0, [sp, #24]
	cmp	r0, #0
	bne	.L4443
.L4432:
	ldr	r0, [sp, #28]
	cmp	r0, #0
	bne	.L4444
.L4469:
	ldr	r6, [sp]
	ldr	fp, [sp, #8]
	ldr	r3, [r6]
	cmp	r3, fp
	beq	.L4445
	mov	r5, #256
	mov	r4, #512
.L4446:
	ldm	r3, {r1, r2}
	sub	r0, r3, #120
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r5, [r3]
	str	r4, [r3, #4]
	ldr	r3, [r8, #420]
	sub	r3, r3, #1
	str	r3, [r8, #420]
	bl	kfree
	ldr	r3, [r6]
	cmp	r3, fp
	bne	.L4446
.L4445:
	ldr	r0, [sp, #12]
	bl	mutex_unlock
	ldr	r0, [sp, #16]
.L4424:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #548]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L4471
	add	sp, sp, #556
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4438:
	cmp	r9, #0
	beq	.L4472
.L4448:
	mov	r9, #1
	b	.L4442
.L4472:
	movw	r2, #:lower16:.LC314
	mov	r1, r10
	movt	r2, #:upper16:.LC314
	mov	r0, r8
	bl	android_enable_function
	subs	r2, r0, #0
	beq	.L4448
	movw	r0, #:lower16:.LC315
	ldr	r1, .L4474
	movt	r0, #:upper16:.LC315
	bl	printk
	b	.L4442
.L4433:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L4451
	mov	r2, #128
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L4473
.L4435:
	ldr	ip, [r8]
	movw	r3, #:lower16:android_unbind_config
	add	r2, r10, #112
	ldr	r1, [r8, #420]
	movt	r3, #:upper16:android_unbind_config
	mov	r0, #12480
	add	r1, r1, #1
	str	r1, [r8, #420]
	str	ip, [r10]
	str	r3, [r10, #12]
	ldr	r1, [r8, #420]
	add	r3, r10, #120
	strb	r1, [r10, #20]
	ldr	r1, [sp, #8]
	strh	r0, [r10, #22]	@ movhi
	str	r2, [r10, #112]
	str	r2, [r10, #116]
	ldr	r2, [r8, #416]
	str	r3, [r8, #416]
	str	r1, [r10, #120]
	str	r2, [r10, #124]
	str	r3, [r2]
	ldr	r3, [sp]
	ldr	r0, [sp, #24]
	ldr	r3, [r3]
	str	r3, [sp]
	b	.L4434
.L4451:
	mov	r10, #16
	b	.L4435
.L4473:
	ldr	r2, .L4474+4
	movw	r0, #:lower16:.LC312
	mvn	r10, #11
	movt	r0, #:upper16:.LC312
	mov	r1, r2
	bl	printk
	ldr	r3, [sp]
	ldr	r0, [sp, #24]
	ldr	r3, [r3]
	str	r3, [sp]
	b	.L4434
.L4471:
	bl	__stack_chk_fail
.L4470:
	mov	r3, r0
	mov	r2, r6
	ldr	r1, .L4474
	mov	r0, fp
	bl	printk
	b	.L4442
.L4468:
	ldr	r0, [sp, #12]
	bl	mutex_unlock
	mvn	r0, #15
	b	.L4424
.L4475:
	.align	2
.L4474:
	.word	.LANCHOR2+2792
	.word	.LANCHOR2+2768
	.fnend
	.size	functions_store, .-functions_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind, %function
android_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r1, .L4586
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r4, [r8, #2248]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	fp, [r0]
	movw	r0, #:lower16:.LC317
	movt	r0, #:upper16:.LC317
	str	r7, [r4, #-416]
	bl	printk
	ldr	r3, [fp]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L4477
	mov	r1, #0
	mov	r0, fp
	blx	r3
.L4477:
	ldr	r3, [r8, #3580]
	cmp	r3, #1
	beq	.L4478
.L4484:
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L4480
	add	r2, r3, #1
	movw	r4, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r4, #:upper16:.LANCHOR0
	cmp	r2, #254
	strb	r2, [r4, #238]
	strb	r2, [r4, #996]
	strb	r2, [r7, #48]
	beq	.L4480
	add	r3, r3, #2
	movw	r1, #:lower16:.LC322
	ldr	r0, .L4586+4
	uxtb	r3, r3
	movt	r1, #:upper16:.LC322
	mov	r2, #255
	strb	r3, [r7, #48]
	strb	r3, [r4, #1004]
	strb	r3, [r4, #239]
	bl	strlcpy
	movw	r1, #:lower16:.LC322
	mov	r2, #255
	ldr	r0, .L4586+8
	movt	r1, #:upper16:.LC322
	bl	strlcpy
	movw	r1, #:lower16:.LC323
	mov	r2, #255
	ldr	r0, .L4586+12
	movt	r1, #:upper16:.LC323
	bl	strlcpy
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L4480
	add	r3, r3, #1
	movw	r0, #:lower16:.LC324
	uxtb	r3, r3
	movt	r0, #:upper16:.LC324
	strb	r3, [r7, #48]
	ldr	r5, [fp, #28]
	strb	r3, [r4, #240]
	strb	r3, [r4, #1012]
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	bne	.L4581
	movw	r3, #513
.L4506:
	strh	r3, [r4, #236]	@ movhi
.L4507:
	mov	r3, #4
	mov	r6, #0
	str	r3, [r8, #3588]
.L4476:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4581:
	movw	r0, #:lower16:.LC325
	mov	r1, r5
	movt	r0, #:upper16:.LC325
	bl	strcmp
	cmp	r0, #0
	beq	.L4511
	movw	r0, #:lower16:.LC326
	mov	r1, r5
	movt	r0, #:upper16:.LC326
	bl	strcmp
	cmp	r0, #0
	beq	.L4512
	movw	r0, #:lower16:.LC327
	mov	r1, r5
	movt	r0, #:upper16:.LC327
	bl	strcmp
	cmp	r0, #0
	beq	.L4513
	movw	r0, #:lower16:.LC328
	mov	r1, r5
	movt	r0, #:upper16:.LC328
	bl	strcmp
	cmp	r0, #0
	beq	.L4514
	movw	r0, #:lower16:.LC329
	mov	r1, r5
	movt	r0, #:upper16:.LC329
	bl	strcmp
	cmp	r0, #0
	beq	.L4515
	movw	r0, #:lower16:.LC330
	mov	r1, r5
	movt	r0, #:upper16:.LC330
	bl	strcmp
	cmp	r0, #0
	beq	.L4516
	movw	r0, #:lower16:.LC331
	mov	r1, r5
	movt	r0, #:upper16:.LC331
	bl	strcmp
	cmp	r0, #0
	beq	.L4517
	movw	r0, #:lower16:.LC332
	mov	r1, r5
	movt	r0, #:upper16:.LC332
	bl	strcmp
	cmp	r0, #0
	beq	.L4518
	movw	r0, #:lower16:.LC333
	mov	r1, r5
	movt	r0, #:upper16:.LC333
	bl	strcmp
	cmp	r0, #0
	beq	.L4519
	movw	r0, #:lower16:.LC334
	mov	r1, r5
	movt	r0, #:upper16:.LC334
	bl	strcmp
	cmp	r0, #0
	beq	.L4520
	movw	r0, #:lower16:.LC335
	mov	r1, r5
	movt	r0, #:upper16:.LC335
	bl	strcmp
	cmp	r0, #0
	beq	.L4521
	movw	r0, #:lower16:.LC336
	mov	r1, r5
	movt	r0, #:upper16:.LC336
	bl	strcmp
	cmp	r0, #0
	beq	.L4522
	movw	r0, #:lower16:.LC337
	mov	r1, r5
	movt	r0, #:upper16:.LC337
	bl	strcmp
	cmp	r0, #0
	beq	.L4523
	movw	r0, #:lower16:.LC338
	mov	r1, r5
	movt	r0, #:upper16:.LC338
	bl	strcmp
	cmp	r0, #0
	beq	.L4524
	movw	r0, #:lower16:.LC339
	mov	r1, r5
	movt	r0, #:upper16:.LC339
	bl	strcmp
	cmp	r0, #0
	beq	.L4525
	movw	r0, #:lower16:.LC340
	mov	r1, r5
	movt	r0, #:upper16:.LC340
	bl	strcmp
	cmp	r0, #0
	beq	.L4526
	movw	r0, #:lower16:.LC341
	mov	r1, r5
	movt	r0, #:upper16:.LC341
	bl	strcmp
	cmp	r0, #0
	beq	.L4527
	movw	r0, #:lower16:.LC342
	mov	r1, r5
	movt	r0, #:upper16:.LC342
	bl	strcmp
	cmp	r0, #0
	beq	.L4528
	movw	r0, #:lower16:.LC343
	mov	r1, r5
	movt	r0, #:upper16:.LC343
	bl	strcmp
	cmp	r0, #0
	beq	.L4529
	movw	r0, #:lower16:.LC344
	mov	r1, r5
	movt	r0, #:upper16:.LC344
	bl	strcmp
	cmp	r0, #0
	beq	.L4530
	movw	r0, #:lower16:.LC345
	mov	r1, r5
	movt	r0, #:upper16:.LC345
	bl	strcmp
	cmp	r0, #0
	beq	.L4531
	movw	r0, #:lower16:.LC346
	mov	r1, r5
	movt	r0, #:upper16:.LC346
	bl	strcmp
	cmp	r0, #0
	beq	.L4532
	movw	r0, #:lower16:.LC347
	mov	r1, r5
	movt	r0, #:upper16:.LC347
	bl	strcmp
	cmp	r0, #0
	beq	.L4533
	movw	r0, #:lower16:.LC348
	mov	r1, r5
	movt	r0, #:upper16:.LC348
	bl	strcmp
	cmp	r0, #0
	beq	.L4534
	movw	r0, #:lower16:.LC349
	mov	r1, r5
	movt	r0, #:upper16:.LC349
	bl	strcmp
	cmp	r0, #0
	beq	.L4535
	movw	r0, #:lower16:.LC350
	mov	r1, r5
	movt	r0, #:upper16:.LC350
	bl	strcmp
	cmp	r0, #0
	moveq	r3, #564
	beq	.L4506
	ldr	r2, .L4586+16
	movw	r0, #:lower16:.LC351
	mov	r3, r5
	movt	r0, #:upper16:.LC351
	sub	r1, r2, #40
	bl	printk
	movw	r3, #39321
	movt	r3, 65535
	strh	r3, [r4, #236]	@ movhi
	b	.L4507
.L4511:
	movw	r3, #514
	b	.L4506
.L4478:
	ldr	r1, [r4, #-420]
	ldr	r3, [r8, #2244]
	ldr	r2, .L4586+20
	mov	r0, r1
	sub	r1, r3, #424
	cmp	r3, r2
	str	r1, [sp, #8]
	beq	.L4481
	ldr	r3, [r3, #-416]
	cmp	r7, r3
	bne	.L4482
	b	.L4481
.L4485:
	ldr	r3, [r3, #-416]
	cmp	r7, r3
	beq	.L4579
.L4482:
	ldr	r3, [r1, #424]
	cmp	r3, r2
	sub	r1, r3, #424
	bne	.L4485
.L4579:
	str	r1, [sp, #8]
.L4481:
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L4484
	movw	r5, #:lower16:.LC318
	mov	r9, #1
	str	fp, [sp, #12]
	movt	r5, #:upper16:.LC318
	mov	r10, r0
.L4483:
	mov	r1, r5
	mov	r0, #208
	ldr	r2, [r4]
	bl	kasprintf
	cmp	r0, #0
	mov	r3, #0
	str	r0, [r4, #12]
	str	r3, [r4, #20]
	beq	.L4509
	ldr	r3, [sp, #8]
	mov	r2, r9
	ldr	r1, [r3, #12]
	str	r0, [sp]
	mov	r3, r4
	ldr	r0, [r8, #3584]
	bl	device_create
	cmn	r0, #4096
	str	r0, [r4, #8]
	bhi	.L4582
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L4489
	mov	r1, r7
	mov	r0, r4
	blx	r3
	cmp	r0, #0
	bne	.L4583
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L4493
	ldr	r1, [r2]
	add	r6, r2, #4
	cmp	r1, #0
	bne	.L4580
	b	.L4493
.L4584:
	cmp	r0, #0
	bne	.L4576
	mov	r6, fp
.L4580:
	ldr	r0, [r4, #8]
.L4497:
	mov	fp, r6
	bl	device_create_file
	ldr	r1, [fp], #4
	cmp	r1, #0
	bne	.L4584
	cmp	r0, #0
	bne	.L4576
.L4493:
	add	r9, r9, #1
	add	r3, r10, r9, lsl #2
	ldr	r4, [r3, #-4]
	cmp	r4, #0
	bne	.L4483
	ldr	fp, [sp, #12]
	b	.L4484
.L4512:
	movw	r3, #515
	b	.L4506
.L4576:
	ldr	r2, .L4586+24
	mov	r10, r6
	mov	r6, r0
	movw	r0, #:lower16:.LC321
	ldr	r3, [r4]
	mov	r5, fp
	movt	r0, #:upper16:.LC321
	ldr	fp, [sp, #12]
	sub	r9, r10, #4
	mov	r1, r2
	bl	printk
	ldr	r3, [r4, #16]
	ldr	r1, [r5, #-8]
	cmp	r9, r3
	beq	.L4499
.L4498:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r9], #-4
	ldr	r3, [r4, #16]
	cmp	r9, r3
	bne	.L4498
.L4499:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L4491
	mov	r0, r4
	blx	r3
.L4491:
	ldr	r3, [r4, #8]
	ldr	r0, [r8, #3584]
	ldr	r1, [r3, #296]
	bl	device_destroy
	b	.L4488
.L4582:
	ldr	r2, .L4586+24
	movw	r0, #:lower16:.LC319
	movt	r0, #:upper16:.LC319
	ldr	r3, [r4, #12]
	ldr	fp, [sp, #12]
	mov	r1, r2
	bl	printk
	ldr	r6, [r4, #8]
.L4488:
	mov	r3, #0
	ldr	r0, [r4, #12]
	str	r3, [r4, #8]
	bl	kfree
.L4486:
	ldr	r3, [sp, #8]
	ldr	r9, [r3, #4]
	sub	r9, r9, #4
.L4500:
	ldr	r4, [r9, #4]!
	cmp	r4, #0
	beq	.L4585
.L4504:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L4500
	ldr	r1, [r3, #296]
	ldr	r0, [r8, #3584]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L4502
	mov	r0, r4
	blx	r3
.L4502:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L4500
	ldr	r1, [r5]
	add	r5, r5, #4
	cmp	r1, #0
	beq	.L4500
.L4503:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r5], #4
	cmp	r1, #0
	bne	.L4503
	ldr	r4, [r9, #4]!
	cmp	r4, #0
	bne	.L4504
.L4585:
	cmp	r6, #0
	bne	.L4476
	b	.L4484
.L4489:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L4493
	ldr	r1, [r2]
	add	r6, r2, #4
	cmp	r1, #0
	bne	.L4497
	b	.L4493
.L4480:
	mvn	r6, #18
	b	.L4476
.L4513:
	movw	r3, #518
	b	.L4506
.L4514:
	mov	r3, #520
	b	.L4506
.L4509:
	mvn	r6, #11
	ldr	fp, [sp, #12]
	b	.L4486
.L4515:
	movw	r3, #529
	b	.L4506
.L4516:
	movw	r3, #530
	b	.L4506
.L4517:
	movw	r3, #531
	b	.L4506
.L4518:
	mov	r3, #532
	b	.L4506
.L4519:
	movw	r3, #534
	b	.L4506
.L4520:
	mov	r3, #536
	b	.L4506
.L4583:
	ldr	r2, .L4586+24
	mov	r6, r0
	movw	r0, #:lower16:.LC320
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC320
	ldr	fp, [sp, #12]
	mov	r1, r2
	bl	printk
	b	.L4491
.L4521:
	movw	r3, #537
	b	.L4506
.L4534:
	movw	r3, #562
	b	.L4506
.L4533:
	movw	r3, #561
	b	.L4506
.L4532:
	mov	r3, #560
	b	.L4506
.L4531:
	movw	r3, #553
	b	.L4506
.L4530:
	mov	r3, #552
	b	.L4506
.L4529:
	movw	r3, #551
	b	.L4506
.L4535:
	movw	r3, #563
	b	.L4506
.L4522:
	mov	r3, #544
	b	.L4506
.L4524:
	movw	r3, #546
	b	.L4506
.L4523:
	movw	r3, #545
	b	.L4506
.L4528:
	movw	r3, #550
	b	.L4506
.L4527:
	movw	r3, #549
	b	.L4506
.L4526:
	mov	r3, #548
	b	.L4506
.L4525:
	movw	r3, #547
	b	.L4506
.L4587:
	.align	2
.L4586:
	.word	.LANCHOR2+2808
	.word	.LANCHOR1+2868
	.word	.LANCHOR1+2612
	.word	.LANCHOR1+2256
	.word	.LANCHOR2+2848
	.word	.LANCHOR1+2244
	.word	.LANCHOR2+2824
	.fnend
	.size	android_bind, .-android_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_start_work, %function
acc_start_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	r3, #:lower16:.LC352
	movt	r2, #:upper16:.LANCHOR0
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r2, #616]
	movt	r3, #:upper16:.LC352
	mov	ip, #0
	mov	r1, #2
	mov	r2, sp
	stm	sp, {r3, ip}
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	acc_start_work, .-acc_start_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_work, %function
ncm_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC353
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	ip, #0
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC353
	.pad #16
	sub	sp, sp, #16
	movw	r3, #:lower16:.LC354
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L4594
	movt	r3, #:upper16:.LC354
	movt	r4, #:upper16:.LANCHOR1
	stm	sp, {r2, ip}
	movw	r0, #:lower16:.LC355
	ldrb	r2, [r4, #3592]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC355
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	printk
	ldrb	r3, [r4, #3592]	@ zero_extendqisi2
	mov	r1, #2
	cmp	r3, #0
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	addeq	r2, sp, #8
	ldr	r0, [r3, #796]
	movne	r2, sp
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4595:
	.align	2
.L4594:
	.word	.LANCHOR2+2864
	.fnend
	.size	ncm_work, .-ncm_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_work, %function
android_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r2, #:lower16:.LC356
	movw	r3, #:lower16:.LC358
	strd	r6, [sp, #8]
	movt	r2, #:upper16:.LC356
	mov	r4, r0
	strd	r8, [sp, #16]
	movt	r3, #:upper16:.LC358
	movw	r1, #:lower16:.LC359
	strd	r10, [sp, #24]
	movt	r1, #:upper16:.LC359
	str	lr, [sp, #32]
	ldr	r5, [r0, #-132]
	.pad #52
	sub	sp, sp, #52
	movw	r0, #:lower16:.LC357
	movt	r0, #:upper16:.LC357
	str	r2, [sp, #8]
	movw	r2, #:lower16:.LC360
	movt	r2, #:upper16:.LC360
	str	r3, [sp, #24]
	add	r7, r5, #60
	mov	r3, #0
	str	r0, [sp, #16]
	mov	r0, r7
	str	r3, [sp, #12]
	str	r3, [sp, #20]
	str	r3, [sp, #28]
	str	r1, [sp, #32]
	str	r3, [sp, #36]
	strd	r2, [sp, #40]
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #-85]	@ zero_extendqisi2
	mov	r9, r0
	ldrb	r6, [r4, #-86]	@ zero_extendqisi2
	cmp	r3, r6
	ldr	r3, [r5, #12]
	beq	.L4597
	cmp	r3, #0
	beq	.L4648
	movw	r1, #:lower16:.LC361
	mov	r2, #3
	movt	r1, #:upper16:.LC361
	sub	r0, r4, #84
	bl	strncmp
	cmp	r0, #0
	beq	.L4599
	cmp	r6, #0
	eor	r10, r6, #1
	moveq	r2, #4
	addeq	r8, sp, #40
	beq	.L4601
	mov	r2, #3
	add	r8, sp, #32
.L4601:
	ldrb	r3, [r4, #-88]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR1
	mov	r1, r9
	movt	r5, #:upper16:.LANCHOR1
	mov	r0, r7
	str	r2, [r5, #3596]
	strb	r3, [r4, #-87]
	strb	r6, [r4, #-85]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-92]
	cmp	r3, #0
	addne	fp, sp, #16
	beq	.L4603
.L4607:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r2, [r6, #1028]
	cmp	r2, r10
	beq	.L4606
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L4606
.L4618:
	cmp	r10, #0
	sub	r0, r4, #76
	addne	r1, r1, #1
	mvneq	r1, #0
	bl	pm_qos_update_request
	str	r10, [r6, #1028]
.L4606:
	cmp	r8, fp
	bne	.L4603
.L4608:
	ldr	r3, [r5, #3600]
	mov	r8, fp
	cmp	r3, #0
	bne	.L4602
.L4603:
	ldr	r3, [r5, #3596]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L4613
	ldr	r0, [r4, #-128]
	mov	r2, r8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r3, [r5, #3596]
	str	r3, [r5, #3600]
.L4613:
	ldr	r2, .L4650
	movw	r0, #:lower16:.LC364
	movt	r0, #:upper16:.LC364
	ldr	r3, [r8]
	mov	r1, r2
	bl	printk
.L4596:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4597:
	cmp	r3, #0
	ldrb	r10, [r4, #-88]	@ zero_extendqisi2
	beq	.L4598
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #2
	strb	r10, [r4, #-87]
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r0
	mov	r0, r7
	str	r3, [r5, #3596]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #3600]
	add	r8, sp, #24
	cmp	r3, #2
	bne	.L4603
.L4602:
	ldr	r2, .L4650
	movw	r0, #:lower16:.LC363
	movt	r0, #:upper16:.LC363
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-128]
	add	r2, sp, #8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L4603
.L4599:
	cmp	r6, #0
	bne	.L4649
	ldrb	r3, [r4, #-88]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR1
	mov	r2, #4
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r9
	mov	r0, r7
	add	r8, sp, #40
	str	r2, [r5, #3596]
	strb	r3, [r4, #-87]
	strb	r6, [r4, #-85]
	bl	_raw_spin_unlock_irqrestore
	b	.L4603
.L4648:
	ldrb	r10, [r4, #-88]	@ zero_extendqisi2
.L4598:
	ldrb	r3, [r4, #-87]	@ zero_extendqisi2
	cmp	r3, r10
	beq	.L4604
	cmp	r10, #0
	movw	r5, #:lower16:.LANCHOR1
	bne	.L4605
	movt	r5, #:upper16:.LANCHOR1
	add	r8, sp, #8
	add	fp, sp, #16
	str	r10, [r5, #3596]
.L4615:
	strb	r10, [r4, #-87]
	mov	r1, r9
	mov	r0, r7
	strb	r6, [r4, #-85]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-92]
	cmp	r3, #0
	movne	r10, #0
	bne	.L4607
	b	.L4606
.L4604:
	mov	r1, r9
	mov	r0, r7
	strb	r6, [r4, #-85]
	bl	_raw_spin_unlock_irqrestore
	ldrb	r1, [r4, #-87]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC362
	ldr	r2, .L4650
	movt	r0, #:upper16:.LC362
	ldr	ip, [r5, #12]
	ldrb	r3, [r4, #-88]	@ zero_extendqisi2
	stm	sp, {r1, ip}
	mov	r1, r2
	bl	printk
	b	.L4596
.L4605:
	mov	r8, #1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC361
	mov	r2, #3
	movt	r1, #:upper16:.LC361
	sub	r0, r4, #84
	str	r8, [r5, #3596]
	bl	strncmp
	cmp	r0, #0
	addeq	fp, sp, #16
	moveq	r8, fp
	beq	.L4615
	mov	r1, r9
	mov	r0, r7
	strb	r8, [r4, #-87]
	strb	r6, [r4, #-85]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-92]
	cmp	r3, #0
	beq	.L4647
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r2, [r6, #1028]
	cmp	r2, #1
	beq	.L4647
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L4647
	add	fp, sp, #16
	mov	r10, r8
	mov	r8, fp
	b	.L4618
.L4649:
	ldrb	r2, [r4, #-88]	@ zero_extendqisi2
	mov	ip, #1
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #3
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r9
	mov	r0, r7
	add	r8, sp, #32
	str	r3, [r5, #3596]
	strb	r2, [r4, #-87]
	strb	ip, [r4, #-85]
	bl	_raw_spin_unlock_irqrestore
	b	.L4603
.L4647:
	add	fp, sp, #16
	b	.L4608
.L4651:
	.align	2
.L4650:
	.word	.LANCHOR2+2876
	.fnend
	.size	android_work, .-android_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_send_hid_event, %function
acc_complete_send_hid_event:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #32]
	ldr	ip, [r1, #44]
	ldr	r3, [r1, #48]
	cmp	ip, #0
	bne	.L4656
	mov	r2, r1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r2]
	mov	r1, ip
	ldr	r0, [r0, #8]
	str	lr, [sp]
	bl	hid_report_raw_event
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L4656:
	movw	r0, #:lower16:.LC365
	mov	r1, ip
	movt	r0, #:upper16:.LC365
	b	printk
	.fnend
	.size	acc_complete_send_hid_event, .-acc_complete_send_hid_event
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_work, %function
acc_hid_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r3, #2520]
	.pad #28
	sub	sp, sp, #28
	add	r8, sp, #8
	str	r8, [sp, #8]
	add	r7, r6, #88
	mov	r5, r6
	str	r8, [sp, #12]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1776]!
	mov	r1, r0
	ldr	r2, [r3]
	cmp	r3, r5
	movne	ip, r2
	bne	.L4658
	b	.L4659
.L4660:
	cmp	ip, r5
	ldr	r2, [r2]
	beq	.L4659
.L4661:
	mov	r3, ip
	mov	ip, r2
.L4658:
	ldr	lr, [r3, #24]
	ldr	r4, [r3, #28]
	cmp	r4, lr
	bne	.L4660
	ldr	lr, [r3, #4]
	cmp	ip, r5
	str	lr, [r2, #4]
	str	r2, [lr]
	ldr	lr, [sp, #8]
	str	r3, [lr, #4]
	str	lr, [r3]
	str	r8, [r3, #4]
	str	r3, [sp, #8]
	ldr	r2, [r2]
	bne	.L4661
.L4659:
	ldr	r2, [r6, #1784]
	add	r3, r6, #1776
	add	r3, r3, #8
	cmp	r3, r2
	addeq	r9, sp, #16
	streq	r9, [sp, #16]
	streq	r9, [sp, #20]
	beq	.L4663
	ldr	r0, [r6, #1788]
	add	r9, sp, #24
	str	r2, [r9, #-8]!
	str	r0, [sp, #20]
	str	r9, [r2, #4]
	ldr	r2, [sp, #20]
	str	r9, [r2]
	str	r3, [r6, #1784]
	str	r3, [r6, #1788]
.L4663:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r4, [sp, #8]
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L4664
	movw	r3, #:lower16:.LC367
	add	r10, r6, #1760
	movt	r3, #:upper16:.LC367
	add	r10, r10, #8
	str	r3, [sp, #4]
	b	.L4670
.L4676:
	mov	r5, r3
.L4670:
	bl	hid_allocate_device
	cmn	r0, #4096
	movw	r2, #:lower16:.LANCHOR0
	ldr	ip, .L4681
	mov	fp, r0
	mvn	r1, #0
	movt	r2, #:upper16:.LANCHOR0
	mov	lr, #3
	bhi	.L4679
	ldr	r2, [r2, #616]
	strh	lr, [r0, #32]	@ movhi
	str	r1, [r0, #36]
	str	r1, [r0, #40]
	str	r2, [r0, #3200]
	str	ip, [r0, #3556]
	str	r4, [r0, #3856]
	bl	hid_add_device
	subs	r1, r0, #0
	streq	fp, [r4, #8]
	bne	.L4680
.L4667:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldrd	r2, [r4]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r3, [r6, #1768]
	str	r4, [r3, #4]
	stm	r4, {r3, r10}
	str	r4, [r6, #1768]
	bl	_raw_spin_unlock_irqrestore
.L4669:
	cmp	r5, r8
	mov	r4, r5
	ldr	r3, [r5]
	bne	.L4676
.L4664:
	ldr	r4, [sp, #16]
	ldr	r5, [r4]
	cmp	r4, r9
	movne	r8, #256
	movne	r7, #512
	movne	r6, r5
	bne	.L4671
	b	.L4657
.L4674:
	mov	r4, r6
	mov	r6, r5
.L4671:
	ldr	r3, [r4, #4]
	str	r3, [r5, #4]
	str	r5, [r3]
	ldr	r3, [r4, #8]
	str	r8, [r4]
	str	r7, [r4, #4]
	subs	r0, r3, #0
	beq	.L4673
	bl	hid_destroy_device
.L4673:
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	bl	kfree
	cmp	r6, r9
	ldr	r5, [r5]
	bne	.L4674
.L4657:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4679:
	cmp	r0, #0
	beq	.L4667
	b	.L4666
.L4680:
	movw	r0, #:lower16:.LC366
	movt	r0, #:upper16:.LC366
	bl	printk
	mov	r0, fp
	bl	hid_destroy_device
.L4666:
	mov	r1, r4
	ldr	r0, [sp, #4]
	bl	printk
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	bl	kfree
	b	.L4669
.L4682:
	.align	2
.L4681:
	.word	.LANCHOR0+1032
	.fnend
	.size	acc_hid_work, .-acc_hid_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_parse, %function
acc_hid_parse:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #3856]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #24]
	bl	hid_parse_report
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	acc_hid_parse, .-acc_hid_parse
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_file, %function
fsg_show_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r6, r0
	bl	down_read
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	moveq	r4, r0
	strbeq	r0, [r5]
	beq	.L4688
	add	r0, r0, #8
	movw	r2, #4095
	mov	r1, r5
	bl	d_path
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L4688
	bl	strlen
	mov	r7, r0
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	bl	memmove
	add	r4, r7, #1
	mov	r2, #10
	mov	r3, #0
	strb	r2, [r5, r7]
	strb	r3, [r5, r4]
.L4688:
	mov	r0, r6
	bl	up_read
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_file, .-fsg_show_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_ro, %function
fsg_store_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L4695
.L4690:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4695:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4696
.L4692:
	mov	r0, r5
	bl	up_read
	b	.L4690
.L4696:
	ldr	r2, [sp, #4]
	mov	r4, r7
	ldrb	r3, [r6, #-24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	strb	r3, [r6, #-24]
	b	.L4692
	.fnend
	.size	fsg_store_ro, .-fsg_store_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_cdrom, %function
fsg_store_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L4702
.L4697:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4702:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4703
.L4699:
	mov	r0, r5
	bl	up_read
	b	.L4697
.L4703:
	ldrb	r3, [r6, #-24]	@ zero_extendqisi2
	mov	r4, r7
	ldr	r2, [sp, #4]
	bfi	r3, r2, #3, #1
	strb	r3, [r6, #-24]
	b	.L4699
	.fnend
	.size	fsg_store_cdrom, .-fsg_store_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_nofua, %function
fsg_store_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r1, #2
	mov	r4, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	add	r2, sp, #4
	mov	r5, r3
	bl	kstrtouint
	cmp	r0, #0
	bne	.L4704
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L4708
.L4706:
	ldrb	r2, [r4, #-24]	@ zero_extendqisi2
	mov	r0, r5
	bfi	r2, r3, #7, #1
	strb	r2, [r4, #-24]
.L4704:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L4708:
	ldrb	r2, [r4, #-24]	@ zero_extendqisi2
	tst	r2, #128
	beq	.L4706
	ldr	r0, [r4, #-48]
	ubfx	r2, r2, #1, #1
	cmp	r0, #0
	moveq	r2, #1
	cmp	r2, #0
	bne	.L4706
	mov	r1, #1
	bl	vfs_fsync
	ldr	r3, [sp, #4]
	b	.L4706
	.fnend
	.size	fsg_store_nofua, .-fsg_store_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_file, %function
fsg_store_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r3
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldrb	r3, [r4, #-24]	@ zero_extendqisi2
	mov	r6, r0
	tst	r3, #16
	beq	.L4710
	ldr	r3, [r4, #-48]
	cmp	r3, #0
	bne	.L4720
.L4710:
	cmp	r5, #0
	bne	.L4728
	mov	r0, r6
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L4717
	bl	fput
	mov	r3, #14848
	str	r5, [r4, #-48]
	movt	r3, 2
	str	r3, [r4, #-12]
.L4717:
	mov	r0, r6
	bl	up_write
.L4716:
	mov	r7, r5
.L4709:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4728:
	sub	r3, r5, #1
	ldrb	r2, [r7, r3]	@ zero_extendqisi2
	cmp	r2, #10
	beq	.L4729
	mov	r0, r6
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L4715
.L4714:
	bl	fput
	mov	r3, #14848
	mov	r2, #0
	movt	r3, 2
	str	r2, [r4, #-48]
	str	r3, [r4, #-12]
.L4715:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L4717
	mov	r1, r7
	sub	r0, r4, #48
	bl	fsg_lun_open
	subs	r7, r0, #0
	bne	.L4718
	mov	r3, #10240
	mov	r0, r6
	movt	r3, 6
	str	r3, [r4, #-12]
	bl	up_write
	b	.L4716
.L4729:
	mov	r2, #0
	mov	r0, r6
	strb	r2, [r7, r3]
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L4715
	b	.L4714
.L4718:
	mov	r0, r6
	bl	up_write
	cmp	r7, #0
	blt	.L4709
	b	.L4716
.L4720:
	mvn	r7, #15
	b	.L4709
	.fnend
	.size	fsg_store_file, .-fsg_store_file
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_message, %function
send_message:
	.fnstart
	@ args = 0, pretend = 0, frame = 256
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:__stack_chk_guard
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	movt	r3, #:upper16:__stack_chk_guard
	ldr	r4, [r0]
	.pad #260
	sub	sp, sp, #260
	ldr	ip, [r3]
	mov	r7, r1
	movw	r0, #:lower16:.LC368
	ldr	r1, .L4737
	mov	r2, r7
	movt	r0, #:upper16:.LC368
	mov	r5, r3
	str	ip, [sp, #252]
	bl	printk
	cmp	r4, #0
	moveq	r0, r4
	beq	.L4730
	movw	lr, #:lower16:.LC369
	add	ip, sp, #12
	movt	lr, #:upper16:.LC369
	add	r6, sp, #132
	ldmia	lr!, {r0, r1, r2, r3}
	str	ip, [sp]
	stmia	ip!, {r0, r1, r2, r3}
	movw	r2, #:lower16:.LC370
	ldm	lr, {r0, r1}
	mov	r3, r7
	movt	r2, #:upper16:.LC370
	stm	ip, {r0, r1}
	mov	r0, r6
	mov	r1, #120
	bl	snprintf
	ldr	r0, [r4, #364]
	mov	r3, #0
	str	r6, [sp, #4]
	str	r3, [sp, #8]
	cmp	r0, r3
	beq	.L4732
.L4733:
	add	r0, r4, #40
	mov	r2, sp
	mov	r1, #2
	bl	kobject_uevent_env
	mov	r0, #0
	b	.L4730
.L4732:
	movw	r1, #:lower16:.LC371
	ldr	r2, .L4737+4
	movt	r1, #:upper16:.LC371
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r4, #364]
	mvnhi	r0, #0
	bls	.L4733
.L4730:
	ldr	r2, [sp, #252]
	ldr	r3, [r5]
	cmp	r2, r3
	beq	.L4734
	bl	__stack_chk_fail
.L4734:
	add	sp, sp, #260
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L4738:
	.align	2
.L4737:
	.word	.LANCHOR2+2892
	.word	.LANCHOR1+3604
	.fnend
	.size	send_message, .-send_message
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_out_complete, %function
bulk_out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4749
.L4740:
	.syntax divided
@ 689 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, #0
	mov	r3, #1
	str	r3, [r6, #4]
	str	r2, [r6, #28]
	.syntax divided
@ 607 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r4, #168]
	str	r3, [r4, #148]
	cmp	r0, r2
	beq	.L4741
	bl	wake_up_process
.L4741:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L4749:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4740
	blx	r3
	b	.L4740
	.fnend
	.size	bulk_out_complete, .-bulk_out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_in_complete, %function
bulk_in_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4760
.L4751:
	.syntax divided
@ 668 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #0
	str	r3, [r6, #4]
	str	r3, [r6, #20]
	.syntax divided
@ 607 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r4, #168]
	mov	r3, #1
	str	r3, [r4, #148]
	cmp	r0, #0
	beq	.L4752
	bl	wake_up_process
.L4752:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L4760:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4751
	blx	r3
	b	.L4751
	.fnend
	.size	bulk_in_complete, .-bulk_in_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sleep_thread, %function
sleep_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, #57344
	strd	r6, [sp, #8]
	movw	r7, #:lower16:system_freezing_cnt
	movt	r5, 65535
	strd	r8, [sp, #16]
	add	r6, r0, #44
	mov	r8, r0
	str	r10, [sp, #24]
	movt	r7, #:upper16:system_freezing_cnt
	mov	r9, #1
	str	lr, [sp, #28]
	b	.L4766
.L4762:
	str	r9, [r0]
	.syntax divided
@ 819 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	mov	r0, r6
	and	r3, r3, r5
	ldr	r2, [r3, #12]
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	ands	r4, r3, #1
	bne	.L4767
	bl	_raw_spin_lock_irq
	ldr	r3, [r8, #148]
	mov	r0, r6
	cmp	r3, #0
	bne	.L4773
	bl	_raw_spin_unlock_irq
	bl	schedule
.L4766:
	ldr	r3, [r7]
	mov	r2, sp
	and	r2, r2, r5
	ldr	r0, [r2, #12]
	cmp	r3, #0
	beq	.L4762
	bl	freezing_slow_path
	cmp	r0, #0
	mov	r3, sp
	and	r3, r3, r5
	bne	.L4763
	ldr	r0, [r3, #12]
	b	.L4762
.L4763:
	mov	r0, #0
	bl	__refrigerator
	mov	r3, sp
	and	r3, r3, r5
	ldr	r0, [r3, #12]
	b	.L4762
.L4767:
	mvn	r4, #3
.L4764:
	mov	r5, #0
	mov	r0, r6
	str	r5, [r2]
	bl	_raw_spin_lock_irq
	mov	r0, r6
	str	r5, [r8, #148]
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 836 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4773:
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	and	r5, r5, r3
	ldr	r2, [r5, #12]
	b	.L4764
	.fnend
	.size	sleep_thread, .-sleep_thread
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	receive_file_work, %function
receive_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	.syntax divided
@ 858 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r10, [r0, #16]
	ldrd	r6, [r0, #32]
	ldrd	r2, [r0, #24]
	cmp	r6, #0
	sbcs	r1, r7, #0
	strd	r2, [sp]
	mvnlt	r3, #21
	strlt	r3, [r0, #52]
	blt	.L4774
	mov	r3, sp
	mov	r8, #0
	bic	r9, r3, #8128
	mov	r5, r0
	mov	fp, r8
	bic	r9, r9, #63
	b	.L4775
.L4810:
	cmp	r6, r3
	mov	r0, r3
	sbcs	r3, r7, ip
	movlt	r0, r6
	mov	r3, r0
	str	r0, [r4, #48]
.L4791:
	subs	r6, r6, r3
	sbc	r7, r7, #0
.L4792:
	cmp	r2, r3
	movhi	r6, #0
	movhi	r7, #0
.L4783:
	mov	fp, r4
.L4775:
	cmp	r6, #1
	sbcs	r3, r7, #0
	movge	r3, #1
	movlt	r3, #0
	cmp	fp, #0
	movne	r3, #1
	cmp	r3, #0
	beq	.L4807
	cmp	r6, #1
	sbcs	r3, r7, #0
	blt	.L4777
	add	r3, r8, #42
	movw	r2, #:lower16:.LANCHOR0
	add	r3, r5, r3, lsl #2
	movt	r2, #:upper16:.LANCHOR0
	ldr	r1, [r2, #536]
	mov	ip, #0
	ldr	r4, [r3, #-200]
	mov	r2, #208
	eor	r8, r8, #1
	str	r1, [r4, #4]
	ldr	r0, [r5, #-104]
	mov	r1, r4
	str	ip, [r5, #-24]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L4806
	cmp	fp, #0
	beq	.L4781
	mov	r3, sp
	mov	r0, r10
	ldr	r1, [fp]
	ldr	r2, [fp, #48]
	bl	vfs_write
	ldr	r3, [fp, #48]
	cmp	r3, r0
	bne	.L4806
.L4781:
	cmp	r4, #0
	beq	.L4783
	ldr	r3, [r5, #-96]
	ldr	r2, [r5, #-24]
	cmp	r2, #0
	bne	.L4784
	cmp	r3, #2
	beq	.L4808
.L4784:
	cmp	r3, #0
	cmpne	r3, #3
	moveq	ip, #1
	movne	ip, #0
	beq	.L4809
	ldr	r2, [r4, #4]
	mov	r1, #0
	ldr	r3, [r4, #48]
	cmp	r6, r2
	sbcs	r1, r7, r1
	blt	.L4810
	mov	r1, #0
	mvn	r0, #0
	cmp	r7, r1
	cmpeq	r6, r0
	beq	.L4792
	b	.L4791
.L4806:
	ldr	r3, [r5, #-96]
	cmp	r3, #0
	movne	r3, #4
	mvneq	r6, #4
	mvnne	r6, #4
	strne	r3, [r5, #-96]
.L4780:
	str	r6, [r5, #52]
	.syntax divided
@ 946 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L4774:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4777:
	mov	r3, sp
	mov	r0, r10
	ldr	r1, [fp]
	ldr	r2, [fp, #48]
	bl	vfs_write
	ldr	r3, [fp, #48]
	cmp	r0, r3
	bne	.L4806
	mov	r4, #0
	b	.L4783
.L4808:
	ldr	r0, [r9, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r3, #:upper16:autoremove_wake_function
	sub	fp, r5, #68
	str	r2, [sp, #12]
	str	r1, [sp, #24]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #28]
	b	.L4786
.L4811:
	bl	schedule
.L4786:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r5, #-24]
	cmp	r3, #0
	bne	.L4785
	ldr	r3, [r5, #-96]
	cmp	r3, #2
	bne	.L4785
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L4811
.L4785:
	add	r1, sp, #12
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r5, #-96]
	b	.L4784
.L4807:
	mov	r6, r3
	b	.L4780
.L4809:
	ldr	r2, [r5, #-24]
	cmp	r3, #0
	mvnne	r6, #124
	mvneq	r6, #4
	cmp	r2, #0
	bne	.L4780
	ldr	r0, [r5, #-104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L4780
	.fnend
	.size	receive_file_work, .-receive_file_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_cleanup, %function
ffs_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC372
	movt	r0, #:upper16:.LC372
	str	lr, [sp, #4]
	bl	printk
	ldr	r0, .L4814
	bl	unregister_filesystem
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L4815:
	.align	2
.L4814:
	.word	.LANCHOR0+1060
	.fnend
	.size	ffs_function_cleanup, .-ffs_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_complete, %function
ffs_ep0_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	add	r0, r0, #36
	b	complete_all
	.fnend
	.size	ffs_ep0_complete, .-ffs_ep0_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_init, %function
ffs_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L4819
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	beq	.L4817
.L4819:
	ldr	r0, .L4824
	bl	register_filesystem
	subs	r4, r0, #0
	bne	.L4821
	movw	r0, #:lower16:.LC373
	movt	r0, #:upper16:.LC373
	bl	printk
.L4817:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4821:
	movw	r0, #:lower16:.LC374
	mov	r1, r4
	movt	r0, #:upper16:.LC374
	bl	printk
	b	.L4817
.L4825:
	.align	2
.L4824:
	.word	.LANCHOR0+1060
	.fnend
	.size	ffs_function_init, .-ffs_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_suspend, %function
rmnet_sdio_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #192]
	mov	r3, r0
	cmp	r2, #0
	bne	.L4828
	bx	lr
.L4828:
	add	r2, r0, #336
	ldr	r1, [r3, #200]
	mov	r0, #4
	ldr	ip, [r3, #332]
	bic	ip, ip, #2
	str	ip, [r3, #332]
	b	queue_work_on
	.fnend
	.size	rmnet_sdio_suspend, .-rmnet_sdio_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_free, %function
audio_pcm_hw_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	str	lr, [sp, #8]
	ldr	r2, [r0, #140]
	.pad #12
	sub	sp, sp, #12
	cmp	r2, #0
	beq	.L4830
	ldr	r0, [r0]
	ldr	r3, [r4, #144]
	ldr	r1, [r4, #148]
	ldr	r0, [r0]
	ldr	r0, [r0, #500]
	cmp	r0, #0
	beq	.L4831
	ldr	ip, [r0, #284]
	cmp	ip, #0
	beq	.L4831
.L4832:
	mov	lr, #0
	str	lr, [sp]
	ldr	r5, [ip, #4]
	blx	r5
.L4830:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #140]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L4831:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L4832
	.syntax divided
@ 206 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 206, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	audio_pcm_hw_free, .-audio_pcm_hw_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_unthrottle_tx, %function
ghsic_data_unthrottle_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L4841
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L4850
.L4841:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4850:
	add	r5, r4, #80
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r2, r4, #120
	mov	r0, #4
	ldr	r1, [r4, #84]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
	.fnend
	.size	ghsic_data_unthrottle_tx, .-ghsic_data_unthrottle_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_complete_set_line_coding, %function
acm_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bne	.L4851
	ldr	r3, [r1, #48]
	cmp	r3, #7
	beq	.L4853
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L4853:
	ldr	r3, [r1]
	ldr	r1, [r0]
	ldr	r0, [r3]	@ unaligned
	add	r2, r1, #160
	str	r0, [r1, #160]
	ldrh	r1, [r3, #4]	@ unaligned
	strh	r1, [r2, #4]	@ movhi
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	strb	r3, [r2, #6]
.L4851:
	bx	lr
	.fnend
	.size	acm_complete_set_line_coding, .-acm_complete_set_line_coding
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_probe, %function
acc_hid_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	hid_open_report
	subs	r5, r0, #0
	bne	.L4854
	ldr	r3, [r4, #3556]
	mov	r0, r4
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	beq	.L4860
.L4854:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4860:
	mov	r1, #45
	mov	r0, r4
	bl	hid_connect
	subs	r5, r0, #0
	beq	.L4854
	ldr	r3, [r4, #3556]
	mov	r0, r4
	ldr	r3, [r3, #4]
	blx	r3
	b	.L4854
	.fnend
	.size	acc_hid_probe, .-acc_hid_probe
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_free_ctrl_pkt.part.9, %function
mbim_free_ctrl_pkt.part.9:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	ldr	r0, [r0]
	bl	kfree
	mov	r0, r4
	pop	{r4, lr}
	b	kfree
	.fnend
	.size	mbim_free_ctrl_pkt.part.9, .-mbim_free_ctrl_pkt.part.9
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_set_alt, %function
f_audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	cmp	r3, r1
	beq	.L4900
	ldrb	r3, [r6, #17]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L4875
	cmp	r2, #1
	bne	.L4876
	ldr	r5, [r0, #172]
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L4901
	str	r8, [r5]
	ldr	r0, [r6, #1100]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	str	r0, [r8, #184]
	bhi	.L4878
	ldr	r3, [r6, #1104]
	cmp	r3, #0
	ble	.L4898
	movw	r9, #:lower16:f_audio_complete
	movt	r9, #:upper16:f_audio_complete
.L4879:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	add	r7, r7, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	movw	r1, #32800
	beq	.L4881
	ldr	r0, [r6, #1108]
	bl	__kmalloc
	mov	r3, r0
	mov	r2, #32
	cmp	r3, #0
	mov	r0, r5
	mov	r1, r4
	str	r3, [r4]
	beq	.L4882
	ldr	r3, [r6, #1108]
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r8, [r4, #32]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L4902
	ldr	r3, [r6, #1104]
	cmp	r3, r7
	bgt	.L4879
.L4880:
	strb	r10, [r8, #249]
.L4863:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4900:
	cmp	r2, #1
	bne	.L4865
	ldr	r5, [r0, #176]
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L4903
	str	r8, [r5]
	mov	r1, #32
	mov	r0, r5
	str	r4, [r8, #216]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L4881
	movw	r1, #32800
	ldr	r0, [r6, #1096]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L4882
	ldr	ip, [r6, #1096]
	movw	r3, #:lower16:f_audio_complete
	mov	r1, r4
	movt	r3, #:upper16:f_audio_complete
	mov	r2, #32
	mov	r0, r5
	str	ip, [r4, #4]
	str	r3, [r4, #28]
	str	r8, [r4, #32]
	str	r4, [r8, #244]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L4904
.L4870:
	movw	r3, #:lower16:system_wq
	add	r2, r8, #220
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
.L4871:
	strb	r10, [r8, #248]
	b	.L4863
.L4878:
	movw	r0, #:lower16:.LC26
	ldr	r1, .L4906
	mvn	r4, #11
	movt	r0, #:upper16:.LC26
	bl	printk
	b	.L4863
.L4876:
	ldr	r4, [r0, #184]
	cmp	r4, #0
	beq	.L4884
	movw	r0, #:lower16:.LC381
	ldr	r1, .L4906
	movt	r0, #:upper16:.LC381
	bl	printk
	ldr	r1, [r8, #208]
	add	ip, r4, #8
	add	r2, r8, #204
	movw	r3, #:lower16:system_wq
	mov	r0, #4
	movt	r3, #:upper16:system_wq
	str	ip, [r8, #208]
	str	r2, [r4, #8]
	add	r2, r8, #188
	str	r1, [r4, #12]
	str	ip, [r1]
	ldr	r1, [r3]
	bl	queue_work_on
	mov	r3, #0
	mov	r4, r3
	str	r3, [r8, #184]
	b	.L4880
.L4884:
	movw	r0, #:lower16:.LC382
	ldr	r1, .L4906
	movt	r0, #:upper16:.LC382
	bl	printk
	b	.L4880
.L4865:
	add	r7, r0, #212
	add	r5, r0, #236
	mov	r0, r7
	mov	r9, #256
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r6, #512
	b	.L4873
.L4874:
	ldrd	r2, [r4]
	subs	fp, r4, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r6, [r4, #4]
	bne	.L4905
.L4873:
	ldr	r4, [r8, #236]
	cmp	r4, r5
	bne	.L4874
	mov	r0, r7
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore
	b	.L4871
.L4905:
	ldr	r0, [r4, #-8]
	str	r1, [sp, #4]
	bl	kfree
	mov	r3, #0
	mov	r0, fp
	str	r3, [r4, #-8]
	bl	kfree
	ldr	r1, [sp, #4]
	b	.L4873
.L4898:
	mov	r4, r7
	b	.L4880
.L4902:
	movw	r0, #:lower16:.LC380
	mov	r3, r4
	ldr	r1, .L4906
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC380
	bl	printk
	b	.L4880
.L4881:
	movw	r0, #:lower16:.LC376
	ldr	r1, .L4906
	mvn	r4, #11
	movt	r0, #:upper16:.LC376
	bl	printk
	b	.L4863
.L4882:
	movw	r0, #:lower16:.LC377
	ldr	r1, .L4906
	mvn	r4, #11
	movt	r0, #:upper16:.LC377
	bl	printk
	b	.L4863
.L4903:
	movw	r0, #:lower16:.LC375
	ldr	r1, .L4906
	movt	r0, #:upper16:.LC375
	bl	printk
	b	.L4863
.L4901:
	movw	r0, #:lower16:.LC379
	ldr	r1, .L4906
	mov	r4, r7
	movt	r0, #:upper16:.LC379
	bl	printk
	b	.L4863
.L4904:
	movw	r0, #:lower16:.LC378
	mov	r3, r4
	ldr	r1, .L4906
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC378
	bl	printk
	b	.L4870
.L4875:
	movw	r0, #:lower16:.LC383
	mov	r2, r1
	ldr	r1, .L4906
	mov	r3, #0
	movt	r0, #:upper16:.LC383
	mov	r4, r3
	bl	printk
	b	.L4863
.L4907:
	.align	2
.L4906:
	.word	.LANCHOR2+2908
	.fnend
	.size	f_audio_set_alt, .-f_audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disable, %function
rmnet_mux_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #372]
	cmp	r3, #0
	bxeq	lr
	mov	r3, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r3, [r0, #372]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L4910
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L4910:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r5, [r4, #96]
	ldr	r6, [r4, #100]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L4911
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L4911:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L4912
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L4912:
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	add	r2, r4, #384
	ldr	r1, [r4, #380]
	mov	r0, #4
	str	r3, [r4, #352]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
	.fnend
	.size	rmnet_mux_disable, .-rmnet_mux_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ep_matches.part.17, %function
ep_matches.part.17:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r2, #3]	@ zero_extendqisi2
	ands	r4, ip, #3
	beq	.L4928
	ldr	r9, [r1, #4]
	ldrb	ip, [r9]	@ zero_extendqisi2
	cmp	ip, #101
	beq	.L4981
.L4928:
	mov	r0, #0
.L4925:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4981:
	mov	r7, r3
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	mov	r6, r1
	mov	r8, r0
	mov	r5, r2
	cmp	r3, #45
	beq	.L4929
	mov	r1, #45
	mov	r0, r9
	bl	strrchr
	subs	r10, r0, #0
	beq	.L4930
	cmp	r4, #2
	beq	.L4932
	cmp	r4, #3
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	bne	.L4976
	cmp	r3, #115
	beq	.L4928
	movw	r0, #:lower16:.LC326
	ldr	r1, [r8, #28]
	movt	r0, #:upper16:.LC326
	bl	strcmp
	cmp	r0, #0
	bne	.L4934
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #105
	beq	.L4928
.L4934:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L4946
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	ubfxne	r2, r3, #0, #11
	movne	r9, #0
	bne	.L4941
	mov	r9, r3
	b	.L4948
.L4976:
	cmp	r3, #115
	bne	.L4928
.L4935:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L4929
.L4946:
	ldrsb	r3, [r5, #2]
	cmp	r3, #0
	blt	.L4982
	cmp	r2, #116
	bne	.L4928
.L4929:
	sub	r9, r4, #2
	cmp	r7, #0
	clz	r9, r9
	moveq	r3, #0
	lsr	r9, r9, #5
	movne	r3, r9
	cmp	r3, #0
	bne	.L4983
.L4937:
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	bne	.L4938
.L4948:
	ldrh	r3, [r6, #20]
	strh	r3, [r5, #4]	@ unaligned
.L4938:
	cmp	r4, #1
	ubfx	r2, r3, #0, #11
	beq	.L4940
	cmp	r4, #3
	beq	.L4941
.L4939:
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	movw	r2, #:lower16:_ctype
	movt	r2, #:upper16:_ctype
	and	r3, r3, #128
	strb	r3, [r5, #2]
	ldr	r0, [r6, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r2, [r2, r1]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L4984
	movw	r1, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LANCHOR1
	ldr	r2, [r1, #3604]
	add	r2, r2, #1
	cmp	r2, #15
	str	r2, [r1, #3604]
	bhi	.L4928
	orr	r3, r3, r2
	uxtb	r3, r3
	strb	r3, [r5, #2]
.L4944:
	cmp	r7, #0
	moveq	r7, r9
	movne	r7, #0
	cmp	r7, #0
	beq	.L4945
	ldrh	r2, [r6, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r5, #4]	@ unaligned
.L4945:
	mov	r0, #1
	strb	r3, [r6, #25]
	b	.L4925
.L4941:
	ldr	r0, [r8, #20]
	cmp	r0, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L4928
.L4940:
	ldrh	r1, [r6, #20]
	cmp	r1, r2
	bcc	.L4928
	ldr	r1, [r8, #20]
	cmp	r1, #2
	bhi	.L4939
	cmp	r2, #1024
	bcs	.L4928
	tst	r3, #6144
	bne	.L4928
	b	.L4939
.L4984:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r5, #2]
	b	.L4944
.L4930:
	mov	r0, r9
	bl	strlen
	add	r10, r9, r0
	b	.L4935
.L4983:
	ldr	r2, [r8, #20]
	cmp	r2, #4
	bls	.L4950
	ldrb	r2, [r7, #3]	@ zero_extendqisi2
	ldrh	r1, [r6, #22]
	and	r2, r2, #31
	cmp	r1, r2
	bcc	.L4928
.L4950:
	mov	r9, r3
	b	.L4937
.L4932:
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L4928
	b	.L4935
.L4982:
	cmp	r2, #110
	bne	.L4928
	b	.L4929
	.fnend
	.size	ep_matches.part.17, .-ep_matches.part.17
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_mmap, %function
audio_pcm_mmap:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #168]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r2, #544]
	cmp	r3, #0
	beq	.L4986
	ldr	lr, [r2, #548]
	cmp	lr, #0
	beq	.L4986
	ldr	r0, [r0]
	ldr	r2, [r2, #540]
	ldr	r0, [r0]
	ldr	r0, [r0, #500]
	cmp	r0, #0
	beq	.L4987
	ldr	ip, [r0, #284]
	cmp	ip, #0
	beq	.L4987
.L4988:
	mov	r4, #0
	str	lr, [sp]
	str	r4, [sp, #4]
	ldr	r4, [ip, #8]
	blx	r4
.L4985:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4987:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L4988
	.syntax divided
@ 236 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 236, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L4986:
	movw	r0, #:lower16:.LC384
	movt	r0, #:upper16:.LC384
	bl	printk
	mvn	r0, #21
	b	.L4985
	.fnend
	.size	audio_pcm_mmap, .-audio_pcm_mmap
	.align	2
	.global	gsdio_read_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_complete, %function
gsdio_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L5004
	add	r6, r4, #4
	mov	r5, r1
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #24]
	add	ip, r5, #36
	add	r2, r4, #20
	movw	r1, #:lower16:.LANCHOR1
	mov	r7, r0
	str	ip, [r4, #24]
	movt	r1, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r1, #3340]
	strd	r2, [r5, #36]
	add	r2, r4, #28
	str	ip, [r3]
	ldr	r3, [r4, #48]
	add	r3, r3, #1
	str	r3, [r4, #48]
	bl	queue_work_on
	ldrd	r4, [sp]
	mov	r1, r7
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L5004:
	movw	r0, #:lower16:.LC12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC12
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L5005
	b	printk
.L5006:
	.align	2
.L5005:
	.word	.LANCHOR2+2924
	.fnend
	.size	gsdio_read_complete, .-gsdio_read_complete
	.align	2
	.global	gsdio_ctrl_wq
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_wq, %function
gsdio_ctrl_wq:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #80
	beq	.L5009
	bx	lr
.L5009:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L5010
	movt	r0, #:upper16:.LC12
	b	printk
.L5011:
	.align	2
.L5010:
	.word	.LANCHOR2+2944
	.fnend
	.size	gsdio_ctrl_wq, .-gsdio_ctrl_wq
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_poll, %function
rmnet_ctrl_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L5025
	cmp	r1, #0
	beq	.L5015
	ldr	r3, [r1]
	cmp	r3, #0
	beq	.L5015
	mov	r2, r1
	add	r1, r4, #32
	blx	r3
.L5015:
	add	r5, r4, #52
	add	r4, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r5
	cmp	r3, r4
	movne	r4, #65
	moveq	r4, #0
	bl	_raw_spin_unlock_irqrestore
.L5012:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5025:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L5026
	mov	r4, #8
	movt	r0, #:upper16:.LC385
	bl	printk
	b	.L5012
.L5027:
	.align	2
.L5026:
	.word	.LANCHOR2+2960
	.fnend
	.size	rmnet_ctrl_poll, .-rmnet_ctrl_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cbits_tomodem, %function
ghsic_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #1036]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L5032
	mov	r0, #104
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #1040]
	cmp	r3, #0
	beq	.L5033
	ldr	r1, [r3, #88]
	cmp	r1, r2
	ldrne	r1, [r3, #84]
	strne	r2, [r3, #88]
	bx	lr
.L5032:
	movw	r0, #:lower16:.LC16
	mov	r2, r1
	ldr	r1, .L5034
	movt	r0, #:upper16:.LC16
	b	printk
.L5033:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L5034
	movt	r0, #:upper16:.LC12
	b	printk
.L5035:
	.align	2
.L5034:
	.word	.LANCHOR2+2976
	.fnend
	.size	ghsic_send_cbits_tomodem, .-ghsic_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cbits_tomodem, %function
ghsuart_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #1876]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L5040
	mov	r0, #84
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #1880]
	cmp	r3, #0
	beq	.L5041
	ldr	r1, [r3, #92]
	cmp	r1, r2
	ldrne	r1, [r3, #88]
	strne	r2, [r3, #92]
	bx	lr
.L5040:
	movw	r0, #:lower16:.LC16
	mov	r2, r1
	ldr	r1, .L5042
	movt	r0, #:upper16:.LC16
	b	printk
.L5041:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L5042
	movt	r0, #:upper16:.LC12
	b	printk
.L5043:
	.align	2
.L5042:
	.word	.LANCHOR2+3004
	.fnend
	.size	ghsuart_send_cbits_tomodem, .-ghsuart_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_wake_cb, %function
bam_data_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L5051
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L5052
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L5053
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L5049
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L5049:
	mvn	r0, #94
.L5044:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5053:
	movw	r0, #:lower16:.LC388
	ldr	r1, .L5054
	movt	r0, #:upper16:.LC388
	bl	printk
	mvn	r0, #18
	b	.L5044
.L5052:
	movw	r0, #:lower16:.LC387
	ldr	r1, .L5054
	movt	r0, #:upper16:.LC387
	bl	printk
	mvn	r0, #18
	b	.L5044
.L5051:
	movw	r0, #:lower16:.LC386
	ldr	r1, .L5054
	movt	r0, #:upper16:.LC386
	bl	printk
	mvn	r0, #18
	b	.L5044
.L5055:
	.align	2
.L5054:
	.word	.LANCHOR2+3032
	.fnend
	.size	bam_data_wake_cb, .-bam_data_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_connect, %function
frmnet_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	subs	r2, r0, #0
	beq	.L5058
	mov	r3, #1
	str	r3, [r2, #124]
	bx	lr
.L5058:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L5059
	movt	r0, #:upper16:.LC389
	b	printk
.L5060:
	.align	2
.L5059:
	.word	.LANCHOR2+3052
	.fnend
	.size	frmnet_connect, .-frmnet_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disconnect, %function
frmnet_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L5078
	ldr	r3, [r4, #120]
	mov	r2, #0
	str	r2, [r4, #124]
	cmp	r3, r2
	beq	.L5061
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, r2
	beq	.L5065
	blx	r3
.L5065:
	ldr	r3, [r4, #140]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r4, #112]
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L5066
	ldr	r3, [r4, #120]
	cmp	r3, #0
	bne	.L5079
.L5061:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5079:
	movw	r0, #:lower16:.LC390
	ldr	r1, .L5080
	movt	r0, #:upper16:.LC390
	bl	printk
.L5066:
	add	r9, r4, #132
	add	r6, r4, #144
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #144]
	mov	r10, r0
	cmp	r3, r6
	beq	.L5068
	mov	r8, #256
	mov	r7, #512
.L5069:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r4, #144]
	cmp	r3, r6
	bne	.L5069
.L5068:
	mov	r3, #0
	mov	r1, r10
	mov	r0, r9
	str	r3, [r4, #152]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L5078:
	movw	r0, #:lower16:.LC389
	mov	r2, r4
	ldr	r1, .L5080
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC389
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L5081:
	.align	2
.L5080:
	.word	.LANCHOR2+3068
	.fnend
	.size	frmnet_disconnect, .-frmnet_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_cmd_complete, %function
frmnet_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #32]
	cmp	r3, #0
	beq	.L5087
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, [r3, #96]
	ldrb	r3, [r3, #116]	@ zero_extendqisi2
	cmp	lr, #0
	beq	.L5082
	add	r0, r3, r3, lsl #1
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #3
	mov	r2, r1
	ldr	r1, [r1]
	ldr	r2, [r2, #48]
	ldrb	r0, [r3, #2548]	@ zero_extendqisi2
	mov	r3, lr
	ldr	lr, [sp], #4
	bx	r3
.L5082:
	ldr	pc, [sp], #4
.L5087:
	movw	r0, #:lower16:.LC391
	ldr	r1, .L5088
	movt	r0, #:upper16:.LC391
	b	printk
.L5089:
	.align	2
.L5088:
	.word	.LANCHOR2+3088
	.fnend
	.size	frmnet_cmd_complete, .-frmnet_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_show, %function
conn_gadget_in_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2516]
	cmp	r3, #0
	beq	.L5091
	ldr	r3, [r3, #92]
	cmp	r3, #0
	beq	.L5091
	movw	r1, #:lower16:.LC72
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC72
	b	sprintf
.L5091:
	movw	r0, #:lower16:.LC281
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L5100
	movt	r0, #:upper16:.LC281
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5101:
	.align	2
.L5100:
	.word	.LANCHOR2+3108
	.fnend
	.size	conn_gadget_in_max_packet_size_show, .-conn_gadget_in_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_show, %function
conn_gadget_out_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2516]
	cmp	r3, #0
	beq	.L5103
	ldr	r3, [r3, #96]
	cmp	r3, #0
	beq	.L5103
	movw	r1, #:lower16:.LC72
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC72
	b	sprintf
.L5103:
	movw	r0, #:lower16:.LC281
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L5112
	movt	r0, #:upper16:.LC281
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5113:
	.align	2
.L5112:
	.word	.LANCHOR2+3144
	.fnend
	.size	conn_gadget_out_max_packet_size_show, .-conn_gadget_out_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_show, %function
conn_gadget_usb_buffer_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2516]
	cmp	r3, #0
	beq	.L5118
	ldr	r3, [r3, #192]
	mov	r0, r2
	movw	r1, #:lower16:.LC72
	movt	r1, #:upper16:.LC72
	add	r2, r3, #1020
	cmp	r3, #0
	add	r2, r2, #3
	movlt	r3, r2
	asr	r2, r3, #10
	b	sprintf
.L5118:
	movw	r0, #:lower16:.LC281
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L5121
	movt	r0, #:upper16:.LC281
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5122:
	.align	2
.L5121:
	.word	.LANCHOR2+3184
	.fnend
	.size	conn_gadget_usb_buffer_size_show, .-conn_gadget_usb_buffer_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdUSB_show, %function
bcdUSB_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5124
	movw	r1, #:lower16:.LC80
	mov	r0, r4
	ldrh	r2, [r3, #19]	@ unaligned
	movt	r1, #:upper16:.LC80
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
.L5124:
	movw	r3, #:lower16:.LANCHOR0
	movw	r1, #:lower16:.LC80
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	ldrh	r2, [r3, #226]
	movt	r1, #:upper16:.LC80
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdUSB_show, .-bcdUSB_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_show, %function
terminal_version_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r5, #3608
	movt	r4, #:upper16:.LANCHOR1
	movw	r3, #3610
	strd	r6, [sp, #8]
	ldrh	ip, [r4, r5]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldrh	lr, [r4, r3]
	movw	r1, #:lower16:.LC392
	mov	r0, r2
	movt	r1, #:upper16:.LC392
	mov	r6, r2
	lsr	r3, ip, #8
	uxtb	r2, ip
	str	lr, [sp]
	bl	sprintf
	ldrh	r3, [r4, r5]
	mov	r7, r0
	cmp	r3, #0
	bne	.L5133
.L5127:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5133:
	movw	r0, #:lower16:.LC393
	mov	r2, r6
	ldr	r1, .L5134
	movt	r0, #:upper16:.LC393
	bl	printk
	b	.L5127
.L5135:
	.align	2
.L5134:
	.word	.LANCHOR2+3220
	.fnend
	.size	terminal_version_show, .-terminal_version_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect_w, %function
ghsic_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #16
	beq	.L5136
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L5144
.L5136:
	bx	lr
.L5144:
	movw	r0, #:lower16:.LC394
	mvn	r2, #18
	ldr	r1, .L5145
	movt	r0, #:upper16:.LC394
	b	printk
.L5146:
	.align	2
.L5145:
	.word	.LANCHOR2+3244
	.fnend
	.size	ghsic_ctrl_connect_w, .-ghsic_ctrl_connect_w
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_init, %function
gether_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC395
	push	{r4, lr}
	.save {r4, lr}
	movt	r2, #:upper16:.LC395
	mov	r4, #0
	.pad #8
	sub	sp, sp, #8
	mov	r1, #10
	movw	r0, #:lower16:.LC79
	mov	r3, r4
	str	r4, [sp]
	movt	r1, 2
	movt	r0, #:upper16:.LC79
	str	r2, [sp, #4]
	mov	r2, #1
	bl	__alloc_workqueue_key
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3356]
	movne	r0, r4
	bne	.L5147
	ldr	r2, .L5151
	movw	r0, #:lower16:.LC396
	movt	r0, #:upper16:.LC396
	mov	r1, r2
	bl	printk
	mvn	r0, #11
.L5147:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L5152:
	.align	2
.L5151:
	.word	.LANCHOR2+3268
	.fnend
	.size	gether_init, .-gether_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_send_cbits_tomodem, %function
gsmd_ctrl_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #5
	bhi	.L5154
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	ip, #:upper16:.LANCHOR1
	mla	r3, r3, r1, ip
	ldr	ip, [r3, #528]
	cmp	ip, #0
	beq	.L5154
	cmp	r0, #0
	beq	.L5169
	ands	r3, r2, #1
	moveq	r2, #2
	moveq	r1, r3
	bne	.L5170
.L5157:
	ldr	r0, [ip, #88]
	cmp	r0, r3
	beq	.L5153
	ldr	r0, [ip, #8]
	str	r3, [ip, #88]
	tst	r0, #1
	bne	.L5171
.L5153:
	bx	lr
.L5170:
	mov	r1, #2
	mov	r2, #0
	mov	r3, r1
	b	.L5157
.L5171:
	ldr	r0, [ip]
	b	smd_tiocmset
.L5154:
	movw	r0, #:lower16:.LC16
	mov	r2, r1
	ldr	r1, .L5172
	movt	r0, #:upper16:.LC16
	b	printk
.L5169:
	movw	r0, #:lower16:.LC397
	ldr	r1, .L5172
	movt	r0, #:upper16:.LC397
	b	printk
.L5173:
	.align	2
.L5172:
	.word	.LANCHOR2+3280
	.fnend
	.size	gsmd_ctrl_send_cbits_tomodem, .-gsmd_ctrl_send_cbits_tomodem
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	init, %function
init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r3, #:lower16:.LANCHOR0
	movw	lr, #:lower16:android_setup
	movt	r3, #:upper16:.LANCHOR0
	ldr	r4, .L5180
	movt	lr, #:upper16:android_setup
	movw	r0, #:lower16:android_disconnect
	movt	r0, #:upper16:android_disconnect
	movw	ip, #:lower16:android_suspend
	movw	r1, #:lower16:android_resume
	movw	r2, #:lower16:.LANCHOR1
	str	lr, [r3, #1124]
	movt	r2, #:upper16:.LANCHOR1
	movt	ip, #:upper16:android_suspend
	str	r0, [r3, #1128]
	movt	r1, #:upper16:android_resume
	mov	lr, #0
	add	r0, r3, #276
	str	r4, [r2, #2244]
	str	r4, [r2, #2248]
	str	ip, [r3, #1132]
	str	r1, [r3, #1136]
	str	lr, [r2, #3580]
	bl	platform_driver_register
	subs	r4, r0, #0
	beq	.L5174
	ldr	r2, .L5180+4
	movw	r0, #:lower16:.LC398
	movt	r0, #:upper16:.LC398
	mov	r1, r2
	bl	printk
.L5174:
	mov	r0, r4
	pop	{r4, pc}
.L5181:
	.align	2
.L5180:
	.word	.LANCHOR1+2244
	.word	.LANCHOR2+3312
	.fnend
	.size	init, .-init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_flush, %function
conn_gadget_flush:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LC399
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	movt	r0, #:upper16:.LC399
	ldr	r4, [r3, #2516]
	bl	printk
	cmp	r4, #0
	beq	.L5186
	mov	r1, #1
	add	r0, r4, #200
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #216]
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L5182:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5186:
	movw	r0, #:lower16:.LC400
	ldr	r1, .L5187
	movt	r0, #:upper16:.LC400
	bl	printk
	mvn	r0, #18
	b	.L5182
.L5188:
	.align	2
.L5187:
	.word	.LANCHOR2+3320
	.fnend
	.size	conn_gadget_flush, .-conn_gadget_flush
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_disconnect_w, %function
grmnet_ctrl_smd_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-164]
	cmp	r0, #0
	beq	.L5190
	bl	smd_close
	mov	r3, #0
	str	r3, [r4, #-164]
.L5190:
	ldr	r3, [r4, #-156]
	tst	r3, #2
	bne	.L5191
	ldr	r3, [r4, #-156]
	tst	r3, #4
	beq	.L5189
.L5191:
	sub	r1, r4, #156
	mov	r0, #2
	bl	_clear_bit
	ldr	r0, [r4, #-64]
	mov	r2, #84
	ldr	r3, .L5197
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	mla	r0, r2, r0, r3
	add	r0, r0, #4
	b	platform_driver_unregister
.L5189:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5198:
	.align	2
.L5197:
	.word	.LANCHOR1+528
	.fnend
	.size	grmnet_ctrl_smd_disconnect_w, .-grmnet_ctrl_smd_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect_w, %function
ghsuart_ctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #36]
	mov	r3, r0
	tst	r2, #1
	bne	.L5201
	bx	lr
.L5201:
	mov	r2, #0
	add	r1, r0, #36
	mov	r0, #2
	str	r2, [r3, #-36]
	b	_clear_bit
	.fnend
	.size	ghsuart_ctrl_disconnect_w, .-ghsuart_ctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect_w, %function
ghsuart_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #60]
	mov	r3, r0
	tst	r2, #1
	bne	.L5204
	bx	lr
.L5204:
	mov	r2, #0
	add	r1, r0, #60
	mov	r0, #2
	str	r2, [r3, #-100]
	b	_clear_bit
	.fnend
	.size	ghsuart_data_disconnect_w, .-ghsuart_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_free_buffers.part.45, %function
ghsic_data_free_buffers.part.45:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r5, r0, #48
	mov	r4, r0
	mov	r0, r5
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #8]
	mov	r6, r0
	cmp	r10, #0
	beq	.L5214
	ldr	r3, [r4, #24]
	add	r7, r4, #24
	cmp	r7, r3
	beq	.L5207
	mov	r9, #256
	mov	r8, #512
.L5208:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #24]
	cmp	r7, r3
	bne	.L5208
.L5207:
	ldr	r3, [r4, #32]
	add	r7, r4, #32
	cmp	r7, r3
	beq	.L5209
	mov	r8, #0
	b	.L5210
.L5227:
	ldr	r2, [r4, #40]
	sub	r2, r2, #1
	str	r2, [r4, #40]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #32]
	cmp	r3, r7
	beq	.L5209
.L5210:
	subs	r0, r3, #0
	bne	.L5227
.L5209:
	mov	r1, r6
	mov	r0, r5
	add	r5, r4, #80
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #12]
	mov	r6, r0
	cmp	r7, #0
	beq	.L5214
	ldr	r3, [r4, #56]
	add	r8, r4, #56
	cmp	r8, r3
	beq	.L5212
	mov	r10, #256
	mov	r9, #512
.L5213:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r7
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #56]
	cmp	r8, r3
	bne	.L5213
.L5212:
	ldr	r3, [r4, #64]
	add	r7, r4, #64
	cmp	r3, r7
	beq	.L5214
	mov	r8, #0
	b	.L5215
.L5228:
	ldr	r2, [r4, #72]
	sub	r2, r2, #1
	str	r2, [r4, #72]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #64]
	cmp	r3, r7
	beq	.L5214
.L5215:
	subs	r0, r3, #0
	bne	.L5228
.L5214:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsic_data_free_buffers.part.45, .-ghsic_data_free_buffers.part.45
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_remove, %function
ghsic_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r6, [r5, #1456]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L5230
	ldr	r4, [r5, #1460]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L5231
	cmp	r6, #1
	bls	.L5230
	ldr	r4, [r5, #1564]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L5231
	cmp	r6, #2
	beq	.L5230
	ldr	r4, [r5, #1668]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L5231
	cmp	r6, #3
	beq	.L5230
	ldr	r4, [r5, #1772]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L5231
.L5230:
	movw	r0, #:lower16:.LC104
	mvn	r2, #21
	ldr	r1, .L5274
	movt	r0, #:upper16:.LC104
	bl	printk
	mvn	r0, #21
.L5229:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5231:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5234
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5234
	blx	r3
.L5234:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5235
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5235
	blx	r3
.L5235:
	add	r0, r4, #120
	bl	cancel_work_sync
	cmp	r4, #0
	beq	.L5236
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.45
.L5236:
	add	r0, r4, #88
	add	r4, r4, #180
	bl	cancel_work_sync
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_clear_bit
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
	b	.L5229
.L5275:
	.align	2
.L5274:
	.word	.LANCHOR2+3340
	.fnend
	.size	ghsic_data_remove, .-ghsic_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_free_buffers.part.46, %function
ghsuart_data_free_buffers.part.46:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r5, r0, #72
	mov	r4, r0
	mov	r0, r5
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #8]
	mov	r6, r0
	cmp	r10, #0
	beq	.L5285
	ldr	r3, [r4, #48]
	add	r7, r4, #48
	cmp	r7, r3
	beq	.L5278
	mov	r9, #256
	mov	r8, #512
.L5279:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #48]
	cmp	r7, r3
	bne	.L5279
.L5278:
	ldr	r3, [r4, #56]
	add	r7, r4, #56
	cmp	r7, r3
	beq	.L5280
	mov	r8, #0
	b	.L5281
.L5298:
	ldr	r2, [r4, #64]
	sub	r2, r2, #1
	str	r2, [r4, #64]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #56]
	cmp	r3, r7
	beq	.L5280
.L5281:
	subs	r0, r3, #0
	bne	.L5298
.L5280:
	mov	r1, r6
	mov	r0, r5
	add	r5, r4, #104
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #12]
	mov	r6, r0
	cmp	r7, #0
	beq	.L5285
	ldr	r3, [r4, #80]
	add	r8, r4, #80
	cmp	r8, r3
	beq	.L5283
	mov	r10, #256
	mov	r9, #512
.L5284:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r7
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #80]
	cmp	r8, r3
	bne	.L5284
.L5283:
	ldr	r3, [r4, #88]
	add	r7, r4, #88
	cmp	r3, r7
	beq	.L5285
	mov	r8, #0
	b	.L5286
.L5299:
	ldr	r2, [r4, #96]
	sub	r2, r2, #1
	str	r2, [r4, #96]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #88]
	cmp	r3, r7
	beq	.L5285
.L5286:
	subs	r0, r3, #0
	bne	.L5299
.L5285:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsuart_data_free_buffers.part.46, .-ghsuart_data_free_buffers.part.46
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_remove, %function
ghsuart_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #4]
	ldr	r1, [r3, #2048]
	cmp	r2, r1
	bcs	.L5331
	mov	r1, #84
	mla	r2, r1, r2, r3
	ldr	r4, [r2, #2052]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5303
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5303
	blx	r3
.L5303:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5304
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5304
	blx	r3
.L5304:
	cmp	r4, #0
	beq	.L5305
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.46
.L5305:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L5332
.L5307:
	movw	r0, #:lower16:.LC401
	ldr	r2, [r4, #180]
	add	r4, r4, #188
	ldr	r1, .L5333
	movt	r0, #:upper16:.LC401
	bl	printk
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r4
	mov	r0, #0
	bl	_clear_bit
	mov	r0, #2
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
.L5300:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5332:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #24]
	mov	r1, r0
	str	r5, [r4, #200]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L5307
	ldr	r3, [r6, #120]
	cmp	r3, #0
	beq	.L5307
	mov	r0, r6
	blx	r3
	b	.L5307
.L5331:
	movw	r0, #:lower16:.LC104
	ldr	r1, .L5333
	movt	r0, #:upper16:.LC104
	bl	printk
	mvn	r0, #21
	b	.L5300
.L5334:
	.align	2
.L5333:
	.word	.LANCHOR2+3360
	.fnend
	.size	ghsuart_data_remove, .-ghsuart_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tomdm, %function
ghsuart_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #144
	bxeq	lr
	ldr	r3, [r0, #-140]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #40
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #40]
	mov	r7, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	movne	r1, r0
	bne	.L5372
	mov	r2, r5
	ldr	r4, [r2, #-56]!
	cmp	r4, r2
	beq	.L5338
	cmp	r4, #0
	beq	.L5338
	ldr	r2, [r5, #-48]
	ldr	r1, .L5378
	ldr	r0, .L5378+4
	sub	r2, r2, #1
	str	r2, [r5, #-48]
	ldr	ip, [r4]
	ldr	r2, [r4, #4]
	str	r3, [r4]
	str	r3, [r4, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L5373
.L5340:
	ldr	r3, [r5, #68]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	dev_kfree_skb_any
.L5338:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r5, #-132]
	mov	r8, r0
	cmp	r7, #0
	beq	.L5343
	ldr	r3, [r5, #40]
	tst	r3, #2
	bne	.L5343
	sub	r3, r5, #64
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
	b	.L5342
.L5375:
	ldr	r4, [r5, #-64]
	ldr	r0, [sp, #4]
	sub	r10, r4, #36
	cmp	r4, r0
	beq	.L5343
	ldr	r0, [r9, #1224]
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	lr, #256
	mov	ip, #512
	mov	r1, r8
	mov	r0, r6
	beq	.L5343
	ldr	r8, [r4]
	ldr	r2, [r4, #4]
	str	r2, [r8, #4]
	str	r8, [r2]
	str	lr, [r4]
	str	ip, [r4, #4]
	ldr	r2, [fp, #172]
	str	r2, [r4, #-36]
	ldr	r2, [r9, #1224]
	str	r2, [r4, #-32]
	str	fp, [r4, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r7, #8]
	mov	r2, #208
	mov	r1, r10
	mov	r0, r7
	ldr	r8, [ip, #16]
	blx	r8
	mov	r2, r0
	mov	r0, r6
	str	r2, [sp]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp]
	mov	r8, r0
	cmp	r2, #0
	bne	.L5374
.L5342:
	ldr	r0, [r5, #-140]
	mov	r2, #0
	mvn	r3, #0
	mov	r1, #32
	cmp	r0, r2
	bne	.L5375
.L5343:
	mov	r1, r8
.L5372:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L5374:
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r1, .L5378+8
	ldr	r0, .L5378+12
	bl	___ratelimit
	cmp	r0, #0
	bne	.L5376
.L5344:
	ldr	r3, [r5, #-140]
	cmp	r3, #0
	bne	.L5377
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L5343
.L5377:
	ldr	r3, [r5, #-64]
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #4]
	str	r3, [r4, #4]
	str	r4, [r5, #-64]
	b	.L5343
.L5376:
	movw	r0, #:lower16:.LC402
	ldr	r1, .L5378+8
	movt	r0, #:upper16:.LC402
	bl	printk
	b	.L5344
.L5373:
	movw	r0, #:lower16:.LC97
	mvn	r2, #18
	ldr	r1, .L5378
	movt	r0, #:upper16:.LC97
	bl	printk
	b	.L5340
.L5379:
	.align	2
.L5378:
	.word	.LANCHOR2+3380
	.word	.LANCHOR0+1200
	.word	.LANCHOR2+3408
	.word	.LANCHOR0+1228
	.fnend
	.size	ghsuart_data_write_tomdm, .-ghsuart_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tohost, %function
ghsuart_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #160
	bxeq	lr
	ldr	r3, [r0, #-156]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #88
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-152]
	mov	r3, r0
	cmp	r9, #0
	beq	.L5383
	ldr	r2, [r4, #-112]
	sub	r1, r4, #112
	str	r1, [sp]
	cmp	r2, r1
	beq	.L5383
	ldr	r6, [r4, #-104]
	sub	r2, r4, #104
	str	r2, [sp, #4]
	cmp	r2, r6
	beq	.L5383
	movw	fp, #:lower16:.LANCHOR0
	mov	r7, #0
	movt	fp, #:upper16:.LANCHOR0
	mov	r1, r0
	b	.L5384
.L5404:
	ldr	r3, [r4, #-96]
	mov	lr, #512
	mov	r0, r8
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldrd	r2, [r6]
	str	r7, [r6]
	str	r7, [r6, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r5, [r4, #-112]
	str	r6, [r5, #-4]
	ldr	r3, [r6, #172]
	sub	r10, r5, #36
	str	r3, [r5, #-36]
	ldr	r3, [r6, #80]
	str	r3, [r5, #-32]
	ldr	ip, [r4, #32]
	ldr	r3, [fp, #1252]
	add	ip, ip, #1
	cmp	ip, r3
	str	ip, [r4, #32]
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfieq	r3, r7, #0, #1
	orrne	r3, r3, #1
	strbeq	r3, [r5, #-10]
	strbne	r3, [r5, #-10]
	streq	r7, [r4, #32]
	ldr	ip, [r5]
	ldr	r3, [r5, #4]
	str	r3, [ip, #4]
	str	ip, [r3]
	mov	r3, #256
	str	r3, [r5]
	str	lr, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r2, #208
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r1, r0
	bne	.L5403
	ldr	r2, [r4, #-112]
	ldr	r3, [r4, #48]
	ldr	r0, [sp]
	add	r3, r3, #1
	cmp	r0, r2
	str	r3, [r4, #48]
	beq	.L5399
	ldr	r6, [r4, #-104]
	ldr	r3, [sp, #4]
	cmp	r6, r3
	beq	.L5399
.L5384:
	cmp	r6, #0
	bne	.L5404
.L5399:
	mov	r3, r1
.L5383:
	mov	r1, r3
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L5403:
	mov	r3, r0
	movw	r0, #:lower16:.LC403
	ldr	r1, .L5405
	movt	r0, #:upper16:.LC403
	str	r3, [sp, #4]
	bl	printk
	ldr	r3, [sp]
	mov	r0, r6
	ldr	r2, [r4, #-112]
	str	r5, [r2, #4]
	strd	r2, [r5]
	str	r5, [r4, #-112]
	bl	dev_kfree_skb_any
	ldr	r3, [sp, #4]
	b	.L5383
.L5406:
	.align	2
.L5405:
	.word	.LANCHOR2+3432
	.fnend
	.size	ghsuart_data_write_tohost, .-ghsuart_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_close_sdio_work, %function
rmnet_close_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-112]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #-208]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5410
	blx	r3
.L5410:
	sub	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-204]
	mov	r2, #0
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	ldr	r3, [r3]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	ip, [r4, #-200]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #-208]
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L5453
.L5411:
	ldr	r0, [r4, #-216]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5413
	blx	r3
.L5413:
	ldr	r0, [r4, #-212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5414
	blx	r3
.L5414:
	sub	r0, r4, #68
	bl	cancel_work_sync
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-112]
	mov	r6, r0
	cmp	r3, #0
	subne	fp, r4, #172
	movne	r10, #256
	movne	r9, #512
	movne	r8, #0
	bne	.L5415
.L5425:
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L5453:
	ldr	r3, [r4, #-112]
	cmp	r3, #0
	bne	.L5454
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5416:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #-164]
	sub	r3, r3, #1
	str	r3, [r4, #-164]
	str	r8, [r7, #-36]!
	ldr	r3, [r4, #-216]
	str	r3, [sp, #4]
	bl	kfree
	ldr	r3, [sp, #4]
	mov	r1, r7
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #12]
	blx	r3
.L5415:
	ldr	r3, [r4, #-172]
	mov	r0, #0
	cmp	r3, fp
	mov	r7, r3
	bne	.L5416
	sub	fp, r4, #144
	mov	r10, #256
	mov	r9, #512
	mov	r8, r0
	b	.L5417
.L5418:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #-136]
	sub	r3, r3, #1
	str	r3, [r4, #-136]
	str	r8, [r7, #-36]!
	ldr	r3, [r4, #-212]
	str	r3, [sp, #4]
	bl	kfree
	ldr	r3, [sp, #4]
	mov	r1, r7
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #12]
	blx	r3
.L5417:
	ldr	r3, [r4, #-144]
	mov	r0, #0
	cmp	r3, fp
	mov	r7, r3
	bne	.L5418
	sub	r10, r4, #196
	mov	r9, #256
	mov	r8, #512
	b	.L5419
.L5420:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r4, #-188]
	sub	r3, r3, #1
	str	r3, [r4, #-188]
	ldr	r0, [r7, #-8]!
	bl	kfree
	mov	r0, r7
	bl	kfree
.L5419:
	ldr	r3, [r4, #-196]
	cmp	r3, r10
	mov	r7, r3
	bne	.L5420
	sub	r10, r4, #184
	mov	r9, #256
	mov	r8, #512
	b	.L5421
.L5422:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r4, #-176]
	sub	r3, r3, #1
	str	r3, [r4, #-176]
	ldr	r0, [r7, #-8]!
	bl	kfree
	mov	r0, r7
	bl	kfree
.L5421:
	ldr	r3, [r4, #-184]
	cmp	r3, r10
	mov	r7, r3
	bne	.L5422
	mov	r7, #0
	movw	r0, #:lower16:.LC404
	ldr	r1, .L5456
	movt	r0, #:upper16:.LC404
	sub	r8, r4, #160
	str	r7, [r4, #-108]
	bl	printk
	ldr	r3, [r4, #-160]
	cmp	r8, r3
	bne	.L5424
	b	.L5423
.L5455:
	ldr	r2, [r4, #-152]
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-160]
	cmp	r3, r8
	beq	.L5423
.L5424:
	subs	r0, r3, #0
	bne	.L5455
.L5423:
	ldr	r3, [r4, #-132]
	sub	r8, r4, #132
	cmp	r3, r8
	beq	.L5425
	mov	r7, #0
.L5426:
	subs	r0, r3, #0
	beq	.L5425
	ldr	r2, [r4, #-124]
	sub	r2, r2, #1
	str	r2, [r4, #-124]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-132]
	cmp	r3, r8
	bne	.L5426
	b	.L5425
.L5454:
	movw	r0, #:lower16:.LC390
	ldr	r1, .L5456
	movt	r0, #:upper16:.LC390
	bl	printk
	b	.L5411
.L5457:
	.align	2
.L5456:
	.word	.LANCHOR2+3460
	.fnend
	.size	rmnet_close_sdio_work, .-rmnet_close_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect_work, %function
gsmd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r5, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r5, #8]
	tst	r3, #2
	bne	.L5467
.L5458:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5467:
	movw	ip, #:lower16:gsmd_notify
	sub	r3, r0, #76
	movt	ip, #:upper16:gsmd_notify
	mov	r4, r0
	ldr	r0, [r5, #4]
	mov	r2, r5
	mov	r1, #0
	str	ip, [sp]
	bl	smd_named_open_on_edge
	subs	r3, r0, #0
	beq	.L5458
	cmn	r3, #11
	bne	.L5462
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3344]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	mov	r0, #4
	mov	r1, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_delayed_work_on
.L5462:
	ldr	r1, .L5468
	movw	r0, #:lower16:.LC177
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC177
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L5469:
	.align	2
.L5468:
	.word	.LANCHOR2+3484
	.fnend
	.size	gsmd_connect_work, .-gsmd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect_work, %function
gbam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-280]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-276]
	bl	msm_bam_dmux_close
	ldr	lr, [sp, #4]
	sub	r1, r4, #280
	mov	r0, #1
	ldr	r4, [sp]
	add	sp, sp, #8
	b	_clear_bit
	.fnend
	.size	gbam_disconnect_work, .-gbam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_disconnect_work, %function
gbam2bam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-168]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #164
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L5486
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5486:
	movw	r0, #:lower16:.LC405
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC405
	add	sp, sp, #8
	ldr	r1, .L5487
	b	printk
.L5488:
	.align	2
.L5487:
	.word	.LANCHOR2+3504
	.fnend
	.size	gbam2bam_disconnect_work, .-gbam2bam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_disconnect_work, %function
bam2bam_data_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-124]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #120
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L5500
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5500:
	movw	r0, #:lower16:.LC405
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC405
	add	sp, sp, #8
	ldr	r1, .L5501
	b	printk
.L5502:
	.align	2
.L5501:
	.word	.LANCHOR2+3532
	.fnend
	.size	bam2bam_data_disconnect_work, .-bam2bam_data_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_init, %function
ncm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, [r5, #24]
	str	lr, [sp, #12]
	cmp	r0, #0
	beq	.L5508
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L5509
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L5504
	mov	r2, #6
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6, #4]
	beq	.L5514
.L5507:
	mov	ip, #65024
	movw	r1, #:lower16:ncm_work
	ldr	r0, .L5516
	mov	r3, r4
	movt	ip, 65535
	movt	r1, #:upper16:ncm_work
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	str	ip, [r3], #4
	str	r3, [r4, #4]
	str	r3, [r4, #8]
	str	r1, [r4, #12]
	str	r4, [r2, #3556]
	bl	misc_register
	cmp	r0, #0
	bne	.L5515
.L5503:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5508:
	mov	r4, #16
.L5504:
	mov	r3, #16
	str	r3, [r6, #4]
	b	.L5507
.L5514:
	mov	r0, r4
	bl	kfree
	mvn	r0, #11
	b	.L5503
.L5509:
	mvn	r0, #11
	b	.L5503
.L5515:
	movw	r0, #:lower16:.LC406
	ldr	r1, .L5516+4
	movt	r0, #:upper16:.LC406
	bl	printk
	mov	r0, #0
	b	.L5503
.L5517:
	.align	2
.L5516:
	.word	.LANCHOR0+772
	.word	.LANCHOR2+3564
	.fnend
	.size	ncm_function_init, .-ncm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	show_timestamp, %function
show_timestamp:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #3612]
	.pad #28
	sub	sp, sp, #28
	cmp	r0, #0
	moveq	r4, r0
	beq	.L5518
	mov	fp, r3
	movw	r3, #:lower16:kmalloc_caches
	str	r1, [sp, #16]
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [sp, #20]
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L5527
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L5531
.L5520:
	ldr	r7, .L5532
	add	r0, r7, #4
	bl	_raw_read_lock_irqsave
	ldr	r3, [r7]
	str	r0, [sp, #12]
	add	r4, r3, #1
	and	r4, r4, #31
	cmp	r3, r4
	moveq	r5, #0
	beq	.L5522
	movw	r8, #:lower16:.LC77
	mov	r5, #0
	movt	r8, #:upper16:.LC77
	sub	r9, r7, #4096
.L5521:
	add	r10, r9, r4, lsl #7
	mov	r1, #128
	mov	r0, r10
	bl	strnlen
	cmp	r0, #0
	rsb	r1, r5, #4096
	mov	r3, r10
	mov	r2, r8
	add	ip, r4, #1
	add	r0, r6, r5
	beq	.L5523
	bl	scnprintf
	ldr	r3, [r7]
	add	r4, r4, #1
	add	r5, r5, r0
	and	r4, r4, #31
	cmp	r3, r4
	bne	.L5521
.L5522:
	ldr	r0, .L5532+4
	ldr	r1, [sp, #12]
	bl	_raw_read_unlock_irqrestore
	ldrd	r0, [sp, #16]
	mov	r2, fp
	mov	r3, r6
	str	r5, [sp]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L5518:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5523:
	ldr	r3, [r7]
	and	r4, ip, #31
	cmp	r4, r3
	bne	.L5521
	b	.L5522
.L5527:
	mov	r6, #16
	b	.L5520
.L5531:
	mvn	r4, #11
	b	.L5518
.L5533:
	.align	2
.L5532:
	.word	dbg_data+4096
	.word	dbg_data+4100
	.fnend
	.size	show_timestamp, .-show_timestamp
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect_w, %function
ghsic_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #88
	mov	r3, r0
	beq	.L5534
	ldr	r2, [r0, #-84]
	cmp	r2, #0
	beq	.L5534
	ldr	r2, [r0, #92]
	tst	r2, #2
	bne	.L5545
.L5534:
	bx	lr
.L5545:
	movw	r0, #:lower16:.LC407
	ldr	r2, [r3, #68]
	mvn	r3, #18
	movt	r0, #:upper16:.LC407
	ldr	r1, .L5546
	b	printk
.L5547:
	.align	2
.L5546:
	.word	.LANCHOR2+3584
	.fnend
	.size	ghsic_data_connect_w, .-ghsic_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect_w, %function
ghsuart_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #36
	bxeq	lr
	ldr	r3, [r0, #52]
	tst	r3, #2
	bxeq	lr
	ldr	r3, [r0, #52]
	tst	r3, #1
	beq	.L5561
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #20
	movw	r1, #750
	str	lr, [sp, #4]
	bl	wait_for_completion_timeout
	cmp	r0, #0
	beq	.L5564
	movw	r0, #:lower16:.LC409
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC409
	add	sp, sp, #8
	ldr	r1, .L5565
	b	printk
.L5564:
	movw	r0, #:lower16:.LC408
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC408
	add	sp, sp, #8
	ldr	r1, .L5565
	b	printk
.L5561:
	movw	r0, #:lower16:.LC409
	ldr	r1, .L5565
	movt	r0, #:upper16:.LC409
	b	printk
.L5566:
	.align	2
.L5565:
	.word	.LANCHOR2+3608
	.fnend
	.size	ghsuart_ctrl_connect_w, .-ghsuart_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect_w, %function
ghsuart_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #112
	bxeq	lr
	ldr	r3, [r0, #-108]
	cmp	r3, #0
	bxeq	lr
	ldr	r3, [r0, #76]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #76]
	tst	r3, #1
	beq	.L5569
	movw	r1, #750
	sub	r0, r0, #84
	bl	wait_for_completion_timeout
	cmp	r0, #0
	beq	.L5585
.L5569:
	movw	r0, #:lower16:.LC410
	ldr	r2, [r4, #68]
	mvn	r3, #18
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC410
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r1, .L5586
	b	printk
.L5585:
	movw	r0, #:lower16:.LC408
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC408
	add	sp, sp, #8
	ldr	r1, .L5586
	b	printk
.L5587:
	.align	2
.L5586:
	.word	.LANCHOR2+3632
	.fnend
	.size	ghsuart_data_connect_w, .-ghsuart_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	str_to_xport, %function
str_to_xport:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC411
	mov	r1, r4
	movt	r0, #:upper16:.LC411
	str	lr, [sp, #4]
	mov	r2, #12
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #1
	beq	.L5588
	movw	r0, #:lower16:.LC412
	mov	r2, #12
	movt	r0, #:upper16:.LC412
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #2
	beq	.L5588
	movw	r0, #:lower16:.LC413
	mov	r2, #12
	movt	r0, #:upper16:.LC413
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #3
	beq	.L5588
	movw	r0, #:lower16:.LC414
	mov	r2, #12
	movt	r0, #:upper16:.LC414
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #4
	beq	.L5588
	movw	r0, #:lower16:.LC415
	mov	r2, #12
	movt	r0, #:upper16:.LC415
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #5
	beq	.L5588
	movw	r0, #:lower16:.LC416
	mov	r2, #12
	movt	r0, #:upper16:.LC416
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #6
	beq	.L5588
	movw	r0, #:lower16:.LC417
	mov	r2, #12
	movt	r0, #:upper16:.LC417
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #7
	beq	.L5588
	movw	r0, #:lower16:.LC418
	mov	r2, #12
	movt	r0, #:upper16:.LC418
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #8
	beq	.L5588
	movw	r0, #:lower16:.LC419
	mov	r2, #12
	movt	r0, #:upper16:.LC419
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #9
	beq	.L5588
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	moveq	r0, #10
	movne	r0, #0
.L5588:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	str_to_xport, .-str_to_xport
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_event_add.part.66, %function
__ffs_event_add.part.66:
	.fnstart
	@ Volatile: function does not return.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	.syntax divided
@ 2155 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 2155, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	__ffs_event_add.part.66, .-__ffs_event_add.part.66
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_setup, %function
ffs_func_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #-28]
	ldr	r3, [r5, #96]
	cmp	r3, #2
	bne	.L5613
	ldrb	r3, [r1]	@ zero_extendqisi2
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L5604
	cmp	r3, #2
	beq	.L5605
	mvn	r4, #94
.L5602:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5605:
	ldrh	r3, [r1, #4]	@ unaligned
	and	r3, r3, #15
	add	r0, r0, r3
	ldrb	r4, [r0, #-20]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L5616
.L5607:
	add	r6, r5, #120
	mov	r8, r1
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r5, #100]
	mov	r7, r0
	ldr	r2, [r8]	@ unaligned
	ldr	r3, [r8, #4]	@ unaligned
	ldrh	r0, [r5, #108]
	cmp	r1, #1
	strd	r2, [r5, #112]
	moveq	r3, #2
	add	r2, r5, #104
	strh	r4, [r5, #116]	@ movhi
	mov	ip, r2
	streq	r3, [r5, #100]
	cmp	r0, #0
	beq	.L5617
	add	r0, r0, r2
	mov	r3, r2
.L5612:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	cmp	r1, #4
	strbne	r1, [r2]
	addne	r2, r2, #1
	cmp	r0, r3
	bne	.L5612
	sub	r2, r2, ip
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L5610:
	add	r0, r5, r0
	strh	r3, [r5, #108]	@ movhi
	mov	ip, #4
	mov	r2, #1
	mov	r1, #3
	mov	r4, #0
	strb	ip, [r0, #104]
	mov	r0, r6
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L5602
.L5604:
	ldrh	ip, [r5, #182]
	ldrh	lr, [r1, #4]	@ unaligned
	ldr	r4, [r0, #-4]
	cmp	ip, #0
	uxtb	lr, lr
	beq	.L5616
	mov	r2, r4
.L5608:
	mov	r3, r2
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L5606
	cmp	r0, lr
	beq	.L5625
.L5606:
	subs	ip, ip, #1
	mov	r2, r3
	bne	.L5608
.L5616:
	mvn	r4, #32
	b	.L5602
.L5625:
	sub	r2, r2, r4
	cmp	r2, #0
	asr	r4, r2, #1
	bge	.L5607
	b	.L5602
.L5617:
	mov	r3, #1
	b	.L5610
.L5613:
	mvn	r4, #18
	b	.L5602
	.fnend
	.size	ffs_func_setup, .-ffs_func_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_read, %function
ffs_epfile_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r4, r2, #1
	strd	r6, [sp, #8]
	mvn	r4, r4, lsr #10
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mvn	r4, r4, lsl #10
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r3, r4, #1
	str	r3, [sp, #4]
	ldr	r6, [fp, #36]
	ldr	r7, [fp, #40]
	cmp	r6, #0
	bne	.L5650
	str	r2, [sp, #8]
	ldr	r2, [r7, #96]
	mov	r8, r0
	str	r1, [sp, #12]
	cmp	r2, #2
	bne	.L5628
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L5629:
	ldr	r5, [fp, #44]
	cmp	r5, #0
	beq	.L5666
.L5648:
	ldrb	r4, [fp, #57]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L5634
	ldrb	r2, [fp, #58]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L5667
.L5635:
	ldr	r2, [r8, #32]
	mov	r0, fp
	tst	r2, #2048
	bne	.L5668
	bl	mutex_lock_interruptible
	subs	r10, r0, #0
	bne	.L5630
.L5639:
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bl	_raw_spin_lock_irq
	ldr	r2, [fp, #44]
	cmp	r2, r5
	bne	.L5669
	cmp	r4, #0
	bne	.L5670
	ldr	r8, [r5, #4]
	movw	r0, #:lower16:ffs_epfile_io_complete
	mov	r2, #32
	ldr	r3, [sp, #4]
	movt	r0, #:upper16:ffs_epfile_io_complete
	str	r6, [r8]
	mov	r1, r8
	str	r3, [r8, #4]
	str	r0, [r8, #28]
	str	r4, [r7, #72]!
	str	r7, [r8, #32]
	ldr	r0, [r5]
	ldr	ip, [r0, #8]
	ldr	r4, [ip, #16]
	blx	r4
	mov	r4, r0
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	cmp	r4, #0
	blt	.L5657
	mov	r0, r7
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bne	.L5671
	bl	_raw_spin_lock_irq
	ldr	r0, [fp, #40]
	ldr	r2, [fp, #44]
	cmp	r5, r2
	beq	.L5645
	add	r0, r0, #28
	mvn	r10, #18
	bl	_raw_spin_unlock_irq
.L5642:
	mov	r0, fp
	bl	mutex_unlock
.L5630:
	mov	r0, r6
	bl	kfree
.L5626:
	mov	r0, r10
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5668:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L5639
.L5656:
	mvn	r10, #10
	b	.L5630
.L5634:
	cmp	r6, #0
	bne	.L5635
	movw	r1, #32976
	ldr	r0, [sp, #4]
	bl	__kmalloc
	subs	r6, r0, #0
	bne	.L5635
	mvn	r10, #11
	b	.L5626
.L5666:
	ldr	r2, [r8, #32]
	tst	r2, #2048
	bne	.L5656
	ldr	r2, [fp, #36]
	cmp	r2, #0
	bne	.L5653
	ldr	ip, [r9, #12]
	movw	r1, #:lower16:autoremove_wake_function
	add	r0, sp, #32
	movt	r1, #:upper16:autoremove_wake_function
	add	r10, fp, #24
	str	r2, [sp, #20]
	str	r0, [sp, #32]
	str	ip, [sp, #24]
	str	r1, [sp, #28]
	str	r0, [sp, #36]
	b	.L5633
.L5672:
	bl	schedule
.L5633:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r5, [fp, #44]
	cmp	r5, #0
	bne	.L5631
	ldr	r2, [r9, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L5672
	mov	r0, r10
	add	r1, sp, #20
	mov	r10, #65024
	bl	finish_wait
	movt	r10, 65535
	b	.L5630
.L5631:
	add	r1, sp, #20
	mov	r0, r10
	bl	finish_wait
	b	.L5648
.L5645:
	ldr	r10, [r5, #24]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	cmp	r10, #0
	ble	.L5642
	ldr	r3, [sp, #8]
	cmp	r3, r10
	mvncc	r10, #74
	bcc	.L5642
	mov	r3, sp
	bic	r2, r3, #8128
	ldr	r3, [sp, #12]
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r10; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L5673
.L5646:
	mvn	r10, #13
	b	.L5642
.L5669:
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	mutex_unlock
	ldr	r2, [fp, #40]
	ldr	r2, [r2, #96]
	cmp	r2, #2
	beq	.L5629
.L5628:
	movw	r0, #:lower16:.LC9
	movw	r1, #785
	movt	r0, #:upper16:.LC9
	mvn	r10, #18
	bl	warn_slowpath_null
	b	.L5630
.L5657:
	mvn	r10, #4
	b	.L5642
.L5670:
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L5674
	ldr	r2, [r0, #8]
	mov	r1, #1
	ldr	r2, [r2, #24]
	blx	r2
.L5649:
	ldr	r0, [fp, #40]
	mvn	r10, #73
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	b	.L5642
.L5671:
	bl	_raw_spin_lock_irq
	ldr	r2, [fp, #44]
	cmp	r5, r2
	bne	.L5644
	ldr	r0, [r5]
	mov	r1, r8
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
.L5644:
	ldr	r0, [fp, #40]
	mvn	r10, #3
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	b	.L5642
.L5653:
	mvn	r10, #18
	b	.L5630
.L5673:
	mov	r0, r3
	mov	r2, r10
	mov	r1, r6
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L5642
	b	.L5646
.L5650:
	mvn	r10, #18
	b	.L5626
.L5667:
	mvn	r10, #21
	b	.L5630
.L5674:
	movw	r0, #:lower16:.LC9
	mov	r1, #860
	movt	r0, #:upper16:.LC9
	bl	warn_slowpath_null
	b	.L5649
	.fnend
	.size	ffs_epfile_read, .-ffs_epfile_read
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write.part.79, %function
gsdio_write.part.79:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	add	r5, r0, #4
	mov	r4, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC420
	ldr	r2, [r4]
	mvn	r3, #18
	movt	r0, #:upper16:.LC420
	ldr	r1, .L5677
	pop	{r4, r5, r6, lr}
	b	printk
.L5678:
	.align	2
.L5677:
	.word	.LANCHOR2+3656
	.fnend
	.size	gsdio_write.part.79, .-gsdio_write.part.79
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_notify, %function
gbam_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L5681
	cmp	r1, #1
	bne	.L5679
	cmp	r2, #0
	bne	.L5696
.L5679:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5681:
	cmp	r2, #0
	beq	.L5679
	add	r6, r0, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L5685
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1256]
	cmp	r2, r3
	bls	.L5684
	ldr	r3, [r4, #244]
	ldr	r0, .L5697
	add	r3, r3, #1
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	beq	.L5685
	movw	r0, #:lower16:.LC421
	ldr	r1, .L5697
	movt	r0, #:upper16:.LC421
	ldr	r2, [r4, #244]
	bl	printk
.L5685:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any
.L5696:
	mov	r0, r2
	add	r5, r4, #4
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #240]
	mov	r1, r0
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #240]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #80
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, [r3, #3480]
	b	queue_work_on
.L5684:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5]
	str	r5, [r3]
	ldr	r3, [r4, #44]
	str	r5, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost
.L5698:
	.align	2
.L5697:
	.word	.LANCHOR2+3668
	.fnend
	.size	gbam_notify, .-gbam_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_resume, %function
frmnet_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldrb	r0, [r0, #116]	@ zero_extendqisi2
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	lsl	lr, r0, #1
	add	r3, lr, r0
	add	r3, ip, r3, lsl #3
	ldr	r3, [r3, #2536]
	sub	r1, r3, #1
	cmp	r1, #9
	bhi	.L5700
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #836]
.L5701:
	mov	r1, #1
	lsl	r1, r1, r3
	tst	r1, #1824
	bne	.L5699
	tst	r1, #192
	beq	.L5702
	sub	r3, r3, #6
	cmp	r3, #1
	bls	.L5709
.L5699:
	ldr	pc, [sp], #4
.L5700:
	cmp	r3, #10
	movw	r2, #:lower16:.LC109
	movt	r2, #:upper16:.LC109
	bls	.L5701
.L5702:
	movw	r0, #:lower16:.LC422
	ldr	r1, .L5710
	movt	r0, #:upper16:.LC422
	ldr	lr, [sp], #4
	b	printk
.L5709:
	add	lr, lr, r0
	ldr	r1, [ip, #3480]
	mov	r0, #4
	add	lr, ip, lr, lsl #3
	ldrb	r3, [lr, #2544]	@ zero_extendqisi2
	ldr	lr, [sp], #4
	add	ip, ip, r3, lsl #2
	ldr	r2, [ip, #3616]
	add	r2, r2, #332
	b	queue_work_on
.L5711:
	.align	2
.L5710:
	.word	.LANCHOR2+3688
	.fnend
	.size	frmnet_resume, .-frmnet_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_header, %function
rndis_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r4, [r0, #124]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L5713
	ldr	r4, [r0, #144]
	cmp	r4, #0
	beq	.L5714
	mov	r1, #44
	mov	r0, r4
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	mov	r6, r5
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	add	r2, r2, #44
	str	r2, [r4, #4]	@ unaligned
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	str	r3, [r4, #12]	@ unaligned
.L5712:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5713:
	mov	r1, #44
	mov	r0, r5
	bl	skb_realloc_headroom
	subs	r6, r0, #0
	beq	.L5716
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r7, r0
	bl	__memzero
	mov	r3, #1
	mov	r2, #36
	strb	r3, [r7]
	strb	r4, [r7, #1]
	strb	r4, [r7, #2]
	strb	r4, [r7, #3]
	ldr	r3, [r6, #80]
	str	r3, [r7, #4]	@ unaligned
	strb	r2, [r7, #8]
	strb	r4, [r7, #9]
	strb	r4, [r7, #10]
	strb	r4, [r7, #11]
	ldr	r3, [r6, #80]
	sub	r3, r3, #44
	str	r3, [r7, #12]	@ unaligned
.L5716:
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L5712
.L5714:
	movw	r0, #:lower16:.LC423
	mov	r6, r4
	movt	r0, #:upper16:.LC423
	bl	printk
	b	.L5712
	.fnend
	.size	rndis_add_header, .-rndis_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup.part.103, %function
bam_data_setup.part.103:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r2, #:lower16:kmalloc_caches
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movt	r2, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	ldr	r3, [r4, #3628]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r4, #3628]
	beq	.L5726
	mov	r2, #232
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L5728
.L5722:
	movw	r0, #:lower16:bam2bam_data_connect_work
	movw	lr, #:lower16:bam2bam_data_disconnect_work
	str	r2, [r2, #16]
	add	r5, r2, #172
	movt	r0, #:upper16:bam2bam_data_connect_work
	movt	lr, #:upper16:bam2bam_data_disconnect_work
	mov	r3, #65024
	movw	ip, #:lower16:bam2bam_data_suspend_work
	movw	r1, #:lower16:bam2bam_data_resume_work
	str	r5, [r2, #172]
	movt	r3, 65535
	add	r6, r2, #188
	movt	ip, #:upper16:bam2bam_data_suspend_work
	movt	r1, #:upper16:bam2bam_data_resume_work
	str	r3, [r2, #168]
	str	r5, [r2, #176]
	add	r5, r2, #204
	str	r0, [r2, #180]
	mov	r0, #0
	str	lr, [r2, #196]
	add	lr, r2, #220
	str	r0, [r2]
	str	r3, [r2, #184]
	str	r6, [r2, #188]
	str	r6, [r2, #192]
	str	r3, [r2, #200]
	str	r5, [r2, #204]
	str	r5, [r2, #208]
	str	ip, [r2, #212]
	str	r3, [r2, #216]
	str	lr, [r2, #220]
	str	lr, [r2, #224]
	str	r1, [r2, #228]
	str	r2, [r4, #3348]
.L5721:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5726:
	mov	r2, #16
	b	.L5722
.L5728:
	ldr	r3, [r4, #3628]
	movw	r0, #:lower16:.LC424
	mov	r5, r2
	movt	r0, #:upper16:.LC424
	ldr	r1, .L5729
	mov	r7, r2
	ldr	r6, .L5729+4
	sub	r3, r3, #1
	str	r3, [r4, #3628]
	bl	printk
.L5723:
	ldr	r3, [r4, #3628]
	cmp	r5, r3
	blt	.L5725
	ldr	r0, [r4, #3352]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L5721
.L5725:
	ldr	r0, [r6, r5, lsl #2]
	bl	kfree
	str	r7, [r6, r5, lsl #2]
	add	r5, r5, #1
	b	.L5723
.L5730:
	.align	2
.L5729:
	.word	.LANCHOR2+3704
	.word	.LANCHOR1+3348
	.fnend
	.size	bam_data_setup.part.103, .-bam_data_setup.part.103
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind_config, %function
android_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r1, .L5751
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r3, #2244]
	ldr	r0, [r0, #24]
	cmp	r3, r1
	beq	.L5732
	sub	r2, r3, #424
	ldr	r3, [r3, #-416]
	cmp	r0, r3
	bne	.L5733
	b	.L5732
.L5734:
	ldr	r3, [r3, #-416]
	cmp	r0, r3
	beq	.L5732
.L5733:
	ldr	r3, [r2, #424]
	cmp	r3, r1
	sub	r2, r3, #424
	bne	.L5734
.L5732:
	mov	r5, r6
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L5735
.L5741:
	ldr	r0, [r4]
	mov	r1, r6
	ldr	r3, [r0, #40]
	blx	r3
	subs	r7, r0, #0
	bne	.L5749
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L5741
.L5735:
	mov	r7, #0
.L5731:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5749:
	ldr	r2, .L5751+4
	movw	r0, #:lower16:.LC425
	add	r5, r6, #36
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC425
	mov	r8, #512
	mov	r4, #256
	mov	r1, r2
	ldr	r3, [r3]
	bl	printk
	b	.L5738
.L5739:
	ldrd	r2, [r1]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r3, [r1, #-36]
	stm	r1, {r4, r8}
	cmp	r3, #0
	bne	.L5750
.L5738:
	ldr	r1, [r6, #36]
	cmp	r1, r5
	bne	.L5739
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L5731
	mov	r0, r6
	blx	r3
	b	.L5731
.L5750:
	sub	r1, r1, #72
	mov	r0, r6
	blx	r3
	b	.L5738
.L5752:
	.align	2
.L5751:
	.word	.LANCHOR1+2244
	.word	.LANCHOR2+3720
	.fnend
	.size	android_bind_config, .-android_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_store, %function
conn_gadget_in_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_in_max_packet_size_store, .-conn_gadget_in_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.115, %function
_snd_pcm_hw_param_set.constprop.115:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L5778
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5757
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5756
.L5757:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #4]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #4]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L5764
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5760
.L5764:
	mov	r0, r5
	b	.L5759
.L5778:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5756
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5757
.L5756:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #4]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #4]
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L5779
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L5754
.L5760:
	mvn	r0, #21
.L5759:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1
	orr	r3, r3, #1
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5754:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5779:
	mov	r0, #0
	b	.L5754
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.115, .-_snd_pcm_hw_param_set.constprop.115
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.116, %function
_snd_pcm_hw_param_set.constprop.116:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #36
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L5804
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5783
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L5782
.L5783:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #36]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #36]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L5790
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L5786
.L5790:
	mov	r0, r5
	b	.L5785
.L5804:
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L5782
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5783
.L5782:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #36]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #36]
	ldr	r0, [r4, #36]
	cmp	r0, #0
	bne	.L5805
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L5780
.L5786:
	mvn	r0, #21
.L5785:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2
	orr	r3, r3, #2
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5780:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5805:
	mov	r0, #0
	b	.L5780
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.116, .-_snd_pcm_hw_param_set.constprop.116
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.117, %function
_snd_pcm_hw_param_set.constprop.117:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #284
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #4]
	str	r2, [sp, #8]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L5806
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1024
	orr	r3, r3, #1024
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5806:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.117, .-_snd_pcm_hw_param_set.constprop.117
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.118, %function
_snd_pcm_hw_param_set.constprop.118:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #296
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #4]
	str	r2, [sp, #8]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L5812
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2048
	orr	r3, r3, #2048
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5812:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.118, .-_snd_pcm_hw_param_set.constprop.118
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_open_streams, %function
gaudio_open_streams:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r7, #3632]
	cmp	r4, #0
	beq	.L5857
	movw	r6, #:lower16:kmalloc_caches
	mov	r3, #3
	ldr	r8, [r4, #124]
	movt	r6, #:upper16:kmalloc_caches
	mov	r2, #8000
	ldr	r0, [r6, #40]
	str	r3, [r4, #128]
	mov	r3, #2
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	cmp	r0, #0
	str	r2, [r4, #140]
	beq	.L5843
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L5858
.L5821:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.115
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	ldr	r1, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.117
	ldr	r1, [r4, #140]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.118
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r8
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5859
.L5823:
	movw	r1, #16657
	mov	r2, r5
	movt	r1, 49756
	mov	r0, r8
	bl	snd_pcm_kernel_ioctl
	subs	r9, r0, #0
	blt	.L5860
	mov	r2, #0
	mov	r0, r8
	movw	r1, #16704
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5861
.L5825:
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L5845
	ldr	r3, [r5, #8]
	cmp	r3, #0
	bne	.L5846
.L5826:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L5847
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L5828
.L5829:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree
	ldr	r5, [r7, #3632]
	mov	ip, #3
	mov	r1, #2
	ldr	r0, [r6, #40]
	mov	r2, #1
	mov	r3, #8000
	ldr	r7, [r5, #152]
	cmp	r0, #0
	ldr	r8, [r7, #168]
	str	ip, [r5, #156]
	str	r1, [r5, #160]
	strd	r2, [r5, #164]
	beq	.L5862
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L5863
.L5830:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r5, #156]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.115
	ldr	r1, [r5, #160]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.116
	ldr	r1, [r5, #164]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.117
	ldr	r1, [r5, #168]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.118
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5864
.L5833:
	movw	r1, #16657
	mov	r2, r4
	movt	r1, 49756
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r9, r0, #0
	blt	.L5865
	mov	r2, #0
	movw	r1, #16704
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5866
.L5835:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L5850
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L5851
.L5836:
	str	r3, [r5, #156]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L5852
	ldr	r3, [r4, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L5838
.L5839:
	str	r3, [r5, #160]
	ldr	r3, [r4, #284]
	str	r3, [r5, #164]
	ldr	r3, [r4, #296]
	str	r3, [r5, #168]
	ldr	r0, [r8, #44]
	bl	snd_pcm_format_physical_width
	str	r0, [r8, #80]
	mov	r0, r4
	bl	kfree
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L5854
	mov	r2, #104
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L5867
.L5840:
	ldr	r3, [r4, #332]
	mov	r2, #1
	mov	ip, #0
	mvn	lr, #-2147483648
	movw	r1, #16659
	mov	r0, r7
	movt	r1, 49256
	str	ip, [r5]
	str	r2, [r5, #4]
	lsr	r3, r3, r2
	str	r3, [r5, #12]
	str	r3, [r5, #16]
	str	r2, [r5, #20]
	mov	r2, r5
	str	lr, [r5, #24]
	str	ip, [r5, #28]
	str	ip, [r5, #32]
	bl	snd_pcm_kernel_ioctl
	subs	r9, r0, #0
	blt	.L5868
	mov	r0, r5
	bl	kfree
	cmp	r9, #0
	bne	.L5832
	movw	r0, #:lower16:.LC436
	ldr	r1, .L5869
	movt	r0, #:upper16:.LC436
	bl	printk
.L5818:
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5863:
	movw	r0, #:lower16:.LC431
	ldr	r1, .L5869+4
	mvn	r9, #11
	movt	r0, #:upper16:.LC431
	bl	printk
.L5832:
	movw	r0, #:lower16:.LC435
	mov	r2, r9
	ldr	r1, .L5869
	movt	r0, #:upper16:.LC435
	bl	printk
	b	.L5818
.L5862:
	mov	r4, #16
	b	.L5830
.L5843:
	mov	r5, #16
	b	.L5821
.L5854:
	mov	r5, #16
	b	.L5840
.L5852:
	mov	r1, #0
.L5838:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L5839
.L5847:
	mov	r1, #0
.L5828:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L5829
.L5850:
	mov	r1, #0
.L5837:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L5836
.L5845:
	mov	r1, #0
.L5827:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L5826
.L5851:
	mov	r1, #32
	b	.L5837
.L5846:
	mov	r1, #32
	b	.L5827
.L5858:
	mvn	r9, #11
.L5822:
	movw	r0, #:lower16:.LC430
	mov	r2, r9
	ldr	r1, .L5869
	movt	r0, #:upper16:.LC430
	bl	printk
	b	.L5818
.L5868:
	movw	r0, #:lower16:.LC434
	mov	r2, r9
	ldr	r1, .L5869+4
	movt	r0, #:upper16:.LC434
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L5832
.L5866:
	movw	r0, #:lower16:.LC432
	ldr	r1, .L5869+4
	movt	r0, #:upper16:.LC432
	bl	printk
	b	.L5835
.L5859:
	movw	r0, #:lower16:.LC427
	ldr	r1, .L5869+8
	movt	r0, #:upper16:.LC427
	bl	printk
	b	.L5823
.L5857:
	ldr	r2, .L5869
	movw	r0, #:lower16:.LC426
	mvn	r9, #18
	movt	r0, #:upper16:.LC426
	mov	r1, r2
	bl	printk
	b	.L5818
.L5865:
	movw	r0, #:lower16:.LC428
	mov	r2, r9
	ldr	r1, .L5869+4
	movt	r0, #:upper16:.LC428
	bl	printk
	mov	r0, r4
	bl	kfree
	b	.L5832
.L5864:
	movw	r0, #:lower16:.LC427
	ldr	r1, .L5869+4
	movt	r0, #:upper16:.LC427
	bl	printk
	b	.L5833
.L5861:
	movw	r0, #:lower16:.LC429
	ldr	r1, .L5869+8
	movt	r0, #:upper16:.LC429
	bl	printk
	b	.L5825
.L5860:
	movw	r0, #:lower16:.LC428
	mov	r2, r9
	ldr	r1, .L5869+8
	movt	r0, #:upper16:.LC428
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L5822
.L5867:
	movw	r0, #:lower16:.LC433
	ldr	r1, .L5869+4
	mvn	r9, #11
	movt	r0, #:upper16:.LC433
	bl	printk
	b	.L5832
.L5870:
	.align	2
.L5869:
	.word	.LANCHOR2+3752
	.word	.LANCHOR2+3796
	.word	.LANCHOR2+3772
	.fnend
	.size	gaudio_open_streams, .-gaudio_open_streams
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_init, %function
mbim_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC437
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	ldr	r1, .L5882
	movt	r0, #:upper16:.LC437
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5876
	mov	r2, #236
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L5881
.L5872:
	mov	r6, #0
	add	ip, r4, #208
	ldr	r2, .L5882+4
	add	r3, r4, #216
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC230
	strb	r6, [r4, #136]
	add	r0, r4, #108
	str	r6, [r4, #204]
	movt	r1, #:upper16:.LC230
	str	ip, [r4, #208]
	str	ip, [r4, #212]
	str	r3, [r4, #216]
	str	r3, [r4, #220]
	str	r4, [r5, #3564]
	str	r6, [r5, #3568]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC231
	add	r0, r4, #120
	ldr	r2, .L5882+4
	movt	r1, #:upper16:.LC231
	bl	__init_waitqueue_head
	ldr	r3, [r5, #3560]
	str	r6, [r4, #92]
	str	r6, [r4, #96]
	ldr	r0, .L5882+8
	str	r6, [r4, #100]
	str	r6, [r4, #104]
	add	r3, r3, #1
	str	r4, [r5, #2608]
	str	r3, [r5, #3560]
	bl	misc_register
	subs	r4, r0, #0
	beq	.L5874
	movw	r0, #:lower16:.LC439
	ldr	r1, .L5882
	movt	r0, #:upper16:.LC439
	bl	printk
.L5873:
	movw	r0, #:lower16:.LC441
	ldr	r1, .L5882
	movt	r0, #:upper16:.LC441
	bl	printk
	ldr	r3, [r5, #3560]
	cmp	r3, #0
	beq	.L5871
	ldr	r0, [r5, #3564]
	bl	kfree
	mov	r3, #0
	str	r3, [r5, #3564]
.L5871:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5876:
	mov	r4, #16
	b	.L5872
.L5874:
	movw	r0, #:lower16:.LC440
	ldr	r1, .L5882
	ldr	r2, [r5, #3560]
	movt	r0, #:upper16:.LC440
	bl	printk
	b	.L5871
.L5881:
	movw	r0, #:lower16:.LC438
	ldr	r1, .L5882
	movw	r5, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC438
	movt	r5, #:upper16:.LANCHOR1
	bl	printk
	mvn	r4, #11
	b	.L5873
.L5883:
	.align	2
.L5882:
	.word	.LANCHOR2+3820
	.word	.LANCHOR1+3636
	.word	.LANCHOR0+880
	.fnend
	.size	mbim_function_init, .-mbim_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect.constprop.123, %function
bam_data_disconnect.constprop.123:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #3628]
	str	lr, [sp, #12]
	cmp	r3, #0
	ble	.L5901
	cmp	r0, #0
	beq	.L5902
	ldr	r5, [r4, #3348]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L5887
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L5887
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L5887
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L5887:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L5903
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L5904
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5903:
	add	r2, r5, #184
	ldr	r1, [r4, #3352]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L5902:
	movw	r0, #:lower16:.LC443
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC443
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L5905
	b	printk
.L5901:
	ldr	r1, .L5905
	movw	r0, #:lower16:.LC442
	mov	r2, #0
	movt	r0, #:upper16:.LC442
.L5900:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L5904:
	ldr	r2, .L5905
	movw	r0, #:lower16:.LC444
	movt	r0, #:upper16:.LC444
	mov	r1, r2
	b	.L5900
.L5906:
	.align	2
.L5905:
	.word	.LANCHOR2+3832
	.fnend
	.size	bam_data_disconnect.constprop.123, .-bam_data_disconnect.constprop.123
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gen_ndis_query_resp.constprop.128, %function
gen_ndis_query_resp.constprop.128:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r7, r1, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #184
	sub	sp, sp, #184
	beq	.L5950
	ldr	r5, [r7, #8]
	cmp	r5, #0
	beq	.L5950
	mov	r3, #16
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r4, r0
	str	r3, [r5, #20]
	mov	r1, sp
	ldr	r0, [r6, #3664]
	bl	dev_get_stats
	movw	r3, #278
	add	r8, r5, #24
	movt	r3, 1
	cmp	r4, r3
	beq	.L5941
	bls	.L5971
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	beq	.L5963
	bls	.L5972
	movw	r3, #261
	movt	r3, 257
	cmp	r4, r3
	beq	.L5944
	bhi	.L5939
	movw	r3, #259
	movt	r3, 257
	cmp	r4, r3
	beq	.L5940
	bls	.L5963
.L5941:
	mov	r2, #1
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5946
.L5971:
	movw	r3, #266
	movt	r3, 1
	cmp	r4, r3
	beq	.L5962
	bls	.L5973
	movw	r3, #270
	movt	r3, 1
	cmp	r4, r3
	beq	.L5921
	bhi	.L5922
	mov	r3, #268
	movt	r3, 1
	cmp	r4, r3
	beq	.L5923
	bls	.L5962
	ldr	r6, [r6, #3676]
	cmp	r6, #0
	beq	.L5948
	mov	r0, r6
	bl	strlen
	mov	r4, r0
	mov	r2, r0
	mov	r1, r6
	mov	r0, r8
	bl	memcpy
	mov	r6, #0
	add	r3, r4, #24
	b	.L5946
.L5973:
	movw	r3, #259
	movt	r3, 1
	cmp	r4, r3
	beq	.L5920
	bls	.L5974
	movw	r3, #262
	movt	r3, 1
	cmp	r4, r3
	beq	.L5918
	movw	r3, #263
	movt	r3, 1
	cmp	r4, r3
	bne	.L5975
	ldr	r3, [r6, #3652]
	cmp	r3, #1
	beq	.L5944
	ldr	r2, [r6, #3648]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L5946
.L5972:
	movw	r3, #258
	movt	r3, 2
	cmp	r4, r3
	beq	.L5931
	bls	.L5976
	mov	r3, #260
	movt	r3, 2
	cmp	r4, r3
	beq	.L5935
	bcc	.L5936
	movw	r3, #261
	movt	r3, 2
	cmp	r4, r3
	bne	.L5909
	cmp	r0, #0
	beq	.L5961
	ldr	r2, [r0, #48]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5946
.L5939:
	movw	r3, #258
	movt	r3, 258
	cmp	r4, r3
	beq	.L5944
	movw	r3, #259
	movt	r3, 258
	cmp	r4, r3
	bne	.L5977
.L5944:
	mov	r2, #0
	mov	r3, #28
	mov	r6, r2
	mov	r4, #4
	str	r2, [r5, #24]
.L5946:
	str	r4, [r5, #16]
	str	r3, [r7, #12]
	str	r3, [r5, #4]
.L5907:
	mov	r0, r6
	add	sp, sp, #184
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5922:
	movw	r3, #275
	movt	r3, 1
	cmp	r4, r3
	beq	.L5926
	mov	r3, #276
	movt	r3, 1
	cmp	r4, r3
	beq	.L5927
	movw	r3, #273
	movt	r3, 1
	cmp	r4, r3
	beq	.L5928
.L5909:
	movw	r0, #:lower16:.LC445
	mov	r2, r4
	ldr	r1, .L5979
	movt	r0, #:upper16:.LC445
	movw	r6, #65012
	bl	printk
	mov	r4, #0
	mov	r3, #24
	movt	r6, 65535
	b	.L5946
.L5975:
	mov	r3, #260
	movt	r3, 1
	cmp	r4, r3
	bne	.L5909
.L5920:
	ldr	r2, [r6, #3644]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L5946
.L5962:
	ldr	r0, [r6, #3664]
	cmp	r0, #0
	beq	.L5961
	ldr	r2, [r0, #316]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5946
.L5963:
	ldr	r0, [r6, #3664]
	cmp	r0, #0
	beq	.L5961
	ldr	r2, [r6, #3656]
	mov	r3, #30
	mov	r4, #6
	mov	r6, #0
	ldr	r0, [r2]	@ unaligned
	str	r0, [r5, #24]	@ unaligned
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r8, #4]	@ unaligned
	b	.L5946
.L5961:
	movw	r6, #65012
	mov	r4, r0
	movt	r6, 65535
	mov	r3, #24
	b	.L5946
.L5976:
	movw	r3, #514
	movt	r3, 1
	cmp	r4, r3
	beq	.L5944
	movw	r3, #257
	movt	r3, 2
	cmp	r4, r3
	bne	.L5909
	cmp	r0, #0
	beq	.L5961
	ldr	r2, [r0, #8]
	mov	r3, #28
	ldr	ip, [r0, #40]
	ldr	r0, [r0, #56]
	b	.L5967
.L5974:
	movw	r3, #257
	movt	r3, 1
	cmp	r4, r3
	bne	.L5978
	mov	r0, r8
	mov	r2, #112
	ldr	r1, .L5979+4
	bl	memcpy
	mov	r4, #112
	mov	r3, #136
	mov	r6, #0
	b	.L5946
.L5931:
	cmp	r0, #0
	beq	.L5961
	ldr	r2, [r0]
	mov	r3, #28
	ldr	ip, [r0, #32]
	ldr	r0, [r0, #48]
.L5967:
	sub	r2, r2, ip
	mov	r6, #0
	sub	r2, r2, r0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5946
.L5977:
	movw	r3, #257
	movt	r3, 258
	cmp	r4, r3
	bne	.L5909
	cmp	r0, #0
	beq	.L5961
	ldr	r2, [r0, #104]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5946
.L5936:
	cmp	r0, #0
	beq	.L5961
	ldr	r2, [r0, #40]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5946
.L5978:
	movw	r3, #258
	movt	r3, 1
	cmp	r4, r3
	beq	.L5944
	b	.L5909
.L5927:
	ldr	r2, [r6, #3652]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L5946
.L5921:
	ldr	r2, [r6, #3660]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	ldrh	r2, [r2]
	str	r2, [r5, #24]
	b	.L5946
.L5928:
	movw	r2, #1558
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5946
.L5923:
	ldr	r2, [r6, #3668]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L5946
.L5940:
	mov	r2, #-536870912
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5946
.L5918:
	ldr	r3, [r6, #3664]
	cmp	r3, #0
	beq	.L5957
	ldr	r2, [r3, #316]
	mov	r6, #0
	mov	r4, #4
	mov	r3, #28
	str	r2, [r5, #24]
	b	.L5946
.L5935:
	cmp	r0, #0
	beq	.L5957
	ldr	r2, [r0, #32]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5946
.L5926:
	mov	r2, #18
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5946
.L5950:
	mvn	r6, #11
	b	.L5907
.L5957:
	movw	r6, #65012
	mov	r3, #24
	movt	r6, 65535
	mov	r4, #0
	b	.L5946
.L5948:
	mov	r3, #28
	mov	r4, #4
	str	r6, [r5, #24]
	b	.L5946
.L5980:
	.align	2
.L5979:
	.word	.LANCHOR2+3964
	.word	.LANCHOR2+3852
	.fnend
	.size	gen_ndis_query_resp.constprop.128, .-gen_ndis_query_resp.constprop.128
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_close, %function
f_midi_out_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_out_close, .-f_midi_out_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_init, %function
ccid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5988
	mov	r2, #204
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L5991
.L5983:
	add	r3, r4, #120
	mov	r0, #0
	movw	r5, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC241
	movt	r5, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC241
	str	r0, [r4, #92]
	add	r2, r5, #3696
	str	r3, [r4, #120]
	add	r0, r4, #128
	str	r3, [r4, #124]
	str	r4, [r5, #2236]
	bl	__init_waitqueue_head
	ldr	r0, .L5993
	bl	misc_register
	subs	r6, r0, #0
	bne	.L5985
	movw	r1, #:lower16:.LC446
	add	r2, r5, #3696
	movt	r1, #:upper16:.LC446
	add	r0, r4, #160
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC447
	add	r2, r5, #3696
	movt	r1, #:upper16:.LC447
	add	r0, r4, #172
	bl	__init_waitqueue_head
	add	r3, r4, #192
	ldr	r0, .L5993+4
	str	r3, [r4, #192]
	str	r3, [r4, #196]
	bl	misc_register
	subs	r6, r0, #0
	bne	.L5992
.L5982:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5988:
	mov	r4, #16
	b	.L5983
.L5991:
	mvn	r6, #11
	b	.L5982
.L5992:
	movw	r0, #:lower16:.LC243
	ldr	r1, .L5993+8
	movt	r0, #:upper16:.LC243
	bl	printk
	movw	r0, #:lower16:.LC449
	mov	r2, r6
	ldr	r1, .L5993+12
	movt	r0, #:upper16:.LC449
	bl	printk
	ldr	r0, .L5993
	bl	misc_deregister
.L5987:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC450
	movt	r0, #:upper16:.LC450
	bl	printk
	b	.L5982
.L5985:
	movw	r0, #:lower16:.LC243
	ldr	r1, .L5993+16
	movt	r0, #:upper16:.LC243
	bl	printk
	movw	r0, #:lower16:.LC448
	mov	r2, r6
	ldr	r1, .L5993+12
	movt	r0, #:upper16:.LC448
	bl	printk
	b	.L5987
.L5994:
	.align	2
.L5993:
	.word	.LANCHOR0+844
	.word	.LANCHOR0+808
	.word	.LANCHOR2+4020
	.word	.LANCHOR2+4008
	.word	.LANCHOR2+3984
	.fnend
	.size	ccid_function_init, .-ccid_function_init
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_cdc_notify.constprop.142, %function
acm_cdc_notify.constprop.142:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:__stack_chk_guard
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:__stack_chk_guard
	.pad #16
	sub	sp, sp, #16
	ldr	r2, [r3]
	mov	r4, r0
	mov	r10, r1
	add	r0, sp, #2
	mov	r1, #10
	ldr	r9, [r4, #152]
	mov	r5, r3
	mov	r7, #32
	add	r8, r4, #148
	str	r2, [sp, #12]
	bl	__memzero
	ldr	r6, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r6]
	str	r0, [r6, #4]
	mov	r0, r8
	strb	r1, [r3]
	strb	r7, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r10]	@ unaligned
	ldr	r1, [sp, #6]	@ unaligned
	strh	ip, [sp, #2]	@ movhi
	ldr	ip, [sp, #2]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #10]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r10]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r9, #8]
	mov	r2, r7
	mov	r1, r6
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r8
	bl	_raw_spin_lock
	cmp	r7, #0
	bge	.L5995
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC451
	mov	r3, r7
	movt	r1, #:upper16:.LC451
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r6, [r4, #156]
.L5995:
	ldr	r2, [sp, #12]
	mov	r0, r7
	ldr	r3, [r5]
	cmp	r2, r3
	beq	.L5997
	bl	__stack_chk_fail
.L5997:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
	.fnend
	.size	acm_cdc_notify.constprop.142, .-acm_cdc_notify.constprop.142
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_cdc_notify_complete, %function
acm_cdc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	add	r6, r4, #148
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #44]
	mov	r1, r0
	cmn	r3, #108
	streq	r5, [r4, #156]
	beq	.L6005
	ldrb	r7, [r4, #147]	@ zero_extendqisi2
	mov	r0, r6
	str	r5, [r4, #156]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L5999
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r5, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L6006
.L6003:
	mov	r1, r5
.L6005:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L5999:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6006:
	movw	r0, #:lower16:.LC452
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	ldrh	r2, [r4, #170]
	movt	r0, #:upper16:.LC452
	bl	printk
	add	r1, r4, #170
	mov	r0, r4
	bl	acm_cdc_notify.constprop.142
	b	.L6003
	.fnend
	.size	acm_cdc_notify_complete, .-acm_cdc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_controlbits_tomodem, %function
ghsuart_send_controlbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r3, #1876]
	cmp	r0, #0
	cmpne	r1, ip
	movcs	r5, #1
	movcc	r5, #0
	bcs	.L6026
	mov	r0, #84
	mla	r1, r0, r1, r3
	ldr	r4, [r1, #2052]
	cmp	r4, #0
	beq	.L6027
	ldr	r3, [r4, #196]
	cmp	r3, r2
	beq	.L6007
	ldr	r3, [r4, #188]
	str	r2, [r4, #196]
	tst	r3, #4
	beq	.L6007
	tst	r2, #1
	bne	.L6028
.L6007:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6028:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #24]
	mov	r1, r0
	str	r5, [r4, #200]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L6007
	ldr	r3, [r6, #136]
	cmp	r3, #0
	beq	.L6007
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3
.L6026:
	movw	r0, #:lower16:.LC16
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC16
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L6029
	b	printk
.L6027:
	movw	r0, #:lower16:.LC12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC12
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L6029
	b	printk
.L6030:
	.align	2
.L6029:
	.word	.LANCHOR2+4044
	.fnend
	.size	ghsuart_send_controlbits_tomodem, .-ghsuart_send_controlbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_tx, %function
gs_start_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	add	r10, r0, #76
	str	lr, [sp, #32]
	ldr	r3, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #76]
	ldr	r7, [r3, #88]
	cmp	r10, r5
	beq	.L6051
	ldr	r3, [r0, #84]
	cmp	r3, #7
	bgt	.L6051
	movw	r9, #:lower16:.LANCHOR1
	mov	r4, r0
	mov	fp, #0
	movt	r9, #:upper16:.LANCHOR1
.L6033:
	ldr	r2, [r4, #92]
	sub	r8, r5, #36
	ldr	r1, [r4, #100]
	ldr	r6, [r4, #104]
	add	r6, r6, r2
	sub	r3, r6, r1
	udiv	r6, r3, r2
	mls	r6, r2, r6, r3
	cmp	r6, #4096
	bcs	.L6052
	cmp	r6, #0
	bne	.L6035
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #3696]
	cmp	r3, #0
	moveq	r6, r3
	beq	.L6039
	ldrh	r1, [r7, #20]
	sdiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L6068
.L6039:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #108
	bl	__wake_up
.L6041:
	cmp	fp, #0
	bne	.L6034
.L6031:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6052:
	mov	r6, #4096
.L6035:
	ldr	fp, [r4, #96]
	ldr	r3, [r5, #-36]
	add	fp, fp, r2
	sub	fp, fp, r1
	cmp	fp, r6
	bcc	.L6069
	mov	r0, r3
	mov	r2, r6
	bl	memcpy
	cmp	fp, r6
	ldrhi	r3, [r4, #100]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, r6
	str	r3, [r4, #100]
.L6037:
	ldrd	r2, [r5]
	str	r6, [r5, #-32]
	mov	r1, #512
	mov	r0, r4
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #256
	str	r3, [r5]
	str	r1, [r5, #4]
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6070
	cmp	r6, #0
	ldr	r0, [r4, #76]
	bne	.L6071
	ldr	r1, [r5, #-32]
	cmp	r10, r0
	ldr	r3, [r4, #84]
	ldr	r2, [r4, #136]
	str	r1, [r9, #3696]
	add	r3, r3, #1
	add	r2, r2, r1
	str	r3, [r4, #84]
	str	r2, [r4, #136]
	beq	.L6034
	cmp	r3, #7
	mov	fp, #1
	bgt	.L6034
	mov	r5, r0
	b	.L6033
.L6069:
	mov	r0, r3
	sub	r3, r6, fp
	mov	r2, fp
	str	r3, [sp, #4]
	bl	memcpy
	add	r0, r0, fp
	ldr	fp, [sp, #4]
	ldr	r1, [r4, #96]
	mov	r2, fp
	bl	memcpy
	ldr	r3, [r4, #96]
	add	r3, r3, fp
	str	r3, [r4, #100]
	b	.L6037
.L6071:
	str	r5, [r0, #4]
	stm	r5, {r0, r10}
	str	r5, [r4, #76]
.L6034:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L6031
	bl	tty_wakeup
	b	.L6031
.L6070:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6031
.L6051:
	mov	r6, #0
	b	.L6031
.L6068:
	ldm	r5, {r1, r2}
	mov	lr, #256
	mov	ip, #512
	str	r3, [r5, #-32]
	mov	r0, r4
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [r5]
	str	ip, [r5, #4]
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6072
	cmp	r6, #0
	bne	.L6073
.L6042:
	mov	r3, #0
	str	r3, [r9, #3696]
	b	.L6039
.L6072:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6041
.L6073:
	movw	r2, #:lower16:.LC453
	movw	r0, #:lower16:.LC454
	ldr	r1, .L6074
	mov	r3, r6
	movt	r2, #:upper16:.LC453
	movt	r0, #:upper16:.LC454
	bl	printk
	ldr	r3, [r4, #76]
	str	r5, [r3, #4]
	stm	r5, {r3, r10}
	str	r5, [r4, #76]
	b	.L6042
.L6075:
	.align	2
.L6074:
	.word	.LANCHOR2+4080
	.fnend
	.size	gs_start_tx, .-gs_start_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_flush_chars, %function
gs_flush_chars:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L6077
	mov	r0, r4
	bl	gs_start_tx
.L6077:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_flush_chars, .-gs_flush_chars
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write, %function
gs_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r5, #0
	mov	r6, r0
	bne	.L6097
.L6083:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6088
	mov	r0, r4
	bl	gs_start_tx
.L6088:
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6097:
	ldr	r1, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r1
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r5, r3
	bhi	.L6098
.L6084:
	ldr	r8, [r4, #96]
	add	r1, r8, r1
	sub	r8, r1, r0
	cmp	r8, r5
	bcc	.L6099
	mov	r1, r7
	mov	r2, r5
	bl	memcpy
	cmp	r8, r5
	ldrhi	r3, [r4, #104]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, r5
	str	r3, [r4, #104]
	b	.L6083
.L6098:
	subs	r5, r3, #0
	beq	.L6083
	b	.L6084
.L6099:
	mov	r2, r8
	mov	r1, r7
	sub	r9, r5, r8
	bl	memcpy
	mov	r2, r9
	add	r1, r7, r8
	ldr	r0, [r4, #96]
	bl	memcpy
	ldr	r2, [r4, #96]
	add	r2, r2, r9
	str	r2, [r4, #104]
	b	.L6083
	.fnend
	.size	gs_write, .-gs_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_complete, %function
gs_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r2, [r4, #140]
	mov	r3, r4
	ldr	r0, [r5, #48]
	add	r1, r5, #36
	add	r2, r2, r0
	str	r2, [r4, #140]
	ldr	r2, [r3, #76]!
	str	r1, [r2, #4]
	strd	r2, [r5, #36]
	ldr	r3, [r4, #84]
	str	r1, [r4, #76]
	sub	r3, r3, #1
	str	r3, [r4, #84]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L6102
	cmp	r3, #0
	bne	.L6114
.L6103:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6102
	mov	r0, r4
	bl	gs_start_tx
.L6102:
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L6114:
	movw	r0, #:lower16:.LC455
	ldr	r1, .L6115
	ldr	r2, [r7, #4]
	movt	r0, #:upper16:.LC455
	bl	printk
	b	.L6103
.L6116:
	.align	2
.L6115:
	.word	.LANCHOR2+4092
	.fnend
	.size	gs_write_complete, .-gs_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	check_command.constprop.154, %function
check_command.constprop.154:
	.fnstart
	@ args = 4, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	movw	r5, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	mov	r6, r3
	str	r8, [sp, #16]
	ldr	ip, [r5]
	mov	r7, r1
	str	lr, [sp, #20]
	ldr	r0, [r0, #120]
	mov	lr, #0
	.pad #24
	sub	sp, sp, #24
	mov	r8, r2
	ldr	r3, [r4, #124]
	strb	lr, [sp]
	cmp	r0, lr
	str	ip, [sp, #20]
	bne	.L6300
.L6118:
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L6119
	cmp	r2, r3
	bls	.L6120
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r8, r0
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L6121
	cmp	r3, #0
	bne	.L6124
.L6121:
	ldr	r3, [r4, #72]
	cmp	r3, r7
	beq	.L6150
.L6311:
	blt	.L6124
	ldr	r2, [r4, #104]
	ldrb	r1, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L6125
.L6312:
	cmp	r1, #3
	beq	.L6126
	ldrb	r0, [r2, #24]	@ zero_extendqisi2
	mov	r1, #0
	ldr	ip, [r2, #36]
	str	r1, [r2, #28]
	str	r1, [r2, #32]
	bfi	r0, r1, #6, #1
	cmp	ip, r1
	strb	r0, [r2, #24]
	beq	.L6126
	ldrb	r0, [r4, #76]	@ zero_extendqisi2
	cmp	r0, #18
	cmpne	r0, #3
	mvnne	r0, #21
	strne	ip, [r2, #28]
	strne	r1, [r2, #36]
	bne	.L6117
.L6126:
	ldrb	r1, [r4, #77]	@ zero_extendqisi2
	cmp	r3, #1
	and	r1, r1, #31
	strb	r1, [r4, #77]
	ble	.L6146
	ldrb	r1, [r4, #77]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6301
.L6129:
	cmp	r3, #2
	beq	.L6131
	ldrb	r1, [r4, #78]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6302
.L6132:
	cmp	r3, #3
	beq	.L6131
	ldrb	r1, [r4, #79]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6303
.L6133:
	cmp	r3, #4
	beq	.L6131
	ldrb	r1, [r4, #80]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6304
.L6134:
	cmp	r3, #5
	beq	.L6131
	ldrb	r1, [r4, #81]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L6135
	tst	r6, #32
	beq	.L6130
.L6135:
	cmp	r3, #6
	beq	.L6131
	ldrb	r1, [r4, #82]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L6136
	tst	r6, #64
	beq	.L6130
.L6136:
	cmp	r3, #7
	beq	.L6131
	ldrb	r1, [r4, #83]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L6137
	tst	r6, #128
	beq	.L6130
.L6137:
	cmp	r3, #8
	beq	.L6131
	ldrb	r1, [r4, #84]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6305
.L6138:
	cmp	r3, #9
	beq	.L6131
	ldrb	r1, [r4, #85]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6306
.L6139:
	cmp	r3, #10
	beq	.L6131
	ldrb	r1, [r4, #86]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6307
.L6140:
	cmp	r3, #11
	beq	.L6131
	ldrb	r1, [r4, #87]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6308
.L6141:
	cmp	r3, #12
	beq	.L6131
	ldrb	r1, [r4, #88]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6309
.L6142:
	cmp	r3, #13
	beq	.L6131
	ldrb	r1, [r4, #89]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L6143
	tst	r6, #8192
	beq	.L6130
.L6143:
	cmp	r3, #14
	beq	.L6131
	ldrb	r1, [r4, #90]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L6144
	tst	r6, #16384
	beq	.L6130
.L6144:
	cmp	r3, #15
	beq	.L6131
	ldrb	r3, [r4, #91]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6131
	tst	r6, #32768
	beq	.L6130
.L6131:
	cmp	r2, #0
	beq	.L6147
.L6146:
	ldr	r3, [r2]
	ldr	r1, [sp, #48]
	cmp	r3, #0
	movne	r3, #0
	andeq	r3, r1, #1
	cmp	r3, #0
	movne	r3, #14848
	mvnne	r0, #21
	movtne	r3, 2
	strne	r3, [r2, #28]
	bne	.L6117
.L6147:
	mov	r0, #0
.L6117:
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L6310
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6119:
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	ldr	r3, [r4, #72]
	cmp	r3, r7
	bne	.L6311
.L6150:
	ldr	r2, [r4, #104]
	mov	r3, r7
	ldrb	r1, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L6312
.L6125:
	ldrb	r0, [r4, #144]	@ zero_extendqisi2
	cmp	r1, #18
	cmpne	r1, #3
	bfi	r0, r2, #4, #1
	strb	r0, [r4, #144]
	bne	.L6145
	ldrb	r1, [r4, #77]	@ zero_extendqisi2
	cmp	r3, #1
	and	r1, r1, #31
	strb	r1, [r4, #77]
	ble	.L6147
	ldrb	r1, [r4, #77]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L6129
.L6301:
	tst	r6, #2
	bne	.L6129
.L6130:
	cmp	r2, #0
	beq	.L6145
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r2, #28]
	b	.L6117
.L6302:
	tst	r6, #4
	bne	.L6132
	b	.L6130
.L6303:
	tst	r6, #8
	bne	.L6133
	b	.L6130
.L6304:
	tst	r6, #16
	bne	.L6134
	b	.L6130
.L6300:
	movw	r2, #:lower16:.LANCHOR3
	movw	r1, #:lower16:.LC456
	movt	r2, #:upper16:.LANCHOR3
	movt	r1, #:upper16:.LC456
	add	r0, r2, r0
	ldrb	r2, [r0, #-4072]	@ zero_extendqisi2
	mov	r0, sp
	bl	sprintf
	ldr	r0, [r4, #120]
	ldr	r3, [r4, #124]
	b	.L6118
.L6305:
	tst	r6, #256
	bne	.L6138
	b	.L6130
.L6306:
	tst	r6, #512
	bne	.L6139
	b	.L6130
.L6307:
	tst	r6, #1024
	bne	.L6140
	b	.L6130
.L6308:
	tst	r6, #2048
	bne	.L6141
	b	.L6130
.L6309:
	tst	r6, #4096
	bne	.L6142
	b	.L6130
.L6145:
	mvn	r0, #21
	b	.L6117
.L6120:
	cmp	r8, r0
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	beq	.L6121
.L6124:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L6117
.L6310:
	bl	__stack_chk_fail
	.fnend
	.size	check_command.constprop.154, .-check_command.constprop.154
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_mount, %function
ffs_fs_mount:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #33152
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r4, r3, #0
	strd	r6, [sp, #8]
	mov	r3, #0
	movt	ip, 65535
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	movw	lr, #16704
	strh	ip, [sp, #20]	@ movhi
	str	r3, [sp, #22]	@ unaligned
	str	r3, [sp, #26]	@ unaligned
	str	r3, [sp, #30]	@ unaligned
	strh	lr, [sp, #32]	@ movhi
	str	r3, [sp, #34]	@ unaligned
	strh	r3, [sp, #38]	@ movhi
	beq	.L6314
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6314
	mov	fp, #32768
	movw	r3, #:lower16:.LC459
	str	r0, [sp, #12]
	movw	r2, #:lower16:.LC460
	movt	r3, #:upper16:.LC459
	movt	r2, #:upper16:.LC460
	movt	fp, 65535
	str	r3, [sp, #4]
	str	r2, [sp, #8]
.L6333:
	mov	r1, #44
	mov	r0, r4
	bl	strchr
	subs	r7, r0, #0
	mov	r1, #61
	movne	r3, #0
	mov	r0, r4
	strbne	r3, [r7]
	bl	strchr
	subs	r5, r0, #0
	beq	.L6351
	mov	r3, #0
	mov	r6, r5
	mov	r2, r3
	add	r1, sp, #16
	strb	r3, [r6], #1
	mov	r0, r6
	bl	simple_strtoul
	ldr	r2, [sp, #16]
	mov	r8, r0
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r2, #44
	cmpne	r2, #0
	bne	.L6352
	sub	r5, r5, r4
	cmp	r5, #4
	beq	.L6320
	cmp	r5, #5
	beq	.L6321
	cmp	r5, #3
	beq	.L6353
.L6319:
	movw	r0, #:lower16:.LC464
	mov	r1, r4
	movt	r0, #:upper16:.LC464
	bl	printk
.L6317:
	mvn	r0, #21
	b	.L6313
.L6349:
	ldr	r8, [sp, #12]
.L6314:
	movw	r3, #:lower16:ffs_sb_fill
	mov	r1, r10
	str	r9, [sp, #36]
	mov	r0, r8
	movt	r3, #:upper16:ffs_sb_fill
	add	r2, sp, #20
	bl	mount_single
.L6313:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6320:
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r2, #109
	bne	.L6319
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	add	r1, r4, #1
	cmp	r2, #111
	bne	.L6319
	ldrb	r2, [r1, #1]!	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L6319
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	cmp	r2, #101
	bne	.L6319
	uxth	r3, r0
	movw	r2, #365
	movw	r1, #438
	and	r2, r2, r3
	and	r3, r3, r1
	orr	r2, r2, #16384
	orr	r3, r3, fp
	strh	r3, [sp, #20]	@ movhi
	strh	r2, [sp, #32]	@ movhi
	b	.L6324
.L6353:
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r2, #117
	beq	.L6354
	cmp	r2, #103
	bne	.L6319
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #105
	bne	.L6319
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L6319
	str	r0, [sp, #28]
	b	.L6324
.L6321:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #4]
	bl	memcmp
	cmp	r0, #0
	bne	.L6323
	movw	r2, #365
	and	r3, r2, r8
	orr	r3, r3, #16384
	strh	r3, [sp, #32]	@ movhi
.L6324:
	cmp	r7, #0
	beq	.L6349
	add	r4, r7, #1
	b	.L6333
.L6323:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #8]
	bl	memcmp
	cmp	r0, #0
	bne	.L6319
	movw	r2, #438
	and	r3, r2, r8
	orr	r3, r3, fp
	strh	r3, [sp, #20]	@ movhi
	b	.L6324
.L6351:
	movw	r0, #:lower16:.LC457
	mov	r1, r4
	movt	r0, #:upper16:.LC457
	bl	printk
	b	.L6317
.L6354:
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #105
	bne	.L6319
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L6319
	str	r0, [sp, #24]
	b	.L6324
.L6352:
	movw	r0, #:lower16:.LC458
	mov	r2, r6
	mov	r1, r4
	movt	r0, #:upper16:.LC458
	bl	printk
	b	.L6317
	.fnend
	.size	ffs_fs_mount, .-ffs_fs_mount
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_send_cpkt_tomodem, %function
grmnet_ctrl_smd_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #5
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L6356
	movw	r7, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r7, #:upper16:.LANCHOR1
	mla	r3, r3, r0, r7
	ldr	r4, [r3, #528]
	cmp	r4, #0
	beq	.L6356
	movw	r3, #:lower16:kmalloc_caches
	mov	r8, r1
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r2
	ldr	r5, [r3, #24]
	cmp	r5, #0
	beq	.L6357
	mov	r0, r5
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L6360
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5]
	beq	.L6364
	cmn	r5, #4096
	str	r6, [r5, #4]
	bhi	.L6360
.L6361:
	mov	r1, r8
	mov	r2, r6
	add	r8, r4, #108
	bl	memcpy
	str	r6, [r5, #4]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r0, [r4, #8]
	ands	r6, r0, #1
	beq	.L6381
	ldr	r3, [r4, #44]
	add	ip, r5, #8
	add	lr, r4, #40
	ldr	r1, [r7, #3432]
	add	r2, r4, #68
	mov	r0, #4
	str	ip, [r4, #44]
	mov	r6, #0
	str	lr, [r5, #8]
	str	r3, [r5, #12]
	str	ip, [r3]
	bl	queue_work_on
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L6355:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6357:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #16]
	strne	r6, [r5, #20]
	movne	r5, #16
	bne	.L6361
	mov	r5, #16
.L6364:
	mov	r0, r5
	bl	kfree
.L6360:
	movw	r0, #:lower16:.LC465
	ldr	r1, .L6382
	mvn	r6, #11
	movt	r0, #:upper16:.LC465
	bl	printk
	b	.L6355
.L6381:
	ldr	r0, [r5]
	bl	kfree
	mov	r0, r5
	bl	kfree
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L6355
.L6356:
	movw	r0, #:lower16:.LC16
	mov	r2, ip
	ldr	r1, .L6382
	movt	r0, #:upper16:.LC16
	mvn	r6, #18
	bl	printk
	b	.L6355
.L6383:
	.align	2
.L6382:
	.word	.LANCHOR3-4068
	.fnend
	.size	grmnet_ctrl_smd_send_cpkt_tomodem, .-grmnet_ctrl_smd_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_cleanup, %function
ptp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ptp_function_cleanup, .-ptp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epout, %function
rmnet_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	ldr	r8, [r4, #84]
	cmn	r3, #104
	beq	.L6412
	cmp	r3, #0
	beq	.L6388
	cmn	r3, #108
	beq	.L6412
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC136
	ldr	lr, [r5, #4]
	movt	r1, #:upper16:.LC136
	ldr	ip, [r5, #48]
	ldr	r0, [r8]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L6389
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
.L6390:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #328]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1260]
	cmp	r2, r3
	bcs	.L6413
	mov	r0, r7
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L6394
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r5
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r5, {r3, ip}
	str	r6, [r5, #32]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L6414
.L6385:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6389:
	movw	r0, #:lower16:.LC171
	ldr	r1, .L6415
	movt	r0, #:upper16:.LC171
	bl	printk
.L6412:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L6388:
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L6389
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #176]
	add	r1, r4, #172
	add	r2, r4, #236
	mov	r0, #4
	stm	r6, {r1, r3}
	str	r6, [r3]
	ldr	r3, [r4, #180]
	str	r6, [r4, #176]
	ldr	r1, [r4, #200]
	add	r3, r3, #1
	str	r3, [r4, #180]
	bl	queue_work_on
	b	.L6390
.L6413:
	ldr	r3, [r4, #164]
	add	r2, r5, #36
	add	r1, r4, #160
	mov	r0, r7
	str	r2, [r4, #164]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L6414:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L6392:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC0
	mov	r2, r7
	movt	r1, #:upper16:.LC0
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #164]
	add	r2, r5, #36
	add	r1, r4, #160
	str	r2, [r4, #164]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
	b	.L6385
.L6394:
	mvn	r7, #11
	b	.L6392
.L6416:
	.align	2
.L6415:
	.word	.LANCHOR3-4032
	.fnend
	.size	rmnet_sdio_complete_epout, .-rmnet_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_command_complete, %function
rmnet_sdio_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmp	r2, #0
	blt	.L6429
	ldr	r3, [r4, #324]
	tst	r3, #2
	bne	.L6430
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6430:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	ldr	r8, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L6420
	mov	r0, r6
	mov	r2, #16
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L6422
	mov	r1, #32
	mov	r0, r8
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	beq	.L6426
	cmn	r6, #4096
	bhi	.L6422
.L6425:
	mov	r2, r8
	ldr	r1, [r5]
	add	r5, r4, #188
	bl	memcpy
	mov	r0, r5
	str	r8, [r6, #4]
	bl	_raw_spin_lock
	ldr	r3, [r4, #112]
	add	r2, r6, #8
	add	r1, r4, #108
	mov	r0, r5
	str	r2, [r4, #112]
	str	r1, [r6, #8]
	str	r3, [r6, #12]
	str	r2, [r3]
	ldr	r3, [r4, #116]
	add	r3, r3, #1
	str	r3, [r4, #116]
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	add	r2, r4, #220
	mov	r0, #4
	ldr	r1, [r4, #200]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L6420:
	mov	r1, #32
	mov	r0, r8
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6, #16]
	mov	r6, #16
	bne	.L6425
.L6426:
	mov	r0, r6
	bl	kfree
.L6422:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC466
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC466
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L6429:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC133
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC133
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_command_complete, .-rmnet_sdio_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_init, %function
uasp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	uasp_function_init, .-uasp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_tx_complete, %function
bam_data_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_tx_complete, .-bam_data_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable, %function
android_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r8, [r0, #8]
	ldr	r10, [r0, #20]
	cmp	r10, #0
	beq	.L6464
	sub	r10, r10, #1
	cmp	r10, #0
	str	r10, [r0, #20]
	movne	r10, #0
	bne	.L6433
	mov	r9, r0
	ldr	r3, [r9, #412]!
	cmp	r9, r3
	sub	r4, r3, #120
	beq	.L6436
	ldrb	r1, [r3, #-100]	@ zero_extendqisi2
	cmp	r1, #0
	movwne	r7, #:lower16:.LANCHOR1
	movne	r6, r10
	movtne	r7, #:upper16:.LANCHOR1
	addne	r5, r8, #36
	beq	.L6440
.L6439:
	ldr	r3, [r8, #36]
	cmp	r5, r3
	sub	r2, r3, #28
	bne	.L6443
	b	.L6441
.L6465:
	ldr	r3, [r2, #28]
	cmp	r5, r3
	sub	r2, r3, #28
	beq	.L6441
.L6443:
	ldrb	r3, [r3, #-8]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L6465
	mvn	r10, #15
.L6438:
	ldr	r2, .L6468
	movw	r0, #:lower16:.LC468
	mov	r3, r10
	movt	r0, #:upper16:.LC468
	mov	r1, r2
	bl	printk
.L6433:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6441:
	str	r8, [r4, #24]
	ldr	ip, [r8, #40]
	add	r2, r4, #28
	add	r3, r4, #36
	mov	r1, #64
	str	r2, [r8, #40]
	add	r0, r4, #48
	str	r5, [r4, #28]
	str	ip, [r4, #32]
	str	r2, [ip]
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	strb	r6, [r4, #44]
	bl	__memzero
	mov	r0, r4
	bl	android_bind_config
	subs	r10, r0, #0
	blt	.L6466
	ldr	r1, [r8]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L6467
.L6446:
	ldr	r2, [r3, #12]
	str	r6, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L6446
	cmp	r10, #0
	str	r6, [r7, #3604]
	blt	.L6438
.L6447:
	ldr	r3, [r4, #120]
	cmp	r9, r3
	sub	r4, r3, #120
	beq	.L6436
	ldrb	r1, [r3, #-100]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6439
.L6440:
	mvn	r10, #21
	b	.L6438
.L6466:
	ldrd	r2, [r4, #28]
	mov	r1, #512
	mov	r0, #256
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r6, [r4, #24]
	strd	r0, [r4, #28]
	ldr	r1, [r8]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	bne	.L6446
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [r3, #3604]
	b	.L6438
.L6436:
	ldr	r0, [r8]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L6433
	mov	r1, #1
	blx	r3
	b	.L6433
.L6467:
	str	r6, [r7, #3604]
	b	.L6447
.L6464:
	movw	r0, #:lower16:.LC467
	mov	r1, #500
	movt	r0, #:upper16:.LC467
	bl	warn_slowpath_null
	b	.L6433
.L6469:
	.align	2
.L6468:
	.word	.LANCHOR3-4004
	.fnend
	.size	android_enable, .-android_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_disable, %function
adb_android_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L6472
	bx	lr
.L6472:
	b	android_enable
	.fnend
	.size	adb_android_function_disable, .-adb_android_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_open, %function
adb_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L6491
	strd	r6, [sp, #8]
	mov	r6, r1
	ldr	r1, .L6491+4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6489
.L6474:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3424]
	cmp	r3, #0
	beq	.L6481
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L6476
	ldr	r3, [r4, #3424]
	mov	r2, #0
	str	r3, [r6, #124]
	ldrb	r1, [r3, #161]	@ zero_extendqisi2
	str	r2, [r3, #104]
	cmp	r1, r2
	bne	.L6490
.L6478:
	mov	r2, #1
	mov	r0, #0
	strb	r2, [r3, #160]
.L6473:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6490:
	movw	r1, #:lower16:.LANCHOR0
	strb	r2, [r3, #161]
	movt	r1, #:upper16:.LANCHOR0
	ldr	r7, [r1, #1292]
	ldr	r6, [r1, #1308]
	cmp	r6, #0
	strbeq	r5, [r7]
	streq	r6, [r7, #4]
	beq	.L6478
	add	r8, r6, #24
	mov	r0, r8
	bl	mutex_lock
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	strb	r5, [r7]
	str	r6, [r7, #4]
	cmp	r3, #0
	beq	.L6480
	mov	r0, r6
	bl	android_enable
.L6480:
	mov	r0, r8
	bl	mutex_unlock
	ldr	r3, [r4, #3424]
	b	.L6478
.L6476:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L6473
.L6481:
	mvn	r0, #18
	b	.L6473
.L6489:
	movw	r0, #:lower16:.LC469
	movt	r0, #:upper16:.LC469
	bl	printk
	b	.L6474
.L6492:
	.align	2
.L6491:
	.word	.LANCHOR0+1264
	.word	.LANCHOR3-3988
	.fnend
	.size	adb_open, .-adb_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_disable, %function
ffs_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L6495
	bx	lr
.L6495:
	b	android_enable
	.fnend
	.size	ffs_function_disable, .-ffs_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_complete, %function
rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #36
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	ldr	r3, [r1, #44]
	ldr	r8, [r1, #32]
	add	r9, r4, #28
	add	r7, r4, #16
	cmn	r3, #103
	beq	.L6498
	ble	.L6522
	cmn	r3, #75
	beq	.L6501
	cmp	r3, #0
	bne	.L6497
	mov	r0, r8
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L6503
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L6504
	mov	r1, r8
	add	r2, r4, #52
	ldr	r3, [r4, #84]
	blx	r3
	cmn	r0, #22
	mov	r8, r0
	beq	.L6523
	cmn	r0, #75
	beq	.L6524
	mov	r1, r10
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L6508
	b	.L6506
.L6501:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #236]
	add	r3, r3, #1
	str	r3, [r2, #236]
.L6497:
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #208]
	add	r3, r3, #1
	str	r3, [r2, #208]
.L6508:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #28]
	mov	r0, r7
	str	r6, [r3, #4]
	str	r3, [r5, #36]
	str	r9, [r5, #40]
	str	r6, [r4, #28]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #104
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3, #3356]
	b	queue_work_on
.L6522:
	cmn	r3, #108
	beq	.L6500
	cmn	r3, #104
	bne	.L6497
.L6500:
	mov	r0, r8
	bl	dev_kfree_skb_any
.L6506:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #28]
	mov	r0, r7
	str	r6, [r3, #4]
	str	r3, [r5, #36]
	str	r9, [r5, #40]
	str	r6, [r4, #28]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L6498:
	add	r1, r4, #120
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L6500
	movw	r3, #:lower16:system_wq
	add	r2, r4, #88
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	subs	r2, r0, #0
	bne	.L6500
	movw	r0, #:lower16:.LC470
	ldr	r1, [r4, #8]
	movt	r0, #:upper16:.LC470
	bl	printk
	b	.L6500
.L6503:
	mov	r1, r8
	add	r0, r4, #52
	bl	skb_queue_tail
	b	.L6508
.L6523:
	ldr	r2, [r4, #8]
	mov	r1, r10
	mov	r0, r4
	ldr	r3, [r2, #208]
	add	r3, r3, #1
	str	r3, [r2, #208]
	bl	_raw_spin_unlock_irqrestore
	b	.L6506
.L6524:
	ldr	r2, [r4, #8]
	mov	r1, r10
	mov	r0, r4
	ldr	r3, [r2, #236]
	add	r3, r3, #1
	str	r3, [r2, #236]
	bl	_raw_spin_unlock_irqrestore
	b	.L6506
.L6504:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r1, r10
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L6506
	.fnend
	.size	rx_complete, .-rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_open, %function
debug_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_sdio_open, .-debug_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_open, %function
debug_smd_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_smd_open, .-debug_smd_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_close, %function
modem_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	modem_close, .-modem_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_init, %function
qdss_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	qdss_function_init, .-qdss_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_init, %function
ptp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ptp_function_init, .-ptp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_rx_complete, %function
gbam_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_rx_complete, .-gbam_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_tx_complete, %function
gbam_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_tx_complete, .-gbam_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_debug_open, %function
serial_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #340]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	serial_debug_open, .-serial_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_rmnet_sdio_open, %function
debug_rmnet_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #340]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	debug_rmnet_sdio_open, .-debug_rmnet_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	dbg_rmnet_mux_open, %function
dbg_rmnet_mux_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #340]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	dbg_rmnet_mux_open, .-dbg_rmnet_mux_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_control_complete, %function
audio_control_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	audio_control_complete, .-audio_control_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_close, %function
f_midi_in_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_in_close, .-f_midi_in_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_start, %function
acc_hid_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_start, .-acc_hid_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_open, %function
acc_hid_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_open, .-acc_hid_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_rx_complete, %function
bam_data_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_rx_complete, .-bam_data_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_release, %function
fsg_lun_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	fsg_lun_release, .-fsg_lun_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_stop, %function
acc_hid_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_stop, .-acc_hid_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_close, %function
acc_hid_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_close, .-acc_hid_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_cleanup, %function
uasp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	uasp_function_cleanup, .-uasp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs.constprop.157, %function
ffs_do_descs.constprop.157:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	cmp	r0, #0
	ldr	r5, [sp, #16]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	clz	lr, r1
	lsr	lr, lr, #5
	moveq	lr, #1
	cmp	lr, #0
	bne	.L6560
	cmp	r2, #1
	bls	.L6561
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r2, r3
	bcc	.L6561
	mov	r4, r2
.L6547:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	sub	ip, ip, #4
	cmp	ip, #44
	ldrls	pc, [pc, ip, asl #2]
	b	.L6561
.L6550:
	.word	.L6549
	.word	.L6551
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6552
	.word	.L6561
	.word	.L6553
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6561
	.word	.L6554
.L6554:
	cmp	r3, #6
	beq	.L6557
.L6561:
	mvn	r0, #21
.L6544:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6552:
	cmp	r3, #5
	bne	.L6561
.L6557:
	adds	r1, r1, r3
	add	lr, lr, #1
	moveq	ip, #1
	movne	ip, #0
	sub	r4, r4, r3
	cmp	r0, lr
	movne	r3, ip
	orreq	r3, ip, #1
	cmp	r3, #0
	bne	.L6572
	cmp	r4, #1
	bls	.L6561
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r4, r3
	bcs	.L6547
	b	.L6561
.L6551:
	sub	ip, r3, #7
	tst	ip, #253
	bne	.L6561
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ands	ip, ip, #15
	beq	.L6561
	ldrh	r6, [r5, #184]
	cmp	ip, r6
	strhgt	ip, [r5, #184]	@ movhi
	b	.L6557
.L6549:
	cmp	r3, #9
	bne	.L6561
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ldrh	r6, [r5, #182]
	cmp	r6, ip
	addls	ip, ip, #1
	strhls	ip, [r5, #182]	@ movhi
	ldrb	ip, [r1, #8]	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L6557
.L6571:
	ldrh	r6, [r5, #180]
	uxth	ip, ip
	cmp	r6, ip
	strhcc	ip, [r5, #180]	@ movhi
	b	.L6557
.L6553:
	cmp	r3, #8
	bne	.L6561
	ldrb	ip, [r1, #7]	@ zero_extendqisi2
	cmp	ip, #0
	bne	.L6571
	b	.L6557
.L6572:
	sub	r0, r2, r4
	b	.L6544
.L6560:
	mov	r0, #0
	b	.L6544
	.fnend
	.size	ffs_do_descs.constprop.157, .-ffs_do_descs.constprop.157
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_cleanup, %function
audio_source_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	audio_source_function_cleanup, .-audio_source_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup.part.78, %function
gserial_cleanup.part.78:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r6, #3700]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	cmp	r3, #0
	beq	.L6575
	mov	r4, #0
.L6576:
	mov	r1, r4
	ldr	r0, [r6, #3704]
	add	r4, r4, #1
	bl	tty_unregister_device
	ldr	r3, [r6, #3700]
	cmp	r4, r3
	bcc	.L6576
	cmp	r3, #0
	beq	.L6575
	mov	r3, sp
	ldr	r5, .L6595
	mov	r8, #0
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L6577:
	mov	r0, r5
	bl	mutex_lock
	ldr	r4, [r5, #24]
	mov	r3, #0
	mov	r0, r5
	str	r3, [r5, #24]
	bl	mutex_unlock
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	bne	.L6578
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6593
.L6578:
	mov	r0, r4
	add	r7, r4, #20
	bl	_raw_spin_unlock_irq
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	mov	r3, #0
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L6582
.L6580:
	bl	_raw_spin_unlock_irq
	bl	schedule
.L6582:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r7
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	mov	r0, r4
	cmp	r3, #0
	bne	.L6580
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6580
	bl	_raw_spin_unlock_irq
	add	r1, sp, #4
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L6594
.L6583:
	mov	r0, r4
	add	r8, r8, #1
	bl	kfree
	ldr	r3, [r6, #3700]
	add	r5, r5, #28
	cmp	r8, r3
	bcc	.L6577
.L6575:
	mov	r4, #0
	ldr	r0, [r6, #3932]
	str	r4, [r6, #3700]
	bl	debugfs_remove_recursive
	ldr	r0, [r6, #3336]
	bl	destroy_workqueue
	ldr	r0, [r6, #3704]
	bl	tty_unregister_driver
	ldr	r0, [r6, #3704]
	bl	put_tty_driver
	str	r4, [r6, #3704]
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L6593:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6583
.L6594:
	movw	r0, #:lower16:.LC471
	movw	r1, #1477
	movt	r0, #:upper16:.LC471
	add	r8, r8, #1
	bl	warn_slowpath_null
	mov	r0, r4
	add	r5, r5, #28
	bl	kfree
	ldr	r3, [r6, #3700]
	cmp	r3, r8
	bhi	.L6577
	b	.L6575
.L6596:
	.align	2
.L6595:
	.word	.LANCHOR1+3708
	.fnend
	.size	gserial_cleanup.part.78, .-gserial_cleanup.part.78
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_cleanup, %function
acm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r3, #3704]
	cmp	r3, #0
	beq	.L6598
	bl	gserial_cleanup.part.78
.L6598:
	ldr	r0, [r4, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_function_cleanup, .-acm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_cleanup, %function
mass_storage_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	mass_storage_function_cleanup, .-mass_storage_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_cleanup, %function
rndis_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_cleanup, .-rndis_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_data_do_entity, %function
__ffs_data_do_entity:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #2
	beq	.L6609
	cmp	r0, #3
	beq	.L6610
	cmp	r0, #1
	beq	.L6612
	mov	r0, #0
	bx	lr
.L6612:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #182]
	cmp	r1, r2
	addls	r2, r2, #1
	strhls	r2, [r3, #182]	@ movhi
	bx	lr
.L6610:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #184]
	and	r2, r2, #15
	cmp	r2, r1
	strhgt	r2, [r3, #184]	@ movhi
	bx	lr
.L6609:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #180]
	cmp	r1, r2
	strhcc	r2, [r3, #180]	@ movhi
	bx	lr
	.fnend
	.size	__ffs_data_do_entity, .-__ffs_data_do_entity
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_playback_work, %function
f_audio_playback_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #8
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	mov	r3, r7
	mov	r6, r0
	ldr	r4, [r3, #16]!
	cmp	r4, r3
	beq	.L6625
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r1, r0
	mov	r0, r5
	sub	r10, r4, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r4, {r3, r6}
	ldr	r8, [r7, #-64]
	cmp	r6, #0
	str	r3, [sp, #4]
	ldr	fp, [r8, #168]
	beq	.L6626
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldrb	r2, [r5, #2240]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L6627
.L6617:
	lsl	r3, r6, #3
	mov	r5, #57344
	movt	r5, 65535
	str	r3, [sp, #8]
	mov	r3, sp
	and	r9, r3, r5
.L6622:
	ldr	r3, [fp, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r8
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L6619
	ands	r2, r2, #1
	bne	.L6619
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L6628
.L6619:
	ldr	r2, [fp, #80]
	mov	r0, #0
	ldr	r1, [sp, #4]
	cmp	r2, r0
	beq	.L6629
	ldr	r3, [sp, #8]
	udiv	r6, r3, r2
	ldr	r3, [r9, #8]
	str	r0, [r9, #8]
	ldr	r0, [r7, #-64]
	str	r3, [sp, #12]
	mov	r2, r6
	bl	snd_pcm_lib_write
	cmp	r6, r0
	mov	r2, r0
	bne	.L6630
	mov	r3, sp
	and	r5, r5, r3
	ldr	r3, [sp, #12]
	str	r3, [r5, #8]
.L6616:
	cmp	r10, #0
	beq	.L6613
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #-8]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree
.L6613:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6627:
	bl	gaudio_open_streams
	cmp	r0, #0
	moveq	r2, #1
	strbeq	r2, [r5, #2240]
	beq	.L6617
	movw	r0, #:lower16:.LC474
	ldr	r1, .L6631
	movt	r0, #:upper16:.LC474
	bl	printk
	b	.L6616
.L6628:
	mov	r2, r0
	movw	r0, #:lower16:.LC429
	ldr	r1, .L6631
	movt	r0, #:upper16:.LC429
	bl	printk
	movw	r0, #:lower16:.LC475
	ldr	r1, .L6631+4
	movt	r0, #:upper16:.LC475
	bl	printk
	b	.L6616
.L6630:
	movw	r0, #:lower16:.LC477
	ldr	r1, .L6631
	movt	r0, #:upper16:.LC477
	bl	printk
	ldr	r3, [sp, #12]
	str	r3, [r9, #8]
	b	.L6622
.L6629:
	movw	r0, #:lower16:.LC476
	ldr	r1, .L6631
	movt	r0, #:upper16:.LC476
	bl	printk
	b	.L6616
.L6626:
	movw	r0, #:lower16:.LC473
	ldr	r1, .L6631
	movt	r0, #:upper16:.LC473
	bl	printk
	b	.L6616
.L6625:
	movw	r0, #:lower16:.LC472
	ldr	r1, .L6631+4
	movt	r0, #:upper16:.LC472
	bl	printk
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6632:
	.align	2
.L6631:
	.word	.LANCHOR3-3952
	.word	.LANCHOR3-3976
	.fnend
	.size	f_audio_playback_work, .-f_audio_playback_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_in, %function
acc_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2520]
	cmn	r2, #108
	bne	.L6634
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r4, #100]
.L6634:
	add	r6, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #1660]
	add	r3, r4, #1648
	add	ip, r5, #36
	add	r3, r3, #8
	mov	r1, r0
	str	ip, [r4, #1660]
	mov	r0, r6
	str	r3, [r5, #36]
	str	r2, [r5, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1664
	mov	r3, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	r0, r0, #12
	mov	r2, #1
	ldr	lr, [sp, #12]
	mov	r1, #3
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	acc_complete_in, .-acc_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_indicate_status_msg, %function
rndis_indicate_status_msg:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	lsl	r5, r0, #4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	ldr	r8, .L6643
	sub	r4, r5, r0
	lsl	r4, r4, #2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	add	r7, r8, r4
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L6639
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r1
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L6640
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L6641
	add	r1, r3, #20
.L6638:
	movw	r2, #:lower16:.LANCHOR1
	sub	r5, r5, r9
	str	r1, [r3, #8]
	movt	r2, #:upper16:.LANCHOR1
	mov	r1, #20
	add	r2, r2, r5, lsl #2
	mov	r5, #0
	str	r1, [r3, #12]
	add	r4, r4, #52
	str	r5, [r3, #16]
	ldr	r0, [r2, #3692]
	add	r4, r8, r4
	str	r3, [r2, #3692]
	mov	r2, #7
	str	r4, [r3]
	str	r0, [r3, #4]
	str	r3, [r0]
	ldr	r3, [r3, #8]
	str	r2, [r3]
	stmib	r3, {r1, r6}
	str	r5, [r3, #12]
	str	r5, [r3, #16]
	ldr	r3, [r7, #44]
	ldr	r0, [r7, #48]
	blx	r3
	mov	r0, r5
.L6636:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6640:
	mov	r1, #36
	mov	r3, #16
	b	.L6638
.L6639:
	movw	r0, #65012
	movt	r0, 65535
	b	.L6636
.L6641:
	mvn	r0, #11
	b	.L6636
.L6644:
	.align	2
.L6643:
	.word	.LANCHOR1+3636
	.fnend
	.size	rndis_indicate_status_msg, .-rndis_indicate_status_msg
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_write, %function
rndis_proc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #12]
	.pad #12
	sub	sp, sp, #12
	str	r2, [sp, #4]
	ldr	r3, [r3, #32]
	ldr	r3, [r3, #-20]
	ldr	r10, [r3, #44]
	beq	.L6646
	mov	r9, #0
	mov	r6, #57344
	movw	r8, #:lower16:.LANCHOR1
	mov	fp, #12
	mov	r4, r1
	mov	r5, r9
	movt	r6, 65535
	movt	r8, #:upper16:.LANCHOR1
	movt	fp, 16385
	add	r7, r1, r2
.L6654:
	mov	r3, sp
	mov	r0, r4
	and	r2, r3, r6
	ldr	r1, [r2, #8]
	sub	r1, r1, #1
	.syntax divided
@ 1185 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/rndis.c" 1
	.ifnc r0,r0 ; .err ; .endif
	.ifnc r2,r2 ; .err ; .endif
	.ifnc r1,r1 ; .err ; .endif
	bl	__get_user_1
@ 0 "" 2
	.arm
	.syntax unified
	uxtb	r2, r2
	cmp	r0, #0
	sub	r2, r2, #48
	bne	.L6655
	cmp	r2, #52
	ldrls	pc, [pc, r2, asl #2]
	b	.L6648
.L6650:
	.word	.L6649
	.word	.L6649
	.word	.L6649
	.word	.L6649
	.word	.L6649
	.word	.L6649
	.word	.L6649
	.word	.L6649
	.word	.L6649
	.word	.L6649
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6651
	.word	.L6652
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6648
	.word	.L6651
	.word	.L6652
.L6652:
	ldrb	r0, [r10]	@ zero_extendqisi2
	mov	ip, #1
	mov	r1, fp
	rsb	r2, r0, r0, lsl #4
	add	r2, r8, r2, lsl #2
	str	ip, [r2, #3652]
	bl	rndis_indicate_status_msg
.L6653:
	add	r4, r4, #1
	cmp	r4, r7
	bne	.L6654
.L6646:
	ldr	r0, [sp, #4]
.L6645:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6651:
	ldrb	r0, [r10]	@ zero_extendqisi2
	mov	ip, #0
	mov	r1, #11
	movt	r1, 16385
	rsb	r2, r0, r0, lsl #4
	add	r2, r8, r2, lsl #2
	str	ip, [r2, #3652]
	bl	rndis_indicate_status_msg
	b	.L6653
.L6649:
	add	r5, r5, r5, lsl #2
	mov	r9, #1
	add	r5, r2, r5, lsl r9
	b	.L6653
.L6648:
	cmp	r9, #0
	strne	r5, [r10, #12]
	b	.L6653
.L6655:
	mvn	r0, #13
	b	.L6645
	.fnend
	.size	rndis_proc_write, .-rndis_proc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_complete, %function
f_audio_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [r1, #32]
	ldr	r7, [r1, #44]
	str	r3, [sp, #4]
	cmp	r7, r3
	bne	.L6690
	ldr	r3, [r6, #172]
	mov	r5, r0
	mov	r4, r1
	cmp	r3, r0
	beq	.L6693
	ldr	r3, [r6, #176]
	cmp	r3, r0
	beq	.L6694
	ldr	r5, [r6, #272]
	cmp	r5, #0
	beq	.L6664
	ldm	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy
	ldrh	r2, [sp, #4]
	mov	r0, r5
	ldrb	r1, [r6, #268]	@ zero_extendqisi2
	ldr	r3, [r5, #36]
	blx	r3
	str	r7, [r6, #272]
.L6664:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6693:
	ldr	r7, [r6, #184]
	cmp	r7, #0
	beq	.L6664
	movw	r8, #:lower16:.LANCHOR0
	ldr	r0, [r7, #4]
	movt	r8, #:upper16:.LANCHOR0
	ldr	r2, [r1, #48]
	ldr	r3, [r8, #1100]
	sub	r3, r3, r0
	cmp	r3, r2
	bcs	.L6670
	ldr	r1, [r6, #208]
	add	ip, r7, #8
	add	r2, r6, #204
	movw	r3, #:lower16:system_wq
	mov	r0, #4
	movt	r3, #:upper16:system_wq
	str	ip, [r6, #208]
	str	r2, [r7, #8]
	add	r2, r6, #188
	str	r1, [r7, #12]
	str	ip, [r1]
	ldr	r1, [r3]
	bl	queue_work_on
	ldr	r0, [r8, #1100]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L6671
	ldr	r2, [r4, #48]
	ldr	r0, [r0, #4]
.L6670:
	ldr	r3, [r7]
	ldr	r1, [r4]
	add	r0, r3, r0
	bl	memcpy
	ldr	ip, [r4, #48]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r7, #4]
	mov	r0, r5
	add	r3, r3, ip
	str	r3, [r7, #4]
	str	r7, [r6, #184]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L6664
	ldr	r1, .L6697
	movw	r0, #:lower16:.LC478
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC478
.L6692:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L6694:
	ldr	r7, [r6, #216]
	cmp	r7, #0
	beq	.L6695
.L6674:
	ldm	r7, {r1, r3}
	ldr	r0, [r4]
	ldr	r2, [r4, #48]
	add	r1, r1, r3
	bl	memcpy
	ldr	r1, [r4, #48]
	movw	r2, #:lower16:.LANCHOR0
	ldr	r3, [r7, #4]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1340]
	add	r3, r3, r1
	sub	r2, r2, r3
	str	r3, [r7, #4]
	ldr	r3, [r4, #48]
	cmp	r2, r3
	bcs	.L6676
	cmp	r7, #0
	beq	.L6677
	ldr	r0, [r7]
	bl	kfree
	mov	r3, #0
	mov	r0, r7
	str	r3, [r7]
	bl	kfree
.L6677:
	mov	r0, #0
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r6, #220
	str	r0, [r6, #216]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L6676:
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r2, #32
	mov	r0, r5
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L6664
	movw	r0, #:lower16:.LC478
	ldr	r1, .L6697+4
	movt	r0, #:upper16:.LC478
	ldr	r2, [r5, #4]
	b	.L6692
.L6695:
	add	r7, r6, #212
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r2, r6
	mov	r1, r0
	ldr	r3, [r2, #236]!
	cmp	r3, r2
	beq	.L6696
	ldr	ip, [r3]
	mov	r0, r7
	mov	r8, #256
	ldr	r2, [r3, #4]
	mov	lr, #512
	sub	r7, r3, #8
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r8, lr}
	str	r7, [r6, #216]
	bl	_raw_spin_unlock_irqrestore
	b	.L6674
.L6696:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r6, #220
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	b	.L6676
.L6671:
	ldr	r1, .L6697
	movw	r0, #:lower16:.LC26
	movt	r0, #:upper16:.LC26
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L6690:
	ldr	r1, .L6697+8
	movw	r0, #:lower16:.LC479
	mov	r2, r7
	movt	r0, #:upper16:.LC479
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L6698:
	.align	2
.L6697:
	.word	.LANCHOR3-3932
	.word	.LANCHOR3-3900
	.word	.LANCHOR3-3872
	.fnend
	.size	f_audio_complete, .-f_audio_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_resume, %function
rndis_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3348]
	ldr	r1, [r3, #3352]
	add	r2, r2, #216
	b	queue_work_on
	.fnend
	.size	rndis_qc_resume, .-rndis_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_suspend, %function
rndis_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3348]
	ldr	r1, [r3, #3352]
	add	r2, r2, #200
	b	queue_work_on
	.fnend
	.size	rndis_qc_suspend, .-rndis_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_set_interface, %function
do_set_interface:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	clz	r3, r1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	lsr	r3, r3, #5
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:bulk_in_complete
	strd	r10, [sp, #24]
	movw	r8, #:lower16:bulk_out_complete
	movt	r9, #:upper16:bulk_in_complete
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	movt	r8, #:upper16:bulk_out_complete
	str	r3, [sp, #4]
	mov	r3, #0
	str	r3, [sp]
.L6710:
	ldr	fp, [r4, #8]
	cmp	fp, #0
	beq	.L6702
	mov	r6, #0
	mov	r10, r6
.L6705:
	ldr	r5, [r4, #68]
	add	r5, r5, r6
	add	r6, r6, #32
	ldr	r1, [r5, #16]
	cmp	r1, #0
	beq	.L6703
	ldr	r0, [fp, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r5, #16]
.L6703:
	ldr	r1, [r5, #24]
	cmp	r1, #0
	beq	.L6704
	ldr	r0, [fp, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r5, #24]
.L6704:
	cmp	r6, #128
	bne	.L6705
	mov	r0, #0
	mov	r2, #1
	mov	r3, r0
	mov	r1, #3
	str	r0, [r4, #8]
	add	r0, r4, #16
	bl	__wake_up
.L6702:
	ldm	sp, {r2, r6}
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r6, #1
	bfc	r3, #5, #1
	cmp	r6, #0
	strb	r3, [r4, #144]
	bne	.L6701
	str	r7, [r4, #8]
.L6712:
	ldr	r10, [r7, #100]
	mov	r1, #32
	ldr	r5, [r4, #68]
	ldr	r3, [r10, #8]
	mov	r0, r10
	add	r5, r5, r6
	add	r6, r6, r1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r1, #32
	str	r0, [r5, #16]
	beq	.L6728
	ldr	r10, [r7, #104]
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #24]
	beq	.L6728
	ldr	r3, [r5]
	cmp	r6, #128
	str	r3, [r0]
	ldr	r2, [r5, #16]
	str	r3, [r2]
	ldr	r3, [r5, #24]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r9, [r3, #28]
	ldr	r3, [r5, #24]
	str	r8, [r3, #28]
	bne	.L6712
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	orr	r3, r3, #32
	cmp	r2, #0
	strb	r3, [r4, #144]
	beq	.L6714
	mov	r2, #0
	mov	r0, #10496
	mov	r1, r2
	movt	r0, 6
.L6713:
	ldr	r3, [r4, #100]
	add	r1, r1, #1
	add	r3, r3, r2
	add	r2, r2, #400
	str	r0, [r3, #36]
	ldr	r3, [r4, #92]
	cmp	r3, r1
	bhi	.L6713
.L6714:
	mov	r3, #0
	str	r3, [sp]
.L6701:
	ldr	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6728:
	ldr	r0, [r4]
	mvn	r3, #11
	movw	r1, #:lower16:.LC480
	movt	r1, #:upper16:.LC480
	str	r3, [sp]
	ldr	r2, [r10, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L6710
	.fnend
	.size	do_set_interface, .-do_set_interface
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_unbind, %function
qdss_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r0, [r1, #196]
	ldr	r5, [r3]
	bl	flush_workqueue
	movw	r0, #:lower16:.LC348
	movt	r0, #:upper16:.LC348
	ldr	r1, [r5, #28]
	bl	strcmp
	subs	r1, r0, #0
	beq	.L6754
.L6731:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L6735
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L6736
	bl	kfree
	ldr	r3, [r5, #20]
.L6735:
	cmp	r3, #2
	bhi	.L6736
.L6730:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6736:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L6730
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L6754:
	ldr	r0, [r4, #108]
	bl	dwc3_tx_fifo_resize_request
	b	.L6731
	.fnend
	.size	qdss_unbind, .-qdss_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_data_complete, %function
audio_data_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r6, r4, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #100]
	add	r2, r5, #36
	add	ip, r4, #96
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #100]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L6755
	ldr	r6, [r5, #44]
	cmp	r6, #0
	bne	.L6755
	ldrd	r2, [r4, #124]
	ldr	r1, [r5, #48]
	add	r3, r3, r1
	cmp	r3, r2
	str	r3, [r4, #128]
	bcs	.L6762
.L6757:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	audio_send
.L6755:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6762:
	ldr	r0, [r4, #92]
	bl	snd_pcm_period_elapsed
	str	r6, [r4, #128]
	b	.L6757
	.fnend
	.size	audio_data_complete, .-audio_data_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_unbind, %function
audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r7, r1, #108
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	add	r10, r1, #96
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	b	.L6764
.L6767:
	ldr	fp, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L6764:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #96]
	mov	r3, r0
	mov	r0, r7
	mov	r1, r3
	cmp	r4, r10
	sub	r6, r4, #36
	beq	.L6769
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L6767
.L6766:
	ldr	r0, [r5, #84]
	bl	snd_card_free_when_closed
	mov	r3, #0
	str	r3, [r5, #84]
	str	r3, [r5, #88]
	str	r3, [r5, #92]
	str	r3, [r5, #104]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6769:
	bl	_raw_spin_unlock_irqrestore
	b	.L6766
	.fnend
	.size	audio_unbind, .-audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_in, %function
ccid_bulk_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2236]
	cmp	r2, #0
	movne	r3, #1
	add	r6, r4, #92
	mov	r0, r6
	strne	r3, [r4, #148]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #196]
	add	r2, r5, #36
	add	ip, r4, #192
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #196]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #172
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_in, .-ccid_bulk_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_unbind, %function
ecm_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, [r4, #3348]
	str	lr, [sp, #12]
	bl	kfree
	ldr	r0, [r4, #3352]
	mov	r3, #0
	str	r3, [r4, #3348]
	cmp	r0, r3
	beq	.L6777
	bl	destroy_workqueue
.L6777:
	ldr	r3, [r6, #24]
	mov	r2, #0
	str	r2, [r4, #3352]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L6784
.L6778:
	cmp	r3, #2
	bls	.L6779
	ldr	r0, [r5, #8]
	bl	kfree
.L6779:
	ldr	r0, [r5, #16]
	bl	kfree
	ldr	r3, [r5, #148]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r5, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r5
	str	r2, [r3, #1356]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L6784:
	ldr	r0, [r5, #12]
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L6778
	.fnend
	.size	ecm_qc_unbind, .-ecm_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tohost, %function
ghsic_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #136
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #88
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r5, #-128]
	mov	r2, r0
	cmp	r8, #0
	beq	.L6789
	movw	r3, #16960
	movw	fp, #:lower16:.LANCHOR0
	movt	r3, 15
	movw	r10, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR1
	str	r3, [sp, #12]
	sub	r3, r5, #112
	str	r3, [sp, #4]
.L6788:
	ldr	r3, [r5, #-112]
	ldr	r1, [sp, #4]
	cmp	r3, r1
	beq	.L6789
.L6797:
	mov	r3, r5
	ldr	r6, [r3, #-104]!
	cmp	r6, r3
	beq	.L6789
	cmp	r6, #0
	beq	.L6789
	ldr	r3, [r5, #-96]
	mov	r1, #0
	mov	ip, #256
	sub	r3, r3, #1
	str	r3, [r5, #-96]
	ldm	r6, {r0, r3}
	str	r1, [r6]
	str	r1, [r6, #4]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r4, [r5, #-112]
	str	r6, [r4, #-4]
	ldr	r0, [r6, #172]
	sub	r9, r4, #36
	ldrb	r3, [r4, #-10]	@ zero_extendqisi2
	str	r0, [r4, #-36]
	ldr	r0, [r6, #80]
	orr	r3, r3, #2
	str	r0, [r4, #-32]
	strb	r3, [r4, #-10]
	ldr	r3, [r5, #48]
	ldr	r0, [fp, #1376]
	add	r3, r3, #1
	cmp	r3, r0
	mov	r0, #512
	str	r3, [r5, #48]
	ldrb	r3, [r4, #-10]	@ zero_extendqisi2
	bfieq	r3, r1, #0, #1
	orrne	r3, r3, #1
	strbeq	r3, [r4, #-10]
	strbne	r3, [r4, #-10]
	streq	r1, [r5, #48]
	ldm	r4, {r1, r3}
	str	r3, [r1, #4]
	str	r1, [r3]
	str	ip, [r4]
	ldr	r3, [r10, #3612]
	str	r0, [r4, #4]
	cmp	r3, #0
	bne	.L6816
.L6792:
	mov	r1, r2
	mov	r0, r7
	str	r3, [r6, #44]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r9, #0
	mov	r2, r0
	bne	.L6817
	ldr	r3, [r5, #56]
	ldr	r1, [fp, #508]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r5, #56]
	beq	.L6788
	ldr	r1, [r5, #-96]
	ldr	r3, [fp, #1380]
	cmp	r1, r3
	bhi	.L6788
	add	r1, r5, #28
	mov	r0, #2
	str	r2, [sp, #8]
	bl	_test_and_clear_bit
	cmp	r0, #0
	ldr	r2, [sp, #8]
	beq	.L6788
	ldr	r1, [r5, #-96]
	ldr	r3, [r5, #64]
	str	r1, [r5, #80]
	ldr	r1, [sp, #4]
	add	r3, r3, #1
	str	r3, [r5, #64]
	ldr	r3, [r5, #-112]
	cmp	r3, r1
	bne	.L6797
.L6789:
	mov	r1, r2
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6816:
	add	r0, sp, #16
	str	r2, [sp, #8]
	bl	do_gettimeofday
	ldrd	r2, [sp, #12]
	ldr	r1, [sp, #20]
	ubfx	r3, r3, #0, #12
	mla	r3, r2, r3, r1
	ldr	r2, [sp, #8]
	b	.L6792
.L6817:
	movw	r0, #:lower16:.LC403
	ldr	r1, .L6818
	str	r2, [sp, #8]
	movt	r0, #:upper16:.LC403
	bl	printk
	ldr	r3, [r5, #-112]
	mov	r0, r6
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #4]
	str	r3, [r4, #4]
	str	r4, [r5, #-112]
	bl	dev_kfree_skb_any
	ldr	r2, [sp, #8]
	b	.L6789
.L6819:
	.align	2
.L6818:
	.word	.LANCHOR3-3852
	.fnend
	.size	ghsic_data_write_tohost, .-ghsic_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_probe, %function
ghsic_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r6, [r5, #1456]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L6821
	ldr	r4, [r5, #1460]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6822
	cmp	r6, #1
	bls	.L6821
	ldr	r4, [r5, #1564]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6822
	cmp	r6, #2
	beq	.L6821
	ldr	r4, [r5, #1668]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6822
	cmp	r6, #3
	beq	.L6821
	ldr	r4, [r5, #1772]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6822
.L6821:
	movw	r0, #:lower16:.LC104
	mvn	r2, #21
	ldr	r1, .L6848
	movt	r0, #:upper16:.LC104
	bl	printk
	mvn	r0, #21
.L6820:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6822:
	mov	r0, #1
	add	r1, r4, #180
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L6820
	add	r2, r4, #88
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mov	r0, #0
	b	.L6820
.L6849:
	.align	2
.L6848:
	.word	.LANCHOR3-3828
	.fnend
	.size	ghsic_data_probe, .-ghsic_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_probe, %function
ghsic_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r5, #1036]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L6851
	ldr	r4, [r5, #1040]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6852
	cmp	r6, #1
	bls	.L6851
	ldr	r4, [r5, #1144]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6852
	cmp	r6, #2
	beq	.L6851
	ldr	r4, [r5, #1248]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6852
	cmp	r6, #3
	beq	.L6851
	ldr	r4, [r5, #1352]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6852
.L6851:
	movw	r0, #:lower16:.LC104
	mvn	r2, #21
	ldr	r1, .L6881
	movt	r0, #:upper16:.LC104
	bl	printk
	mvn	r0, #21
.L6850:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6852:
	add	r1, r4, #84
	mov	r0, #1
	add	r5, r4, #4
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #8]
	mov	r6, r0
	cmp	r3, #0
	beq	.L6855
	add	r2, r4, #16
	mov	r0, #4
	ldr	r1, [r4, #12]
	bl	queue_work_on
.L6855:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L6850
.L6882:
	.align	2
.L6881:
	.word	.LANCHOR3-3808
	.fnend
	.size	ghsic_ctrl_probe, .-ghsic_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_notify_complete, %function
mbim_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r1]
	ldr	r4, [r1, #32]
	add	r6, r4, #204
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #44]
	cmn	r3, #104
	beq	.L6885
	cmp	r3, #0
	bne	.L6921
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #168]
.L6887:
	ldr	r5, [r4, #160]
	cmp	r5, #0
	beq	.L6899
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6901
	cmp	r3, #3
	bne	.L6922
	ldr	r3, [r4, #168]
	cmp	r3, #0
	ble	.L6899
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	bne	.L6923
.L6899:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock
.L6901:
	ldr	r3, [r4, #168]
	cmp	r3, #0
	ble	.L6899
	movw	r0, #:lower16:.LC483
	ldr	r1, .L6927
	movt	r0, #:upper16:.LC483
	bl	printk
	b	.L6899
.L6922:
	ldr	r3, [r5]
	mvn	r2, #94
	add	r7, r4, #168
	strb	r2, [r3]
	ldrb	r2, [r4, #196]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	.syntax divided
@ 45 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r6
	ldr	r3, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	beq	.L6899
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC485
	mov	r2, r5
	ldr	r1, .L6927
	movt	r0, #:upper16:.LC485
	bl	printk
	b	.L6899
.L6921:
	cmn	r3, #108
	beq	.L6885
	movw	r0, #:lower16:.LC482
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldr	r1, .L6927+4
	movt	r0, #:upper16:.LC482
	bl	printk
	b	.L6887
.L6885:
	mov	r3, #0
	movw	r0, #:lower16:.LC481
	ldr	r1, .L6927+4
	movt	r0, #:upper16:.LC481
	mov	r7, r4
	strb	r3, [r4, #164]
	str	r3, [r4, #168]
	bl	printk
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r7, #208]!
	cmp	r3, r7
	beq	.L6888
	ldr	r5, [r3]
	mov	r10, #256
	mov	r9, #512
	mov	r8, r5
	b	.L6889
.L6924:
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, fp
	bl	kfree
	cmp	r7, r8
	ldr	r5, [r5]
	beq	.L6888
.L6891:
	mov	r3, r8
	mov	r8, r5
.L6889:
	ldr	r2, [r3, #4]
	subs	fp, r3, #8
	str	r2, [r5, #4]
	str	r5, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	bne	.L6924
	cmp	r7, r8
	ldr	r5, [r5]
	bne	.L6891
.L6888:
	mov	r8, r4
	ldr	r3, [r8, #216]!
	cmp	r3, r8
	beq	.L6892
	ldr	r5, [r3]
	mov	fp, #256
	mov	r10, #512
	mov	r9, r5
	b	.L6893
.L6925:
	ldr	r0, [r3, #-8]
	bl	kfree
	ldr	r1, [sp, #4]
	mov	r0, r1
	bl	kfree
	cmp	r9, r8
	ldr	r5, [r5]
	beq	.L6892
.L6895:
	mov	r3, r9
	mov	r9, r5
.L6893:
	ldr	r2, [r3, #4]
	subs	r1, r3, #8
	str	r1, [sp, #4]
	str	r2, [r5, #4]
	str	r5, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	bne	.L6925
	cmp	r9, r8
	ldr	r5, [r5]
	bne	.L6895
.L6892:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L6904
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L6926
.L6896:
	mov	r8, #16
	mov	r9, #0
	strd	r8, [r3]
.L6897:
	ldr	r2, [r4, #212]
	add	r1, r3, #8
	mov	r0, r6
	str	r1, [r4, #212]
	str	r7, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r2]
	bl	_raw_spin_unlock
	add	r0, r4, #108
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r0, r6
	bl	_raw_spin_lock
	b	.L6887
.L6904:
	mov	r3, #16
	b	.L6896
.L6926:
	mvn	r3, #11
	b	.L6897
.L6923:
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC484
	mov	r2, r5
	ldr	r1, .L6927
	movt	r0, #:upper16:.LC484
	bl	printk
	b	.L6899
.L6928:
	.align	2
.L6927:
	.word	.LANCHOR3-3764
	.word	.LANCHOR3-3788
	.fnend
	.size	mbim_notify_complete, .-mbim_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_poll, %function
conn_gadget_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	beq	.L6931
	ldr	r3, [r5]
	mov	r6, r0
	add	r1, r4, #144
	adds	r2, r3, #0
	movne	r2, #1
	cmn	r4, #144
	cmpne	r3, #0
	beq	.L6932
	mov	r2, r5
	blx	r3
	ldr	r3, [r5]
	adds	r2, r3, #0
	movne	r2, #1
.L6932:
	adds	r0, r4, #156
	add	r1, r4, #156
	movne	r0, #1
	tst	r2, r0
	beq	.L6931
	mov	r2, r5
	mov	r0, r6
	blx	r3
.L6931:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2516]
	cmp	r3, #0
	beq	.L6947
	ldr	r5, [r3, #100]
	cmp	r5, #0
	beq	.L6948
	add	r3, r4, #108
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L6949
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r5, #0
.L6938:
	add	r6, r4, #88
	add	r4, r4, #120
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r6
	cmp	r3, r4
	beq	.L6939
	orr	r5, r5, #260
	bl	_raw_spin_unlock_irqrestore
.L6929:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6949:
	ldr	r5, [r4, #168]
	ldr	r2, [r4, #172]
	cmp	r5, r2
	movne	r5, #65
	moveq	r5, #0
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L6938
.L6939:
	bl	_raw_spin_unlock_irqrestore
	b	.L6929
.L6948:
	movw	r0, #:lower16:.LC486
	ldr	r1, .L6950
	movt	r0, #:upper16:.LC486
	bl	printk
	b	.L6929
.L6947:
	movw	r0, #:lower16:.LC281
	ldr	r1, .L6950
	mov	r5, #40
	movt	r0, #:upper16:.LC281
	bl	printk
	b	.L6929
.L6951:
	.align	2
.L6950:
	.word	.LANCHOR3-3748
	.fnend
	.size	conn_gadget_poll, .-conn_gadget_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_read, %function
ffs_ep0_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 1, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	mov	r9, r0
	strd	r10, [sp, #24]
	.setfp fp, sp, #32
	add	fp, sp, #32
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r6]
	str	r1, [fp, #-72]
	ldr	r5, [r0, #124]
	str	r2, [fp, #-64]
	str	r3, [fp, #-40]
	add	r4, r5, #100
	.syntax divided
@ 193 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L6953:
	.syntax divided
@ 170 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r4]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L6953
	.syntax divided
@ 195 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	beq	.L6985
	ldr	r3, [r9, #32]
	add	r8, r5, #4
	mov	r0, r8
	tst	r3, #2048
	bne	.L7011
	bl	mutex_lock_interruptible
	subs	r10, r0, #0
	blt	.L6952
.L6958:
	ldr	r3, [r5, #96]
	cmp	r3, #2
	mvnne	r10, #76
	movne	r9, #0
	beq	.L7012
.L6956:
	mov	r0, r8
	bl	mutex_unlock
	mov	r0, r9
	bl	kfree
.L6952:
	ldr	r2, [fp, #-40]
	mov	r0, r10
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L7013
	sub	sp, fp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7011:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L6958
	mvn	r10, #10
	b	.L6952
.L7012:
	add	r3, r5, #120
	mov	r0, r3
	str	r3, [fp, #-68]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L6959:
	.syntax divided
@ 170 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r10, [r4]
	mov	r7, #0
	teq	r10, #2
	strexeq r7, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r7, #0
	bne	.L6959
	.syntax divided
@ 195 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r10, #1
	beq	.L6961
	bcc	.L6962
	cmp	r10, #2
	mov	r9, r7
	mvneq	r10, #42
	mvnne	r10, #76
.L6960:
	ldr	r0, [fp, #-68]
	bl	_raw_spin_unlock_irq
	b	.L6956
.L6962:
	ldr	r2, [fp, #-64]
	movw	r3, #43691
	movt	r3, 43690
	umull	r2, r3, r3, r2
	lsrs	r3, r3, #3
	str	r3, [fp, #-76]
	beq	.L6989
	ldr	r3, [r9, #32]
	ldrh	r9, [r5, #108]
	tst	r3, #2048
	bne	.L7014
	cmp	r9, #0
	bne	.L6965
	mov	r4, #57344
	mov	r3, sp
	str	r9, [fp, #-60]
	movt	r4, 65535
	str	r9, [fp, #-56]
	movw	r1, #:lower16:autoremove_wake_function
	and	r2, r3, r4
	str	r9, [fp, #-52]
	sub	r10, fp, #48
	str	r9, [fp, #-48]
	mov	r0, #1
	movt	r1, #:upper16:autoremove_wake_function
	mov	r7, r0
	str	r9, [fp, #-44]
	ldr	ip, [r2, #12]
	add	r9, r5, #124
	str	r0, [fp, #-60]
	mov	r2, r10
	str	ip, [fp, #-56]
	str	r1, [fp, #-52]
	str	r10, [fp, #-48]
	str	r10, [fp, #-44]
	b	.L6969
.L7015:
	ldr	r0, [fp, #-68]
	bl	_raw_spin_unlock_irq
	bl	schedule
	ldr	r0, [fp, #-68]
	bl	_raw_spin_lock_irq
	ldrh	r2, [r5, #108]
	cmp	r2, #0
	ldr	r2, [fp, #-48]
	bne	.L6968
.L6969:
	cmp	r2, r10
	bne	.L6966
	ldr	r2, [r5, #128]
	str	r9, [fp, #-48]
	str	r10, [r5, #128]
	str	r2, [fp, #-44]
	str	r10, [r2]
.L6966:
	mov	r3, sp
	and	r2, r3, r4
	ldr	r1, [r2, #12]
	str	r7, [r1]
	.syntax divided
@ 635 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r2, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	ands	r3, r2, #1
	str	r3, [fp, #-64]
	beq	.L7015
	mov	r3, sp
	ldr	r1, [fp, #-48]
	mov	ip, #256
	and	r4, r4, r3
	ldr	r3, [fp, #-44]
	mov	r0, #512
	mov	r2, #0
	mvn	r10, #3
	mov	r9, r2
	str	r3, [r1, #4]
	str	r1, [r3]
	str	ip, [fp, #-48]
	str	r0, [fp, #-44]
	ldr	r1, [r4, #12]
	str	r2, [r1]
	b	.L6960
.L6961:
	ldrsb	r3, [r5, #112]
	cmp	r3, #0
	blt	.L7016
	ldrh	r7, [r5, #118]
	ldr	r0, [fp, #-68]
	ldr	r3, [fp, #-64]
	cmp	r7, r3
	movcs	r7, r3
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	beq	.L6993
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc
	subs	r9, r0, #0
	beq	.L7017
.L6980:
	ldr	r0, [fp, #-68]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L6981:
	.syntax divided
@ 170 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r4]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L6981
	.syntax divided
@ 195 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	mvneq	r10, #42
	beq	.L6960
	ldr	r4, [r5, #32]
	ldrh	r3, [r5, #118]
	ldr	r0, [fp, #-68]
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	cmp	r7, r3
	movcs	r3, #0
	movcc	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r4, #26]
	bl	_raw_spin_unlock_irq
	cmp	r9, #0
	str	r9, [r4]
	str	r7, [r4, #4]
	beq	.L7018
.L6982:
	ldr	r3, [r5]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r4
	str	r0, [r5, #36]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	blt	.L6956
	add	r0, r5, #36
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	bne	.L7019
	ldr	r10, [r5, #52]
	str	r0, [r5, #100]
	cmp	r10, #0
	ble	.L6956
	mov	r2, r7
	mov	r1, r9
	ldr	r0, [fp, #-72]
	bl	__copy_to_user
	cmp	r0, #0
	mvnne	r10, #13
	b	.L6956
.L7014:
	cmp	r9, #0
	bne	.L6965
	mvn	r10, #10
	b	.L6960
.L7016:
	ldr	r0, [fp, #-68]
	bl	_raw_spin_unlock_irq
	ldrh	r9, [r5, #110]
	cmp	r9, #0
	mvneq	r10, #2
	beq	.L6956
	ldr	r2, [r5]
	mov	r1, r10
	mov	r9, r7
	mvn	r10, #50
	ldr	r0, [r2, #4]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #24]
	blx	r2
	str	r7, [r5, #100]
	b	.L6956
.L6968:
	mov	r3, sp
	mov	r0, #256
	and	r4, r4, r3
	ldr	r3, [fp, #-44]
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r2, [fp, #-64]
	strd	r0, [fp, #-48]
	ldr	r3, [r4, #12]
	str	r2, [r3]
	ldrh	r9, [r5, #108]
.L6965:
	ldr	r3, [fp, #-76]
	mov	r4, sp
	cmp	r9, r3
	movcc	r10, r9
	movcs	r10, r3
	add	r7, r10, r10, lsl #1
	lsl	r7, r7, #2
	add	r2, r7, #7
	cmp	r7, #0
	bic	r2, r2, #7
	sub	sp, sp, r2
	mov	r9, sp
	beq	.L6970
	mov	r1, r7
	mov	r0, sp
	bl	__memzero
.L6970:
	ldrb	r2, [r5, #104]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r9, #8]
	bne	.L6971
	ldrd	r0, [r5, #112]
	mov	r2, #1
	str	r0, [r9]	@ unaligned
	str	r1, [r9, #4]	@ unaligned
	str	r2, [r5, #100]
.L6971:
	cmp	r10, #1
	bls	.L6972
	ldrb	r2, [r5, #105]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r9, #20]
	bne	.L6973
	ldrd	r0, [r5, #112]
	mov	r2, #1
	str	r0, [r9, #12]	@ unaligned
	str	r1, [r9, #16]	@ unaligned
	str	r2, [r5, #100]
.L6973:
	cmp	r10, #2
	beq	.L6972
	ldrb	r2, [r5, #106]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r9, #32]
	bne	.L6974
	ldrd	r0, [r5, #112]
	mov	r2, #1
	str	r0, [r9, #24]	@ unaligned
	str	r1, [r9, #28]	@ unaligned
	str	r2, [r5, #100]
.L6974:
	cmp	r10, #3
	beq	.L6972
	ldrb	r2, [r5, #107]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r9, #44]
	bne	.L6972
	ldrd	r0, [r5, #112]
	mov	r2, #1
	str	r0, [r9, #36]	@ unaligned
	str	r1, [r9, #40]	@ unaligned
	str	r2, [r5, #100]
.L6972:
	ldrh	r2, [r5, #108]
	cmp	r10, r2
	movcs	r3, #0
	strhcs	r3, [r5, #108]	@ movhi
	bcs	.L6977
	sub	r2, r2, r10
	add	r0, r5, #104
	uxth	r2, r2
	add	r1, r0, r10
	strh	r2, [r5, #108]	@ movhi
	bl	memmove
.L6977:
	ldr	r0, [fp, #-68]
	bl	_raw_spin_unlock_irq
	mov	r0, r8
	bl	mutex_unlock
	mov	r2, r7
	mov	r1, r9
	ldr	r0, [fp, #-72]
	bl	__copy_to_user
	cmp	r0, #0
	mov	sp, r4
	moveq	r10, r7
	mvnne	r10, #13
	b	.L6952
.L6985:
	mvn	r10, #42
	b	.L6952
.L6989:
	mov	r9, r3
	mvn	r10, #21
	b	.L6960
.L7018:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r4]
	b	.L6982
.L7017:
	mvn	r10, #11
	b	.L6956
.L6993:
	mov	r9, r7
	b	.L6980
.L7019:
	ldr	r2, [r5]
	mov	r1, r4
	mvn	r10, #3
	ldr	r0, [r2, #4]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L6956
.L7013:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_ep0_read, .-ffs_ep0_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_in, %function
adb_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #3424]
	cmp	r2, #0
	movne	r3, #1
	add	r6, r4, #88
	mov	r0, r6
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	add	r2, r5, #36
	add	ip, r4, #120
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #124]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #140
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	adb_complete_in, .-adb_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_unbind, %function
mbim_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, r1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r6, [r1, #136]	@ zero_extendqisi2
	add	r6, r5, r6, lsl #2
	ldr	r0, [r6, #3348]
	bl	kfree
	ldr	r0, [r5, #3352]
	mov	r3, #0
	str	r3, [r6, #3348]
	cmp	r0, r3
	beq	.L7027
	bl	destroy_workqueue
.L7027:
	ldr	r3, [r7, #24]
	mov	r2, #0
	str	r2, [r5, #3352]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L7034
.L7028:
	cmp	r3, #2
	bls	.L7029
	ldr	r0, [r4, #8]
	bl	kfree
.L7029:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #190]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7034:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L7028
	.fnend
	.size	mbim_unbind, .-mbim_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_remove, %function
android_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L7070
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	str	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR1
	str	lr, [sp, #20]
	ldr	r7, [r0, #92]
	ldr	r1, [r6, #2244]
	cmp	r7, #0
	ldrbne	r2, [r7, #8]	@ zero_extendqisi2
	moveq	r2, r7
	cmp	r1, r5
	sub	r4, r1, #424
	beq	.L7037
	ldr	r3, [r1, #-376]
	cmp	r3, #0
	beq	.L7037
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L7038
	b	.L7037
.L7039:
	ldr	r3, [r3, #-376]
	cmp	r3, #0
	beq	.L7037
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L7037
.L7038:
	ldr	r3, [r4, #424]
	cmp	r3, r5
	sub	r4, r3, #424
	bne	.L7039
.L7037:
	cmp	r4, #0
	beq	.L7040
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #1384]
	cmp	r1, #0
	beq	.L7041
	ldr	r8, .L7070+4
.L7042:
	ldr	r0, [r4, #12]
	bl	device_remove_file
	ldr	r1, [r8], #4
	cmp	r1, #0
	bne	.L7042
.L7041:
	ldr	r3, [r4, #12]
	ldr	r0, [r6, #3584]
	ldr	r1, [r3, #296]
	bl	device_destroy
	cmp	r7, #0
	beq	.L7043
	ldr	r3, [r7, #4]
	cmp	r3, #0
	bne	.L7068
.L7043:
	ldr	r3, [r6, #3580]
	mov	lr, #256
	mov	ip, #512
	ldr	r1, [r4, #424]
	mov	r0, r4
	ldr	r2, [r4, #428]
	sub	r3, r3, #1
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [r4, #424]
	str	ip, [r4, #428]
	str	r3, [r6, #3580]
	bl	kfree
	ldr	r1, [r6, #2244]
.L7040:
	cmp	r1, r5
	beq	.L7069
.L7045:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7068:
	add	r0, r4, #64
	bl	pm_qos_remove_request
	b	.L7043
.L7069:
	ldr	r0, [r6, #3584]
	bl	class_destroy
	ldr	r3, .L7070+8
	mov	r2, #0
	ldr	r0, [r6, #2252]
	str	r2, [r6, #3584]
	cmp	r0, r3
	bne	.L7045
	sub	r0, r0, #348
	bl	usb_gadget_unregister_driver
	b	.L7045
.L7071:
	.align	2
.L7070:
	.word	.LANCHOR1+2244
	.word	.LANCHOR0+1388
	.word	.LANCHOR0+1460
	.fnend
	.size	android_remove, .-android_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_unbind, %function
composite_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r9, r0, #32
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r0, [sp, #4]
	mov	r0, r9
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r7, r0
	cmp	r3, #0
	bne	.L7096
.L7073:
	add	r8, r7, #36
	mov	r6, #256
.L7078:
	ldr	r4, [r7, #36]
	cmp	r4, r8
	beq	.L7097
.L7079:
	ldrd	r0, [r4]
	mov	r3, #512
	sub	r10, r4, #28
	mov	fp, r3
	add	r5, r4, #8
	str	r1, [r0, #4]
	str	r0, [r1]
	str	r6, [r4]
	str	r3, [r4, #4]
	b	.L7076
.L7077:
	ldm	r1, {r0, r3}
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r1, #-36]
	stm	r1, {r6, fp}
	cmp	r3, #0
	bne	.L7098
.L7076:
	ldr	r1, [r4, #8]
	cmp	r1, r5
	bne	.L7077
	ldr	r3, [r4, #-16]
	cmp	r3, #0
	beq	.L7078
	mov	r0, r10
	blx	r3
	ldr	r4, [r7, #36]
	cmp	r4, r8
	bne	.L7079
.L7097:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #2252]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L7080
	mov	r0, r7
	blx	r3
.L7080:
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L7081
	ldr	r0, [r3]
	bl	kfree
	ldr	r3, [sp, #4]
	ldr	r1, [r7, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L7081:
	ldr	r1, .L7099
	mov	r0, r9
	bl	device_remove_file
	mov	r0, r7
	bl	kfree
	mov	r0, r9
	mov	r1, #0
	bl	dev_set_drvdata
	mov	r3, #0
	str	r3, [r4, #2252]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7098:
	sub	r1, r1, #72
	mov	r0, r10
	blx	r3
	b	.L7076
.L7096:
	movw	r0, #:lower16:.LC487
	movw	r1, #1556
	movt	r0, #:upper16:.LC487
	bl	warn_slowpath_null
	b	.L7073
.L7100:
	.align	2
.L7099:
	.word	.LANCHOR0+1504
	.fnend
	.size	composite_unbind, .-composite_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_bind, %function
composite_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r6, #28]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L7118
	mov	r2, #68
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7147
.L7102:
	mov	r3, #0
	add	r7, r5, #32
	str	r5, [r4]
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4, #60]
	bl	dev_set_drvdata
	add	r3, r4, #36
	mov	r1, #208
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #4]
	beq	.L7104
	ldr	r0, [r6, #48]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L7105
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L7105:
	str	r0, [r8]
	ldr	r2, [r4, #4]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L7104
	movw	r3, #:lower16:composite_setup_complete
	movw	r6, #:lower16:.LANCHOR1
	movt	r3, #:upper16:composite_setup_complete
	movt	r6, #:upper16:.LANCHOR1
	ldr	r0, [r6, #2252]
	str	r3, [r2, #28]
	ldr	r2, [r5, #4]
	mov	r3, #4096
	str	r4, [r2]
	ldr	r1, [r4]
	str	r3, [r4, #8]
	str	r0, [r4, #44]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L7106
	mov	r0, #0
.L7107:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L7107
.L7106:
	mov	r2, #0
	mov	r0, r4
	ldr	r3, [r6, #3936]
	str	r2, [r6, #3604]
	blx	r3
	subs	r8, r0, #0
	bge	.L7148
.L7108:
	mov	r0, r5
	bl	composite_unbind
.L7101:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7104:
	mvn	r8, #11
	b	.L7108
.L7118:
	mov	r4, #16
	b	.L7102
.L7147:
	mvn	r8, #11
	b	.L7101
.L7148:
	ldr	r1, [r6, #2252]
	movw	r3, #3940
	ldrh	r2, [r6, r3]
	movw	r3, #3942
	ldrh	r3, [r6, r3]
	ldr	r1, [r1, #12]
	cmp	r2, #0
	ldr	lr, [r1, #4]	@ unaligned
	ldr	ip, [r1, #8]	@ unaligned
	ldr	r0, [r1, #12]	@ unaligned
	ldr	r8, [r1]	@ unaligned
	str	r8, [r4, #17]	@ unaligned
	str	lr, [r4, #21]	@ unaligned
	str	ip, [r4, #25]	@ unaligned
	str	r0, [r4, #29]	@ unaligned
	ldrh	r1, [r1, #16]	@ unaligned
	movw	r0, #:lower16:.LC488
	strhne	r2, [r4, #25]	@ unaligned
	cmp	r3, #0
	movt	r0, #:upper16:.LC488
	strhne	r3, [r4, #27]	@ unaligned
	strh	r1, [r4, #33]	@ unaligned
	movw	r1, #3944
	ldrh	r1, [r6, r1]
	cmp	r1, #0
	strhne	r1, [r4, #29]	@ unaligned
	ldr	r1, .L7151
	bl	printk
	movw	r3, #3944
	movw	r0, #:lower16:.LC489
	ldr	r1, .L7151
	ldrh	r2, [r6, r3]
	movt	r0, #:upper16:.LC489
	bl	printk
	ldr	r3, [r6, #3948]
	cmp	r3, #0
	beq	.L7149
.L7112:
	add	r1, r4, #31
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #49]
.L7113:
	movw	r0, #:lower16:.LC491
	ldr	r2, .L7151+4
	movt	r0, #:upper16:.LC491
	ldr	r1, .L7151
	bl	printk
	ldr	r3, [r6, #4004]
	cmp	r3, #0
	beq	.L7150
.L7114:
	add	r1, r4, #32
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #50]
.L7115:
	ldr	r3, [r6, #4008]
	cmp	r3, #0
	beq	.L7116
	add	r1, r4, #33
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #51]
.L7116:
	ldr	r3, [r6, #2252]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L7117
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7117
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC492
	movt	r1, #:upper16:.LC492
	add	r0, r0, #32
	bl	dev_warn
.L7117:
	mov	r0, r7
	ldr	r1, .L7151+8
	bl	device_create_file
	subs	r8, r0, #0
	bne	.L7108
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC493
	ldr	r3, [r6, #2252]
	movt	r1, #:upper16:.LC493
	add	r0, r0, #32
	ldr	r2, [r3]
	bl	_dev_info
	b	.L7101
.L7150:
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7115
	ldr	r3, [r6, #2252]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L7114
	b	.L7115
.L7149:
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7113
	ldr	r3, [r6, #2252]
	ldr	r3, [r3, #8]
	cmp	r3, #0
	bne	.L7112
	ldrb	r3, [r6, #3952]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7112
	ldr	r3, .L7151+12
	movw	r2, #:lower16:.LC490
	mov	r1, #50
	ldr	ip, [r5, #28]
	movt	r2, #:upper16:.LC490
	ldr	r0, .L7151+4
	stm	sp, {r3, ip}
	sub	r3, r3, #130
	bl	snprintf
	b	.L7112
.L7152:
	.align	2
.L7151:
	.word	.LANCHOR3-3728
	.word	.LANCHOR1+3952
	.word	.LANCHOR0+1504
	.word	init_uts_ns+134
	.fnend
	.size	composite_bind, .-composite_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_in, %function
mtp_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2532]
	cmp	r2, #0
	movne	r3, #4
	add	r6, r4, #88
	mov	r0, r6
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	add	r2, r5, #36
	add	ip, r4, #116
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #120]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #144
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	mtp_complete_in, .-mtp_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_intr, %function
mtp_complete_intr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2532]
	cmp	r2, #0
	movne	r3, #4
	add	r6, r4, #88
	mov	r0, r6
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #128]
	add	r2, r5, #36
	add	ip, r4, #124
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #128]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #156
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	mtp_complete_intr, .-mtp_complete_intr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_suspend, %function
ffs_func_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-28]
	add	r4, r6, #120
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #100]
	mov	r5, r0
	add	r2, r6, #104
	ldrh	r0, [r6, #108]
	mov	ip, r2
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #100]
	cmp	r0, #0
	beq	.L7170
	add	r0, r0, r2
	mov	r3, r2
.L7169:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	cmp	r1, #5
	strbne	r1, [r2]
	addne	r2, r2, #1
	cmp	r0, r3
	bne	.L7169
	sub	r2, r2, ip
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L7167:
	add	r0, r6, r0
	strh	r3, [r6, #108]	@ movhi
	mov	ip, #5
	mov	r1, #3
	mov	r2, #1
	strb	ip, [r0, #104]
	mov	r0, r4
	bl	__wake_up_locked
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L7170:
	mov	r3, #1
	b	.L7167
	.fnend
	.size	ffs_func_suspend, .-ffs_func_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_resume, %function
ffs_func_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-28]
	add	r4, r6, #120
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #100]
	mov	r5, r0
	add	r2, r6, #104
	ldrh	r0, [r6, #108]
	mov	lr, r2
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #100]
	cmp	r0, #0
	beq	.L7181
	add	r0, r0, r2
	mov	r3, r2
.L7180:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbhi	r1, [r2]
	addhi	r2, r2, #1
	cmp	r0, r3
	bne	.L7180
	sub	r2, r2, lr
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L7178:
	add	r0, r6, r0
	strh	r3, [r6, #108]	@ movhi
	mov	ip, #6
	mov	r1, #3
	mov	r2, #1
	strb	ip, [r0, #104]
	mov	r0, r4
	bl	__wake_up_locked
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L7181:
	mov	r3, #1
	b	.L7178
	.fnend
	.size	ffs_func_resume, .-ffs_func_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tomdm, %function
ghsic_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #120
	bxeq	lr
	ldr	r3, [r0, #-116]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #40
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #44]
	mov	r6, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L7189
	mov	r2, r5
	ldr	r4, [r2, #-56]!
	cmp	r4, r2
	beq	.L7189
	cmp	r4, #0
	beq	.L7189
	ldr	r1, [r5, #-48]
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	sub	r1, r1, #1
	str	r1, [r5, #-48]
	ldrd	r0, [r4]
	str	r3, [r4]
	str	r3, [r4, #4]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r3, [r2, #3612]
	cmp	r3, #0
	bne	.L7240
.L7190:
	mov	r1, r6
	str	r3, [r4, #40]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r1, .L7246
	ldr	r0, .L7246+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L7241
.L7188:
	ldr	r3, [r5, #92]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #92]
	bl	dev_kfree_skb_any
.L7189:
.L7187:
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r5, #-108]
	mov	r6, r0
	cmp	r9, #0
	beq	.L7193
	movw	r3, #16960
	movw	r7, #:lower16:.LANCHOR0
	movt	r3, 15
	movw	r10, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR1
	str	r3, [sp, #12]
	b	.L7192
.L7194:
	mov	r2, #0
	mov	r1, #208
	ldr	r0, [r7, #1548]
	mvn	r3, #0
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r2, #208
	ldr	r1, [sp]
	mov	r0, r9
	beq	.L7242
	ldr	ip, [fp, #172]
	str	r6, [fp, #28]
	str	ip, [r4, #-36]
	ldr	ip, [r7, #1548]
	str	ip, [r4, #-32]
	str	fp, [r4, #-4]
	ldr	ip, [r10, #3612]
	cmp	ip, #0
	bne	.L7243
.L7196:
	str	ip, [fp, #32]
	ldr	ip, [r9, #8]
	ldr	r6, [ip, #16]
	blx	r6
	mov	r2, r0
	mov	r0, r8
	str	r2, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #4]
	mov	r6, r0
	cmp	r2, #0
	bne	.L7244
.L7192:
	ldr	ip, [r5, #-116]
	sub	lr, r5, #64
	mov	r3, #256
	mov	r2, #512
	mov	r1, r6
	mov	r0, r8
	str	lr, [sp, #8]
	cmp	ip, #0
	beq	.L7193
	ldr	r4, [r5, #-64]
	sub	ip, r4, #36
	cmp	r4, lr
	str	ip, [sp]
	beq	.L7193
	ldr	lr, [r5, #-48]
	ldr	ip, [r7, #1544]
	cmp	lr, ip
	bhi	.L7193
	ldr	lr, [r4]
	ldr	ip, [r4, #4]
	str	ip, [lr, #4]
	str	lr, [ip]
	str	r3, [r4]
	str	r2, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r10, #3612]
	cmp	r6, #0
	beq	.L7194
	add	r0, sp, #16
	bl	do_gettimeofday
	ldr	r2, [sp, #12]
	ldr	r6, [sp, #16]
	ldr	r3, [sp, #20]
	ubfx	r6, r6, #0, #12
	mla	r6, r2, r6, r3
	b	.L7194
.L7243:
	add	r0, sp, #16
	bl	do_gettimeofday
	add	r3, sp, #12
	mov	r2, #208
	ldr	r1, [sp]
	ldm	r3, {r3, ip, lr}
	mov	r0, r9
	ubfx	ip, ip, #0, #12
	mla	ip, r3, ip, lr
	b	.L7196
.L7244:
	ldr	r7, .L7246+8
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L7246+12
	mov	r1, r7
	bl	___ratelimit
	cmp	r0, #0
	bne	.L7245
.L7199:
	ldr	r3, [r5, #-116]
	cmp	r3, #0
	bne	.L7239
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r1, [sp]
	ldr	r3, [r3, #12]
	blx	r3
.L7193:
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7242:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
.L7239:
	ldr	r3, [r5, #-64]
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #8]
	str	r3, [r4, #4]
	str	r4, [r5, #-64]
	b	.L7193
.L7240:
	add	r0, sp, #16
	bl	do_gettimeofday
	ldr	r3, [sp, #16]
	movw	r2, #16960
	ldr	r1, [sp, #20]
	movt	r2, 15
	ubfx	r3, r3, #0, #12
	mla	r3, r2, r3, r1
	b	.L7190
.L7241:
	movw	r0, #:lower16:.LC97
	mvn	r2, #18
	ldr	r1, .L7246
	movt	r0, #:upper16:.LC97
	bl	printk
	b	.L7188
.L7245:
	movw	r0, #:lower16:.LC402
	mov	r1, r7
	movt	r0, #:upper16:.LC402
	bl	printk
	b	.L7199
.L7247:
	.align	2
.L7246:
	.word	.LANCHOR3-3712
	.word	.LANCHOR0+1520
	.word	.LANCHOR3-3688
	.word	.LANCHOR0+1552
	.fnend
	.size	ghsic_data_write_tomdm, .-ghsic_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_in_transfer, %function
start_in_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L7249
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r6, [r4, #100]
	ldr	r7, [r1, #16]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #20]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7261
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #20]
	beq	.L7261
	cmn	r3, #95
	bne	.L7253
	ldr	r2, [r7, #4]
	cmp	r2, #0
	beq	.L7261
.L7253:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC85
	movt	r1, #:upper16:.LC85
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
.L7261:
	mov	r0, #1
.L7251:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7249:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC83
	mov	r3, #796
	movt	r1, #:upper16:.LC83
	ldr	r2, .L7262
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC84
	movw	r1, #550
	movt	r0, #:upper16:.LC84
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L7251
.L7263:
	.align	2
.L7262:
	.word	.LANCHOR3-3668
	.fnend
	.size	start_in_transfer, .-start_in_transfer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_status, %function
send_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #44
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #104]
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L7267
	b	.L7265
.L7284:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L7265
.L7267:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L7284
.L7264:
	ldrd	r4, [sp]
	mov	r0, r3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7265:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	beq	.L7268
	tst	r3, #4
	ldr	r0, [r7, #28]
	movne	r0, #2
	beq	.L7285
.L7269:
	ldr	r3, [r6]
	movw	ip, #21333
	movw	r2, #:lower16:.LANCHOR1
	movt	ip, 21314
	movt	r2, #:upper16:.LANCHOR1
	ldr	r1, [r2, #4012]
	str	ip, [r3]
	ldr	ip, [r5, #132]
	cmp	r1, #0
	str	ip, [r3, #4]
	ldr	ip, [r5, #136]
	str	ip, [r3, #8]
	beq	.L7272
	ldr	r1, [r5, #136]
	mov	ip, #0
	str	ip, [r2, #4012]
.L7272:
	str	r1, [r3, #8]
	mov	r2, #13
	mov	r1, r6
	strb	r0, [r3, #12]
	ldr	r3, [r6, #16]
	mov	r0, r5
	str	r2, [r3, #4]
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	ldrne	r2, [r6, #8]
	movne	r3, #0
	mvneq	r3, #4
	strne	r2, [r5, #60]
	b	.L7264
.L7285:
	adds	r0, r0, #0
	movne	r0, #1
	b	.L7269
.L7268:
	tst	r3, #16
	and	r3, r3, #4
	beq	.L7271
	cmp	r3, #0
	moveq	r0, #0
	movne	r0, #2
	b	.L7269
.L7271:
	cmp	r3, #0
	moveq	r0, #1
	movne	r0, #2
	b	.L7269
	.fnend
	.size	send_status, .-send_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_write, %function
do_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #104]
	.pad #68
	sub	sp, sp, #68
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #2
	movne	r3, #9984
	mvnne	r0, #21
	movtne	r3, 7
	strne	r3, [r6, #28]
	bne	.L7286
	mov	r4, r0
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	bic	r3, r3, #1048576
	bic	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #10
	beq	.L7344
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	ldr	r5, [r4, #78]	@ unaligned
	tst	r3, #231
	movne	r3, #9216
	rev	r5, r5
	movtne	r3, 5
	mvnne	r0, #21
	strne	r3, [r6, #28]
	bne	.L7286
	ldrsb	r2, [r6, #24]
	cmp	r2, #0
	blt	.L7290
	tst	r3, #8
	bne	.L7345
.L7290:
	ldrd	r2, [r6, #16]
	mov	r1, #0
	mov	r0, r5
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L7286
	ldr	r3, [r6, #40]
	ldr	r9, [r4, #128]
	sub	r2, r3, #32
	lsl	r10, r5, r3
	lsl	fp, r5, r2
	str	r9, [sp, #40]
	cmp	r9, #0
	rsb	r2, r3, #32
	orr	fp, fp, r5, lsr r2
	beq	.L7294
	mov	r3, #57344
	strd	r10, [sp, #16]
	movw	r2, #3074
	movw	r1, #:lower16:.LANCHOR1
	strd	r10, [sp, #32]
	movt	r3, 65535
	movt	r2, 3
	movt	r1, #:upper16:.LANCHOR1
	mov	r8, #1
	str	r3, [sp, #44]
	str	r1, [sp, #48]
	str	r2, [sp, #52]
.L7293:
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L7295
.L7347:
	cmp	r8, #0
	beq	.L7296
	ldrd	r2, [r6, #8]
	ldrd	r0, [sp, #16]
	cmp	r0, r2
	sbcs	r3, r1, r3
	bge	.L7346
	ldr	r2, [r4, #140]
	cmp	r9, #16384
	movcc	r3, r9
	movcs	r3, #16384
	adds	r0, r0, r3
	adc	r1, r1, #0
	subs	r9, r9, r3
	sub	r2, r2, r3
	movne	r8, #1
	strd	r0, [sp, #16]
	moveq	r8, #0
	mov	r0, r4
	str	r2, [r4, #140]
	str	r3, [r5, #12]
	ldr	r1, [r4, #108]
	udiv	r2, r3, r1
	mls	r2, r1, r2, r3
	cmp	r2, #0
	addne	r3, r3, r1
	mov	r1, r5
	subne	r3, r3, r2
	ldr	r2, [r5, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L7294
	ldr	r3, [r5, #8]
	str	r3, [r4, #60]
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L7347
.L7295:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L7301
	cmp	r8, #0
	beq	.L7294
.L7302:
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	beq	.L7293
.L7286:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7296:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L7294
.L7301:
	cmp	r3, #1
	bne	.L7302
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L7302
	.syntax divided
@ 1354 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r5, #8]
	mov	r3, #0
	str	r2, [r4, #64]
	ldr	r2, [r5, #24]
	str	r3, [r5, #4]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L7348
	ldrd	r10, [sp, #32]
	ldr	r3, [r6, #8]
	ldr	ip, [r6, #12]
	ldr	r2, [r2, #48]
	subs	r1, r3, r10
	sbc	lr, ip, fp
	str	r1, [sp, #24]
	mov	r1, #0
	str	lr, [sp, #28]
	ldrd	r10, [sp, #24]
	cmp	r10, r2
	sbcs	r1, fp, r1
	blt	.L7349
.L7305:
	ldr	r7, [r6, #44]
	ldr	r3, [r5, #12]
	rsb	r7, r7, #0
	cmp	r3, r2
	andls	r7, r7, r3
	andhi	r7, r7, r2
	cmp	r7, #0
	bne	.L7350
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r3, r2
	bls	.L7293
.L7321:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #4
	orr	r3, r3, #8
	strb	r3, [r4, #144]
	b	.L7286
.L7350:
	ldrd	r10, [sp, #32]
	add	r3, sp, #64
	mov	r2, r7
	strd	r10, [r3, #-8]!
	ldr	r1, [r5]
	ldr	r0, [r6]
	bl	vfs_write
	ldr	r2, [sp, #44]
	mov	r3, sp
	and	r3, r3, r2
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L7323
	cmp	r0, #0
	blt	.L7307
	cmp	r0, r7
	ldr	r3, [r4, #136]
	bcc	.L7351
	ldrd	r10, [sp, #32]
	sub	r3, r3, r0
	ldr	r2, [sp, #40]
	str	r3, [r4, #136]
	adds	r10, r10, r0
	adc	fp, fp, r0, asr #31
	sub	r2, r2, r0
	strd	r10, [sp, #32]
	str	r2, [sp, #40]
.L7309:
	cmp	r7, r0
	bne	.L7343
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #4016]
	cmp	r3, #0
	bne	.L7343
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #4012]
	cmp	r3, #0
	bne	.L7294
	ldr	r3, [r4, #68]
	ldr	r2, [r3, #4]
	cmp	r2, #2
	beq	.L7343
	ldr	r2, [r3, #36]
	cmp	r2, #2
	beq	.L7343
	ldr	r2, [r3, #68]
	cmp	r2, #2
	beq	.L7343
	ldr	r3, [r3, #100]
	cmp	r3, #2
	beq	.L7343
	cmp	r9, #0
	bne	.L7343
	ldr	r2, [sp, #48]
	mov	r3, #1
	mov	r0, r4
	str	r3, [r2, #4016]
	bl	send_status
.L7343:
	ldr	r3, [r5, #12]
.L7311:
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r2, r3
	bcc	.L7321
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L7293
.L7294:
	mvn	r0, #4
	b	.L7286
.L7346:
	ldr	r3, [r6, #40]
	mov	r2, #8448
	mov	r10, r0
	movt	r2, 5
	mov	fp, r1
	mov	r8, #0
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L7293
.L7349:
	ldrd	r10, [sp, #32]
	movw	r1, #:lower16:.LC494
	add	r0, r6, #48
	movt	r1, #:upper16:.LC494
	strd	r10, [sp]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	dev_err
	ldr	r2, [r6, #8]
	sub	r2, r2, r10
	b	.L7305
.L7351:
	ldr	r2, [r6, #44]
	rsb	r2, r2, #0
	and	r2, r2, r0
	adds	r10, r10, r2
	mov	r0, r2
	adc	fp, fp, r2, asr #31
	sub	r3, r3, r2
	cmp	r2, r7
	ldr	r2, [sp, #40]
	str	r3, [r4, #136]
	strd	r10, [sp, #32]
	sub	r2, r2, r0
	str	r2, [sp, #40]
	bcs	.L7309
.L7307:
	ldr	r3, [r6, #40]
	ldrd	r10, [sp, #32]
	ldr	r2, [sp, #52]
	subs	r1, r3, #32
	str	r2, [r6, #28]
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	mov	r1, #1
	str	r2, [r6, #32]
	ldr	r2, [sp, #48]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	ldr	r3, [r5, #12]
	str	r1, [r2, #4012]
	b	.L7311
.L7344:
	ldrb	r5, [r4, #79]	@ zero_extendqisi2
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	ldrb	r3, [r4, #78]	@ zero_extendqisi2
	orr	r5, r5, #167772160
	orr	r5, r5, r2, lsl #16
	orr	r5, r5, r3, lsl #8
	bic	r5, r5, #-16777216
	b	.L7290
.L7345:
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	orr	r3, r3, #1048576
	orr	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	b	.L7290
.L7323:
	mvn	r0, #3
	b	.L7286
.L7348:
	ldr	r3, [r6, #40]
	mov	r2, #2048
	mvn	r0, #4
	ldrd	r10, [sp, #32]
	movt	r2, 4
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	orrpl	r2, r2, fp, asr r1
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	str	r2, [r6, #32]
	b	.L7286
	.fnend
	.size	do_write, .-do_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_read, %function
do_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #76]	@ zero_extendqisi2
	.pad #36
	sub	sp, sp, #36
	ldrb	r2, [r0, #77]	@ zero_extendqisi2
	ldrb	ip, [r0, #78]	@ zero_extendqisi2
	ldr	r7, [r0, #104]
	cmp	r3, #8
	ldrb	r3, [r0, #79]	@ zero_extendqisi2
	beq	.L7388
	tst	r2, #231
	ldr	r1, [r0, #78]	@ unaligned
	movne	r2, #9216
	mvnne	r3, #21
	movtne	r2, 5
	rev	r1, r1
	strne	r2, [r7, #28]
	bne	.L7352
.L7354:
	ldrd	r2, [r7, #16]
	mov	r5, #0
	cmp	r1, r2
	sbcs	r3, r5, r3
	movge	r2, #8448
	mvnge	r3, #21
	movtge	r2, 5
	strge	r2, [r7, #28]
	bge	.L7352
	ldr	r3, [r7, #40]
	mov	r4, #0
	mov	r5, #0
	ldr	r8, [r0, #128]
	strd	r4, [sp]
	sub	r2, r3, #32
	cmp	r8, #0
	lsl	r2, r1, r2
	str	r2, [sp, #4]
	rsb	r2, r3, #32
	lsl	r3, r1, r3
	ldr	ip, [sp, #4]
	str	r3, [sp]
	orr	r2, ip, r1, lsr r2
	str	r2, [sp, #4]
	beq	.L7357
	mov	r3, sp
	mov	r5, r0
	bic	r9, r3, #8128
	add	r4, r0, #44
	bic	r9, r9, #63
.L7367:
	mov	r0, r4
	ldrd	r10, [r7, #8]
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L7359
	b	.L7358
.L7389:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L7358
.L7359:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L7389
.L7352:
	mov	r0, r3
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7358:
	ldrd	r2, [sp]
	subs	r1, r10, r2
	sbc	r3, fp, r3
	cmp	r8, #16384
	str	r1, [sp, #16]
	str	r3, [sp, #20]
	movcc	r3, r8
	movcs	r3, #16384
	str	r3, [sp, #8]
	mov	r3, #0
	str	r3, [sp, #12]
	ldrd	r0, [sp, #8]
	ldrd	r2, [sp, #16]
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L7390
.L7360:
	mov	r0, r4
	ldr	r10, [sp, #8]
	bl	_raw_spin_unlock_irq
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L7391
	ldrd	r0, [sp]
	mov	r2, r3
	add	r3, sp, #32
	strd	r0, [r3, #-8]!
	ldr	r1, [r6]
	ldr	r0, [r7]
	bl	vfs_read
	ldr	r3, [r9, #12]
	mov	fp, r0
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L7369
	cmp	r0, #0
	blt	.L7363
	cmp	r0, r10
	ldr	r3, [r5, #136]
	bcs	.L7364
	ldr	r2, [r7, #44]
	mov	r0, r4
	rsb	r2, r2, #0
	and	fp, fp, r2
	sub	r1, r3, fp
	ldrd	r2, [sp]
	sub	r8, r8, fp
	str	r1, [r5, #136]
	adds	r2, r2, fp
	adc	r3, r3, fp, asr #31
	strd	r2, [sp]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	fp, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	cmp	fp, r10
	bcc	.L7368
.L7365:
	cmp	r8, #0
	beq	.L7357
	ldr	r3, [r6, #16]
	mov	r1, r6
	mov	r0, r5
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L7357
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
	b	.L7367
.L7390:
	strd	r2, [sp, #8]
	b	.L7360
.L7363:
	mov	r0, r4
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irq
	ldr	r3, [sp, #8]
	mov	r2, #1
	mov	r0, r4
	ldr	r1, [r6, #16]
	str	r3, [r1, #4]
	str	r2, [r6, #4]
	bl	_raw_spin_unlock_irq
.L7368:
	ldr	r3, [r7, #40]
	mov	r2, #4352
	ldrd	r4, [sp]
	movt	r2, 3
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r4, r3
	rsb	r3, r3, #32
	orr	r2, r2, r5, lsl r3
	movpl	r3, r5
	orrpl	r2, r2, r3, asr r1
	ldrb	r1, [r7, #24]	@ zero_extendqisi2
	mvn	r3, #4
	str	r2, [r7, #32]
	orr	r2, r1, #64
	strb	r2, [r7, #24]
	b	.L7352
.L7388:
	orr	r1, r3, #134217728
	orr	r1, r1, r2, lsl #16
	orr	r1, r1, ip, lsl #8
	bic	r1, r1, #-16777216
	b	.L7354
.L7364:
	sub	r1, r3, r0
	ldrd	r2, [sp]
	mov	r0, r4
	sub	r8, r8, fp
	str	r1, [r5, #136]
	adds	r2, r2, fp
	adc	r3, r3, fp, asr #31
	strd	r2, [sp]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	fp, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	b	.L7365
.L7357:
	mvn	r3, #4
	b	.L7352
.L7369:
	mvn	r3, #3
	b	.L7352
.L7391:
	ldr	r3, [r7, #40]
	mov	r2, #8448
	mov	r0, r4
	ldrd	r8, [sp]
	movt	r2, 5
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	movpl	r3, r9
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	str	r2, [r7, #32]
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r1, #0
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	mvn	r3, #4
	b	.L7352
	.fnend
	.size	do_read, .-do_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_in, %function
conn_gadget_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2516]
	cmp	r2, #0
	bne	.L7398
.L7393:
	add	r6, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	add	r2, r5, #36
	add	ip, r4, #120
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #124]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #156
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L7398:
	mov	r3, #1
	movw	r0, #:lower16:.LC495
	ldr	r1, .L7399
	movt	r0, #:upper16:.LC495
	str	r3, [r4, #104]
	ldr	r2, [r5, #44]
	bl	printk
	b	.L7393
.L7400:
	.align	2
.L7399:
	.word	.LANCHOR3-3648
	.fnend
	.size	conn_gadget_complete_in, .-conn_gadget_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_start, %function
bam_data_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L7417
	cmp	r3, #0
	beq	.L7401
	ldr	r3, [r3, #8]
	mov	r2, #32
	ldr	r1, [r0, #40]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r3, [ip, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L7418
.L7401:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L7417:
	cmp	r3, #0
	beq	.L7401
	ldr	r3, [r3, #12]
	mov	r2, #32
	ldr	r1, [r0, #36]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r3, [ip, #16]
	blx	r3
	subs	r2, r0, #0
	movwne	r0, #:lower16:.LC218
	ldrne	r1, .L7419
	beq	.L7401
.L7416:
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC218
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L7418:
	movw	r0, #:lower16:.LC218
	ldr	r1, .L7419+4
	b	.L7416
.L7420:
	.align	2
.L7419:
	.word	.LANCHOR2+2200
	.word	.LANCHOR2+2228
	.fnend
	.size	bam_data_start, .-bam_data_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_sb_fill, %function
ffs_sb_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L7429
	mov	r2, #216
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L7422
.L7446:
	mvn	r0, #11
.L7421:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7429:
	mov	r4, #16
.L7422:
	mov	r8, #0
	mov	r6, #1
	ldr	r2, .L7447
	movw	r1, #:lower16:.LC496
	add	r0, r4, #4
	movt	r1, #:upper16:.LC496
	str	r6, [r4, #88]
	mov	r9, #12
	str	r8, [r4, #92]
	str	r8, [r4, #96]
	bl	__mutex_init
	movw	r1, #:lower16:.LC497
	ldr	r2, .L7447
	add	r0, r4, #120
	movt	r1, #:upper16:.LC497
	str	r8, [r4, #28]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC498
	ldr	r2, .L7447
	add	r0, r4, #40
	movt	r1, #:upper16:.LC498
	str	r8, [r4, #36]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC498
	ldr	r2, .L7447
	add	r0, r4, #76
	movt	r1, #:upper16:.LC498
	str	r8, [r4, #72]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC498
	ldr	r2, .L7447
	add	r0, r4, #60
	movt	r1, #:upper16:.LC498
	str	r8, [r4, #56]
	bl	__init_waitqueue_head
	strh	r6, [r4, #110]	@ movhi
	ldr	ip, .L7447+4
	movw	r1, #29537
	str	r5, [r4, #196]
	ldr	r3, [r7, #16]
	movt	r1, 2660
	mov	lr, #4096
	mov	r0, r5
	str	r3, [r4, #140]
	ldrd	r2, [r7]
	strd	r2, [r4, #200]
	ldr	r3, [r7, #8]
	str	r3, [r4, #208]
	strb	r9, [r5, #13]
	str	lr, [r5, #16]
	str	ip, [r5, #36]
	str	r1, [r5, #56]
	str	r4, [r5, #624]
	str	r6, [r5, #636]
	ldrh	r3, [r7, #12]
	strh	r3, [r7]	@ movhi
	bl	new_inode
	subs	r6, r0, #0
	beq	.L7424
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r6, #40]
	ldrh	r3, [r7]
	movw	r1, #:lower16:simple_dir_operations
	movt	r1, #:upper16:simple_dir_operations
	cmp	r1, r8
	strh	r3, [r6]	@ movhi
	ldrd	r2, [sp]
	ldr	r0, [r7, #4]
	str	r0, [r6, #4]
	ldr	r0, [r7, #8]
	strne	r1, [r6, #208]
	strd	r2, [r6, #52]
	strd	r2, [r6, #60]
	strd	r2, [r6, #68]
	movw	r3, #:lower16:simple_dir_inode_operations
	movt	r3, #:upper16:simple_dir_inode_operations
	str	r0, [r6, #8]
	cmp	r3, #0
	str	r8, [r6, #340]
	strne	r3, [r6, #24]
.L7424:
	mov	r0, r6
	bl	d_make_root
	cmp	r0, #0
	str	r0, [r5, #60]
	beq	.L7446
	movw	r1, #:lower16:.LC499
	ldr	r6, [r5, #624]
	movt	r1, #:upper16:.LC499
	bl	d_alloc_name
	subs	r7, r0, #0
	beq	.L7446
	mov	r0, r5
	bl	new_inode
	subs	r5, r0, #0
	beq	.L7428
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r5, #40]
	ldrh	r3, [r6, #200]
	mov	r1, r5
	ldr	ip, .L7447+8
	mov	r0, r7
	strh	r3, [r5]	@ movhi
	ldr	lr, [r6, #204]
	ldrd	r2, [sp]
	str	lr, [r5, #4]
	ldr	lr, [r6, #208]
	str	lr, [r5, #8]
	strd	r2, [r5, #52]
	strd	r2, [r5, #60]
	strd	r2, [r5, #68]
	str	ip, [r5, #208]
	str	r4, [r5, #340]
	bl	d_instantiate
	mov	r0, r7
	bl	d_rehash
	mov	r0, #0
	b	.L7421
.L7428:
	mov	r0, r7
	bl	dput
	b	.L7446
.L7448:
	.align	2
.L7447:
	.word	.LANCHOR1+4020
	.word	.LANCHOR3-3624
	.word	.LANCHOR3-3520
	.fnend
	.size	ffs_sb_fill, .-ffs_sb_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_add_header, %function
rndis_qc_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #44
	mov	r0, r6
	str	lr, [sp, #12]
	bl	skb_realloc_headroom
	subs	r5, r0, #0
	beq	.L7450
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L7450:
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_add_header, .-rndis_qc_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_disconnect_work, %function
usb_qdss_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC500
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC500
	str	lr, [sp, #12]
	ldr	r5, [r4, #-64]
	ldr	r3, [r5]
	ldr	r3, [r3, #84]
	ldr	r6, [r3]
	bl	printk
	movw	r0, #:lower16:.LC348
	movt	r0, #:upper16:.LC348
	ldr	r1, [r6, #28]
	bl	strcmp
	cmp	r0, #0
	beq	.L7469
.L7457:
	ldr	r5, [r4, #-48]
	cmp	r5, #0
	beq	.L7455
	mov	r3, #0
	ldr	r0, [r4, #-44]
	mov	r1, #1
	mov	r2, r3
	blx	r5
	ldr	r0, [r4, #-88]
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	ldr	r0, [r0]
	ldr	r0, [r0, #28]
	bl	usb_bam_get_connection_idx
	movw	r3, #:lower16:.LANCHOR1
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #4032]
	bl	kfree
	uxtb	r0, r4
	bl	usb_bam_disconnect_pipe
	cmp	r0, #0
	bne	.L7470
.L7455:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7469:
	mov	r0, r5
	bl	msm_ep_unconfig
	cmp	r0, #0
	beq	.L7457
	movw	r0, #:lower16:.LC501
	movt	r0, #:upper16:.LC501
	bl	printk
	movw	r0, #:lower16:.LC502
	ldr	r1, .L7471
	movt	r0, #:upper16:.LC502
	bl	printk
	b	.L7457
.L7470:
	movw	r0, #:lower16:.LC503
	movt	r0, #:upper16:.LC503
	bl	printk
	movw	r0, #:lower16:.LC504
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC504
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L7472:
	.align	2
.L7471:
	.word	.LANCHOR3-3412
	.fnend
	.size	usb_qdss_disconnect_work, .-usb_qdss_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_write, %function
acc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	str	r2, [sp, #8]
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	and	r2, r3, #3
	cmp	r2, #1
	bne	.L7492
	cmp	r6, #0
	beq	.L7473
	tst	r3, #1
	beq	.L7477
	mov	r3, #57344
	movw	r2, #:lower16:autoremove_wake_function
	movt	r3, 65535
	movt	r2, #:upper16:autoremove_wake_function
	add	fp, r5, #1648
	mov	r8, r1
	add	fp, fp, #8
	add	r7, r5, #88
	str	r3, [sp, #4]
	str	r2, [sp, #16]
	b	.L7476
.L7508:
	mov	r2, r9
	mov	r1, r8
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L7488
	str	r9, [r4, #4]
	ldr	r0, [r5, #92]
	mov	r2, #208
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7498
	subs	r6, r6, r9
	add	r8, r8, r9
	beq	.L7473
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L7477
.L7476:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1656]
	cmp	fp, r3
	beq	.L7507
	ldr	ip, [r3]
	mov	lr, #512
	mov	r9, #256
	ldr	r2, [r3, #4]
	mov	r1, r0
	sub	r4, r3, #36
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r9, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	beq	.L7479
.L7480:
	cmp	r6, #16384
	movhi	r9, #16384
	movhi	r3, #0
	bhi	.L7486
	ldr	r3, [r5, #92]
	mov	r9, r6
	ldrh	r2, [r3, #20]
	udiv	r3, r6, r2
	mls	r3, r2, r3, r6
	clz	r3, r3
	lsr	r3, r3, #5
.L7486:
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	mov	r1, sp
	ldr	r0, [sp, #4]
	bfi	r2, r3, #1, #1
	and	r1, r1, r0
	ldr	r0, [r4]
	strb	r2, [r4, #26]
	ldr	r3, [r1, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L7508
	mov	r1, r9
	bl	__memzero
.L7488:
	mvn	r3, #13
	str	r3, [sp, #8]
.L7490:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1660]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #1660]
	str	fp, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
.L7473:
	ldr	r0, [sp, #8]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7507:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L7479:
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L7494
	ldr	r1, [sp, #4]
	mov	r3, #0
	mov	r2, sp
	ldr	r0, [sp, #16]
	str	r6, [sp, #20]
	str	r3, [sp, #28]
	str	r3, [sp, #32]
	and	r2, r2, r1
	str	r3, [sp, #36]
	add	r1, r5, #1664
	mov	r9, r2
	add	r1, r1, #12
	str	r3, [sp, #40]
	mov	r6, r1
	str	r3, [sp, #44]
	ldr	r2, [r2, #12]
	add	r3, sp, #40
	str	r1, [sp, #12]
	str	r0, [sp, #36]
	str	r2, [sp, #32]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	b	.L7485
.L7510:
	bl	schedule
.L7485:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r6
	mov	r10, #256
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1656]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r7
	mov	r1, r2
	cmp	fp, r3
	sub	r4, r3, #36
	beq	.L7509
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	bne	.L7483
.L7482:
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L7506
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7510
	mov	r3, #65024
	movt	r3, 65535
.L7506:
	add	r1, sp, #28
	ldr	r0, [sp, #12]
	str	r3, [sp, #8]
	bl	finish_wait
	b	.L7473
.L7483:
	add	r1, sp, #28
	ldr	r0, [sp, #12]
	ldr	r6, [sp, #20]
	bl	finish_wait
	b	.L7480
.L7509:
	bl	_raw_spin_unlock_irqrestore
	b	.L7482
.L7494:
	str	r3, [sp, #8]
	b	.L7473
.L7477:
	mvn	r3, #4
	str	r3, [sp, #8]
	b	.L7473
.L7498:
	mvn	r3, #4
	str	r3, [sp, #8]
	b	.L7490
.L7492:
	mvn	r3, #18
	str	r3, [sp, #8]
	b	.L7473
	.fnend
	.size	acc_write, .-acc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_init, %function
acm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 80
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:__stack_chk_guard
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:__stack_chk_guard
	mov	r5, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:kmalloc_caches
	strd	r10, [sp, #24]
	movt	r9, #:upper16:kmalloc_caches
	str	lr, [sp, #32]
	.pad #92
	sub	sp, sp, #92
	ldr	r2, [r3]
	str	r3, [sp, #12]
	ldr	r3, [r9, #24]
	str	r2, [sp, #84]
	cmp	r3, #0
	moveq	r3, #16
	streq	r3, [r0, #4]
	beq	.L7513
	mov	r0, r3
	mov	r2, #4
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L7530
.L7513:
	ldr	r3, [r5]
	mov	r1, #0
	mov	r0, #4
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	str	r3, [sp, #20]
	bl	__alloc_tty_driver
	cmp	r0, #0
	str	r0, [r8, #3704]
	beq	.L7530
	movw	r2, #:lower16:.LC505
	movw	r3, #:lower16:tty_std_termios
	ldr	r1, .L7553
	movt	r3, #:upper16:tty_std_termios
	movt	r2, #:upper16:.LC505
	ldrd	r4, [r3]
	mov	lr, #3
	str	r2, [r0, #72]
	movw	r2, #:lower16:.LC506
	ldrd	r6, [r3, #8]
	movt	r2, #:upper16:.LC506
	ldrd	r10, [r3, #32]
	movt	lr, 1
	str	r2, [r0, #76]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r4, [r0, #100]
	ldrd	r4, [r3, #16]
	ldrd	r2, [r3, #24]
	strd	r6, [r0, #108]
	strd	r4, [r0, #116]
	movw	r4, #3261
	mov	r5, #0
	strd	r10, [r0, #132]
	strd	r2, [r0, #124]
	mov	r3, #9600
	str	r4, [r0, #108]
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	str	lr, [r0, #144]
	bl	tty_set_operations
	movw	r2, #:lower16:.LC507
	mov	r1, #10
	str	r5, [sp]
	movt	r2, #:upper16:.LC507
	movw	r0, #:lower16:.LC79
	mov	r3, r5
	movt	r1, 2
	str	r2, [sp, #4]
	movt	r0, #:upper16:.LC79
	mov	r2, #1
	bl	__alloc_workqueue_key
	ldr	r3, .L7553+4
	cmp	r0, r5
	str	r0, [r8, #3336]
	str	r3, [sp, #16]
	beq	.L7532
	movw	r2, #:lower16:.LC508
	movw	r1, #:lower16:.LC509
	str	r8, [sp, #24]
	movt	r2, #:upper16:.LC508
	movt	r1, #:upper16:.LC509
	str	r3, [sp, #28]
	add	r7, r3, #328
	mov	r6, r3
	mov	r8, r2
	mov	r10, r1
	b	.L7519
.L7549:
	mov	r2, #144
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7547
.L7517:
	mov	fp, #0
	mov	r0, r4
	mov	r2, r7
	mov	r1, r10
	str	fp, [r0], #20
	add	r6, r6, #28
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC510
	mov	r2, r7
	add	r0, r4, #108
	movt	r1, #:upper16:.LC510
	bl	__init_waitqueue_head
	mov	r2, #65024
	strb	r5, [r4, #17]
	movw	r3, #:lower16:gs_rx_push
	movt	r2, 65535
	add	r5, r5, #1
	add	r1, r4, #64
	add	ip, r4, #32
	add	r0, r4, #48
	movt	r3, #:upper16:gs_rx_push
	mov	lr, #8
	cmp	r5, #4
	str	ip, [r4, #32]
	str	r2, [r4, #60]
	add	r2, r4, #76
	strb	fp, [r4, #126]
	mov	fp, #9600
	str	ip, [r4, #36]
	str	r0, [r4, #48]
	str	r0, [r4, #52]
	str	r1, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r4, #72]
	str	r2, [r4, #76]
	str	r2, [r4, #80]
	str	fp, [r4, #120]
	strh	lr, [r4, #124]	@ movhi
	str	r4, [r6, #-4]
	beq	.L7548
.L7519:
	mov	r0, r6
	mov	r2, r7
	mov	r1, r8
	bl	__mutex_init
	ldr	r0, [r9, #8]
	cmp	r0, #0
	bne	.L7549
	mov	r4, #16
	b	.L7517
.L7548:
	ldr	r8, [sp, #24]
	ldr	r10, [sp, #28]
	ldr	r0, [r8, #3704]
	str	r5, [r8, #3700]
	bl	tty_register_driver
	subs	r4, r0, #0
	bne	.L7550
	ldr	r3, [sp, #20]
	movw	r6, #:lower16:.LC512
	mov	r5, r4
	ldr	r7, .L7553+8
	movt	r6, #:upper16:.LC512
	add	r9, r3, #32
.L7522:
	mov	r2, r9
	mov	r1, r5
	ldr	r0, [r8, #3704]
	bl	tty_register_device
	cmn	r0, #4096
	bhi	.L7551
.L7521:
	add	r5, r5, #1
	cmp	r5, #4
	bne	.L7522
	ldr	r9, .L7553+12
	movw	r7, #:lower16:.LC513
	mov	r5, #0
	movt	r7, #:upper16:.LC513
.L7525:
	mov	r2, r7
	mov	r3, r5
	ldr	r6, [r10, #24]
	mov	r1, #48
	add	r0, sp, #36
	bl	snprintf
	add	r0, sp, #36
	mov	r1, #0
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r8, #3932]
	beq	.L7524
	cmn	r0, #4096
	bhi	.L7524
	movw	r0, #:lower16:.LC514
	mov	r3, r6
	str	r9, [sp]
	mov	r1, #292
	movt	r0, #:upper16:.LC514
	bl	debugfs_create_file
	ldr	ip, .L7553+16
	movw	r0, #:lower16:.LC515
	mov	r3, r6
	ldr	r2, [r8, #3932]
	movt	r0, #:upper16:.LC515
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
.L7524:
	add	r5, r5, #1
	add	r10, r10, #28
	cmp	r5, #4
	bne	.L7525
.L7511:
	ldr	r3, [sp, #12]
	mov	r0, r4
	ldr	r2, [sp, #84]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L7552
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7532:
	mvn	r4, #11
	mov	r5, #3
.L7516:
	rsb	r5, r5, r5, lsl #3
	ldr	r6, .L7553+20
	add	r5, r3, r5, lsl #2
.L7526:
	ldr	r0, [r5, #24]
	sub	r5, r5, #28
	bl	kfree
	cmp	r6, r5
	bne	.L7526
.L7527:
	ldr	r0, [r8, #3336]
	cmp	r0, #0
	beq	.L7528
	bl	destroy_workqueue
.L7528:
	ldr	r0, [r8, #3704]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r8, #3704]
	b	.L7511
.L7530:
	mvn	r4, #11
	b	.L7511
.L7551:
	mov	r3, r0
	mov	r2, r5
	mov	r1, r7
	mov	r0, r6
	bl	printk
	b	.L7521
.L7547:
.L7518:
	cmp	r5, #0
	ldr	r8, [sp, #24]
	mvneq	r4, #11
	beq	.L7527
	sub	r5, r5, #1
	mvn	r4, #11
	ldr	r3, [sp, #16]
	b	.L7516
.L7552:
	bl	__stack_chk_fail
.L7550:
	movw	r0, #:lower16:.LC511
	mov	r2, r4
	ldr	r1, .L7553+8
	movt	r0, #:upper16:.LC511
	mov	r5, #3
	bl	printk
	ldr	r3, [sp, #16]
	b	.L7516
.L7554:
	.align	2
.L7553:
	.word	.LANCHOR3-3384
	.word	.LANCHOR1+3708
	.word	.LANCHOR3-3260
	.word	.LANCHOR3-3244
	.word	.LANCHOR3-3136
	.word	.LANCHOR1+3680
	.fnend
	.size	acm_function_init, .-acm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_read, %function
mbim_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #4]
	cmp	r4, #0
	beq	.L7585
	cmp	r2, #4096
	mov	fp, r2
	bhi	.L7586
	add	r10, r4, #100
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r10]
	add	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L7583
	mov	r3, sp
	ldr	r8, .L7592
	movw	r7, #:lower16:.LC519
	bic	r5, r3, #8128
	movt	r7, #:upper16:.LC519
	bic	r5, r5, #63
.L7559:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L7564
	ldr	r3, [r4, #232]
	cmp	r3, #0
	beq	.L7565
.L7564:
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L7587
	add	r8, r4, #204
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r1, r0
	ldr	r5, [r3, #208]!
	cmp	r5, r3
	bne	.L7577
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L7572
.L7568:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #208]
	mov	r1, r0
	cmp	r5, r6
	bne	.L7567
.L7572:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #208]
	cmp	r3, r5
	bne	.L7568
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r6, sp, #12
	add	r7, r4, #108
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L7571
.L7588:
	bl	schedule
.L7571:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #208]
	cmp	r3, r5
	bne	.L7569
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7588
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
	movw	r0, #:lower16:.LC522
	ldr	r1, .L7592
	movt	r0, #:upper16:.LC522
	bl	printk
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
.L7555:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7569:
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
	b	.L7568
.L7577:
	mov	r6, r5
.L7567:
	ldr	r3, [r6, #-4]
	sub	r5, r6, #8
	cmp	r3, fp
	bhi	.L7589
	ldrd	r2, [r6]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r6]
	str	ip, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r6, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #4]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L7590
.L7574:
	cmp	r2, #0
	ldreq	r4, [r6, #-4]
	bne	.L7591
.L7576:
	cmp	r5, #0
	beq	.L7555
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r5
	bl	kfree
	b	.L7555
.L7590:
	ldr	r1, [r6, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L7574
.L7587:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r4, #4
	b	.L7555
.L7565:
	mov	r1, r8
	mov	r0, r7
	bl	printk
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L7559
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L7559
	ldr	r0, [r5, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r6, sp, #12
	str	r3, [sp, #12]
	add	r9, r4, #108
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
.L7563:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L7561
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L7561
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L7562
	bl	schedule
	b	.L7563
.L7583:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC518
	ldr	r1, .L7592
	mvn	r4, #15
	movt	r0, #:upper16:.LC518
	bl	printk
	b	.L7555
.L7562:
	mov	r1, r6
	mov	r0, r9
	bl	finish_wait
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L7555
.L7561:
	mov	r1, r6
	mov	r0, r9
	bl	finish_wait
	b	.L7559
.L7589:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC520
	mov	r3, fp
	ldr	r1, .L7592
	ldr	r2, [r6, #-4]
	movt	r0, #:upper16:.LC520
	mvn	r4, #11
	bl	printk
	b	.L7555
.L7591:
	movw	r0, #:lower16:.LC521
	ldr	r1, .L7592
	mvn	r4, #11
	movt	r0, #:upper16:.LC521
	bl	printk
	b	.L7576
.L7586:
	movw	r0, #:lower16:.LC517
	mov	r3, #4096
	ldr	r1, .L7592
	movt	r0, #:upper16:.LC517
	mvn	r4, #21
	bl	printk
	b	.L7555
.L7585:
	movw	r0, #:lower16:.LC516
	ldr	r1, .L7592
	mvn	r4, #18
	movt	r0, #:upper16:.LC516
	bl	printk
	b	.L7555
.L7593:
	.align	2
.L7592:
	.word	.LANCHOR3-3028
	.fnend
	.size	mbim_read, .-mbim_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_unbind, %function
f_audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, [r1, #16]
	mov	r4, r1
	str	lr, [sp, #4]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_audio_unbind, .-f_audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_write, %function
adb_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #3424]
	.pad #52
	sub	sp, sp, #52
	ldr	r4, [r0, #124]
	str	r1, [sp, #8]
	str	r2, [sp, #16]
	cmp	r3, #0
	beq	.L7620
	add	r3, r4, #112
	str	r3, [sp, #20]
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L7631
	movw	r3, #:lower16:autoremove_wake_function
	mov	r10, #57344
	movt	r3, #:upper16:autoremove_wake_function
	movt	r10, 65535
	str	r10, [sp, #4]
	str	r3, [sp, #12]
	ldr	r3, [sp, #16]
	mov	r10, r3
.L7598:
	ldr	r2, [sp, #4]
	mov	r3, sp
	and	r9, r3, r2
.L7619:
	cmp	r10, #0
	beq	.L7632
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L7617
	add	r7, r4, #120
	add	r5, r4, #88
	mov	fp, #256
	mov	r8, #512
.L7599:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	r2, r0
	mov	r0, r5
	mov	r1, r2
	cmp	r3, r7
	sub	r6, r3, #36
	beq	.L7633
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	fp, [r3]
	str	r8, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L7602
.L7603:
	ldr	r2, [sp, #4]
	mov	r3, sp
	cmp	r10, #4096
	movcc	r8, r10
	movcs	r8, #4096
	ldr	r1, [sp, #8]
	ldr	r0, [r6]
	and	r3, r3, r2
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L7611
	mov	r2, r8
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L7612
	str	r8, [r6, #4]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7634
	ldr	r3, [sp, #8]
	sub	r10, r10, r8
	add	r3, r3, r8
	str	r3, [sp, #8]
	b	.L7598
.L7633:
	bl	_raw_spin_unlock_irqrestore
.L7602:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L7635
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L7599
.L7617:
	ldr	r3, [r4, #104]
	mvn	r8, #4
	cmp	r3, #0
	beq	.L7618
.L7638:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #128
	bl	__wake_up
	b	.L7618
.L7635:
	ldr	r1, [sp, #12]
	str	r3, [sp, #28]
	add	r2, sp, #40
	str	r3, [sp, #32]
	add	r8, r4, #140
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	ldr	r3, [r9, #12]
	str	r3, [sp, #32]
	str	r1, [sp, #36]
	str	r2, [sp, #40]
	str	r2, [sp, #44]
	b	.L7610
.L7637:
	bl	schedule
.L7610:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r8
	mov	fp, #256
	bl	prepare_to_wait
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r5
	mov	r1, r2
	cmp	r3, r7
	sub	r6, r3, #36
	beq	.L7636
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L7607
.L7606:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L7608
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7637
	mov	r0, r8
	mov	r8, #65024
	add	r1, sp, #28
	movt	r8, 65535
	bl	finish_wait
.L7600:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L7638
.L7618:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L7596:
	mov	r0, r8
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7611:
	mov	r1, r8
	bl	__memzero
.L7612:
	mvn	r8, #13
.L7615:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r5
	str	r2, [r4, #124]
	str	r7, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L7600
.L7607:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	b	.L7603
.L7608:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	b	.L7619
.L7636:
	bl	_raw_spin_unlock_irqrestore
	b	.L7606
.L7632:
	ldr	r8, [sp, #16]
	b	.L7600
.L7631:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r8, #15
	b	.L7596
.L7634:
	mov	r3, #1
	mvn	r8, #4
	str	r3, [r4, #104]
	b	.L7615
.L7620:
	mvn	r8, #18
	b	.L7596
	.fnend
	.size	adb_write, .-adb_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_put_char, %function
gs_put_char:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #92]
	mov	r1, r0
	ldr	r3, [r4, #100]
	ldr	ip, [r4, #104]
	add	r3, r3, r5
	sub	r3, r3, ip
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r3, r5, r2, r3
	cmp	r3, #0
	moveq	r5, r3
	beq	.L7640
	ldr	r2, [r4, #96]
	add	r5, r2, r5
	subs	r3, r5, ip
	beq	.L7645
	cmp	r3, #1
	strb	r6, [ip]
	bne	.L7646
	ldr	r2, [r4, #96]
	mov	r5, r3
	str	r2, [r4, #104]
.L7640:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7645:
	strb	r6, [r2]
	ldr	r3, [r4, #96]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L7640
.L7646:
	ldr	r3, [r4, #104]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L7640
	.fnend
	.size	gs_put_char, .-gs_put_char
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_unbind_config, %function
ncm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #4036]
	cmp	r3, #0
	beq	.L7647
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #4036]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #4036]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #4036]
.L7647:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_function_unbind_config, .-ncm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_unbind_config, %function
ecm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #4036]
	cmp	r3, #0
	beq	.L7653
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #4036]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #4036]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #4036]
.L7653:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_unbind_config, .-ecm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_unbind_config, %function
rndis_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #4036]
	cmp	r3, #0
	beq	.L7659
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #4036]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #4036]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #4036]
.L7659:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_unbind_config, .-rndis_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	lookup_string, %function
lookup_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r3
	strd	r6, [sp, #8]
	mov	r7, r1
	sub	r6, r0, #4
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, #126
	str	r10, [sp, #24]
	add	r10, r1, #2
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
.L7666:
	ldr	r3, [r6, #4]!
	cmp	r3, #0
	beq	.L7688
	ldrh	r2, [r3]
	cmp	r2, r8
	bne	.L7666
	cmp	r5, #0
	beq	.L7689
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L7687
	b	.L7666
.L7690:
	adds	r3, r3, #8
	beq	.L7666
.L7687:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L7666
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r5, r2
	bne	.L7690
	mov	r0, r4
	bl	strlen
	cmp	r0, #126
	mov	r3, r10
	str	r9, [sp]
	movcc	r1, r0
	movcs	r1, #126
	mov	r2, #1
	mov	r0, r4
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L7666
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r7, #1]
	uxtb	r3, r3
	subs	r0, r3, #0
	strb	r3, [r7]
	beq	.L7666
.L7665:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7688:
	mvn	r0, #21
	b	.L7665
.L7689:
	mov	r2, #4
	mov	r1, #3
	mov	r0, r2
	strb	r2, [r7]
	strb	r1, [r7, #1]
	ldrh	r2, [r3]
	strb	r2, [r7, #2]
	ldrh	r3, [r3]
	lsr	r3, r3, #8
	strb	r3, [r7, #3]
	b	.L7665
	.fnend
	.size	lookup_string, .-lookup_string
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unbind, %function
ncm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r0, [r1, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1588]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ncm_unbind, .-ncm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_unbind, %function
ecm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r0, [r1, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1628]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ecm_unbind, .-ecm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_unbind, %function
acm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	mov	r2, #1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	ip, #:upper16:.LANCHOR1
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	mov	lr, #0
	add	r0, ip, #2224
	mov	r3, lr
	mov	r1, r2
	str	r2, [ip, #2220]
	str	lr, [ip, #4040]
	bl	__wake_up
	movw	r0, #:lower16:.LC523
	movt	r0, #:upper16:.LC523
	bl	printk
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	bl	kfree
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
	.fnend
	.size	acm_unbind, .-acm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup, %function
composite_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	add	r0, r0, #32
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	bl	dev_get_drvdata
	ldrh	fp, [r8, #6]	@ unaligned
	ldrh	r6, [r8, #4]	@ unaligned
	ldrh	r7, [r8, #2]	@ unaligned
	ldr	r4, [r0, #4]
	cmp	fp, #4096
	bhi	.L7952
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	movw	r3, #:lower16:composite_setup_complete
	mov	r10, r0
	movt	r3, #:upper16:composite_setup_complete
	mov	r0, #0
	uxtb	r1, r6
	str	r0, [r4, #4]
	bfc	r2, #1, #1
	strb	r2, [r4, #26]
	str	r3, [r4, #28]
	ldr	r3, [r5, #4]
	str	r10, [r3]
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	cmp	r3, #11
	ldrls	pc, [pc, r3, asl #2]
	b	.L7700
.L7702:
	.word	.L7701
	.word	.L7703
	.word	.L7700
	.word	.L7703
	.word	.L7700
	.word	.L7700
	.word	.L7704
	.word	.L7700
	.word	.L7705
	.word	.L7706
	.word	.L7707
	.word	.L7708
.L7708:
	ldrb	r3, [r8]	@ zero_extendqisi2
	ldr	r0, [r10, #12]
	cmp	r3, #1
	beq	.L8124
.L7710:
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L7886
.L8127:
	cmp	r3, #2
	bne	.L7885
	mov	r1, r0
	asr	r3, r6, #3
	ldr	ip, [r1, #36]!
	and	r6, r6, #15
	and	r3, r3, #16
	orr	r3, r3, r6
	cmp	r1, ip
	sub	r2, ip, #72
	beq	.L7885
	ldr	ip, [ip, #8]
	lsr	ip, ip, r3
	tst	ip, #1
	bne	.L7890
	mov	r6, #1
	lsl	r6, r6, r3
	b	.L7891
.L7892:
	ldr	r3, [r3, #8]
	tst	r3, r6
	bne	.L7890
.L7891:
	ldr	r3, [r2, #72]
	cmp	r1, r3
	sub	r2, r3, #72
	bne	.L7892
.L7885:
	cmp	r0, #0
	beq	.L7952
.L7889:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	beq	.L7952
	mov	r1, r8
	blx	r3
	mov	r6, r0
	movw	r3, #32767
	cmp	r6, r3
	beq	.L8125
.L7697:
	mov	r0, r6
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7701:
	ldr	r2, [r5, #20]
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	r2, #4
	bls	.L8119
	cmp	r3, #129
	bne	.L8119
	ldr	r2, [r4]
	mov	r0, #0
	cmp	r1, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	fp, #2
	movls	fp, #0
	movhi	fp, #1
	strb	r0, [r2]
	strb	r0, [r2, #1]
	ldr	r2, [r10, #12]
	cmp	r2, r0
	moveq	r3, #1
	cmp	r3, r0
	beq	.L8126
.L7949:
	mov	r7, #2
	b	.L7730
.L7704:
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	r3, #128
	beq	.L7709
.L8119:
	and	r3, r3, #31
	ldr	r0, [r10, #12]
	cmp	r3, #1
	bne	.L8127
.L7886:
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	r1, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L7885
	add	r1, r1, #12
	ldr	r2, [r0, r1, lsl #2]
	cmp	r2, #0
	beq	.L7889
.L7888:
	ldr	r3, [r2, #52]
	cmp	r3, #0
	beq	.L7885
	mov	r1, r8
	mov	r0, r2
	blx	r3
	mov	r6, r0
	movw	r3, #32767
	cmp	r6, r3
	bne	.L7697
.L8125:
	ldr	r3, [r10, #56]
	add	r3, r3, #1
	str	r3, [r10, #56]
	b	.L7697
.L7703:
	ldr	r2, [r5, #20]
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	r2, #4
	bls	.L8119
	cmp	r3, #1
	bne	.L8119
	cmp	r7, #0
	bne	.L8099
	ldr	r2, [r10, #12]
	clz	r3, r2
	lsr	r3, r3, #5
	cmp	r1, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L7952
	add	r1, r1, #12
	ldr	r0, [r2, r1, lsl #2]
	cmp	r0, #0
	beq	.L7952
	ldr	r3, [r0, #68]
	cmp	r3, #0
	beq	.L8120
	lsr	r1, r6, #8
	blx	r3
	subs	r6, r0, #0
	blt	.L7884
	movw	r7, #32767
	subs	r7, r6, r7
	movne	r7, #1
.L7773:
	cmp	r7, #0
	beq	.L7711
.L7895:
	cmp	fp, r6
	mov	r7, r6
	movle	fp, #0
	movgt	fp, #1
	b	.L7730
.L7706:
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8119
	add	r3, r10, #60
	mov	r0, r3
	str	r3, [sp, #8]
	bl	_raw_spin_lock
	ldr	r6, [r10]
	ldr	r3, [r10, #12]
	mov	r9, r6
	cmp	r3, #0
	beq	.L7827
	ldrb	r2, [r3, #20]	@ zero_extendqisi2
	cmp	r7, r2
	beq	.L8108
	cmp	r7, #0
	beq	.L8128
.L7898:
	mov	r3, r10
	ldr	r8, [r3, #36]!
	sub	r8, r8, #28
	str	r3, [sp, #12]
	b	.L7831
.L7840:
	ldrb	r3, [r8, #20]	@ zero_extendqisi2
	cmp	r7, r3
	beq	.L7835
	bl	check_config
	cmp	r0, #0
	bne	.L7835
	ldr	r8, [r8, #28]
	sub	r8, r8, #28
.L7831:
	ldr	r2, [sp, #12]
	add	r3, r8, #28
	mov	r0, r7
	cmp	r3, r2
	bne	.L7840
	mvn	r6, #21
.L7841:
	ldr	r3, [r9]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L7851
	mov	r0, r9
	mov	r1, #100
	blx	r3
.L7851:
	ldr	r0, [sp, #8]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC530
	movt	r0, #:upper16:.LC530
	bl	printk
.L7867:
	ldr	r3, [r5, #16]
	mvn	r8, r6
	movw	r9, #32767
	lsr	r8, r8, #31
	cmp	r6, r9
	moveq	r7, #0
	andne	r7, r8, #1
	cmp	r3, #5
	bne	.L7773
	bl	get_host_os_type
	cmp	r0, #0
	bne	.L7773
.L7914:
	movw	r8, #:lower16:sec_qcom_usb_rdrv
	mov	r1, #0
	movt	r8, #:upper16:sec_qcom_usb_rdrv
	ldr	r0, [r8]
	bl	__gpio_set_value
	movw	r0, #:lower16:.LC531
	ldr	r1, .L8150
	ldr	r2, [r8]
	movt	r0, #:upper16:.LC531
	bl	printk
	movw	r0, #:lower16:.LC532
	movt	r0, #:upper16:.LC532
	bl	printk
	b	.L7773
.L7705:
	ldrb	r3, [r8]	@ zero_extendqisi2
	ldr	r0, [r10, #12]
	cmp	r3, #128
	bne	.L7710
	cmp	r0, #0
	beq	.L7869
	bl	get_config_number
	ldr	r3, [r4]
	add	r0, r0, #1
	strb	r0, [r3]
.L7870:
	adds	r7, fp, #0
	movne	r7, #1
	cmp	fp, r7
	movls	fp, #0
	movhi	fp, #1
	b	.L7730
.L7707:
	ldrb	r3, [r8]	@ zero_extendqisi2
	ldr	r0, [r10, #12]
	cmp	r3, #129
	bne	.L7710
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	r1, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L7952
	add	r1, r1, #12
	ldr	r0, [r0, r1, lsl #2]
	cmp	r0, #0
	beq	.L7952
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L7945
	mov	r1, r6
	blx	r3
	subs	r6, r0, #0
	blt	.L7697
.L7876:
	adds	r7, fp, #0
	ldr	r3, [r4]
	movne	r7, #1
	cmp	r7, fp
	movge	fp, #0
	movlt	fp, #1
	strb	r6, [r3]
.L7730:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r7, [r4, #4]
	mov	r2, #32
	mov	r1, r4
	bfi	r3, fp, #1, #1
	strb	r3, [r4, #26]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	movlt	r3, #0
	strlt	r3, [r4, #44]
	b	.L7697
.L7700:
	ldrb	r3, [r8]	@ zero_extendqisi2
	b	.L8119
.L7890:
	cmp	r2, #0
	bne	.L7888
	b	.L7885
.L7717:
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bls	.L7952
	ldr	r3, [r5, #16]
	cmp	r3, #4
	bls	.L7714
.L7952:
	mvn	r6, #94
	b	.L7697
.L8124:
	cmp	r1, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L7952
	add	r1, r1, #12
	ldr	r0, [r0, r1, lsl #2]
	cmp	r0, #0
	beq	.L7952
	cmp	r7, #0
	bne	.L8129
	ldr	r3, [r0, #44]
	cmp	r3, #0
	ldrne	r3, [r0, #40]
	beq	.L8120
.L7872:
	mov	r1, r6
	mov	r2, r7
	blx	r3
	movw	r3, #32767
	mov	r6, r0
	cmp	r0, r3
	beq	.L7874
	mvn	r7, r0
	lsr	r7, r7, #31
	b	.L7773
.L7709:
	lsr	r8, r7, #8
	sub	r3, r8, #1
	cmp	r3, #14
	ldrls	pc, [pc, r3, asl #2]
	b	.L8099
.L7713:
	.word	.L7712
	.word	.L7714
	.word	.L7715
	.word	.L8099
	.word	.L8099
	.word	.L7716
	.word	.L7717
	.word	.L8099
	.word	.L8099
	.word	.L8099
	.word	.L8099
	.word	.L8099
	.word	.L8099
	.word	.L8099
	.word	.L7718
.L7714:
	mov	r0, fp
	bl	set_config_mode
	ldr	r3, [r10]
	ldr	r2, [r3, #16]
	cmp	r2, #5
	str	r2, [sp, #12]
	beq	.L7744
	ldr	r3, [r3, #20]
	cmp	r3, #2
	movls	r3, #0
	strls	r3, [sp, #12]
	bls	.L7744
	cmp	r2, #3
	beq	.L7745
	cmp	r8, #7
	moveq	r3, #3
	movne	r3, #0
	str	r3, [sp, #12]
.L7744:
	uxtb	r0, r7
	bl	set_config_number
	mov	r2, r10
	ldr	r7, [r2, #36]!
	cmp	r2, r7
	sub	r7, r7, #28
	ldrne	r1, [sp, #12]
	bne	.L7746
	b	.L7911
.L8131:
	cmp	r1, #5
	bne	.L8092
	tst	r3, #1
	beq	.L7750
.L7751:
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L8130
.L7750:
	ldr	r7, [r7, #28]
	cmp	r2, r7
	sub	r7, r7, #28
	beq	.L7911
.L7746:
	cmp	r1, #3
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	bne	.L8131
	tst	r3, #2
	bne	.L7751
	b	.L7750
.L7718:
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L7821
	ldrb	r3, [r5, #385]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7952
.L7821:
	ldr	ip, [r10, #4]
	mov	r2, #0
	mov	r3, #5
	mov	r0, #15
	mov	r8, #12
	mov	r1, #1
	mov	r7, #7
	mov	lr, #16
	ldr	r6, [ip]
	mov	ip, #2
	strb	r3, [r6]
	strb	r0, [r6, #1]
	strb	r3, [r6, #2]
	strb	r2, [r6, #3]
	strb	r2, [r6, #4]
	ldr	r3, [r10, #4]
	ldr	r3, [r3]
	strh	r8, [r6, #2]	@ movhi
	strb	r1, [r6, #4]
	strb	r7, [r3, #5]
	strb	lr, [r3, #6]
	strb	ip, [r3, #7]
	strb	r2, [r3, #8]
	strb	r2, [r3, #9]
	strb	r2, [r3, #10]
	strb	r2, [r3, #11]
	ldr	r3, [r10]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L7822
	ldr	lr, [r10, #4]
	movw	r8, #4106
	ldrh	ip, [r6, #2]	@ unaligned
	movt	r8, 3
	ldrb	r3, [r6, #4]	@ zero_extendqisi2
	ldr	lr, [lr]
	add	r7, ip, #10
	add	r3, r3, r1
	strh	r7, [r6, #2]	@ movhi
	add	r7, lr, ip
	strb	r3, [r6, #4]
	str	r8, [lr, ip]	@ unaligned
	strb	r0, [r7, #4]
	strb	r2, [r7, #5]
	strb	r1, [r7, #6]
	ldr	r3, [r10]
	ldr	r3, [r3]
	ldr	r3, [r3, #28]
	cmp	r3, r2
	beq	.L7823
	add	r0, sp, #44
	blx	r3
.L7824:
	ldrb	r3, [sp, #44]	@ zero_extendqisi2
	strb	r3, [r7, #7]
	ldrh	r3, [sp, #46]
	strh	r3, [r7, #8]	@ unaligned
.L7822:
	ldrh	r3, [r6, #2]	@ unaligned
	cmp	fp, r3
	bcc	.L7825
	movw	r7, #32767
	mov	r6, r3
	subs	r7, r3, r7
	movne	r7, #1
	b	.L7773
.L7716:
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bls	.L7952
	ldr	r3, [r5, #16]
	cmp	r3, #4
	bhi	.L7952
	ldr	r1, [r10, #4]
	mov	r2, #10
	mov	r3, #6
	ldr	r9, [r1]
	strb	r2, [r9]
	strb	r3, [r9, #1]
	ldrh	r3, [r10, #19]	@ unaligned
	strh	r3, [r9, #2]	@ unaligned
	ldrb	r3, [r10, #21]	@ zero_extendqisi2
	strb	r3, [r9, #4]
	ldrb	r3, [r10, #22]	@ zero_extendqisi2
	strb	r3, [r9, #5]
	ldrb	r3, [r10, #23]	@ zero_extendqisi2
	strb	r3, [r9, #6]
	ldr	r3, [r10]
	ldr	r3, [r3, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r9, #7]
	ldr	r3, [r10]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L7732
	ldr	r6, [r10, #36]!
	cmp	r10, r6
	sub	r6, r6, #28
	beq	.L7921
.L7733:
	mov	r3, #0
.L7910:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #4
	beq	.L7738
	bl	count_multi_config
	ldr	r6, [r6, #28]
	mov	r3, r0
	cmp	r10, r6
	sub	r6, r6, #28
	bne	.L7910
.L7734:
	cmp	fp, #10
	mov	r2, #0
	strb	r3, [r9, #8]
	movlt	r7, fp
	movge	r7, #10
	cmp	fp, r7
	strb	r2, [r9, #9]
	movle	fp, #0
	movgt	fp, #1
	b	.L7730
.L7715:
	mov	r0, fp
	bl	set_string_mode
	ldr	r3, [r4]
	ands	r9, r7, #255
	str	r3, [sp, #8]
	beq	.L8132
	ldrb	r3, [r10, #49]	@ zero_extendqisi2
	cmp	r9, r3
	beq	.L8133
	ldrb	r3, [r10, #50]	@ zero_extendqisi2
	cmp	r9, r3
	beq	.L8134
	ldrb	r3, [r10, #51]	@ zero_extendqisi2
	cmp	r9, r3
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	beq	.L8094
.L7805:
	ldr	r3, [r3, #2252]
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L7808
	mov	r3, r9
	mov	r2, r6
	ldr	r1, [sp, #8]
	bl	lookup_string
	cmp	r0, #0
	ble	.L7808
.L7800:
	uxth	r3, r0
	cmp	r3, fp
	bhi	.L7825
	uxth	r6, r0
	movw	r7, #32767
	subs	r7, r6, r7
	movne	r7, #1
	b	.L7773
.L8099:
	mvn	r6, #94
.L7711:
	movw	r3, #32767
	sub	r3, r6, r3
	clz	r3, r3
	lsr	r3, r3, #5
.L7875:
	cmp	fp, #0
	moveq	r3, #0
	cmp	r3, #0
	beq	.L7697
	cmp	r10, #0
	movweq	r6, #32767
	beq	.L7697
	movw	r2, #:lower16:.LC534
	movw	r0, #:lower16:.LC487
	ldr	r3, .L8150
	movt	r2, #:upper16:.LC534
	movt	r0, #:upper16:.LC487
	movw	r1, #1500
	movw	r6, #32767
	bl	warn_slowpath_fmt
	b	.L7697
.L8092:
	tst	r3, #4
	bne	.L7751
	b	.L7750
.L7869:
	ldr	r3, [r4]
	strb	r0, [r3]
	b	.L7870
.L7813:
	ldr	r8, [r8, #72]
	ldr	r3, [sp, #8]
	cmp	r3, r8
	sub	r8, r8, #72
	bne	.L7810
.L7811:
	ldr	r3, [sp, #12]
	ldr	r2, [sp, #32]
	ldr	r3, [r3, #28]
	cmp	r2, r3
	sub	r3, r3, #28
	str	r3, [sp, #12]
	bne	.L7807
.L7911:
	mvn	r6, #21
	b	.L7697
.L7825:
	mov	r7, fp
	mov	fp, #0
	b	.L7730
.L8126:
	add	r1, r1, #12
	ldr	r0, [r2, r1, lsl #2]
	cmp	r0, #0
	beq	.L7949
	ldr	r3, [r0, #64]
	cmp	r3, #0
	beq	.L7879
	blx	r3
	subs	r3, r0, #0
	blt	.L7949
.L7879:
	ldr	r2, [r4]
	ubfx	r1, r3, #8, #8
	mov	r7, #2
	strb	r3, [r2]
	strb	r1, [r2, #1]
	b	.L7730
.L8129:
	ldr	r3, [r0, #40]
	cmp	r3, #0
	bne	.L7872
	b	.L7952
.L8130:
	ldr	r2, [r10, #4]
	mov	r3, #9
	ldr	r2, [r2]
	strb	r3, [r2]
	add	r3, r2, r3
	mov	r6, r2
	strb	r8, [r2, #1]
	str	r3, [sp, #16]
	ldrb	r3, [r7, #44]	@ zero_extendqisi2
	str	r2, [sp, #20]
	strb	r3, [r2, #4]
	bl	get_config_number
	add	r0, r0, #1
	strb	r0, [r6, #5]
	ldrb	r3, [r7, #21]	@ zero_extendqisi2
	strb	r3, [r6, #6]
	ldrb	r3, [r7, #22]	@ zero_extendqisi2
	mvn	r3, r3, lsl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r6, #7]
	ldrb	r3, [r7, #23]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7753
	ldr	r2, [r7, #24]
	mov	r3, #500
	ldr	r2, [r2, #64]
	sdiv	r3, r3, r2
	uxtb	r3, r3
.L7753:
	ldr	r2, [sp, #20]
	strb	r3, [r2, #8]
	ldr	r9, [r7, #8]
	cmp	r9, #0
	beq	.L7928
	ldr	r1, [r9]
	cmp	r1, #0
	beq	.L7929
	ldrb	r6, [r1]	@ zero_extendqisi2
	movw	r8, #4087
	ldr	r3, [sp, #16]
	b	.L7756
.L7758:
	ldrb	r6, [r1]	@ zero_extendqisi2
	cmp	r6, r8
	bhi	.L7911
.L7756:
	mov	r0, r3
	mov	r2, r6
	bl	memcpy
	ldr	r1, [r9, #4]!
	sub	r8, r8, r6
	add	r3, r0, r6
	cmp	r1, #0
	bne	.L7758
.L7755:
	ldr	r2, [sp, #16]
	subs	r6, r3, r2
	bmi	.L7697
	rsb	r3, r6, #4080
	add	r2, r2, r6
	add	r3, r3, #7
	mov	r1, r3
	str	r2, [sp, #16]
.L7754:
	mov	r2, r7
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	str	r2, [sp, #8]
	sub	r3, r3, #72
	beq	.L7760
	ldr	r9, [sp, #16]
	mov	r8, r1
	str	r4, [sp, #24]
	str	r10, [sp, #32]
	ldr	r10, [sp, #12]
	str	r7, [sp, #12]
	mov	r7, r3
	str	fp, [sp, #28]
	str	r5, [sp, #36]
.L7770:
	ldr	r0, [r7]
	bl	is_available_function
	cmp	r0, #0
	beq	.L7761
	cmp	r10, #3
	beq	.L7763
	cmp	r10, #5
	bne	.L8093
	ldr	fp, [r7, #12]
.L7765:
	cmp	fp, #0
	beq	.L7761
	ldr	r1, [fp]
	mov	r6, r8
	cmp	r1, #0
	beq	.L7930
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r8, r4
	bcc	.L7911
	mov	r5, r9
	b	.L7767
.L7768:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r6
	bhi	.L7911
.L7767:
	mov	r0, r5
	mov	r2, r4
	bl	memcpy
	ldr	r1, [fp, #4]!
	sub	r6, r6, r4
	add	r5, r5, r4
	cmp	r1, #0
	bne	.L7768
	subs	r6, r5, r9
	bmi	.L7697
.L7766:
	mov	r1, r9
	mov	r2, r8
	ldr	r3, [sp, #12]
	mov	r0, r7
	str	r10, [sp]
	bl	change_conf
	cmp	r0, #0
	blt	.L8135
	sub	r8, r8, r6
	mov	r9, r5
.L7761:
	ldr	r7, [r7, #72]
	ldr	r3, [sp, #8]
	cmp	r3, r7
	sub	r7, r7, #72
	bne	.L7770
	ldr	r7, [sp, #12]
	str	r9, [sp, #16]
	ldr	r4, [sp, #24]
	ldr	fp, [sp, #28]
	ldr	r10, [sp, #32]
	ldr	r5, [sp, #36]
.L7760:
	mov	r0, r7
	ldr	r2, [sp, #16]
	ldr	r7, [sp, #20]
	sub	r6, r2, r7
	mov	r1, r7
	bl	set_interface_count
	uxth	r3, r6
	cmp	r6, #0
	strh	r3, [r7, #2]	@ unaligned
	blt	.L7697
	cmp	fp, r3
	bcc	.L7825
	uxth	r6, r6
	movw	r7, #32767
	subs	r7, r6, r7
	movne	r7, #1
	b	.L7773
.L8093:
	ldr	fp, [r7, #16]
	b	.L7765
.L7763:
	ldr	fp, [r7, #8]
	b	.L7765
.L7874:
	ldr	r2, [r10, #56]
	mov	r3, #1
	add	r2, r2, r3
	str	r2, [r10, #56]
	b	.L7875
.L8132:
	mov	r0, r3
	mov	r1, #256
	mov	r6, r3
	bl	__memzero
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #3
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2252]
	strb	r2, [r6, #1]
	ldr	ip, [r3, #16]
	cmp	ip, #0
	beq	.L7775
	ldr	r3, [ip]
	add	lr, r6, #2
	cmp	r3, #0
	beq	.L7775
	add	r0, r6, #254
.L7780:
	ldrh	r2, [r6, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L7932
	cmp	lr, r0
	bcs	.L7932
	cmp	r1, r2
	beq	.L7777
	mov	r3, lr
	b	.L7778
.L8136:
	cmp	r3, r0
	bcs	.L7776
	cmp	r1, r2
	beq	.L7777
.L7778:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L8136
.L7776:
	strh	r1, [r3]	@ movhi
.L7777:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	bne	.L7780
.L7775:
	mov	r3, r10
	ldr	r7, [r3, #36]!
	cmp	r3, r7
	sub	r9, r7, #28
	beq	.L7781
	ldr	r2, [sp, #8]
	str	r4, [sp, #12]
	str	r10, [sp, #16]
	mov	r10, r3
	str	r5, [sp, #20]
	add	r7, r2, #2
	add	r8, r2, #254
	mov	r4, r2
	mov	r5, r7
.L7796:
	ldr	lr, [r9, #4]
	cmp	lr, #0
	beq	.L7782
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L7782
.L7787:
	ldrh	r2, [r4, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L7934
	cmp	r5, r8
	bcs	.L7934
	cmp	r1, r2
	beq	.L7784
	mov	r3, r5
	b	.L7785
.L8137:
	cmp	r3, r8
	bcs	.L7783
	cmp	r1, r2
	beq	.L7784
.L7785:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L8137
.L7783:
	strh	r1, [r3]	@ movhi
.L7784:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L7787
.L7782:
	mov	r6, r9
	ldr	r7, [r6, #36]!
	cmp	r6, r7
	sub	r7, r7, #72
	beq	.L7788
.L7795:
	ldr	r0, [r7]
	bl	is_available_function
	cmp	r0, #0
	beq	.L7789
	ldr	r0, [r7, #4]
	cmp	r0, #0
	beq	.L7789
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L7789
.L7794:
	ldrh	r2, [r4, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L7936
	cmp	r5, r8
	bcs	.L7936
	cmp	r1, r2
	beq	.L7791
	mov	r3, r5
	b	.L7792
.L8138:
	cmp	r3, r8
	bcs	.L7790
	cmp	r1, r2
	beq	.L7791
.L7792:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L8138
.L7790:
	strh	r1, [r3]	@ movhi
.L7791:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L7794
.L7789:
	ldr	r7, [r7, #72]
	cmp	r6, r7
	sub	r7, r7, #72
	bne	.L7795
.L7788:
	ldr	r9, [r9, #28]
	cmp	r10, r9
	sub	r9, r9, #28
	bne	.L7796
	ldr	r4, [sp, #12]
	ldr	r10, [sp, #16]
	ldr	r5, [sp, #20]
.L7781:
	mov	r3, #0
.L7797:
	ldr	r2, [sp, #8]
	add	r2, r2, r3, lsl #1
	ldrh	r2, [r2, #2]	@ unaligned
	cmp	r2, #0
	bne	.L7799
	cmp	r3, #0
	beq	.L7911
.L7798:
	add	r3, r3, #1
	ldr	r2, [sp, #8]
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2]
	b	.L7800
.L7936:
	mov	r3, r5
	b	.L7790
.L7934:
	mov	r3, r5
	b	.L7783
.L7808:
	mov	r2, r10
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	sub	r3, r3, #28
	str	r3, [sp, #12]
	str	r2, [sp, #32]
	beq	.L7911
	ldr	r7, [sp, #8]
	str	r4, [sp, #16]
	str	fp, [sp, #20]
	str	r10, [sp, #24]
	str	r5, [sp, #28]
	add	r3, r7, #2
	mov	fp, r3
	ldr	r3, [sp, #12]
.L7807:
	ldr	r0, [r3, #4]
	cmp	r0, #0
	beq	.L7812
	mov	r3, r9
	mov	r2, r6
	mov	r1, r7
	bl	lookup_string
	cmp	r0, #0
	bgt	.L8116
.L7812:
	ldr	r3, [sp, #12]
	ldr	r8, [r3, #36]!
	cmp	r3, r8
	str	r3, [sp, #8]
	sub	r8, r8, #72
	beq	.L7811
	mov	r10, #126
.L7810:
	ldr	r5, [r8, #4]
	cmp	r5, #0
	subne	r5, r5, #4
	beq	.L7813
.L7814:
	ldr	r3, [r5, #4]!
	cmp	r3, #0
	beq	.L7813
	ldrh	r2, [r3]
	cmp	r2, r6
	bne	.L7814
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L8121
	b	.L7814
.L8139:
	adds	r3, r3, #8
	beq	.L7814
.L8121:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L7814
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r9, r2
	bne	.L8139
	mov	r0, r4
	bl	strlen
	cmp	r0, #126
	mov	r3, fp
	str	r10, [sp]
	movcc	r1, r0
	movcs	r1, #126
	mov	r2, #1
	mov	r0, r4
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L7814
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r7, #1]
	uxtb	r3, r3
	subs	r0, r3, #0
	strb	r3, [r7]
	beq	.L7814
.L8116:
	ldr	r4, [sp, #16]
	ldr	fp, [sp, #20]
	ldr	r10, [sp, #24]
	ldr	r5, [sp, #28]
	b	.L7800
.L8133:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r7, [r3, #3948]
	cmp	r7, #0
	bne	.L7802
	ldr	r2, [r3, #2252]
	ldr	r7, [r2, #8]
	cmp	r7, #0
	addeq	r7, r3, #3952
.L7802:
	mov	r0, r7
	bl	strlen
	ldr	r3, [sp, #8]
	mov	r2, #126
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r7
	mov	r2, #1
	add	r3, r3, #2
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L7911
	add	r3, r0, #1
	ldr	r1, [sp, #8]
	mov	r2, #3
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r1]
	strb	r2, [r1, #1]
	b	.L7800
.L7928:
	movw	r3, #4087
	mov	r1, r3
	b	.L7754
.L7930:
	mov	r6, r1
	mov	r5, r9
	b	.L7766
.L7799:
	add	r3, r3, #1
	cmp	r3, #127
	bne	.L7797
	b	.L7798
.L8134:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r7, [r3, #4004]
	cmp	r7, #0
	ldreq	r2, [r3, #2252]
	ldreq	r7, [r2, #4]
	bne	.L7802
.L7804:
	cmp	r7, #0
	beq	.L7805
	b	.L7802
.L7932:
	mov	r3, lr
	b	.L7776
.L7745:
	ldr	r3, [sp, #12]
	cmp	r8, #7
	moveq	r3, #0
	str	r3, [sp, #12]
	b	.L7744
.L8094:
	ldr	r7, [r3, #4008]
	b	.L7804
.L7738:
	ldr	r6, [r6, #28]
	cmp	r10, r6
	sub	r6, r6, #28
	bne	.L7910
	b	.L7734
.L7945:
	mov	r6, r3
	b	.L7876
.L7732:
	ldr	r3, [r3, #16]
	ldr	r6, [r10, #36]!
	cmp	r3, #3
	beq	.L8140
	cmp	r10, r6
	sub	r6, r6, #28
	beq	.L7921
	cmp	r3, #5
	mov	r3, #0
	bne	.L7737
.L7736:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #1
	beq	.L7742
	bl	count_multi_config
	ldr	r6, [r6, #28]
	mov	r3, r0
	cmp	r10, r6
	sub	r6, r6, #28
	bne	.L7736
	b	.L7734
.L7740:
	ldr	r6, [r6, #28]
	cmp	r10, r6
	sub	r6, r6, #28
	beq	.L7734
.L7737:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #2
	beq	.L7740
	bl	count_multi_config
	ldr	r6, [r6, #28]
	mov	r3, r0
	cmp	r10, r6
	sub	r6, r6, #28
	bne	.L7737
	b	.L7734
.L7742:
	ldr	r6, [r6, #28]
	cmp	r10, r6
	sub	r6, r6, #28
	bne	.L7736
	b	.L7734
.L7884:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC533
	adds	fp, fp, #0
	mov	r2, r6
	movt	r1, #:upper16:.LC533
	movne	fp, #1
	add	r0, r0, #32
	bl	dev_err
	b	.L7730
.L8120:
	adds	fp, fp, #0
	movne	fp, #1
	b	.L7730
.L8140:
	cmp	r10, r6
	sub	r6, r6, #28
	bne	.L7733
.L7921:
	mov	r3, #0
	b	.L7734
.L7823:
	mov	r3, #500
	strb	r1, [sp, #44]
	strh	r3, [sp, #46]	@ movhi
	b	.L7824
.L7929:
	ldr	r3, [sp, #16]
	b	.L7755
.L7712:
	ldr	r3, [r10]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r7, #0
	movls	r8, r7
	bls	.L7719
	ldr	r7, [r3, #16]
	cmp	r7, #3
	beq	.L7917
	sub	r7, r7, #5
	mov	r8, #0
	clz	r7, r7
	lsr	r7, r7, #5
.L7719:
	mov	r3, r10
	ldr	r6, [r3, #36]!
	mov	r2, #0
	sub	r6, r6, #28
	str	r3, [sp, #12]
	b	.L7720
.L8142:
	tst	r3, #1
	beq	.L7722
.L7723:
	bl	count_multi_config
	mov	r2, r0
.L7722:
	ldr	r6, [r6, #28]
	sub	r6, r6, #28
.L7720:
	ldr	ip, [sp, #12]
	add	r3, r6, #28
	mov	r0, r6
	add	r1, r2, #1
	cmp	r3, ip
	beq	.L8141
	cmp	r7, #0
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	bne	.L8142
	cmp	r8, #0
	beq	.L7724
	tst	r3, #2
	bne	.L7723
	b	.L7722
.L8141:
	ldr	r1, [r10]
	strb	r2, [r10, #34]
	mov	r3, #2
	ldr	r2, [r1, #4]
	ldrh	r2, [r2, #20]
	strb	r2, [r10, #24]
	str	r3, [r10, #64]
	ldr	r2, [r5, #20]
	cmp	r2, #4
	bls	.L7726
	ldr	r2, [r5, #16]
	cmp	r2, #4
	bls	.L7727
	mov	r0, #0
	mov	r1, #3
	mov	r2, #9
	mov	r3, #8
	strb	r0, [r10, #19]
	strb	r1, [r10, #20]
	strb	r2, [r10, #24]
	str	r3, [r10, #64]
.L7728:
	cmp	fp, #17
	add	r1, r10, #17
	ldr	r0, [r4]
	movls	r7, fp
	movhi	r7, #18
	mov	r2, r7
	bl	memcpy
	movw	r0, #:lower16:.LC524
	movt	r0, #:upper16:.LC524
	bl	printk
	cmp	fp, r7
	movls	fp, #0
	movhi	fp, #1
	b	.L7730
.L8128:
	ldr	r8, [r3, #36]
	mov	r9, r7
	sub	r8, r8, #72
.L7842:
	add	r3, r3, #36
	add	r2, r8, #72
	cmp	r2, r3
	mov	r0, r8
	beq	.L8143
	ldr	r3, [r8, #48]
	cmp	r3, #0
	beq	.L7843
	blx	r3
.L7843:
	ldr	r2, [r8, #72]
	str	r9, [r8, #80]
	ldr	r3, [r10, #12]
	sub	r8, r2, #72
	b	.L7842
.L8151:
	.align	2
.L8150:
	.word	.LANCHOR3-2992
	.word	.LANCHOR3-3016
	.word	.LANCHOR3-3004
.L8143:
	ldr	r9, [r10]
	mov	r3, #0
	str	r3, [r10, #12]
	str	r3, [r10, #56]
.L7830:
	add	r3, r9, #32
	ldr	r0, [r6, #16]
	str	r3, [sp, #12]
	bl	usb_speed_string
	mov	r2, r0
.L7845:
	movw	r3, #:lower16:.LC535
	movw	r1, #:lower16:.LC526
	ldr	r0, [sp, #12]
	movt	r3, #:upper16:.LC535
	movt	r1, #:upper16:.LC526
	str	r3, [sp]
	mov	r3, r7
	bl	_dev_info
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L8123
	mov	r0, r6
	mov	r1, #100
	blx	r3
.L8123:
	ldr	r3, [r10, #56]
	cmp	r3, #0
	bne	.L7906
.L8108:
	ldr	r0, [sp, #8]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC530
	movt	r0, #:upper16:.LC530
	bl	printk
.L7905:
	cmp	r7, #0
	beq	.L7868
	sub	r0, r7, #1
	bl	set_config_number
.L7868:
	ldr	r3, [r5, #16]
	cmp	r3, #5
	beq	.L7908
	adds	fp, fp, #0
	mov	r7, #0
	movne	fp, #1
	b	.L7730
.L7906:
	movw	r6, #32767
	b	.L7851
.L8135:
	movw	r0, #:lower16:.LC525
	ldr	r1, .L8150+4
	mvn	r6, #21
	movt	r0, #:upper16:.LC525
	bl	printk
	b	.L7697
.L7835:
	ldr	r3, [r10, #12]
	cmp	r3, #0
	beq	.L7834
	ldr	r2, [r3, #36]
	str	r9, [sp, #12]
	mov	r9, r5
	mov	r5, r4
	sub	r2, r2, #72
	mov	r4, r2
.L7837:
	add	r3, r3, #36
	add	r1, r4, #72
	cmp	r1, r3
	mov	r0, r4
	beq	.L8144
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L7838
	blx	r3
.L7838:
	ldr	r1, [r4, #72]
	mov	r3, #0
	str	r3, [r4, #80]
	ldr	r3, [r10, #12]
	sub	r4, r1, #72
	b	.L7837
.L8144:
	mov	r4, r5
	mov	r5, r9
	ldr	r9, [sp, #12]
	mov	r3, #0
	str	r3, [r10, #12]
	str	r3, [r10, #56]
.L7834:
	ldr	r3, [r10]
	ldr	r0, [r9, #16]
	add	r3, r3, #32
	str	r3, [sp, #12]
	bl	usb_speed_string
	cmp	r8, #0
	mov	r2, r0
	beq	.L7845
	ldr	r3, [r8]
	movw	r1, #:lower16:.LC527
	mov	r6, #0
	mov	ip, r1
	movw	r1, #:lower16:.LC526
	ldr	r0, [sp, #12]
	movt	ip, #:upper16:.LC527
	movt	r1, #:upper16:.LC526
	str	r3, [sp]
	mov	r3, r7
	str	ip, [sp, #24]
	bl	_dev_info
	add	r3, r8, #48
	mov	r0, r6
	str	r8, [r10, #12]
	str	r6, [sp, #12]
	str	r4, [sp, #16]
	str	r3, [sp, #20]
.L7864:
	ldr	r3, [sp, #20]
	ldr	r4, [r3], #4
	cmp	r4, #0
	str	r3, [sp, #20]
	beq	.L7846
	ldr	r3, [r9, #16]
	cmp	r3, #3
	beq	.L7848
	cmp	r3, #5
	str	r3, [sp, #28]
	bne	.L8097
	ldr	r0, [sp, #24]
	bl	power_supply_get_by_name
	ldr	r6, [r4, #12]
	ldr	r3, [sp, #28]
	cmp	r6, #0
	beq	.L8145
	cmp	r0, #0
	beq	.L8146
	add	r2, sp, #48
	mov	r1, #4
	str	r3, [r2, #-4]!
	ldr	r3, [r0, #40]
	blx	r3
.L7854:
	ldr	r2, [r6]
	cmp	r2, #0
	beq	.L7859
	add	r3, r4, #80
	str	r9, [sp, #28]
	mov	r9, r5
	mov	r5, r4
	mov	r4, r3
.L7856:
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	bne	.L7855
	ldrb	r2, [r2, #2]	@ zero_extendqisi2
	mov	r1, r4
	asr	r0, r2, #3
	and	r2, r2, #15
	and	r0, r0, #16
	orr	r0, r0, r2
	bl	_set_bit
.L7855:
	ldr	r2, [r6, #4]!
	cmp	r2, #0
	bne	.L7856
	mov	r4, r5
	mov	r5, r9
	ldr	r9, [sp, #28]
.L7859:
	mov	r0, r4
	mov	r2, #0
	ldr	r3, [r4, #40]
	ldr	r1, [sp, #12]
	blx	r3
	cmp	r0, #0
	blt	.L8147
	movw	r3, #32767
	cmp	r0, r3
	beq	.L8148
.L7863:
	ldr	r3, [sp, #12]
	add	r3, r3, #1
	cmp	r3, #16
	str	r3, [sp, #12]
	bne	.L7864
.L7846:
	ldrb	r3, [r8, #23]	@ zero_extendqisi2
	mov	r6, r0
	ldr	r4, [sp, #16]
	cmp	r3, #0
	ldrne	r1, [r10, #64]
	mulne	r1, r1, r3
	moveq	r1, #500
.L7865:
	ldr	r3, [r9]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L7902
	mov	r0, r9
	blx	r3
.L7902:
	ldr	r3, [r10, #56]
	cmp	r3, #0
	bne	.L7906
	ldr	r0, [sp, #8]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC530
	movt	r0, #:upper16:.LC530
	bl	printk
	cmp	r6, #0
	bne	.L7867
	b	.L7905
.L8148:
	ldr	r3, [r10, #56]
	add	r3, r3, #1
	str	r3, [r10, #56]
	b	.L7863
.L8147:
	ldr	r3, [r10, #12]
	mov	r6, r0
	mov	r8, #0
	ldr	r4, [sp, #16]
	ldr	r7, [r3, #36]
	sub	r7, r7, #72
.L7860:
	add	r3, r3, #36
	add	r2, r7, #72
	cmp	r2, r3
	mov	r0, r7
	beq	.L8149
	ldr	r3, [r7, #48]
	cmp	r3, #0
	beq	.L7861
	blx	r3
.L7861:
	ldr	r2, [r7, #72]
	str	r8, [r7, #80]
	ldr	r3, [r10, #12]
	sub	r7, r2, #72
	b	.L7860
.L8149:
	mov	r3, #0
	str	r3, [r10, #12]
	str	r3, [r10, #56]
	b	.L7841
.L8146:
	movw	r0, #:lower16:.LC529
	ldr	r1, .L8150+8
	ldr	r2, [sp, #24]
	movt	r0, #:upper16:.LC529
	bl	printk
	b	.L7854
.L8145:
	movw	r0, #:lower16:.LC528
	ldr	r2, [r4]
	mvn	r6, #21
	ldr	r1, .L8150+8
	movt	r0, #:upper16:.LC528
	ldr	r4, [sp, #16]
	bl	printk
	b	.L7851
.L8097:
	ldr	r6, [r4, #16]
	b	.L7854
.L7848:
	ldr	r6, [r4, #8]
	b	.L7854
.L7917:
	mov	r7, #0
	mov	r8, #1
	b	.L7719
.L7724:
	tst	r3, #4
	bne	.L7723
	b	.L7722
.L7727:
	mov	r2, #16
	strb	r2, [r10, #19]
	strb	r3, [r10, #20]
	b	.L7728
.L7726:
	ldrb	r2, [r5, #385]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L7728
	mov	r2, #1
	strb	r2, [r10, #19]
	strb	r3, [r10, #20]
	b	.L7728
.L7827:
	cmp	r7, #0
	beq	.L7830
	b	.L7898
.L7908:
	bl	get_host_os_type
	cmp	r0, #0
	beq	.L7954
	mov	r6, #0
	b	.L7895
.L7954:
	mov	r6, r0
	mov	r7, #1
	b	.L7914
	.fnend
	.size	composite_setup, .-composite_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_unbind, %function
f_midi_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #88]
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	mov	r3, #0
	str	r3, [r4, #96]
	cmp	r0, r3
	beq	.L8153
	bl	snd_card_free
.L8153:
	ldr	r0, [r4, #332]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r4, #16]
	str	r3, [r4, #332]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_midi_unbind, .-f_midi_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_unbind, %function
conn_gadget_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC536
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC536
	mov	r6, #0
	strd	r8, [sp, #16]
	mov	r4, #1
	add	r8, r5, #128
	strd	r10, [sp, #24]
	mov	r9, #512
	mov	r10, #256
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	printk
	ldr	ip, [r5, #100]
	mov	r3, r6
	mov	r2, r4
	add	r0, r5, #200
	mov	r1, #3
	str	r6, [r5, #100]
	str	r4, [r5, #104]
	str	ip, [r5, #212]
	bl	__wake_up
	mov	r3, r6
	mov	r2, r4
	add	r0, r5, #144
	mov	r1, #3
	bl	__wake_up
	add	r6, r5, #88
	b	.L8159
.L8162:
	ldr	fp, [r5, #96]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L8159:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #128]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r8, r4
	sub	r7, r4, #36
	beq	.L8171
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L8162
.L8163:
	add	r8, r5, #136
	mov	r10, #256
	mov	r9, #512
	b	.L8161
.L8166:
	ldr	fp, [r5, #96]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L8161:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #136]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r4, r8
	sub	r7, r4, #36
	beq	.L8172
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L8166
.L8167:
	add	r8, r5, #120
	mov	r10, #256
	mov	r9, #512
	b	.L8165
.L8169:
	ldr	fp, [r5, #92]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L8165:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #120]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r8, r4
	sub	r7, r4, #36
	beq	.L8173
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L8169
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8171:
	bl	_raw_spin_unlock_irqrestore
	b	.L8163
.L8173:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L8172:
	bl	_raw_spin_unlock_irqrestore
	b	.L8167
	.fnend
	.size	conn_gadget_function_unbind, .-conn_gadget_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_unbind_config, %function
rndis_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC537
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r1, #:upper16:.LC537
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L8174
	.syntax divided
@ 17 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L8174:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_function_unbind_config, .-rndis_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_suspend, %function
frmnet_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	strd	r10, [sp, #24]
	movt	r9, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	ldrb	r3, [r0, #116]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	add	r3, r3, r3, lsl #1
	add	r3, r9, r3, lsl #3
	ldr	r8, [r3, #2536]
	sub	r2, r8, #1
	cmp	r2, #9
	bhi	.L8184
	movw	r3, #:lower16:.LANCHOR2
	movt	r3, #:upper16:.LANCHOR2
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #836]
	str	r3, [sp, #4]
.L8178:
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8179
	blx	r3
.L8179:
	add	r10, r4, #132
	add	r5, r4, #144
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #144]
	str	r0, [sp]
	cmp	r3, r5
	beq	.L8180
	mov	r7, #256
	mov	r6, #512
.L8181:
	ldrd	r0, [r3]
	mov	fp, r3
	str	r1, [r0, #4]
	str	r0, [r1]
	str	r7, [r3]
	str	r6, [r3, #4]
	ldr	r0, [fp, #-8]!
	bl	kfree
	mov	r0, fp
	bl	kfree
	ldr	r3, [r4, #144]
	cmp	r3, r5
	bne	.L8181
.L8180:
	mov	r3, #0
	mov	r0, r10
	ldr	r1, [sp]
	str	r3, [r4, #152]
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #10
	bhi	.L8182
	mov	r3, #1
	lsl	r3, r3, r8
	tst	r3, #1824
	bne	.L8177
	tst	r3, #192
	beq	.L8182
	sub	r8, r8, #6
	cmp	r8, #1
	bls	.L8193
.L8177:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8184:
	movw	r3, #:lower16:.LC109
	movt	r3, #:upper16:.LC109
	str	r3, [sp, #4]
	b	.L8178
.L8193:
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	mov	r0, #4
	ldr	r1, [r9, #3480]
	add	r3, r3, r3, lsl #1
	add	r3, r9, r3, lsl #3
	ldrb	r3, [r3, #2544]	@ zero_extendqisi2
	add	r9, r9, r3, lsl #2
	ldr	r2, [r9, #3616]
	add	r2, r2, #316
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L8182:
	ldr	r1, .L8194
	movw	r0, #:lower16:.LC422
	ldr	r2, [sp, #4]
	movt	r0, #:upper16:.LC422
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L8195:
	.align	2
.L8194:
	.word	.LANCHOR3-2976
	.fnend
	.size	frmnet_suspend, .-frmnet_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_write, %function
conn_gadget_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2516]
	.pad #52
	sub	sp, sp, #52
	ldr	r4, [r0, #124]
	str	r1, [sp, #4]
	str	r2, [sp, #16]
	cmp	r3, #0
	beq	.L8231
	add	r3, r4, #112
	str	r3, [sp, #20]
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L8232
	movw	r2, #:lower16:autoremove_wake_function
	mov	r3, #57344
	ldr	r10, [sp, #16]
	movt	r2, #:upper16:autoremove_wake_function
	movt	r3, 65535
	str	r3, [sp, #8]
	str	r2, [sp, #12]
	mov	r2, r3
.L8199:
	cmp	r10, #0
	mov	r3, sp
	and	r9, r3, r2
	beq	.L8219
.L8240:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L8204
	add	r5, r4, #88
	add	r7, r4, #120
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	r1, r0
	cmp	r7, r3
	beq	.L8233
	ldr	ip, [r3]
	mov	lr, #512
	mov	r8, #256
	ldr	r2, [r3, #4]
	sub	r6, r3, #36
	mov	r0, r5
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r8, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L8202
.L8203:
	ldr	r8, [r4, #192]
	mov	r3, sp
	ldmib	sp, {r1, r2}
	ldr	r0, [r6]
	cmp	r8, r10
	and	r3, r3, r2
	ldr	r3, [r3, #8]
	bcs	.L8234
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L8212
	cmp	r8, #0
	bne	.L8235
.L8216:
	str	r8, [r6, #4]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8236
	ldr	r3, [sp, #4]
	sub	r10, r10, r8
	ldr	r2, [sp, #8]
	add	r3, r3, r8
	str	r3, [sp, #4]
	b	.L8199
.L8233:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L8202:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L8237
.L8204:
	movw	r0, #:lower16:.LC539
	ldr	r1, .L8241
	mvn	r8, #4
	movt	r0, #:upper16:.LC539
	bl	printk
.L8200:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L8196:
	mov	r0, r8
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8237:
	ldr	r1, [sp, #12]
	str	r3, [sp, #28]
	add	r2, sp, #40
	str	r3, [sp, #32]
	add	r8, r4, #156
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	ldr	r3, [r9, #12]
	str	r3, [sp, #32]
	str	r1, [sp, #36]
	str	r2, [sp, #40]
	str	r2, [sp, #44]
	b	.L8210
.L8239:
	bl	schedule
.L8210:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r8
	mov	fp, #256
	bl	prepare_to_wait
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r5
	mov	r1, r2
	cmp	r7, r3
	sub	r6, r3, #36
	beq	.L8238
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L8207
.L8206:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L8208
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8239
	mov	r0, r8
	add	r1, sp, #28
	bl	finish_wait
	mov	r2, #65024
	movw	r0, #:lower16:.LC542
	ldr	r1, .L8241
	movt	r2, 65535
	movt	r0, #:upper16:.LC542
	mov	r8, #65024
	bl	printk
	movt	r8, 65535
	b	.L8200
.L8207:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	b	.L8203
.L8208:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	cmp	r10, #0
	bne	.L8240
.L8219:
	ldr	r8, [sp, #16]
	b	.L8200
.L8238:
	bl	_raw_spin_unlock_irqrestore
	b	.L8206
.L8234:
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L8213
	mov	r8, r10
.L8212:
	mov	r2, r8
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L8216
	b	.L8215
.L8235:
	mov	r10, r8
.L8213:
	mov	r1, r10
	bl	__memzero
.L8215:
	movw	r0, #:lower16:.LC540
	ldr	r1, .L8241
	mvn	r8, #13
	movt	r0, #:upper16:.LC540
	bl	printk
.L8217:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r5
	str	r2, [r4, #124]
	str	r7, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L8200
.L8236:
	mov	r3, #1
	mov	r2, r0
	ldr	r1, .L8241
	movw	r0, #:lower16:.LC541
	mvn	r8, #4
	str	r3, [r4, #104]
	movt	r0, #:upper16:.LC541
	bl	printk
	b	.L8217
.L8231:
	movw	r0, #:lower16:.LC281
	ldr	r1, .L8241
	mvn	r8, #18
	movt	r0, #:upper16:.LC281
	bl	printk
	b	.L8196
.L8232:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC538
	ldr	r1, .L8241
	mvn	r8, #15
	movt	r0, #:upper16:.LC538
	bl	printk
	b	.L8196
.L8242:
	.align	2
.L8241:
	.word	.LANCHOR3-2960
	.fnend
	.size	conn_gadget_write, .-conn_gadget_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_disable, %function
qdss_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #188
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L8258
	mov	r6, #0
	mov	r0, r5
	str	r6, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L8245
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfi	r2, r6, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L8245:
	tst	r3, #4
	beq	.L8246
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L8246:
	tst	r3, #1
	beq	.L8247
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
.L8247:
	add	r2, r4, #172
	ldr	r1, [r4, #196]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L8258:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	qdss_disable, .-qdss_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_unbind, %function
rndis_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:__stack_chk_guard
	mov	r4, r1
	str	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	str	lr, [sp, #12]
	ldr	r3, [r1, #164]
	.pad #24
	sub	sp, sp, #24
	ldr	r2, [r5]
	cmp	r3, #0
	str	r2, [sp, #20]
	ble	.L8267
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
.L8260:
	ldrb	r2, [r3, #4044]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8261
	mov	r6, #0
	movw	r1, #:lower16:.LC543
	movt	r1, #:upper16:.LC543
	mov	r2, r6
	mov	r0, sp
	strb	r6, [r3, #4044]
	bl	sprintf
	mov	r0, sp
	mov	r1, r6
	bl	remove_proc_entry
.L8261:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #172]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r4
	bl	kfree
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L8269
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8267:
	rsb	r2, r3, r3, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r2, r3, r2, lsl #2
	mov	r1, #0
	strb	r1, [r2, #3637]
	b	.L8260
.L8269:
	bl	__stack_chk_fail
	.fnend
	.size	rndis_unbind, .-rndis_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_usb_unbind, %function
android_usb_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r2, .L8295
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	ldr	r3, [r7, #2244]
	str	lr, [sp, #20]
	cmp	r3, r2
	sub	r4, r3, #424
	bne	.L8273
	b	.L8271
.L8293:
	ldr	r3, [r4, #424]
	cmp	r3, r2
	sub	r4, r3, #424
	beq	.L8271
.L8273:
	ldr	r3, [r3, #-416]
	cmp	r0, r3
	bne	.L8293
.L8271:
	movw	r0, #:lower16:.LC93
	ldr	r1, .L8295+4
	movt	r0, #:upper16:.LC93
	bl	printk
	mov	r3, #0
	mov	r2, #48
	add	r0, r4, #140
	strb	r2, [r7, #2256]
	strb	r3, [r7, #2612]
	strb	r3, [r7, #2868]
	bl	cancel_work_sync
	ldr	r6, [r4, #4]
	sub	r6, r6, #4
.L8274:
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	beq	.L8294
.L8278:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L8274
	ldr	r1, [r3, #296]
	ldr	r0, [r7, #3584]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L8276
	mov	r0, r4
	blx	r3
.L8276:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L8274
	ldr	r1, [r5]
	add	r5, r5, #4
	cmp	r1, #0
	beq	.L8274
.L8277:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r5], #4
	cmp	r1, #0
	bne	.L8277
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	bne	.L8278
.L8294:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8296:
	.align	2
.L8295:
	.word	.LANCHOR1+2244
	.word	.LANCHOR3-2940
	.fnend
	.size	android_usb_unbind, .-android_usb_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_ioctl, %function
conn_gadget_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #29441
	ubfx	r4, r1, #8, #8
	movw	ip, #29442
	strd	r6, [sp, #8]
	movt	r3, 32772
	str	lr, [sp, #16]
	mov	lr, #29440
	.pad #44
	sub	sp, sp, #44
	movt	ip, 32772
	mov	r0, #0
	movt	lr, 32772
	cmp	r4, #115
	str	lr, [sp, #4]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	str	r0, [sp, #16]
	bne	.L8338
	mov	r5, r2
	uxtb	r2, r1
	cmp	r2, #2
	bhi	.L8339
	ubfx	r2, r1, #16, #14
	cmp	r2, #0
	beq	.L8340
	cmp	r1, #0
	bge	.L8341
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r4, [r2, #2516]
	cmp	r4, #0
	beq	.L8342
	cmp	r1, r3
	beq	.L8304
	cmp	r1, ip
	beq	.L8305
	cmp	r1, lr
	movne	r2, r0
	beq	.L8343
.L8297:
	mov	r0, r2
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L8305:
	ldr	r2, [r4, #100]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	cmp	r2, #0
	movne	r2, #1
	moveq	r2, #2
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r1, r5, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	str	r2, [sp, #20]
	movne	r2, #4
	beq	.L8344
.L8318:
	ldr	r4, .L8348
	movw	r0, #:lower16:.LC550
	movt	r0, #:upper16:.LC550
	sub	r1, r4, #4
	bl	printk
	movw	r0, #:lower16:.LC552
	mvn	r2, #13
	sub	r1, r4, #24
	movt	r0, #:upper16:.LC552
	bl	printk
	mvn	r2, #13
	b	.L8297
.L8343:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #16; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r2, #16
	beq	.L8345
.L8307:
	movw	r0, #:lower16:.LC548
	ldr	r1, .L8348+4
	movt	r0, #:upper16:.LC548
	bl	printk
	mvn	r2, #13
	b	.L8297
.L8304:
	ldr	r2, [r4, #100]
	ldr	r3, [r4, #212]
	cmp	r3, r2
	beq	.L8308
.L8337:
	cmp	r2, #0
	mov	r3, sp
	str	r2, [r4, #212]
	bic	r3, r3, #8128
	moveq	r2, #2
	movne	r2, #1
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #20]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r2, #4
	beq	.L8346
.L8315:
	ldr	r4, .L8348
	movw	r0, #:lower16:.LC550
	movt	r0, #:upper16:.LC550
	sub	r1, r4, #4
	bl	printk
	movw	r0, #:lower16:.LC551
	mvn	r2, #13
	sub	r1, r4, #24
	movt	r0, #:upper16:.LC551
	bl	printk
	mvn	r2, #13
	b	.L8297
.L8308:
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L8310
	mov	r2, sp
	str	r3, [sp, #20]
	add	r1, sp, #32
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r7, r4, #200
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L8313
.L8347:
	bl	schedule
.L8313:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #212]
	cmp	r2, r3
	bne	.L8311
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L8312
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8347
.L8311:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r2, [r4, #100]
	b	.L8337
.L8344:
	mov	r2, #4
	mov	r0, r5
	add	r1, sp, #20
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L8297
	b	.L8318
.L8345:
	mov	r2, #16
	mov	r0, r5
	add	r1, sp, #4
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L8297
	b	.L8307
.L8346:
	mov	r2, #4
	mov	r0, r5
	add	r1, sp, #20
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L8297
	b	.L8315
.L8312:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #100]
	str	r3, [r4, #212]
.L8310:
	movw	r0, #:lower16:.LC549
	ldr	r1, .L8348+4
	movt	r0, #:upper16:.LC549
	bl	printk
	mvn	r2, #3
	b	.L8297
.L8338:
	movw	r0, #:lower16:.LC544
	mov	r2, r4
	ldr	r1, .L8348+4
	movt	r0, #:upper16:.LC544
	bl	printk
	mvn	r2, #21
	b	.L8297
.L8342:
	movw	r0, #:lower16:.LC281
	ldr	r1, .L8348+4
	movt	r0, #:upper16:.LC281
	bl	printk
	mvn	r2, #18
	b	.L8297
.L8341:
	movw	r0, #:lower16:.LC547
	ldr	r1, .L8348+4
	movt	r0, #:upper16:.LC547
	bl	printk
	mvn	r2, #21
	b	.L8297
.L8340:
	movw	r0, #:lower16:.LC546
	ldr	r1, .L8348+4
	movt	r0, #:upper16:.LC546
	bl	printk
	mvn	r2, #21
	b	.L8297
.L8339:
	movw	r0, #:lower16:.LC545
	ldr	r1, .L8348+4
	movt	r0, #:upper16:.LC545
	bl	printk
	mvn	r2, #24
	b	.L8297
.L8349:
	.align	2
.L8348:
	.word	.LANCHOR3-2896
	.word	.LANCHOR3-2920
	.fnend
	.size	conn_gadget_ioctl, .-conn_gadget_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_fill, %function
rx_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #28
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r4, r3
	strd	r8, [sp, #16]
	add	r9, r0, #16
	strd	r10, [sp, #24]
	mov	r0, r9
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r6, #28]
	mov	r1, r0
	cmp	r4, r5
	beq	.L8351
	movw	r3, #:lower16:.LANCHOR0
	mov	r8, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	fp, r10
	str	r3, [sp, #12]
	b	.L8367
.L8396:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L8374
	ldr	r3, [sp, #12]
	ldr	r3, [r3, #516]
	lsl	r3, r3, #1
	cmp	r3, r8
	blt	.L8351
.L8397:
	ldrd	r2, [r5]
	mov	r0, r9
	sub	r10, r5, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r5]
	str	r5, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L8393
	ldr	r7, [r3, #92]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L8392
	ldmib	r6, {r2, ip}
	ldrh	r3, [r7, #20]
	ldr	r1, [r6, #72]
	ldr	r0, [r2, #100]
	ldr	r4, [ip, #316]
	cmp	r1, #0
	add	r4, r4, r0
	add	r4, r4, #33
	add	r4, r4, r3
	udiv	r0, r4, r3
	mls	r3, r3, r0, r4
	sub	r4, r4, r3
	ldrb	r3, [r2, #104]	@ zero_extendqisi2
	mulne	r4, r1, r4
	cmp	r3, #0
	beq	.L8357
	ldr	r3, [r2, #108]
	cmp	r4, r3
	movcc	r4, r3
.L8357:
	mvn	r3, #0
	mov	r2, #0
	mov	r1, fp
	add	r0, r4, #2
	bl	__alloc_skb
	subs	r3, r0, #0
	beq	.L8358
	ldr	lr, [r3, #160]
	mov	r1, r10
	mov	r0, r7
	ldr	ip, [r3, #172]
	mov	r2, fp
	str	r3, [sp, #4]
	add	lr, lr, #2
	add	ip, ip, #2
	str	lr, [r3, #160]
	str	ip, [r3, #172]
	str	ip, [r5, #-36]
	str	r4, [r5, #-32]
	str	r3, [r5, #-4]
	ldr	ip, [r7, #8]
	ldr	r4, [ip, #16]
	blx	r4
	cmn	r0, #12
	mov	r4, r0
	ldr	r3, [sp, #4]
	beq	.L8394
	cmp	r0, #0
	bne	.L8395
.L8363:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #8]
	mov	r1, r0
	ldr	r5, [r6, #28]
	cmp	r3, r5
	beq	.L8351
.L8367:
	ldr	r3, [r6, #12]
	add	r8, r8, #1
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L8396
.L8374:
	mov	r3, #2
	cmp	r3, r8
	bge	.L8397
.L8351:
	mov	r0, r9
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L8394:
	add	r4, r6, #120
	mov	r0, #0
	mov	r1, r4
	mov	fp, r3
	bl	_test_and_set_bit
	cmp	r0, #0
	mov	r7, r4
	bne	.L8370
	movw	r1, #:lower16:system_wq
	add	r2, r6, #88
	movt	r1, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r1]
	bl	queue_work_on
	cmp	r0, #0
	bne	.L8370
.L8372:
	movw	r0, #:lower16:.LC470
	mov	r2, #0
	ldr	r1, [r6, #8]
	movt	r0, #:upper16:.LC470
	bl	printk
	cmp	fp, #0
	bne	.L8370
.L8354:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #28]
	mov	r1, r0
	mov	r0, r9
	str	r5, [r3, #4]
	str	r3, [r5]
	ldr	r3, [sp, #8]
	str	r3, [r5, #4]
	str	r5, [r6, #28]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r7
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L8398
.L8350:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8393:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r7, r6, #120
	b	.L8354
.L8395:
	mov	r0, r3
	bl	dev_kfree_skb_any
	cmp	r4, #0
	bge	.L8363
.L8392:
	add	r4, r6, #120
	b	.L8362
.L8370:
	mov	r0, fp
	bl	dev_kfree_skb_any
.L8362:
	mov	r7, r4
	b	.L8354
.L8358:
	add	r4, r6, #120
	mov	fp, r3
	mov	r1, r4
	mov	r7, r4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L8354
	movw	r1, #:lower16:system_wq
	add	r2, r6, #88
	movt	r1, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r1]
	bl	queue_work_on
	cmp	r0, #0
	bne	.L8354
	b	.L8372
.L8398:
	movw	r3, #:lower16:system_wq
	add	r2, r6, #88
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	subs	r2, r0, #0
	bne	.L8350
	ldr	r1, [r6, #8]
	movw	r0, #:lower16:.LC470
	movt	r0, #:upper16:.LC470
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
	.fnend
	.size	rx_fill, .-rx_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_work, %function
eth_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L8399
	ldr	r3, [r4, #-80]
	ldr	r3, [r3, #120]
	tst	r3, #1
	bne	.L8408
.L8399:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8408:
	sub	r5, r4, #88
	ldr	r6, [sp, #8]
	mov	r1, #208
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rx_fill
	.fnend
	.size	eth_work, .-eth_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	process_rx_w, %function
process_rx_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-100]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LC553
	mov	r6, #0
	strd	r10, [sp, #24]
	ldr	r10, .L8437
	movt	r7, #:upper16:.LC553
	strd	r8, [sp, #16]
	sub	r8, r0, #52
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	sub	r9, r10, #12
.L8412:
	mov	r0, r8
	bl	skb_dequeue
	subs	r5, r0, #0
	beq	.L8435
.L8421:
	cmp	r6, #0
	blt	.L8413
	ldr	fp, [r5, #80]
	cmp	fp, #13
	bls	.L8414
	movw	r3, #1514
	cmp	fp, r3
	bls	.L8416
	ldr	r3, [r4, #-100]
	mov	r1, r7
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L8418
	ldr	r3, [r4, #-96]
	ldr	r3, [r3, #316]
	add	r3, r3, #14
	cmp	fp, r3
	bls	.L8419
.L8417:
	movw	r0, #:lower16:.LC554
	mov	r2, fp
	movt	r0, #:upper16:.LC554
	mov	r1, r9
	bl	printk
.L8418:
	ldr	r2, [r4, #-96]
	movw	r0, #:lower16:.LC556
	sub	r1, r10, #12
	movt	r0, #:upper16:.LC556
	ldr	r3, [r2, #208]
	add	r3, r3, #1
	str	r3, [r2, #208]
	ldr	r2, [r4, #-96]
	ldr	r3, [r2, #232]
	add	r3, r3, #1
	str	r3, [r2, #232]
	ldr	r2, [r5, #80]
	bl	printk
	mov	r0, r5
	bl	dev_kfree_skb_any
	mov	r0, r8
	bl	skb_dequeue
	subs	r5, r0, #0
	bne	.L8421
.L8435:
	ldr	r3, [r4, #-96]
	ldr	r3, [r3, #120]
	tst	r3, #1
	bne	.L8436
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8419:
	movw	r0, #:lower16:.LC555
	mov	r2, fp
	movt	r0, #:upper16:.LC555
	mov	r1, r9
	bl	printk
.L8416:
	ldr	r1, [r4, #-96]
	mov	r0, r5
	bl	eth_type_trans
	strh	r0, [r5, #102]	@ movhi
	ldr	r2, [r4, #-96]
	mov	r0, r5
	ldr	r3, [r2, #192]
	add	r3, r3, #1
	str	r3, [r2, #192]
	ldr	r2, [r4, #-96]
	ldr	r1, [r5, #80]
	ldr	r3, [r2, #200]
	add	r3, r3, r1
	str	r3, [r2, #200]
	bl	netif_rx_ni
	mov	r6, r0
	b	.L8412
.L8413:
	ldr	r3, [r4, #-100]
	mov	r1, r7
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	ldreq	fp, [r5, #80]
	bne	.L8418
	b	.L8417
.L8414:
	ldr	r3, [r4, #-100]
	mov	r1, r7
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	beq	.L8417
	b	.L8418
.L8436:
	sub	r0, r4, #104
	mov	r1, #208
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rx_fill
.L8438:
	.align	2
.L8437:
	.word	.LANCHOR3-2848
	.fnend
	.size	process_rx_w, .-process_rx_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_open, %function
eth_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	add	r6, r0, #1216
	str	lr, [sp, #12]
	ldr	r3, [r0, #1224]
	ldr	r5, [r3, #120]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L8440
.L8441:
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1220]
	cmp	r0, #0
	beq	.L8443
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L8443
	blx	r3
.L8443:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8440:
	mov	r1, #208
	mov	r0, r6
	bl	rx_fill
	ldr	r3, [r4, #1224]
	mov	r0, r5
	str	r5, [r4, #1252]
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L8441
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L8441
	.fnend
	.size	eth_open, .-eth_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_setup, %function
mbim_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r9, [r0, #84]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #88]
	ldrh	r8, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r7, [r1, #6]	@ unaligned
	cmp	r3, #0
	ldr	r4, [r9, #4]
	beq	.L8500
	mov	r5, r1
	ldrh	r1, [r1]	@ unaligned
	mov	r10, r0
	movw	r0, #8582
	ldrb	r2, [r5]	@ zero_extendqisi2
	rev16	r1, r1
	uxth	r1, r1
	cmp	r1, r0
	beq	.L8458
	bls	.L8501
	movw	r3, #41344
	cmp	r1, r3
	beq	.L8463
	bls	.L8502
	movw	r3, #41347
	cmp	r1, r3
	beq	.L8466
	movw	r3, #41349
	cmp	r1, r3
	bne	.L8457
	adds	r3, r6, #0
	movne	r3, #1
	cmp	r7, #3
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L8499
	ldrb	r3, [r10, #196]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L8499
	ldr	r2, [r10, #224]
	cmp	r7, #4
	mov	r8, #4
	ldr	r3, [r4]
	movle	r6, #0
	movgt	r6, #1
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3]
	lsr	r2, r1, #8
	strb	r0, [r3, #1]
	strb	r1, [r3, #2]
	strb	r2, [r3, #3]
.L8468:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r8, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r9]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L8503
.L8454:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8501:
	movw	r3, #8453
	cmp	r1, r3
	beq	.L8460
	movw	r3, #8580
	cmp	r1, r3
	beq	.L8461
	cmp	r1, #8448
	beq	.L8504
.L8457:
	ldr	r4, .L8509
	movw	r0, #:lower16:.LC561
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC561
	stm	sp, {r6, r8}
	str	r7, [sp, #8]
	sub	r1, r4, #12
	bl	printk
	ldrb	r2, [r5]	@ zero_extendqisi2
.L8470:
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC563
	mov	r3, r2
	sub	r1, r4, #12
	mvn	r2, #94
	movt	r0, #:upper16:.LC563
	mov	r4, r2
	str	ip, [sp]
	stmib	sp, {r6, r8}
	str	r7, [sp, #12]
	bl	printk
	b	.L8454
.L8466:
	adds	r3, r6, #0
	movne	r3, #1
	cmp	r7, #1
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L8499
	ldrb	r1, [r10, #196]	@ zero_extendqisi2
	cmp	r1, r8
	bne	.L8499
	ldr	r2, [r10, #200]
	cmp	r7, #2
	mov	r8, #2
	ldr	r0, .L8509+4
	movle	r6, #0
	movgt	r6, #1
	ldr	r1, [r4]
	subs	r2, r2, r0
	movne	r2, #1
	strb	r2, [r1]
	strb	r3, [r1, #1]
	b	.L8468
.L8461:
	cmp	r7, #0
	bne	.L8499
	ldrb	r3, [r10, #196]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L8499
	cmp	r6, #0
	beq	.L8474
	cmp	r6, #1
	bne	.L8505
	ldr	r3, .L8509+8
	mov	r8, r7
	mov	r6, r7
	str	r3, [r10, #200]
	b	.L8468
.L8504:
	movw	r3, #:lower16:fmbim_cmd_complete
	mov	r8, r7
	str	r10, [r4, #32]
	movt	r3, #:upper16:fmbim_cmd_complete
	mov	r6, #0
	str	r3, [r4, #28]
	b	.L8468
.L8460:
	movw	r3, #:lower16:fmbim_reset_cmd_complete
	adds	r6, r7, #0
	str	r10, [r4, #32]
	movt	r3, #:upper16:fmbim_reset_cmd_complete
	movne	r6, #1
	mov	r8, #0
	str	r3, [r4, #28]
	b	.L8468
.L8502:
	movw	r3, #41217
	cmp	r1, r3
	bne	.L8457
	cmp	r6, #0
	bne	.L8506
	add	r3, r10, #204
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	ldr	fp, [r10, #216]!
	ldr	r3, [sp, #20]
	cmp	fp, r10
	beq	.L8507
	mov	r0, r3
	ldrd	r2, [fp]
	mov	ip, #256
	mov	r1, #512
	sub	r6, fp, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [fp]
	str	r1, [fp, #4]
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r8}
	ldr	r0, [r4]
	cmp	r7, r8
	movcc	r8, r7
	mov	r2, r8
	bl	memcpy
	cmp	r6, #0
	beq	.L8472
	ldr	r0, [fp, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	cmp	r8, r7
	movge	r6, #0
	movlt	r6, #1
	b	.L8468
.L8463:
	adds	r3, r6, #0
	movne	r3, #1
	cmp	r7, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L8499
	ldrb	r3, [r10, #196]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L8499
	cmp	r7, #28
	ldr	r1, .L8509+12
	movcc	r6, r7
	movcs	r6, #28
	ldr	r0, [r4]
	mov	r2, r6
	mov	r8, r6
	bl	memcpy
	cmp	r6, r7
	movcs	r6, #0
	movcc	r6, #1
	b	.L8468
.L8458:
	sub	r3, r7, #4
	bic	r3, r3, #4
	uxth	r3, r3
	cmp	r3, #0
	bne	.L8508
	cmp	r6, #0
	bne	.L8499
	ldrb	r3, [r10, #196]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L8499
	movw	r3, #:lower16:mbim_ep0out_complete
	mov	r8, r7
	str	r10, [r4, #32]
	movt	r3, #:upper16:mbim_ep0out_complete
	str	r3, [r4, #28]
	b	.L8468
.L8472:
	cmp	r8, r7
	movge	r6, #0
	movlt	r6, #1
	b	.L8468
.L8505:
	mov	r8, r7
	mov	r6, r7
	b	.L8468
.L8474:
	ldr	r3, .L8509+4
	mov	r8, r6
	str	r3, [r10, #200]
	b	.L8468
.L8503:
	movw	r0, #:lower16:.LC562
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	str	r4, [sp]
	ldr	r1, .L8509+16
	movt	r0, #:upper16:.LC562
	ldrb	r2, [r5]	@ zero_extendqisi2
	bl	printk
	b	.L8454
.L8500:
	movw	r0, #:lower16:.LC557
	ldr	r1, .L8509+16
	mvn	r4, #106
	movt	r0, #:upper16:.LC557
	bl	printk
	b	.L8454
.L8499:
	ldr	r4, .L8509
	b	.L8470
.L8508:
	ldr	r4, .L8509
	movw	r0, #:lower16:.LC560
	mov	r2, r7
	movt	r0, #:upper16:.LC560
	sub	r1, r4, #12
	bl	printk
	ldrb	r2, [r5]	@ zero_extendqisi2
	b	.L8470
.L8507:
	ldr	r4, .L8509
	movw	r0, #:lower16:.LC559
	movt	r0, #:upper16:.LC559
	sub	r1, r4, #12
	bl	printk
	ldr	r3, [sp, #20]
	mov	r0, r3
	bl	_raw_spin_unlock
	ldrb	r2, [r5]	@ zero_extendqisi2
	b	.L8470
.L8506:
	ldr	r4, .L8509
	movw	r0, #:lower16:.LC558
	mov	r2, r7
	movt	r0, #:upper16:.LC558
	sub	r1, r4, #12
	bl	printk
	ldrb	r2, [r5]	@ zero_extendqisi2
	b	.L8470
.L8510:
	.align	2
.L8509:
	.word	.LANCHOR3-2832
	.word	.LANCHOR0+1656
	.word	.LANCHOR0+1700
	.word	.LANCHOR0+48
	.word	.LANCHOR3-2844
	.fnend
	.size	mbim_setup, .-mbim_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_unbind, %function
rndis_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r4, #:upper16:.LANCHOR1
	movt	r6, #:upper16:__stack_chk_guard
	str	r8, [sp, #16]
	mov	r7, r0
	ldr	r3, [r6]
	str	lr, [sp, #20]
	.pad #24
	sub	sp, sp, #24
	ldr	r0, [r4, #3348]
	str	r3, [sp, #20]
	bl	kfree
	ldr	r0, [r4, #3352]
	mov	r3, #0
	str	r3, [r4, #3348]
	cmp	r0, r3
	beq	.L8512
	bl	destroy_workqueue
.L8512:
	ldr	r3, [r5, #144]
	mov	r2, #0
	str	r2, [r4, #3352]
	cmp	r3, r2
	bgt	.L8513
	rsb	r3, r3, r3, lsl #4
	add	r3, r4, r3, lsl #2
	strb	r2, [r3, #3637]
.L8513:
	ldrb	r3, [r4, #4044]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8524
.L8514:
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L8515
	ldr	r0, [r5, #8]
	bl	kfree
.L8515:
	ldr	r0, [r5, #16]
	bl	kfree
	ldr	r3, [r5, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r5, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, .L8526
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r5
	bl	kfree
	mov	r3, #0
	mov	r1, r7
	ldr	r0, .L8526
	str	r3, [r4, #2528]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L8525
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8524:
	mov	r8, #0
	movw	r1, #:lower16:.LC543
	mov	r2, r8
	movt	r1, #:upper16:.LC543
	mov	r0, sp
	strb	r8, [r4, #4044]
	bl	sprintf
	mov	r0, sp
	mov	r1, r8
	bl	remove_proc_entry
	b	.L8514
.L8525:
	bl	__stack_chk_fail
.L8527:
	.align	2
.L8526:
	.word	.LANCHOR1+2524
	.fnend
	.size	rndis_qc_unbind, .-rndis_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_store, %function
terminal_version_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r1, #:lower16:.LC564
	mov	r5, r2
	str	r6, [sp, #8]
	mov	r0, r2
	movt	r1, #:upper16:.LC564
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	mov	r6, r3
	add	r2, sp, #4
	movw	r4, #:lower16:.LANCHOR1
	bl	sscanf
	ldr	ip, [sp, #4]
	movw	r3, #3608
	movt	r4, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC76
	mov	r2, r5
	ldr	r1, .L8537
	movt	r0, #:upper16:.LC76
	strh	ip, [r4, r3]	@ movhi
	bl	printk
	ldr	r5, [sp, #4]
	cmp	r5, #0
	bne	.L8535
	ldrb	r3, [r4, #3592]	@ zero_extendqisi2
	cmp	r3, #0
	strbeq	r3, [r4, #3592]
	bne	.L8536
.L8533:
	mov	r3, #0
	movw	r1, #3608
	movw	r2, #3610
	strh	r3, [r4, r1]	@ movhi
	strh	r3, [r4, r2]	@ movhi
.L8531:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8535:
	ldrb	r2, [r4, #3592]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r3, #1
	strbne	r3, [r4, #3592]
	bne	.L8531
	movw	r0, #:lower16:.LC565
	ldr	r1, .L8537+4
	mov	r3, #1
	movt	r0, #:upper16:.LC565
	bl	printk
	movw	r3, #:lower16:system_wq
	mov	ip, #1
	ldr	r2, [r4, #3556]
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	strb	ip, [r4, #3592]
	bl	queue_work_on
	b	.L8531
.L8536:
	movw	r0, #:lower16:.LC565
	mov	r3, r5
	ldr	r1, .L8537+4
	mov	r2, #1
	movt	r0, #:upper16:.LC565
	bl	printk
	movw	r3, #:lower16:system_wq
	ldr	r2, [r4, #3556]
	mov	r0, #4
	movt	r3, #:upper16:system_wq
	strb	r5, [r4, #3592]
	ldr	r1, [r3]
	bl	queue_work_on
	b	.L8533
.L8538:
	.align	2
.L8537:
	.word	.LANCHOR3-2832
	.word	.LANCHOR3-2808
	.fnend
	.size	terminal_version_store, .-terminal_version_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_write, %function
mtp_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	stm	sp, {r1, r2}
	add	r7, r4, #88
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L8579
	cmp	r3, #0
	beq	.L8580
	mov	r3, #2
	mov	r0, r7
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	tst	r3, r6
	moveq	r9, #1
	movne	r9, #0
	orrs	r3, r9, r6
	beq	.L8543
	mov	r3, #57344
	movw	r2, #:lower16:autoremove_wake_function
	movt	r3, 65535
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #8]
	str	r2, [sp, #16]
	b	.L8559
.L8547:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r10, [r3, #1744]
	cmp	r10, r6
	movcs	r10, r6
	cmp	r10, #0
	bne	.L8581
.L8555:
	str	r10, [r5, #4]
	ldr	r0, [r4, #92]
	mov	r2, #208
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8566
	ldr	r3, [sp]
	sub	r6, r6, r10
	add	r3, r3, r10
	str	r3, [sp]
	orrs	r3, r9, r6
	beq	.L8543
.L8559:
	ldr	r3, [r4, #104]
	cmp	r6, #0
	moveq	r9, #0
	cmp	r3, #2
	bne	.L8562
	mov	r0, r7
	add	r8, r4, #116
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	cmp	r8, r3
	beq	.L8582
	ldr	ip, [r3]
	mov	lr, #512
	mov	r10, #256
	ldr	r2, [r3, #4]
	mov	r1, r0
	sub	r5, r3, #36
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L8547
.L8546:
	ldr	r3, [r4, #104]
	cmp	r3, #2
	mov	r3, #0
	bne	.L8563
	ldr	r1, [sp, #8]
	mov	r2, sp
	str	r6, [sp, #20]
	str	r3, [sp, #28]
	ldr	r0, [sp, #16]
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	and	r10, r2, r1
	add	r2, sp, #40
	str	r3, [sp, #40]
	add	r1, r4, #144
	str	r3, [sp, #44]
	ldr	r3, [r10, #12]
	mov	r6, r1
	str	r1, [sp, #12]
	str	r3, [sp, #32]
	str	r0, [sp, #36]
	str	r2, [sp, #40]
	str	r2, [sp, #44]
	b	.L8552
.L8584:
	bl	schedule
.L8552:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r6
	mov	fp, #256
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r7
	mov	r1, r2
	cmp	r8, r3
	sub	r5, r3, #36
	beq	.L8583
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L8550
.L8549:
	ldr	r3, [r4, #104]
	cmp	r3, #2
	bne	.L8564
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8584
	mov	r3, #65024
	movt	r3, 65535
	str	r3, [sp, #4]
.L8551:
	add	r1, sp, #28
	ldr	r0, [sp, #12]
	bl	finish_wait
.L8543:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L8567
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L8560:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
.L8539:
	ldr	r0, [sp, #4]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8581:
	mov	r3, sp
	ldr	r1, [sp]
	ldr	r2, [sp, #8]
	ldr	r0, [r5]
	and	r3, r3, r2
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L8556
	mov	r2, r10
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L8555
	b	.L8557
.L8556:
	mov	r1, r10
	bl	__memzero
.L8557:
	mvn	r3, #13
	str	r3, [sp, #4]
.L8558:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	add	r2, r5, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r4, #120]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L8543
.L8550:
	add	r1, sp, #28
	ldr	r0, [sp, #12]
	ldr	r6, [sp, #20]
	bl	finish_wait
	b	.L8547
.L8564:
	mov	r3, #0
	str	r3, [sp, #4]
	b	.L8551
.L8583:
	bl	_raw_spin_unlock_irqrestore
	b	.L8549
.L8563:
	str	r3, [sp, #4]
	b	.L8543
.L8567:
	mvn	r3, #124
	str	r3, [sp, #4]
	b	.L8560
.L8582:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L8546
.L8562:
	mvn	r3, #4
	str	r3, [sp, #4]
	b	.L8543
.L8566:
	mvn	r3, #4
	str	r3, [sp, #4]
	b	.L8558
.L8580:
	mvn	r3, #18
	mov	r0, r7
	str	r3, [sp, #4]
	bl	_raw_spin_unlock_irq
	b	.L8539
.L8579:
	mov	r3, #1
	mvn	r2, #124
	mov	r0, r7
	str	r3, [r4, #104]
	str	r2, [sp, #4]
	bl	_raw_spin_unlock_irq
	b	.L8539
	.fnend
	.size	mtp_write, .-mtp_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_notify_modem, %function
gqti_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r3, #1032]
	add	r5, r4, #52
	str	r2, [r4, #12]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #4]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r3, #0
	beq	.L8593
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8587
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L8594
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L8588:
	ldr	r2, [r4, #48]
	add	ip, r3, #8
	add	lr, r4, #44
	mov	r1, r6
	mov	r0, r5
	str	ip, [r4, #48]
	str	lr, [r3, #8]
	str	r2, [r3, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #32
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L8587:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L8588
.L8594:
	mvn	r3, #11
	b	.L8588
.L8593:
	movw	r0, #:lower16:.LC566
	mov	r2, r4
	ldr	r1, .L8595
	movt	r0, #:upper16:.LC566
	bl	printk
	ldr	lr, [sp, #12]
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L8596:
	.align	2
.L8595:
	.word	.LANCHOR3-2792
	.fnend
	.size	gqti_ctrl_notify_modem, .-gqti_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_reset_cmd_complete, %function
fmbim_reset_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #204
	mov	r0, r5
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8598
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L8604
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L8599:
	ldr	r2, [r4, #212]
	add	r1, r3, #8
	add	ip, r4, #208
	mov	r0, r5
	str	r1, [r4, #212]
	str	ip, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r2]
	bl	_raw_spin_unlock
	ldr	r6, [sp, #8]
	add	r0, r4, #108
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L8598:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L8599
.L8604:
	mvn	r3, #11
	b	.L8599
	.fnend
	.size	fmbim_reset_cmd_complete, .-fmbim_reset_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_send_break, %function
acm_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	mov	r0, r6
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r4, #156]
	cmp	r0, #0
	moveq	r3, #1
	moveq	r5, r0
	strbeq	r3, [r4, #147]
	bne	.L8613
.L8608:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8613:
	movw	r0, #:lower16:.LC452
	ldrh	r2, [r4, #170]
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC452
	bl	printk
	add	r1, r4, #170
	mov	r0, r4
	bl	acm_cdc_notify.constprop.142
	mov	r5, r0
	b	.L8608
	.fnend
	.size	acm_send_break, .-acm_send_break
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_connect, %function
acm_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #148
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L8618
.L8616:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L8618:
	movw	r0, #:lower16:.LC452
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	ldrh	r2, [r4, #170]
	movt	r0, #:upper16:.LC452
	bl	printk
	add	r1, r4, #170
	mov	r0, r4
	bl	acm_cdc_notify.constprop.142
	b	.L8616
	.fnend
	.size	acm_connect, .-acm_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disconnect, %function
acm_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #148
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L8623
.L8621:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L8623:
	movw	r0, #:lower16:.LC452
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	ldrh	r2, [r4, #170]
	movt	r0, #:upper16:.LC452
	bl	printk
	add	r1, r4, #170
	mov	r0, r4
	bl	acm_cdc_notify.constprop.142
	b	.L8621
	.fnend
	.size	acm_disconnect, .-acm_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_complete, %function
f_midi_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r0]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r1, #44]
	ldr	r2, [r0, #20]
	cmn	r3, #103
	ldr	r7, [r2, #24]
	bgt	.L8626
	cmn	r3, #104
	bge	.L8627
	cmn	r3, #108
	bne	.L8625
.L8627:
	ldr	r3, [r0, #92]
	ldr	r0, [r5]
	cmp	r3, r4
	beq	.L8662
.L8634:
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L8626:
	cmp	r3, #0
	bne	.L8625
	ldr	r3, [r0, #92]
	cmp	r3, r4
	beq	.L8663
	ldr	r3, [r0, #88]
	cmp	r3, r4
	beq	.L8664
.L8625:
	ldr	r3, [r4, #8]
	mov	r2, #32
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L8665
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L8665:
	ldr	ip, [r7]
	movw	r1, #:lower16:.LC567
	ldr	r3, [r5, #4]
	movt	r1, #:upper16:.LC567
	str	r0, [sp]
	ldr	r2, [r4, #4]
	add	r0, ip, #32
	bl	dev_err
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3
.L8662:
	ldr	r2, [r5, #48]
	cmp	r2, #3
	bls	.L8634
	movw	r8, #:lower16:.LANCHOR3
	add	r6, r0, #1
	movt	r8, #:upper16:.LANCHOR3
	rsb	r7, r0, #6
	b	.L8636
.L8635:
	add	r3, r7, r6
	add	r6, r6, #4
	cmp	r3, r2
	bcs	.L8666
.L8636:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8635
	ldr	r1, [r4]
	lsr	ip, r3, #4
	add	r0, ip, #42
	ldr	r0, [r1, r0, lsl #2]
	cmp	r0, #0
	beq	.L8635
	ldr	r1, [r1, #296]
	lsr	r1, r1, ip
	tst	r1, #1
	beq	.L8635
	and	r3, r3, #15
	mov	r1, r6
	add	r3, r8, r3
	ldrb	r2, [r3, #-2768]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L8635
.L8663:
	ldr	r8, [r1]
	ldr	r2, [r1, #48]
	cmp	r2, #3
	bls	.L8625
	movw	r9, #:lower16:.LANCHOR3
	add	r6, r8, #1
	movt	r9, #:upper16:.LANCHOR3
	rsb	r8, r8, #6
	b	.L8632
.L8631:
	add	r3, r8, r6
	add	r6, r6, #4
	cmp	r3, r2
	bcs	.L8625
.L8632:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8631
	ldr	r1, [r4]
	lsr	ip, r3, #4
	add	r0, ip, #42
	ldr	r0, [r1, r0, lsl #2]
	cmp	r0, #0
	beq	.L8631
	ldr	r1, [r1, #296]
	lsr	r1, r1, ip
	tst	r1, #1
	beq	.L8631
	and	r3, r3, #15
	mov	r1, r6
	add	r3, r9, r3
	ldrb	r2, [r3, #-2768]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L8631
.L8666:
	ldr	r0, [r5]
	b	.L8634
.L8664:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	f_midi_transmit
	.fnend
	.size	f_midi_complete, .-f_midi_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_unbind, %function
acc_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #88
	strd	r8, [sp, #16]
	add	r8, r1, #1648
	mov	r9, #512
	strd	r10, [sp, #24]
	add	r8, r8, #8
	mov	r10, #256
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	b	.L8668
.L8671:
	ldr	fp, [r5, #92]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L8668:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1656]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r8, r4
	sub	r7, r4, #36
	beq	.L8687
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L8671
.L8670:
	ldr	r4, [r5, #1688]
	cmp	r4, #0
	beq	.L8672
	ldr	r7, [r5, #96]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L8672:
	ldr	r4, [r5, #1692]
	cmp	r4, #0
	beq	.L8673
	ldr	r7, [r5, #96]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L8673:
	ldr	r0, .L8688
	bl	hid_unregister_driver
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1768]
	mov	r1, r0
	add	r0, r5, #1760
	add	r0, r0, #8
	cmp	r3, r0
	ldr	r2, [r3]
	beq	.L8674
	add	r4, r5, #1776
	mov	ip, r2
	add	r4, r4, #8
	mov	r8, #256
	mov	r7, #512
	b	.L8675
.L8678:
	mov	ip, r2
.L8675:
	ldr	lr, [r3, #4]
	cmp	r0, ip
	str	lr, [r2, #4]
	str	r2, [lr]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r2, [r5, #1784]
	str	r3, [r2, #4]
	stm	r3, {r2, r4}
	str	r3, [r5, #1784]
	mov	r3, ip
	ldr	r2, [ip]
	bne	.L8678
.L8674:
	mov	r4, r5
	ldr	r3, [r4, #1776]!
	cmp	r3, r4
	ldr	r2, [r3]
	beq	.L8676
	mov	ip, r2
	add	r0, r4, #8
	mov	r8, #256
	mov	r7, #512
	b	.L8677
.L8679:
	mov	ip, r2
.L8677:
	ldr	lr, [r3, #4]
	cmp	ip, r4
	str	lr, [r2, #4]
	str	r2, [lr]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r2, [r5, #1784]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r0, [r3, #4]
	str	r3, [r5, #1784]
	mov	r3, ip
	ldr	r2, [ip]
	bne	.L8679
.L8676:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r5, #1744
	movt	r3, #:upper16:system_wq
	add	r2, r2, #8
	ldr	r1, [r3]
	mov	r0, #4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L8687:
	bl	_raw_spin_unlock_irqrestore
	b	.L8670
.L8689:
	.align	2
.L8688:
	.word	.LANCHOR0+1748
	.fnend
	.size	acc_function_unbind, .-acc_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	transport_store, %function
transport_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r6, #2512]
	.pad #44
	sub	sp, sp, #44
	str	r3, [sp, #4]
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L8787
	movw	r1, #:lower16:.LC283
	mov	r0, r2
	movt	r1, #:upper16:.LC283
	add	r2, sp, #16
	bl	sscanf
	ldr	r3, [sp, #16]
	ldr	r7, [r4, #364]
	cmp	r3, #0
	moveq	r5, #3
	movne	r5, #2
	cmp	r7, r5
	beq	.L8788
	mov	r3, #0
	cmp	r7, #0
	str	r3, [r4, #364]
	beq	.L8695
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8696
	blx	r3
.L8696:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8697
	blx	r3
.L8697:
	cmp	r7, #2
	beq	.L8698
	cmp	r7, #3
	bne	.L8695
	add	r3, r4, #368
	add	r0, r4, #152
	mov	r8, r3
	add	r7, r4, #104
	str	r3, [sp, #12]
	bl	tasklet_kill
	add	r0, r4, #132
	bl	tasklet_kill
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #104]
	str	r0, [sp, #8]
	cmp	r7, r3
	beq	.L8708
	mov	fp, #256
	mov	r10, #512
.L8709:
	ldm	r3, {r1, r2}
	mov	r8, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	ldr	r9, [r4, #88]
	ldr	r0, [r8, #-36]!
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r1, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #104]
	cmp	r7, r3
	bne	.L8709
.L8708:
	ldr	r3, [r4, #112]
	add	r7, r4, #112
	cmp	r7, r3
	beq	.L8710
	mov	fp, #256
	mov	r10, #512
.L8711:
	ldm	r3, {r1, r2}
	mov	r8, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	ldr	r9, [r4, #92]
	ldr	r0, [r8, #-36]!
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r1, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #112]
	cmp	r7, r3
	bne	.L8711
.L8710:
	ldr	r3, [r4, #120]
	add	r7, r4, #120
	cmp	r7, r3
	beq	.L8712
	mov	fp, #256
	mov	r10, #512
.L8713:
	ldm	r3, {r1, r2}
	mov	r8, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	ldr	r9, [r4, #92]
	ldr	r0, [r8, #-36]!
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r1, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #120]
	cmp	r7, r3
	bne	.L8713
.L8712:
	ldr	r1, [sp, #8]
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
.L8695:
	cmp	r5, #2
	str	r5, [r4, #364]
	beq	.L8741
.L8796:
	cmp	r5, #3
	bne	.L8789
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L8790
.L8726:
	movw	r8, #:lower16:kmalloc_caches
	movw	r9, #:lower16:rmnet_mux_smd_complete_epout
	movt	r8, #:upper16:kmalloc_caches
	movt	r9, #:upper16:rmnet_mux_smd_complete_epout
	mov	r7, #8
.L8733:
	ldr	r6, [r4, #88]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #2048
	bne	.L8791
.L8718:
	ldr	r0, [sp, #4]
.L8690:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8741:
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epout
	mov	r6, #16
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epout
	add	r5, r4, #216
.L8715:
	ldr	r0, [r4, #88]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L8718
	cmn	r0, #4096
	bhi	.L8718
	str	r7, [r0, #28]
	ldr	r2, [r4, #220]
	subs	r6, r6, #1
	str	r3, [r4, #220]
	str	r5, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	bne	.L8715
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epin
	mov	r6, #100
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epin
	add	r8, r4, #192
.L8720:
	ldr	r0, [r4, #92]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L8718
	cmn	r0, #4096
	bhi	.L8718
	str	r7, [r0, #28]
	ldr	r2, [r4, #196]
	subs	r6, r6, #1
	str	r3, [r4, #196]
	str	r8, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	bne	.L8720
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L8718
	ldr	r3, [r4, #84]
	add	r8, r4, #368
	mov	r0, r8
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #216]
	mov	r7, r0
	cmp	r5, r6
	beq	.L8721
	mov	r10, #256
	mov	r9, #512
	mov	r1, r0
	b	.L8737
.L8724:
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #216]
	mov	r1, r0
	cmp	r5, r6
	beq	.L8792
.L8737:
	ldrd	r2, [r6]
	mov	r0, r8
	sub	r7, r6, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r6]
	str	r9, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #208
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	mov	r1, r7
	subs	r7, r0, #0
	mov	ip, #2048
	mov	r2, #208
	beq	.L8793
	ldr	r0, [r7, #160]
	ldr	r3, [r7, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r7, #160]
	str	r3, [r7, #172]
	str	r3, [r6, #-36]
	str	ip, [r6, #-32]
	str	r7, [r6, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	mov	r0, r8
	beq	.L8724
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
.L8723:
	ldr	r3, [sp, #8]
	movw	r1, #:lower16:.LC176
	mov	r2, fp
	movt	r1, #:upper16:.LC176
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #220]
	str	r6, [r4, #220]
	str	r5, [r6]
	str	r3, [r6, #4]
	str	r6, [r3]
.L8721:
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L8718
.L8791:
	str	r2, [r5, #4]
	ldr	r3, [r8, #44]
	mov	ip, #16
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L8732
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L8732
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L8718
.L8732:
	cmn	r5, #4096
	mov	r1, #2048
	add	r2, r5, #36
	add	r0, r4, #112
	bhi	.L8718
	str	r1, [r5, #4]
	subs	r7, r7, #1
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	ldr	r3, [r4, #116]
	str	r2, [r4, #116]
	str	r0, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bne	.L8733
	movw	r9, #:lower16:rmnet_mux_smd_complete_epin
	mov	r6, r1
	movt	r9, #:upper16:rmnet_mux_smd_complete_epin
	mov	r10, #8
.L8736:
	ldr	r7, [r4, #92]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L8718
	str	r6, [r5, #4]
	ldr	r3, [r8, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L8735
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L8735
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L8718
.L8698:
	add	r3, r4, #368
	add	r8, r4, #192
	mov	r0, r3
	mov	r7, #0
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #192]
	str	r7, [r4, #312]
	str	r0, [sp, #12]
	cmp	r8, r3
	beq	.L8700
	mov	fp, #256
.L8701:
	ldm	r3, {r1, r2}
	mov	r9, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	mov	r2, #512
	str	fp, [r3]
	str	r2, [r3, #4]
	str	r7, [r9, #-36]!
	ldr	r10, [r4, #88]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #192]
	cmp	r3, r8
	bne	.L8701
.L8700:
	ldr	r3, [r4, #216]
	add	r7, r4, #216
	cmp	r7, r3
	beq	.L8702
	mov	fp, #256
	mov	r10, #512
.L8703:
	ldm	r3, {r1, r2}
	mov	r8, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	str	r0, [r8, #-36]!
	ldr	r9, [r4, #92]
	bl	kfree
	mov	r1, r8
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #216]
	cmp	r3, r7
	bne	.L8703
.L8702:
	ldr	r3, [r4, #200]
	add	r7, r4, #200
	cmp	r7, r3
	beq	.L8704
	mov	r8, #0
	b	.L8705
.L8794:
	ldr	r2, [r4, #208]
	sub	r2, r2, #1
	str	r2, [r4, #208]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #200]
	cmp	r3, r7
	beq	.L8704
.L8705:
	subs	r0, r3, #0
	bne	.L8794
.L8704:
	ldr	r3, [r4, #224]
	add	r7, r4, #224
	cmp	r7, r3
	beq	.L8706
	mov	r8, #0
	b	.L8707
.L8795:
	ldr	r2, [r4, #232]
	sub	r2, r2, #1
	str	r2, [r4, #232]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #224]
	cmp	r7, r3
	beq	.L8706
.L8707:
	subs	r0, r3, #0
	bne	.L8795
.L8706:
	ldrd	r0, [sp, #8]
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #2
	str	r5, [r4, #364]
	bne	.L8796
	b	.L8741
.L8735:
	cmn	r5, #4096
	add	r2, r5, #36
	add	r1, r4, #104
	bhi	.L8718
	str	r9, [r5, #28]
	subs	r10, r10, #1
	str	r4, [r5, #32]
	ldr	r3, [r4, #108]
	str	r2, [r4, #108]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bne	.L8736
	mov	r0, r4
	bl	rmnet_mux_smd_start_rx
	b	.L8718
.L8790:
	movw	r3, #:lower16:rmnet_mux_smd_notify
	mov	r2, r4
	ldr	r0, [r6, #4048]
	movt	r3, #:upper16:rmnet_mux_smd_notify
	add	r1, r4, #128
	ldr	r5, [r4, #84]
	bl	smd_open
	cmp	r0, #0
	bne	.L8797
	ldr	r3, [r4, #172]
	ands	r3, r3, #1
	bne	.L8726
	mov	r2, sp
	str	r3, [sp, #20]
	add	r5, r4, #180
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #32
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L8730
.L8798:
	bl	schedule
.L8730:
	mov	r2, #2
	add	r1, sp, #20
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L8798
	add	r1, sp, #20
	mov	r0, r5
	bl	finish_wait
	b	.L8726
.L8797:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC152
	movt	r1, #:upper16:.LC152
	add	r0, r0, #32
	bl	dev_err
	b	.L8718
.L8792:
	mov	r7, r0
	b	.L8721
.L8789:
	movw	r0, #:lower16:.LC570
	ldr	r1, .L8799
	movt	r0, #:upper16:.LC570
	bl	printk
	b	.L8718
.L8788:
	movw	r3, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LC569
	ldr	r1, .L8799
	movt	r3, #:upper16:.LANCHOR2
	movt	r0, #:upper16:.LC569
	add	r3, r3, r7, lsl #2
	ldr	r3, [r3, #832]
	mov	r2, r3
	bl	printk
	mov	r0, #0
	b	.L8690
.L8787:
	movw	r0, #:lower16:.LC568
	ldr	r1, .L8799
	movt	r0, #:upper16:.LC568
	bl	printk
	mvn	r0, #21
	b	.L8690
.L8793:
	mov	r0, r8
	mvn	fp, #11
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L8723
.L8800:
	.align	2
.L8799:
	.word	.LANCHOR3-2752
	.fnend
	.size	transport_store, .-transport_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_close, %function
gs_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #280]
	.pad #24
	sub	sp, sp, #24
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #1
	beq	.L8802
	cmp	r3, #0
	subne	r3, r3, #1
	strne	r3, [r4, #12]
	beq	.L8835
.L8804:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8835:
	movw	r0, #:lower16:.LC471
	movw	r1, #905
	movt	r0, #:upper16:.LC471
	bl	warn_slowpath_null
	b	.L8804
.L8802:
	ldr	r0, [r4, #4]
	mov	r2, #0
	str	r2, [r4, #12]
	strb	r3, [r4, #16]
	cmp	r0, r2
	beq	.L8820
	ldr	r3, [r0, #120]
	cmp	r3, #0
	beq	.L8831
	blx	r3
.L8831:
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r0, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L8836
.L8821:
	str	r0, [r4, #100]
.L8806:
	mov	ip, #0
	mov	r2, #1
	mov	r3, ip
	mov	r1, r2
	str	ip, [r5, #280]
	add	r0, r4, #20
	str	ip, [r4, #8]
	strb	ip, [r4, #16]
	bl	__wake_up
	b	.L8804
.L8836:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L8834
	ldr	r1, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L8813
.L8834:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
.L8812:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L8820
	ldr	r0, [r4, #104]
	b	.L8821
.L8820:
	ldr	r0, [r4, #96]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L8806
.L8813:
	mov	r0, r4
	add	r7, r4, #108
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	movw	r1, #:lower16:autoremove_wake_function
	bic	r2, r3, #8128
	movt	r1, #:upper16:autoremove_wake_function
	bic	r2, r2, #63
	mov	r3, #0
	ldr	r0, [r2, #12]
	mov	r6, r2
	movw	r8, #3750
	add	r2, sp, #16
	str	r3, [sp, #4]
	strd	r0, [sp, #8]
	str	r2, [sp, #16]
	str	r2, [sp, #20]
.L8819:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r7
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L8832
	ldr	r1, [r4, #92]
	mov	r0, r4
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L8815
.L8833:
	bl	_raw_spin_unlock_irq
.L8816:
	add	r1, sp, #4
	mov	r0, r7
	bl	finish_wait
	b	.L8812
.L8815:
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #12]
	mov	r0, r8
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8816
	bl	schedule_timeout
	subs	r8, r0, #0
	bne	.L8819
	mov	r0, r4
	bl	_raw_spin_lock_irq
.L8832:
	mov	r0, r4
	b	.L8833
	.fnend
	.size	gs_close, .-gs_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_suspend, %function
android_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r8, r0, #32
	mov	r0, r8
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	dev_get_drvdata
	ldr	r3, [r5, #2244]
	ldr	r2, .L8857
	sub	r4, r3, #424
	cmp	r3, r2
	bne	.L8840
	b	.L8838
.L8856:
	ldr	r3, [r4, #424]
	cmp	r3, r2
	sub	r4, r3, #424
	beq	.L8838
.L8840:
	ldr	r3, [r3, #-416]
	cmp	r0, r3
	bne	.L8856
.L8838:
	add	r7, r0, #60
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #54]	@ zero_extendqisi2
	mov	r9, r0
	cmp	r3, #0
	bne	.L8841
	mov	r0, #1
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r4, #140
	strb	r0, [r4, #54]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L8841:
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L8842
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #72
	beq	.L8842
.L8843:
	ldr	r2, [r4, #56]
	mov	r0, r4
	cmp	r2, #0
	beq	.L8844
	blx	r2
	ldr	r3, [r7, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L8843
.L8842:
	ldr	r3, [r5, #2252]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8846
	mov	r0, r7
	blx	r3
.L8846:
	ldrb	r3, [r7, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #16]
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L8837
	mov	r0, r6
	ldrd	r4, [sp]
	mov	r1, #2
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3
.L8844:
	ldr	r4, [r4, #72]
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L8843
	b	.L8842
.L8837:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8858:
	.align	2
.L8857:
	.word	.LANCHOR1+2244
	.fnend
	.size	android_suspend, .-android_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_unbind_config, %function
ecm_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L8868
	str	lr, [sp, #4]
	bl	strim
	mov	r1, r0
	movw	r0, #:lower16:.LC417
	movt	r0, #:upper16:.LC417
	bl	strcmp
	cmp	r0, #0
	bne	.L8867
.L8859:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L8867:
	movw	r1, #:lower16:.LC571
	movw	r0, #:lower16:init_net
	movt	r1, #:upper16:.LC571
	movt	r0, #:upper16:init_net
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L8859
	.syntax divided
@ 17 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L8869:
	.align	2
.L8868:
	.word	.LANCHOR1+3124
	.fnend
	.size	ecm_qc_function_unbind_config, .-ecm_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_unbind, %function
mtp_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #88
	strd	r8, [sp, #16]
	add	r8, r1, #116
	mov	r9, #512
	strd	r10, [sp, #24]
	mov	r10, #256
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	b	.L8871
.L8874:
	ldr	fp, [r5, #92]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L8871:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #116]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r8, r4
	sub	r7, r4, #36
	beq	.L8888
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L8874
.L8873:
	ldr	r4, [r5, #168]
	cmp	r4, #0
	beq	.L8875
	ldr	r7, [r5, #96]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L8875:
	ldr	r4, [r5, #172]
	cmp	r4, #0
	beq	.L8876
	ldr	r7, [r5, #96]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L8876:
	add	r8, r5, #124
	mov	r10, #256
	mov	r9, #512
	b	.L8877
.L8880:
	ldr	fp, [r5, #100]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L8877:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #124]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r4, r8
	sub	r7, r4, #36
	beq	.L8889
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L8880
.L8879:
	mov	r3, #0
	str	r3, [r5, #104]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8888:
	bl	_raw_spin_unlock_irqrestore
	b	.L8873
.L8889:
	bl	_raw_spin_unlock_irqrestore
	b	.L8879
	.fnend
	.size	mtp_function_unbind, .-mtp_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_file_work, %function
send_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 64
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	.syntax divided
@ 751 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r1, [r0, #32]
	ldrd	r8, [r0, #48]
	ldrd	r2, [r0, #40]
	str	r1, [sp, #12]
	cmp	r8, #0
	sbcs	r1, r9, #0
	strd	r2, [sp, #32]
	mvnlt	r3, #21
	strlt	r3, [r0, #68]
	blt	.L8890
	ldr	r4, [r0, #56]
	cmp	r4, #0
	bne	.L8936
.L8893:
	ldr	r3, [r0, #-92]
	mov	r6, r0
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	asr	r1, r3, #31
	and	r3, r3, r8
	and	r2, r1, r9
	orrs	r3, r3, r2
	moveq	r3, #1
	movne	r3, #0
	cmp	r8, #1
	sbcs	r2, r9, #0
	str	r3, [sp, #4]
	orrge	r3, r3, #1
	cmp	r3, #0
	beq	.L8894
	mov	r3, sp
	sub	r2, r6, #68
	bic	r3, r3, #8128
	sub	r7, r6, #96
	bic	fp, r3, #63
	str	r2, [sp, #8]
	b	.L8911
.L8898:
	ldr	r2, [r6, #-80]
	cmp	r2, #3
	beq	.L8905
.L8942:
	cmp	r5, #0
	beq	.L8933
	movw	r2, #:lower16:.LANCHOR0
	mov	r1, #0
	ldr	r3, [r5]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1744]
	cmp	r2, r8
	sbcs	r1, r1, r9
	movge	r2, r8
	cmp	r4, #0
	beq	.L8908
	mov	r1, #2
	str	r8, [r3]
	strh	r1, [r3, #4]	@ movhi
	ldrh	r1, [r6, #60]
	strh	r1, [r3, #6]	@ movhi
	ldr	r1, [r6, #64]
	str	r1, [r3, #8]
	ldr	r3, [r5]
.L8908:
	add	r1, r3, r4
	sub	r2, r2, r4
	ldr	r0, [sp, #12]
	add	r3, sp, #32
	bl	vfs_read
	subs	r3, r0, #0
	blt	.L8934
	add	r4, r4, r3
	mov	r2, #208
	mov	r1, r5
	str	r4, [r5, #4]
	ldr	r0, [r6, #-92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8937
	ldr	r3, [sp, #4]
	subs	r8, r8, r4
	sbc	r9, r9, r4, asr #31
	cmp	r8, #1
	mov	r4, #0
	sbcs	r2, r9, #0
	and	r3, r3, #1
	orrge	r3, r3, #1
	cmp	r3, r4
	beq	.L8894
.L8911:
	orrs	r3, r8, r9
	ldr	r3, [sp, #4]
	mov	r0, r7
	moveq	r3, #0
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	ldr	r3, [r6, #-68]
	cmp	r3, r2
	beq	.L8938
	ldr	ip, [r3]
	mov	lr, #512
	mov	r10, #256
	ldr	r2, [r3, #4]
	sub	r5, r3, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	movne	r3, #0
	bne	.L8898
.L8897:
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	bne	.L8939
	ldr	r0, [fp, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #56
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	str	r4, [sp, #20]
	sub	r10, r6, #40
	str	r1, [sp, #56]
	str	r10, [sp, #16]
	strd	r8, [sp, #24]
	ldr	r9, [sp, #8]
	str	r3, [sp, #44]
	str	r0, [sp, #48]
	str	r2, [sp, #52]
	str	r1, [sp, #60]
	b	.L8904
.L8941:
	bl	schedule
.L8904:
	mov	r2, #1
	add	r1, sp, #44
	mov	r0, r10
	mov	r4, #256
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-68]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r7
	mov	r1, r2
	cmp	r3, r9
	sub	r5, r3, #36
	beq	.L8940
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r4, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L8916
.L8902:
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	bne	.L8917
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8941
	ldr	r4, [sp, #20]
	mov	r3, #65024
	mov	r5, #0
	ldrd	r8, [sp, #24]
	movt	r3, 65535
.L8903:
	add	r1, sp, #44
	ldr	r0, [sp, #16]
	str	r3, [sp, #20]
	bl	finish_wait
	ldr	r2, [r6, #-80]
	ldr	r3, [sp, #20]
	cmp	r2, #3
	bne	.L8942
.L8905:
	cmp	r5, #0
	beq	.L8912
	mvn	fp, #124
	b	.L8909
.L8939:
	cmp	r3, #3
	beq	.L8912
.L8894:
	mov	fp, #0
.L8900:
	str	fp, [r6, #68]
	.syntax divided
@ 841 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L8890:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8936:
	adds	r8, r8, #12
	mov	r4, #12
	adc	r9, r9, #0
	b	.L8893
.L8916:
	mov	r3, #0
	ldr	r4, [sp, #20]
	ldrd	r8, [sp, #24]
	b	.L8903
.L8917:
	mov	r5, #0
	ldr	r4, [sp, #20]
	mov	r3, r5
	ldrd	r8, [sp, #24]
	b	.L8903
.L8940:
	bl	_raw_spin_unlock_irqrestore
	b	.L8902
.L8938:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L8897
.L8934:
	mov	fp, r3
.L8909:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [sp, #8]
	add	r2, r5, #36
	mov	r1, r0
	ldr	r3, [r6, #-64]
	mov	r0, r7
	str	r2, [r6, #-64]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L8900
.L8937:
	ldr	r3, [r6, #-80]
	cmp	r3, #0
	mvneq	fp, #4
	beq	.L8909
	mov	r3, #4
	mvn	fp, #4
	str	r3, [r6, #-80]
	b	.L8909
.L8912:
	mvn	fp, #124
	b	.L8900
.L8933:
	mov	fp, r3
	b	.L8900
	.fnend
	.size	send_file_work, .-send_file_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_disable, %function
ffs_func_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #-28]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r6, #136]
	cmp	r9, #0
	beq	.L8944
	ldr	r3, [r9, #8]
	mov	r8, #1
	mov	r7, #0
	ldr	r4, [r9, #12]
	add	r0, r3, #28
	ldr	r5, [r3, #212]
	ldrh	fp, [r3, #184]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
.L8945:
	str	r8, [r5, #36]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L8946
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	r5, r5, #60
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	fp, fp, #1
	str	r7, [r3]
	str	r7, [r5, #-16]
	bne	.L8945
.L8948:
	ldr	r0, [r9, #8]
	mov	r1, r10
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r6, #136]
.L8944:
	ldr	r7, [r6, #96]
	cmp	r7, #2
	bne	.L8943
	mov	r3, #0
	add	r4, r6, #120
	mov	r0, r4
	str	r3, [r6, #136]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #100]
	mov	r5, r0
	add	r0, r6, #104
	ldrh	r2, [r6, #108]
	mov	lr, r0
	cmp	r3, #1
	streq	r7, [r6, #100]
	cmp	r2, #0
	beq	.L8954
	add	r2, r2, r0
	mov	r3, r0
.L8953:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L8953
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L8951:
	add	r3, r6, r2
	strh	r1, [r6, #108]	@ movhi
	mov	r0, #3
	mov	r2, #1
	mov	r1, r0
	strb	r0, [r3, #104]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r5
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L8946:
	subs	fp, fp, #1
	str	r3, [r5, #44]
	add	r4, r4, #28
	add	r5, r5, #60
	bne	.L8945
	b	.L8948
.L8954:
	mov	r1, #1
	b	.L8951
.L8943:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_func_disable, .-ffs_func_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_start_io, %function
rmnet_sdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #192]
	mov	r7, r0
	cmp	r5, #0
	beq	.L8988
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L8972
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L8972
	movw	r9, #:lower16:rmnet_sdio_complete_epout
	mov	r5, #16
	movt	r9, #:upper16:rmnet_sdio_complete_epout
	add	r8, r4, #160
.L8964:
	ldr	r0, [r4, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L8979
	cmn	r0, #4096
	bhi	.L8987
	str	r9, [r0, #28]
	ldr	r2, [r4, #164]
	subs	r5, r5, #1
	str	r3, [r4, #164]
	str	r8, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
	bne	.L8964
	movw	r9, #:lower16:rmnet_sdio_complete_epin
	mov	r5, #200
	movt	r9, #:upper16:rmnet_sdio_complete_epin
	add	r10, r4, #132
.L8970:
	ldr	r0, [r4, #92]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L8979
	cmn	r0, #4096
	bhi	.L8987
	str	r9, [r0, #28]
	ldr	r2, [r4, #136]
	subs	r5, r5, #1
	str	r3, [r4, #136]
	str	r10, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	ldr	r3, [r4, #140]
	add	r3, r3, #1
	str	r3, [r4, #140]
	bne	.L8970
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #84]
	ldr	r3, [r4, #192]
	str	r2, [sp, #4]
	cmp	r3, #0
	beq	.L8989
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #160]
	mov	r7, r0
	cmp	r8, r5
	beq	.L8972
	mov	fp, #256
	mov	r9, #512
	b	.L8976
.L8975:
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #160]
	mov	r7, r0
	cmp	r8, r5
	beq	.L8972
.L8976:
	ldrd	r2, [r5]
	mov	r1, r7
	mov	r0, r6
	sub	r7, r5, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	fp, [r5]
	str	r9, [r5, #4]
	ldr	r3, [r4, #168]
	sub	r3, r3, #1
	str	r3, [r4, #168]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #32
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	mov	r1, r7
	subs	r7, r0, #0
	mov	ip, #2048
	mov	r2, #32
	beq	.L8990
	ldr	r0, [r7, #160]
	ldr	r3, [r7, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r7, #160]
	str	r3, [r7, #172]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r7, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	mov	r0, r6
	beq	.L8975
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
.L8974:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC0
	mov	r2, r10
	movt	r1, #:upper16:.LC0
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #164]
	str	r5, [r4, #164]
	str	r8, [r5]
	str	r3, [r5, #4]
	str	r5, [r3]
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
.L8972:
	mov	r1, r7
	mov	r0, r6
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore
.L8960:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8988:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L8960
.L8979:
	mvn	r5, #11
.L8968:
.L8967:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	rmnet_sdio_free_buf
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	b	.L8960
.L8990:
	mov	r0, r6
	mvn	r10, #11
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L8974
.L8989:
	movw	r0, #:lower16:.LC572
	ldr	r1, .L8991
	movt	r0, #:upper16:.LC572
	bl	printk
	b	.L8960
.L8987:
	mov	r5, r0
	b	.L8968
.L8992:
	.align	2
.L8991:
	.word	.LANCHOR3-2736
	.fnend
	.size	rmnet_sdio_start_io, .-rmnet_sdio_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_open_sdio_work, %function
rmnet_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #-168]
	ldr	r3, [r0, #72]
	ldr	r3, [r0, #68]
	ldr	r3, [r0, #68]
	tst	r3, #2
	beq	.L8994
	ldr	r3, [r0, #72]
	tst	r3, #2
	bne	.L9009
.L8994:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #4052]
	add	r2, r2, #1
	cmp	r2, #90
	str	r2, [r3, #4052]
	ble	.L8997
	ldr	r3, [r4, #72]
	tst	r3, #2
	beq	.L9010
	ldr	r3, [r4, #68]
	tst	r3, #2
	beq	.L9011
.L8993:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9011:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC575
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC575
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r0, r0, #32
	b	dev_err
.L9010:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC574
	movt	r1, #:upper16:.LC574
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #68]
	tst	r3, #2
	bne	.L8993
	b	.L9011
.L8997:
	ldr	r5, [r4, #-52]
	mov	r0, #2000
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	mov	r0, #4
	mov	r1, r5
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L9009:
	sub	r0, r0, #252
	bl	rmnet_sdio_start_io
	ldr	r3, [r4, #-60]
	cmp	r3, #0
	beq	.L8995
	add	r2, r4, #84
	mov	r0, #4
	ldr	r1, [r4, #-52]
	bl	queue_work_on
.L8995:
	movw	r4, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC573
	ldr	r1, .L9012
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC573
	ldr	r2, [r4, #4052]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #4052]
	b	.L8993
.L9013:
	.align	2
.L9012:
	.word	.LANCHOR3-2716
	.fnend
	.size	rmnet_open_sdio_work, .-rmnet_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start, %function
gbam_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L9028
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9029
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L9030
.L9019:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L9028:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9031
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L9019
	movw	r0, #:lower16:.LC218
	ldr	r1, .L9032
	movt	r0, #:upper16:.LC218
	bl	printk
	b	.L9019
.L9030:
	movw	r0, #:lower16:.LC218
	ldr	r1, .L9032+4
	movt	r0, #:upper16:.LC218
	bl	printk
	b	.L9019
.L9029:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L9032+4
	movw	r0, #:lower16:.LC14
.L9027:
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC14
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L9031:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC14
	ldr	r1, .L9032
	b	.L9027
.L9033:
	.align	2
.L9032:
	.word	.LANCHOR2+2124
	.word	.LANCHOR2+2148
	.fnend
	.size	gbam_start, .-gbam_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_disable, %function
fsg_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #94]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L9035
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #100]
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
.L9035:
	tst	r3, #2
	beq	.L9036
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #104]
	bfc	r3, #1, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
.L9036:
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r4, [r4, #88]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L9038
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L9038
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L9038:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	fsg_disable, .-fsg_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_unbind, %function
adb_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r2, #0
	mov	r5, r1
	mov	r1, #1
	strd	r6, [sp, #8]
	mov	r3, r2
	strd	r8, [sp, #16]
	add	r0, r5, #128
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	str	r2, [r5, #100]
	mov	r2, r1
	str	r1, [r5, #104]
	mov	r1, #3
	bl	__wake_up
	ldr	r4, [r5, #152]
	cmp	r4, #0
	beq	.L9051
	ldr	r6, [r5, #96]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9051:
	add	r8, r5, #120
	add	r7, r5, #88
	mov	r10, #256
	mov	r9, #512
	b	.L9052
.L9054:
	ldr	fp, [r5, #92]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L9052:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #120]
	mov	r3, r0
	mov	r0, r7
	mov	r1, r3
	cmp	r8, r4
	sub	r6, r4, #36
	beq	.L9059
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L9054
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9059:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	adb_function_unbind, .-adb_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_ioctl, %function
modem_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #21249
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, 16388
	str	r6, [sp, #8]
	mov	r6, r2
	cmp	r1, r3
	str	lr, [sp, #12]
	bne	.L9070
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #4040]
	cmp	r4, #0
	moveq	r0, r4
	beq	.L9060
	add	r5, r4, #148
	strh	r2, [r4, #170]	@ movhi
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L9071
.L9066:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L9060:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9070:
	movw	r3, #21251
	movt	r3, 16388
	cmp	r1, r3
	bne	.L9072
	movw	r0, #:lower16:.LC576
	mov	r1, r2
	movt	r0, #:upper16:.LC576
	bl	printk
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #1
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, r3
	add	r0, ip, #2224
	mov	r1, r3
	str	r3, [ip, #2220]
	mov	r3, #0
	str	r6, [ip, #3428]
	bl	__wake_up
	mov	r0, #0
	b	.L9060
.L9072:
	movw	r0, #:lower16:.LC577
	movt	r0, #:upper16:.LC577
	bl	printk
	movw	r0, #65021
	movt	r0, 65535
	b	.L9060
.L9071:
	movw	r0, #:lower16:.LC452
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	ldrh	r2, [r4, #170]
	movt	r0, #:upper16:.LC452
	bl	printk
	add	r1, r4, #170
	mov	r0, r4
	bl	acm_cdc_notify.constprop.142
	b	.L9066
	.fnend
	.size	modem_ioctl, .-modem_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_set_alt, %function
ffs_func_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmn	r2, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [r0, #-28]
	beq	.L9074
	ldrh	ip, [r9, #182]
	ldr	r4, [r0, #-4]
	cmp	ip, #0
	beq	.L9098
	uxtb	r1, r1
	mov	r5, r4
.L9077:
	mov	r3, r5
	ldrsh	lr, [r3], #2
	cmp	lr, #0
	blt	.L9076
	cmp	lr, r1
	beq	.L9115
.L9076:
	subs	ip, ip, #1
	mov	r5, r3
	bne	.L9077
.L9098:
	mvn	r5, #32
.L9073:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9115:
	subs	r5, r5, r4
	asrmi	r5, r5, #1
	bmi	.L9073
.L9074:
	ldr	r8, [r9, #136]
	mov	r6, r2
	str	r0, [sp]
	cmp	r8, #0
	beq	.L9078
	ldr	r3, [r8, #8]
	mov	r7, #1
	mov	r5, #0
	ldr	r4, [r8, #12]
	add	r0, r3, #28
	ldr	fp, [r3, #212]
	add	r4, r4, #28
	ldrh	r10, [r3, #184]
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
.L9079:
	str	r7, [fp, #36]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L9080
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	fp, fp, #60
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	r10, r10, #1
	str	r5, [r3]
	str	r5, [fp, #-16]
	bne	.L9079
.L9082:
	ldr	r0, [r8, #8]
	ldr	r1, [sp, #4]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r9, #136]
.L9078:
	ldr	r5, [r9, #96]
	cmp	r5, #2
	bne	.L9099
	cmn	r6, #1
	beq	.L9116
	ldr	r2, [sp]
	sub	r3, r2, #36
	str	r3, [r9, #136]
	ldr	fp, [r2, #-28]
	ldr	r4, [r2, #-24]
	ldr	r6, [fp, #212]
	add	r0, fp, #28
	ldrh	r10, [fp, #184]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r6, r6, #24
	b	.L9091
.L9118:
	str	r8, [r6, #20]
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	add	r6, r6, #60
	lsr	ip, ip, #7
	strb	ip, [r6, #-27]
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	and	ip, ip, r1
	sub	ip, ip, r2
	clz	ip, ip
	lsr	ip, ip, #5
	strb	ip, [r6, #-26]
	bl	__wake_up
	subs	r10, r10, #1
	beq	.L9117
.L9091:
	ldr	r3, [fp]
	sub	r8, r4, #28
	ldr	r3, [r3, #16]
	cmp	r3, #5
	subne	r3, r3, #3
	moveq	r3, #2
	clzne	r3, r3
	lsrne	r3, r3, #5
	add	r3, r3, #2
	ldr	r7, [r8, r3, lsl #2]
	cmp	r7, #0
	beq	.L9089
	ldr	r3, [r4, #-28]
	add	r4, r4, #28
	str	r8, [r3]
	ldr	r3, [r4, #-56]
	str	r7, [r3, #28]
	ldr	r3, [r4, #-56]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #1
	mov	r1, #3
	mov	r0, r6
	mov	r3, r5
	beq	.L9118
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	blt	.L9073
.L9097:
	add	r4, r9, #120
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #100]
	mov	r6, r0
	add	r0, r9, #104
	ldrh	r2, [r9, #108]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r9, #100]
	cmp	r2, #0
	beq	.L9102
	add	r2, r2, r0
	mov	r3, r0
.L9096:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L9096
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L9094:
	add	r3, r9, r2
	strh	r1, [r9, #108]	@ movhi
	mov	r0, #2
	mov	r2, #1
	mov	r1, #3
	strb	r0, [r3, #104]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L9073
.L9080:
	subs	r10, r10, #1
	str	r3, [fp, #44]
	add	r4, r4, #28
	add	fp, fp, #60
	bne	.L9079
	b	.L9082
.L9116:
	mov	r3, #0
	add	r4, r9, #120
	mov	r0, r4
	str	r3, [r9, #136]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #100]
	mov	r6, r0
	add	r0, r9, #104
	ldrh	r2, [r9, #108]
	mov	lr, r0
	cmp	r3, #1
	streq	r5, [r9, #100]
	cmp	r2, #0
	beq	.L9100
	add	r2, r2, r0
	mov	r3, r0
.L9087:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L9087
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L9085:
	add	r3, r9, r2
	strh	r1, [r9, #108]	@ movhi
	mov	r0, #3
	mov	r2, #1
	mov	r1, r0
	mov	r5, #0
	strb	r0, [r3, #104]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L9073
.L9089:
	ldr	r3, [sp]
	mvn	r5, #21
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	b	.L9073
.L9117:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	b	.L9097
.L9102:
	mov	r1, #1
	b	.L9094
.L9100:
	mov	r1, #1
	b	.L9085
.L9099:
	mvn	r5, #18
	b	.L9073
	.fnend
	.size	ffs_func_set_alt, .-ffs_func_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_bind_config, %function
acm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [fp]
	cmp	r3, #0
	ble	.L9133
	movw	r3, #:lower16:acm_connect
	movw	r2, #:lower16:acm_disconnect
	movt	r3, #:upper16:acm_connect
	movt	r2, #:upper16:acm_disconnect
	movw	r6, #:lower16:.LANCHOR0
	movw	r9, #:lower16:kmalloc_caches
	mov	r5, r1
	movt	r6, #:upper16:.LANCHOR0
	str	r3, [sp]
	movt	r9, #:upper16:kmalloc_caches
	mov	r7, #0
	str	r2, [sp, #4]
	b	.L9120
.L9132:
	ldr	r3, [fp]
	add	r7, r7, #1
	cmp	r3, r7
	ble	.L9133
.L9120:
	ldrb	r2, [r6, #1880]	@ zero_extendqisi2
	uxtb	r10, r7
	cmp	r2, #0
	bne	.L9122
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L9125
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r2, [r6, #1880]
	strb	r2, [r6, #1920]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L9125
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r2, [r6, #1888]
	strb	r2, [r6, #1932]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L9125
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r6, #1896]
	strb	r2, [r6, #1943]
.L9122:
	ldr	r0, [r9, #8]
	cmp	r0, #0
	beq	.L9135
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L9149
.L9126:
	ldr	r3, [sp]
	movw	r0, #:lower16:acm_send_break
	mov	r8, #0
	movt	r0, #:upper16:acm_send_break
	movw	r1, #:lower16:.LC578
	mov	r2, r10
	movt	r1, #:upper16:.LC578
	str	r3, [r4, #116]
	ldr	r3, [sp, #4]
	str	r0, [r4, #124]
	mov	r0, #208
	str	r8, [r4, #148]
	str	r3, [r4, #120]
	strb	r10, [r4, #146]
	bl	kasprintf
	cmp	r0, r8
	str	r0, [r4]
	beq	.L9150
	ldr	lr, .L9151
	movw	ip, #:lower16:acm_bind
	movw	r0, #:lower16:acm_unbind
	movw	r1, #:lower16:acm_set_alt
	movw	r3, #:lower16:acm_setup
	movw	r2, #:lower16:acm_disable
	movt	ip, #:upper16:acm_bind
	movt	r0, #:upper16:acm_unbind
	movt	r3, #:upper16:acm_setup
	movt	r1, #:upper16:acm_set_alt
	movt	r2, #:upper16:acm_disable
	str	lr, [r4, #4]
	str	r5, [r4, #20]
	str	ip, [r4, #32]
	add	ip, r4, #72
	strd	r0, [r4, #36]
	add	r0, r5, #36
	strd	r2, [r4, #48]
	ldr	r3, [r5, #40]
	str	ip, [r5, #40]
	str	r0, [r4, #72]
	str	r3, [r4, #76]
	str	ip, [r3]
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L9128
	mov	r1, r4
	mov	r0, r5
	blx	r3
	subs	r3, r0, #0
	bge	.L9128
	ldr	r1, [r4, #72]
	mov	ip, #256
	mov	r0, #512
	ldr	r2, [r4, #76]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r4, #20]
	str	ip, [r4, #72]
	str	r0, [r4, #76]
.L9128:
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L9129
	ldr	r1, [r4, #16]
	cmp	r1, #0
	beq	.L9129
	orr	r1, r2, #4
	mov	r2, r1
	strb	r1, [r5, #45]
.L9129:
	tst	r2, #2
	bne	.L9130
	ldr	r1, [r4, #8]
	cmp	r1, #0
	beq	.L9130
	ldrb	r1, [r5, #45]	@ zero_extendqisi2
	orr	r1, r1, #2
	mov	r2, r1
	strb	r1, [r5, #45]
.L9130:
	tst	r2, #1
	bne	.L9131
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9131
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #1
	strb	r2, [r5, #45]
.L9131:
	cmp	r3, #0
	beq	.L9132
	mov	r0, r4
	str	r3, [sp]
	bl	kfree
	ldr	r3, [sp]
.L9124:
	movw	r0, #:lower16:.LC579
	mov	r2, r7
	ldr	r1, .L9151+4
	movt	r0, #:upper16:.LC579
	str	r3, [sp]
	bl	printk
	ldr	r3, [sp]
.L9119:
	mov	r0, r3
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9135:
	mov	r4, #16
	b	.L9126
.L9133:
	mov	r3, #0
	b	.L9119
.L9125:
	mvn	r3, #18
	b	.L9124
.L9150:
	mvn	r3, #11
	mov	r0, r4
	str	r3, [sp]
	bl	kfree
	ldr	r3, [sp]
	b	.L9124
.L9149:
	mvn	r3, #11
	b	.L9124
.L9152:
	.align	2
.L9151:
	.word	.LANCHOR0+1944
	.word	.LANCHOR3-2692
	.fnend
	.size	acm_function_bind_config, .-acm_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_peer_reset_cb, %function
gbam_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #12]
	cmp	r3, #0
	beq	.L9154
	ldr	r2, [r3, #84]
	cmp	r2, #0
	beq	.L9154
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L9154
	ldr	r0, [r3, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #12]
	mov	r3, #0
	mov	r0, r3
	ldr	r2, [r2, #84]
	str	r3, [r2]
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #88]
	str	r3, [r2]
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	bne	.L9189
.L9155:
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L9190
	ldr	r3, [r3, #84]
	str	r4, [r3]
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L9191
	ldr	r3, [r3, #88]
	add	r5, r4, #4
	mov	r0, r5
	str	r4, [r3]
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9192
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L9193
.L9161:
	mov	r0, r5
	bl	_raw_spin_unlock
.L9160:
	add	r5, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9194
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L9195
.L9164:
	mov	r0, r5
	bl	_raw_spin_unlock
.L9163:
	ldr	r3, [r4, #132]
	cmp	r3, #6
	beq	.L9196
.L9166:
	mov	r5, #0
.L9153:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9154:
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	beq	.L9163
	movw	r0, #:lower16:.LC580
	ldr	r1, .L9197
	movt	r0, #:upper16:.LC580
	bl	printk
	ldr	r3, [r4, #132]
	cmp	r3, #6
	bne	.L9166
.L9196:
	ldr	r5, [r4]
	cmp	r5, #0
	bne	.L9166
	mov	r1, r5
	mov	r0, r5
	bl	usb_bam_register_peer_reset_cb
	b	.L9153
.L9195:
	movw	r0, #:lower16:.LC218
	ldr	r1, .L9197+4
	movt	r0, #:upper16:.LC218
	bl	printk
	b	.L9164
.L9190:
	movw	r0, #:lower16:.LC581
	ldr	r1, .L9197
	ldr	r2, [r3, #84]
	movt	r0, #:upper16:.LC581
	bl	printk
	b	.L9153
.L9191:
	movw	r0, #:lower16:.LC582
	ldr	r2, [r3, #88]
	movt	r0, #:upper16:.LC582
	ldr	r1, .L9197
	bl	printk
	ldr	r3, [r4, #12]
	mov	r2, #0
	ldr	r3, [r3, #84]
	str	r2, [r3]
	b	.L9153
.L9192:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC14
	ldr	r1, .L9197+8
	movt	r0, #:upper16:.LC14
	bl	printk
	b	.L9160
.L9193:
	movw	r0, #:lower16:.LC218
	ldr	r1, .L9197+8
	movt	r0, #:upper16:.LC218
	bl	printk
	b	.L9161
.L9194:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC14
	ldr	r1, .L9197+4
	movt	r0, #:upper16:.LC14
	bl	printk
	b	.L9163
.L9189:
	movw	r0, #:lower16:.LC580
	ldr	r1, .L9197
	movt	r0, #:upper16:.LC580
	bl	printk
	b	.L9155
.L9198:
	.align	2
.L9197:
	.word	.LANCHOR3-2664
	.word	.LANCHOR2+2148
	.word	.LANCHOR2+2124
	.fnend
	.size	gbam_peer_reset_cb, .-gbam_peer_reset_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_unbind, %function
diag_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L9213
	cmp	r3, #2
	bhi	.L9214
.L9201:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L9202
	ldr	r2, [r3, #20]
	cmp	r2, r4
	moveq	r2, #0
	streq	r2, [r3, #20]
.L9202:
	ldrd	r2, [r4, #140]
	mov	r9, #256
	mov	r8, #512
	add	r6, r4, #108
	mov	r5, r4
	mov	r0, r6
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4, #140]
	str	r8, [r4, #144]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #100]!
	mov	r7, r0
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L9203
.L9207:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	mov	r10, r2
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r10
	mov	r3, r10
	ldr	r2, [r10]
	bne	.L9207
.L9203:
	mov	r5, r4
	ldr	r3, [r5, #92]!
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L9205
	mov	r10, r2
	mov	r9, #256
	mov	r8, #512
	b	.L9206
.L9208:
	mov	r10, r2
.L9206:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r10
	mov	r3, r10
	ldr	r2, [r10]
	bne	.L9208
.L9205:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L9213:
	mov	r5, r0
	ldr	r0, [r1, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9201
.L9214:
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L9201
	.fnend
	.size	diag_function_unbind, .-diag_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_common_release, %function
fsg_common_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-224]
	cmp	r3, #7
	bne	.L9242
.L9216:
	ldr	r0, [r6, #-236]
	cmp	r0, #0
	beq	.L9220
	ldr	r5, [r6, #-244]
	cmp	r5, #0
	beq	.L9221
	ldr	r7, .L9244
	add	r4, r0, #48
	add	r9, r7, #16
	add	r8, r7, #32
.L9222:
	mov	r1, r7
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r9
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r8
	mov	r0, r4
	bl	device_remove_file
	mov	r0, r4
	ldr	r1, .L9244+4
	bl	device_remove_file
	ldr	r3, [r4, #-48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L9223
	mov	r0, r3
	bl	fput
	mov	r3, #0
	mov	r0, r4
	add	r4, r4, #400
	str	r3, [r4, #-448]
	bl	device_unregister
	subs	r5, r5, #1
	bne	.L9222
.L9225:
	ldr	r0, [r6, #-236]
.L9221:
	bl	kfree
.L9220:
	ldr	r5, [r6, #-268]
	add	r4, r5, #32
	add	r5, r5, #160
.L9226:
	ldr	r0, [r4, #-32]
	add	r4, r4, #32
	bl	kfree
	cmp	r5, r4
	bne	.L9226
	ldr	r0, [r6, #-268]
	bl	kfree
	ldrb	r3, [r6, #-192]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L9243
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9223:
	bl	device_unregister
	subs	r5, r5, #1
	add	r4, r4, #400
	bne	.L9222
	b	.L9225
.L9242:
	sub	r4, r0, #292
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-224]
	mov	r5, r0
	cmp	r3, #6
	bgt	.L9218
	ldr	r3, [r6, #-280]
	mov	r1, #6
	ldr	r2, [r6, #-168]
	str	r1, [r6, #-224]
	str	r3, [r6, #-220]
	cmp	r2, #0
	beq	.L9218
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L9218:
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	sub	r0, r6, #184
	bl	wait_for_completion
	b	.L9216
.L9243:
	sub	r0, r6, #336
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L9245:
	.align	2
.L9244:
	.word	.LANCHOR0+1952
	.word	.LANCHOR0+2000
	.fnend
	.size	fsg_common_release, .-fsg_common_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_init, %function
mass_storage_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:kmalloc_caches
	movt	r9, #:upper16:kmalloc_caches
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r9, #28]
	.pad #52
	sub	sp, sp, #52
	cmp	r0, #0
	beq	.L9292
	mov	r2, #100
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L9356
.L9247:
	mov	r2, #1
	mov	r1, #256
	movw	r3, #:lower16:.LC593
	str	r2, [r4]
	movt	r3, #:upper16:.LC593
	strh	r1, [r4, #8]	@ movhi
	strb	r2, [r4, #10]
	ldr	r0, [r9, #36]
	str	r3, [sp, #36]
	ldr	r10, [r7]
	cmp	r0, #0
	beq	.L9294
	mov	r2, #340
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L9250
.L9249:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	movw	r1, #32976
	mov	r0, #128
	orr	r3, r3, #2
	strb	r3, [r5, #144]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #68]
	beq	.L9357
	ldr	r3, [r4, #76]
	movw	r1, #32976
	mov	r0, #400
	str	r3, [r5, #172]
	ldr	r3, [r4, #80]
	str	r10, [r5]
	str	r3, [r5, #176]
	ldr	r3, [r10, #4]
	str	r3, [r5, #48]
	ldr	r3, [r7, #4]
	str	r7, [r5, #4]
	str	r3, [r5, #52]
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L9266
	add	r7, r5, #28
	movw	r1, #:lower16:.LC594
	ldr	r2, .L9361
	mov	r0, r7
	movt	r1, #:upper16:.LC594
	str	r8, [r5, #100]
	bl	__init_rwsem
	ldrb	r3, [r4, #10]	@ zero_extendqisi2
	movw	ip, #:lower16:fsg_lun_release
	mov	r1, r7
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	movt	ip, #:upper16:fsg_lun_release
	mov	r7, r8
	add	r0, r10, #32
	adds	r3, r3, #0
	movne	r3, #1
	bfi	r2, r3, #3, #1
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	mov	r2, r3
	strb	r3, [r8, #24]
	ldrb	r3, [r4, #9]	@ zero_extendqisi2
	bfi	r2, r3, #2, #1
	mov	r3, r2
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #11]	@ zero_extendqisi2
	str	ip, [r8, #388]
	bfi	r3, r2, #7, #1
	strb	r3, [r8, #24]
	str	r0, [r7, #48]!
	mov	r0, r7
	bl	dev_set_drvdata
	ldr	r1, [r4, #68]
	mov	r2, #0
	movw	r3, #:lower16:.LC583
	movt	r3, #:upper16:.LC583
	mov	r0, r7
	cmp	r1, r2
	moveq	r1, r3
	bl	dev_set_name
	mov	r0, r7
	bl	device_register
	cmp	r0, #0
	bne	.L9358
	ldr	r1, .L9361+4
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L9258
	ldr	r1, .L9361+8
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L9258
	ldr	r1, .L9361+12
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L9258
	mov	r0, r7
	ldr	r1, .L9361+16
	bl	device_create_file
	subs	r7, r0, #0
	movne	r8, r7
	movne	r9, r8
	bne	.L9260
	ldr	r1, [r4, #4]
	cmp	r1, #0
	beq	.L9263
	mov	r0, r8
	bl	fsg_lun_open
	cmp	r0, #0
	bne	.L9258
.L9264:
	ldr	r8, [r5, #68]
	mov	r3, #1
	str	r3, [r5, #92]
	add	fp, r8, #96
.L9265:
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	bl	kmalloc_order_trace
	cmp	r0, #0
	str	r0, [r8]
	beq	.L9266
	cmp	r8, fp
	beq	.L9359
	add	r8, r8, #32
	str	r8, [r8, #-24]
	b	.L9265
.L9250:
	mvn	r10, #11
.L9355:
	mov	r0, r4
	bl	kfree
.L9246:
	mov	r0, r10
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9263:
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	ands	r2, r2, #12
	bne	.L9264
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC596
	mvn	r8, #21
	movt	r1, #:upper16:.LC596
	add	r0, r0, #32
	bl	dev_err
	mov	r2, #1
	mov	r3, #7
	add	r0, r5, #336
	str	r2, [r5, #92]
	str	r3, [r5, #112]
	bl	fsg_common_release
.L9254:
	mov	r10, r8
	b	.L9355
.L9294:
	mov	r5, #16
	b	.L9249
.L9292:
	mov	r4, #16
	b	.L9247
.L9258:
	mov	r8, r0
	mov	r9, r0
.L9260:
	mov	r3, #1
	str	r3, [r5, #92]
.L9257:
	mov	r3, #7
	add	r0, r5, #336
	str	r3, [r5, #112]
	bl	fsg_common_release
.L9285:
	cmn	r9, #4096
	bhi	.L9254
	ldr	r3, [r4]
	cmp	r3, #0
	movne	r7, #0
	addne	r9, sp, #36
	movne	r5, r7
	bne	.L9287
	b	.L9288
.L9289:
	ldr	r3, [r4]
	add	r5, r5, #1
	cmp	r3, r5
	bls	.L9288
.L9287:
	ldr	r1, [r8, #100]
	ldr	r0, [r6, #8]
	ldr	r2, [r9, r5, lsl #2]
	add	r1, r1, r7
	add	r7, r7, #400
	add	r1, r1, #56
	add	r0, r0, #8
	bl	sysfs_create_link
	cmp	r0, #0
	beq	.L9289
	cmp	r5, #0
	mov	r10, r0
	beq	.L9291
.L9290:
	ldr	r0, [r6, #8]
	sub	r5, r5, #1
	ldr	r1, [r9, r5, lsl #2]
	add	r0, r0, #8
	bl	sysfs_remove_link
	cmp	r5, #0
	bne	.L9290
.L9291:
	add	r0, r8, #336
	bl	fsg_common_release
	b	.L9355
.L9288:
	str	r8, [r4, #96]
	mov	r10, #0
	str	r4, [r6, #4]
	b	.L9246
.L9357:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L9250
	mov	r0, r5
	mvn	r10, #11
	bl	kfree
	b	.L9355
.L9358:
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC595
	mov	r3, r0
	movt	r1, #:upper16:.LC595
	mov	r2, #0
	mov	r8, r0
	mov	r9, r0
	add	r0, ip, #32
	bl	_dev_info
	mov	r3, #0
	mov	r0, r7
	str	r3, [r5, #92]
	bl	put_device
	b	.L9257
.L9266:
	mov	r3, #7
	add	r0, r5, #336
	mvn	r8, #11
	str	r3, [r5, #112]
	bl	fsg_common_release
	b	.L9254
.L9359:
	ldr	r2, [r5, #68]
	movw	r3, #65535
	str	r2, [r8, #8]
	ldrh	r1, [r4, #92]
	cmp	r1, r3
	beq	.L9360
.L9269:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC584
	add	r0, r5, #180
	ldr	ip, [r4, #88]
	movt	r2, #:upper16:.LC584
	cmp	r3, #0
	moveq	r3, r2
	cmp	ip, #0
	beq	.L9350
	movw	r8, #:lower16:.LC585
	movt	r8, #:upper16:.LC585
.L9272:
	movw	r2, #:lower16:.LC598
	str	ip, [sp]
	movt	r2, #:upper16:.LC598
	str	r1, [sp, #4]
	mov	r1, #29
	bl	snprintf
	ldm	r8, {r1, ip}
	movw	r2, #:lower16:.LC599
	movt	r2, #:upper16:.LC599
	ldr	r0, [r8, #8]
	ldm	r2, {r10, lr}
	mov	r2, #0
	strb	r2, [r5, #234]
	str	r1, [r5, #218]	@ unaligned
	ldr	r1, [r8, #12]
	str	r10, [r5, #209]	@ unaligned
	str	lr, [r5, #213]	@ unaligned
	str	ip, [r5, #222]	@ unaligned
	str	r0, [r5, #226]	@ unaligned
	str	r1, [r5, #230]	@ unaligned
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L9273
	ldr	r3, [r5]
	movw	r0, #:lower16:.LC331
	movt	r0, #:upper16:.LC331
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r3, r0, #0
	movne	r3, #1
.L9273:
	ldrb	lr, [r5, #144]	@ zero_extendqisi2
	mov	r10, #0
	mov	r2, #1
	movw	ip, #:lower16:.LC587
	movw	r0, #:lower16:fsg_main_thread
	str	r10, [r5, #44]
	movt	ip, #:upper16:.LC587
	movt	r0, #:upper16:fsg_main_thread
	str	r2, [r5, #336]
	mov	r1, r5
	mvn	r2, #0
	bfi	lr, r3, #0, #1
	strb	lr, [r5, #144]
	ldr	r3, [r4, #72]
	cmp	r3, r10
	moveq	r3, ip
	bl	kthread_create_on_node
	cmn	r0, #4096
	mov	r8, r0
	str	r0, [r5, #168]
	movhi	r9, r0
	bhi	.L9257
	movw	r1, #:lower16:.LC498
	ldr	r2, .L9361+20
	add	r0, r5, #156
	movt	r1, #:upper16:.LC498
	str	r10, [r5, #152]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC600
	ldr	r2, .L9361
	add	r0, r5, #16
	movt	r1, #:upper16:.LC600
	bl	__init_waitqueue_head
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC601
	movt	r1, #:upper16:.LC601
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC602
	movt	r1, #:upper16:.LC602
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r9, #48]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [sp, #16]
	beq	.L9276
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	str	r0, [sp, #16]
.L9276:
	ldr	r3, [r5, #92]
	ldr	r8, [r5, #100]
	cmp	r3, #0
	str	r3, [sp, #12]
	ble	.L9277
	movw	r3, #:lower16:.LC588
	movw	r2, #:lower16:.LC589
	str	r4, [sp, #28]
	movw	fp, #:lower16:.LC591
	movt	r3, #:upper16:.LC588
	movt	r2, #:upper16:.LC589
	add	r8, r8, #48
	movt	fp, #:upper16:.LC591
	strd	r2, [sp, #20]
.L9278:
	ldr	r0, [r8, #-48]
	sub	r4, r8, #48
	cmp	r0, #0
	beq	.L9327
	ldr	r3, [sp, #16]
	mov	r2, #4096
	add	r0, r0, #8
	subs	r1, r3, #0
	beq	.L9280
	bl	d_path
	cmn	r0, #4096
	mov	r10, r0
	bhi	.L9280
.L9279:
	ldrb	r4, [r4, #24]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC590
	movw	lr, #:lower16:.LC592
	movt	ip, #:upper16:.LC590
	movt	lr, #:upper16:.LC592
	movw	r9, #:lower16:.LC604
	movw	r1, #:lower16:.LC603
	movt	r9, #:upper16:.LC604
	mov	r0, r8
	tst	r4, #4
	movt	r1, #:upper16:.LC603
	moveq	ip, fp
	tst	r4, #2
	moveq	lr, fp
	tst	r4, #8
	mov	r2, ip
	mov	r3, lr
	bne	.L9283
	str	fp, [sp]
	add	r7, r7, #1
	add	r8, r8, #400
	str	r10, [sp, #4]
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r3, r7
	bne	.L9278
.L9354:
	ldr	r4, [sp, #28]
.L9277:
	ldr	r0, [sp, #16]
	mov	r9, r5
	mov	r8, r5
	bl	kfree
	ldr	r0, [r5, #168]
	bl	wake_up_process
	b	.L9285
.L9283:
	movw	r1, #:lower16:.LC603
	stm	sp, {r9, r10}
	add	r7, r7, #1
	movt	r1, #:upper16:.LC603
	add	r8, r8, #400
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r3, r7
	bne	.L9278
	b	.L9354
.L9280:
	ldr	r10, [sp, #20]
	b	.L9279
.L9327:
	ldr	r10, [sp, #24]
	b	.L9279
.L9360:
	ldr	r8, [r10, #28]
	movw	r0, #:lower16:.LC324
	movt	r0, #:upper16:.LC324
	mov	r1, r8
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #769
	beq	.L9269
	movw	r0, #:lower16:.LC325
	mov	r1, r8
	movt	r0, #:upper16:.LC325
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #770
	beq	.L9269
	movw	r0, #:lower16:.LC326
	mov	r1, r8
	movt	r0, #:upper16:.LC326
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #771
	beq	.L9269
	movw	r0, #:lower16:.LC327
	mov	r1, r8
	movt	r0, #:upper16:.LC327
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #774
	beq	.L9269
	movw	r0, #:lower16:.LC328
	mov	r1, r8
	movt	r0, #:upper16:.LC328
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #776
	beq	.L9269
	movw	r0, #:lower16:.LC329
	mov	r1, r8
	movt	r0, #:upper16:.LC329
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #785
	beq	.L9269
	movw	r0, #:lower16:.LC330
	mov	r1, r8
	movt	r0, #:upper16:.LC330
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #786
	beq	.L9269
	movw	r0, #:lower16:.LC331
	mov	r1, r8
	movt	r0, #:upper16:.LC331
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #787
	beq	.L9269
	movw	r0, #:lower16:.LC332
	mov	r1, r8
	movt	r0, #:upper16:.LC332
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #788
	beq	.L9269
	movw	r0, #:lower16:.LC333
	mov	r1, r8
	movt	r0, #:upper16:.LC333
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #790
	beq	.L9269
	movw	r0, #:lower16:.LC334
	mov	r1, r8
	movt	r0, #:upper16:.LC334
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #792
	beq	.L9269
	movw	r0, #:lower16:.LC335
	mov	r1, r8
	movt	r0, #:upper16:.LC335
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #793
	beq	.L9269
	movw	r0, #:lower16:.LC336
	mov	r1, r8
	movt	r0, #:upper16:.LC336
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #800
	beq	.L9269
	movw	r0, #:lower16:.LC337
	mov	r1, r8
	movt	r0, #:upper16:.LC337
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #801
	beq	.L9269
	movw	r0, #:lower16:.LC338
	mov	r1, r8
	movt	r0, #:upper16:.LC338
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #802
	beq	.L9269
	movw	r0, #:lower16:.LC339
	mov	r1, r8
	movt	r0, #:upper16:.LC339
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #803
	beq	.L9269
	movw	r0, #:lower16:.LC340
	mov	r1, r8
	movt	r0, #:upper16:.LC340
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #804
	beq	.L9269
	movw	r0, #:lower16:.LC341
	mov	r1, r8
	movt	r0, #:upper16:.LC341
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #805
	beq	.L9269
	movw	r0, #:lower16:.LC342
	mov	r1, r8
	movt	r0, #:upper16:.LC342
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #806
	beq	.L9269
	movw	r0, #:lower16:.LC343
	mov	r1, r8
	movt	r0, #:upper16:.LC343
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #807
	beq	.L9269
	movw	r0, #:lower16:.LC344
	mov	r1, r8
	movt	r0, #:upper16:.LC344
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #808
	beq	.L9269
	movw	r0, #:lower16:.LC345
	mov	r1, r8
	movt	r0, #:upper16:.LC345
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #809
	beq	.L9269
	movw	r0, #:lower16:.LC346
	mov	r1, r8
	movt	r0, #:upper16:.LC346
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #816
	beq	.L9269
	movw	r0, #:lower16:.LC347
	mov	r1, r8
	movt	r0, #:upper16:.LC347
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #817
	beq	.L9269
	movw	r0, #:lower16:.LC348
	mov	r1, r8
	movt	r0, #:upper16:.LC348
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #818
	beq	.L9269
	movw	r0, #:lower16:.LC349
	mov	r1, r8
	movt	r0, #:upper16:.LC349
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #819
	beq	.L9269
	movw	r0, #:lower16:.LC350
	mov	r1, r8
	movt	r0, #:upper16:.LC350
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #820
	beq	.L9269
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC597
	mov	r2, r8
	movt	r1, #:upper16:.LC597
	add	r0, r0, #32
	bl	dev_warn
	movw	r1, #921
	b	.L9269
.L9350:
	ldr	r2, [r5, #100]
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	beq	.L9323
	movw	r8, #:lower16:.LC585
	movt	r8, #:upper16:.LC585
	mov	ip, r8
	b	.L9272
.L9356:
	mvn	r10, #11
	b	.L9246
.L9323:
	movw	ip, #:lower16:.LC586
	movw	r8, #:lower16:.LC585
	movt	ip, #:upper16:.LC586
	movt	r8, #:upper16:.LC585
	b	.L9272
.L9362:
	.align	2
.L9361:
	.word	.LANCHOR1+4056
	.word	.LANCHOR0+1984
	.word	.LANCHOR0+2000
	.word	.LANCHOR0+1968
	.word	.LANCHOR0+1952
	.word	.LANCHOR1+4020
	.fnend
	.size	mass_storage_function_init, .-mass_storage_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_setup, %function
rndis_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r0, #20]
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	r2, [r1, #2]	@ unaligned
	rev16	r3, r3
	ldrh	r9, [r1, #6]	@ unaligned
	uxth	r3, r3
	ldr	r10, [r0, #24]
	cmp	r3, #8448
	ldr	r6, [r10, #4]
	beq	.L9365
	movw	r1, #41217
	cmp	r3, r1
	bne	.L9384
	cmp	r2, #0
	bne	.L9384
	ldrb	r3, [r8, #120]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L9384
	ldr	r2, [r8, #144]
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r4, .L9388
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r3, r5, r2
	add	r2, r2, #52
	ldr	r1, [r3, #3688]
	add	r2, r4, r2
	cmp	r1, r2
	ldr	r3, [r1]
	beq	.L9384
	ldr	r0, [r1, #16]
	cmp	r0, #0
	bne	.L9371
	b	.L9386
.L9373:
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L9370
	mov	r3, r1
.L9371:
	cmp	r3, r2
	ldr	r1, [r3]
	bne	.L9373
.L9384:
	mvn	r7, #94
.L9363:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9365:
	cmp	r2, #0
	bne	.L9384
	ldrb	r3, [r8, #120]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L9384
	movw	r3, #:lower16:rndis_qc_command_complete
	mov	r7, r9
	movt	r3, #:upper16:rndis_qc_command_complete
	mov	r9, r2
	str	r3, [r6, #28]
.L9369:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r7, [r6, #4]
	mov	r1, r6
	str	r8, [r6, #32]
	mov	r2, #32
	bfi	r3, r9, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r10]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bge	.L9363
	movw	r0, #:lower16:.LC605
	mov	r2, r7
	ldr	r1, .L9388+4
	movt	r0, #:upper16:.LC605
	bl	printk
	b	.L9363
.L9386:
	mov	r3, r1
.L9370:
	ldr	fp, [r3, #8]
	mov	r2, #1
	ldr	r7, [r3, #12]
	str	r2, [r3, #16]
	cmp	fp, #0
	beq	.L9384
	mov	r2, r7
	mov	r1, fp
	ldr	r0, [r6]
	bl	memcpy
	movw	r3, #:lower16:rndis_qc_response_complete
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r3, [r6, #28]
	ldr	r3, [r8, #144]
	rsb	r3, r3, r3, lsl #4
	lsl	r3, r3, #2
	add	r5, r5, r3
	add	r3, r3, #52
	ldr	ip, [r5, #3688]
	add	r3, r4, r3
	cmp	r3, ip
	ldr	r4, [ip]
	beq	.L9374
	mov	r5, r4
	mov	r1, #256
	mov	r2, #512
	b	.L9376
.L9380:
	mov	r5, r4
.L9376:
	cmp	ip, #0
	beq	.L9375
	ldr	r0, [ip, #8]
	cmp	fp, r0
	beq	.L9387
.L9375:
	cmp	r3, r5
	mov	ip, r5
	ldr	r4, [r4]
	bne	.L9380
.L9374:
	cmp	r7, #0
	blt	.L9363
	cmp	r7, r9
	movge	r9, #0
	movlt	r9, #1
	b	.L9369
.L9387:
	ldr	lr, [ip, #4]
	mov	r0, ip
	str	r3, [sp, #4]
	str	lr, [r4, #4]
	str	r4, [lr]
	stm	ip, {r1, r2}
	bl	kfree
	ldr	r3, [sp, #4]
	mov	r1, #256
	mov	r2, #512
	b	.L9375
.L9389:
	.align	2
.L9388:
	.word	.LANCHOR1+3636
	.word	.LANCHOR3-2644
	.fnend
	.size	rndis_qc_setup, .-rndis_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_setup, %function
rndis_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	.pad #4
	sub	sp, sp, #4
	ldr	r0, [r0, #20]
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	r2, [r1, #2]	@ unaligned
	rev16	r3, r3
	ldrh	r7, [r1, #6]	@ unaligned
	uxth	r3, r3
	ldr	r8, [r0, #24]
	cmp	r3, #8448
	ldr	r5, [r8, #4]
	beq	.L9392
	movw	r1, #41217
	cmp	r3, r1
	bne	.L9411
	cmp	r2, #0
	bne	.L9411
	ldrb	r3, [r4, #148]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L9411
	ldr	r2, [r4, #164]
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r10, .L9415
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r3, fp, r2
	add	r2, r2, #52
	ldr	r1, [r3, #3688]
	add	r2, r10, r2
	cmp	r1, r2
	ldr	r3, [r1]
	beq	.L9411
	ldr	r0, [r1, #16]
	cmp	r0, #0
	bne	.L9398
	b	.L9413
.L9400:
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L9397
	mov	r3, r1
.L9398:
	cmp	r3, r2
	ldr	r1, [r3]
	bne	.L9400
.L9411:
	mvn	r6, #94
.L9390:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9392:
	cmp	r2, #0
	bne	.L9411
	ldrb	r3, [r4, #148]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L9411
	movw	r3, #:lower16:rndis_command_complete
	mov	r6, r7
	str	r4, [r5, #32]
	movt	r3, #:upper16:rndis_command_complete
	mov	r7, r2
	str	r3, [r5, #28]
.L9396:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L9390
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC606
	mov	r2, r6
	movt	r1, #:upper16:.LC606
	add	r0, r0, #32
	bl	dev_err
	b	.L9390
.L9413:
	mov	r3, r1
.L9397:
	ldr	r9, [r3, #8]
	mov	r2, #1
	ldr	r6, [r3, #12]
	str	r2, [r3, #16]
	cmp	r9, #0
	beq	.L9411
	mov	r2, r6
	mov	r1, r9
	ldr	r0, [r5]
	bl	memcpy
	movw	r3, #:lower16:rndis_response_complete
	str	r4, [r5, #32]
	movt	r3, #:upper16:rndis_response_complete
	str	r3, [r5, #28]
	ldr	r3, [r4, #164]
	rsb	r3, r3, r3, lsl #4
	lsl	r3, r3, #2
	add	fp, fp, r3
	add	r2, r3, #52
	ldr	r3, [fp, #3688]
	add	r10, r10, r2
	cmp	r10, r3
	ldr	r4, [r3]
	beq	.L9401
	mov	fp, r4
	mov	r1, #256
	mov	r2, #512
	b	.L9403
.L9407:
	mov	fp, r4
.L9403:
	cmp	r3, #0
	beq	.L9402
	ldr	r0, [r3, #8]
	cmp	r9, r0
	beq	.L9414
.L9402:
	cmp	r10, fp
	mov	r3, fp
	ldr	r4, [r4]
	bne	.L9407
.L9401:
	cmp	r6, #0
	blt	.L9390
	cmp	r6, r7
	movge	r7, #0
	movlt	r7, #1
	b	.L9396
.L9414:
	ldr	ip, [r3, #4]
	mov	r0, r3
	str	ip, [r4, #4]
	str	r4, [ip]
	stm	r3, {r1, r2}
	bl	kfree
	mov	r1, #256
	mov	r2, #512
	b	.L9402
.L9416:
	.align	2
.L9415:
	.word	.LANCHOR1+3636
	.fnend
	.size	rndis_setup, .-rndis_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_disable, %function
ccid_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #100]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r4, [r5, #112]
	cmp	r4, #0
	beq	.L9418
	ldr	r6, [r5, #100]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9418:
	ldr	r3, [r5, #156]
	cmp	r3, #0
	bne	.L9419
	ldr	r4, [r5, #184]
	cmp	r4, #0
	beq	.L9419
	ldr	r6, [r5, #108]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9419:
	add	r8, r5, #192
	add	r7, r5, #92
	mov	r10, #256
	mov	r9, #512
	b	.L9420
.L9423:
	ldr	fp, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L9420:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #192]
	mov	r3, r0
	mov	r0, r7
	mov	r1, r3
	cmp	r8, r4
	sub	r6, r4, #36
	beq	.L9431
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L9423
.L9422:
	mov	r4, #0
	add	r0, r5, #172
	mov	r3, r4
	mov	r2, #1
	mov	r1, #3
	str	r4, [r5, #96]
	str	r4, [r5, #200]
	bl	__wake_up
	mov	r3, r4
	add	r0, r5, #160
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r3, r4
	add	r0, r5, #128
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__wake_up
.L9431:
	bl	_raw_spin_unlock_irqrestore
	b	.L9422
	.fnend
	.size	ccid_function_disable, .-ccid_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_open, %function
ncm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock
	ldr	r5, [r4, #168]
	mov	r3, #1
	mov	r2, #2
	strb	r2, [r4, #172]
	strb	r3, [r4, #173]
	cmp	r5, #0
	beq	.L9434
	ldr	r1, [r4, #20]
	mov	r2, #0
	mov	lr, #42
	ldr	r3, [r5]
	mov	ip, #8
	mov	r0, #16
	ldr	r1, [r1, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	str	r0, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L9440
.L9435:
	ldr	r1, [r5]
	mvn	lr, #94
	mov	r7, #1
	mov	ip, #0
	mov	r0, r6
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r7, [r4, #172]
	strb	lr, [r3]
	ldrb	r2, [r4, #148]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	str	ip, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r5, [r4, #168]
.L9434:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L9440:
	ldr	r0, [r2, #16]
	mov	r1, #0
	mov	r2, #28672
	movt	r1, 6500
	movt	r2, 148
	cmp	r0, #3
	moveq	r2, r1
	b	.L9435
	.fnend
	.size	ncm_open, .-ncm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_close, %function
ncm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock
	ldr	r5, [r4, #168]
	mov	r2, #0
	mov	r3, #2
	strb	r3, [r4, #172]
	strb	r2, [r4, #173]
	cmp	r5, r2
	beq	.L9443
	ldr	r1, [r4, #20]
	mov	lr, #42
	mov	ip, #8
	ldr	r3, [r5]
	mov	r0, #16
	ldr	r1, [r1, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	str	r0, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L9449
.L9444:
	ldr	r1, [r5]
	mvn	lr, #94
	mov	r7, #1
	mov	ip, #0
	mov	r0, r6
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r7, [r4, #172]
	strb	lr, [r3]
	ldrb	r2, [r4, #148]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	str	ip, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r5, [r4, #168]
.L9443:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L9449:
	ldr	r0, [r2, #16]
	mov	r1, #0
	mov	r2, #28672
	movt	r1, 6500
	movt	r2, 148
	cmp	r0, #3
	moveq	r2, r1
	b	.L9444
	.fnend
	.size	ncm_close, .-ncm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_request_ep_out, %function
conn_gadget_request_ep_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r0, #128
	add	r6, r0, #88
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L9451
.L9454:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	subs	r1, r10, #0
	mov	r2, #32
	beq	.L9453
	ldr	r3, [r5, #192]
	str	r3, [r4, #-32]
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	mov	r0, r6
	blt	.L9457
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #140]
	add	r3, r5, #136
	str	r4, [r5, #140]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4]
	str	r2, [r4, #4]
	str	r4, [r2]
	bl	_raw_spin_unlock_irqrestore
.L9451:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #128]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r7, r4
	sub	r10, r4, #36
	bne	.L9454
	bl	_raw_spin_unlock_irqrestore
.L9453:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9457:
	movw	r0, #:lower16:.LC607
	ldr	r1, .L9458
	mov	r2, r10
	movt	r0, #:upper16:.LC607
	bl	printk
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #132]
	mov	r1, r0
	str	r4, [r5, #132]
	mov	r0, r6
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L9453
.L9459:
	.align	2
.L9458:
	.word	.LANCHOR3-2628
	.fnend
	.size	conn_gadget_request_ep_out, .-conn_gadget_request_ep_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_open, %function
conn_gadget_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC608
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC608
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #2516]
	cmp	r3, #0
	beq	.L9468
	ldr	r0, [r3, #216]
	cmp	r0, #0
	bne	.L9469
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L9464
	ldr	r3, [r4, #2516]
	str	r3, [r5, #124]
	ldr	r2, [r3, #100]
	str	r0, [r3, #104]
	cmp	r2, #0
	bne	.L9470
.L9466:
	mov	r0, #0
	str	r2, [r3, #212]
.L9460:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9468:
	movw	r0, #:lower16:.LC281
	ldr	r1, .L9471
	movt	r0, #:upper16:.LC281
	bl	printk
	mvn	r0, #18
	b	.L9460
.L9470:
	movw	r0, #:lower16:.LC282
	ldr	r1, .L9471
	movt	r0, #:upper16:.LC282
	bl	printk
	ldr	r0, [r4, #2516]
	bl	conn_gadget_request_ep_out
	ldr	r3, [r4, #2516]
	ldr	r2, [r3, #100]
	b	.L9466
.L9464:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC610
	ldr	r1, .L9471
	movt	r0, #:upper16:.LC610
	bl	printk
	mvn	r0, #15
	b	.L9460
.L9469:
	movw	r0, #:lower16:.LC609
	ldr	r1, .L9471
	movt	r0, #:upper16:.LC609
	bl	printk
	mvn	r0, #10
	b	.L9460
.L9472:
	.align	2
.L9471:
	.word	.LANCHOR3-2600
	.fnend
	.size	conn_gadget_open, .-conn_gadget_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_read, %function
conn_gadget_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2516]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	str	r2, [sp, #8]
	cmp	r3, #0
	beq	.L9501
	ldr	r3, [r4, #192]
	mov	r6, r2
	cmp	r3, r2
	bls	.L9502
	add	r5, r4, #108
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L9498
	ldr	r10, .L9506
	mov	r3, sp
	movw	r8, #:lower16:.LC613
	bic	r7, r3, #8128
	ldr	r3, [r4, #100]
	mov	r9, r1
	ldr	r2, [r4, #104]
	movt	r8, #:upper16:.LC613
	bic	r7, r7, #63
	sub	fp, r10, #4
.L9477:
	cmp	r3, #0
	bne	.L9482
.L9496:
	cmp	r2, #0
	beq	.L9503
.L9484:
	mvn	r3, #4
	movw	r0, #:lower16:.LC614
	ldr	r1, .L9506+4
	movt	r0, #:upper16:.LC614
	str	r3, [sp, #8]
	bl	printk
.L9486:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [sp, #8]
.L9473:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9482:
	cmp	r2, #0
	bne	.L9484
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	subs	r3, r3, r2
	bne	.L9487
.L9489:
	mov	r3, #0
	movw	r0, #:lower16:.LC615
	ldr	r1, .L9506+4
	movt	r0, #:upper16:.LC615
	str	r3, [sp, #8]
	bl	printk
.L9488:
	mov	r0, r4
	bl	conn_gadget_request_ep_out
	b	.L9486
.L9487:
	cmp	r6, r3
	mov	r1, r9
	movcs	r6, r3
	add	r0, r4, #168
	mov	r2, r6
	add	r3, sp, #8
	bl	__kfifo_to_user
	cmp	r6, #0
	mov	r2, r0
	beq	.L9489
	cmp	r0, #0
	blt	.L9504
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #196]
	ldr	r1, [r4, #172]
	add	r3, r3, r3, lsr #31
	sub	r2, r2, r1
	cmp	r2, r3, asr #1
	bhi	.L9486
	b	.L9488
.L9504:
	mvn	r3, #13
	movw	r0, #:lower16:.LC616
	ldr	r1, .L9506+4
	movt	r0, #:upper16:.LC616
	str	r3, [sp, #8]
	bl	printk
	b	.L9486
.L9498:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC612
	ldr	r1, .L9506+4
	movt	r0, #:upper16:.LC612
	bl	printk
	mvn	r0, #15
	b	.L9473
.L9502:
	movw	r0, #:lower16:.LC611
	ldr	r1, .L9506+4
	movt	r0, #:upper16:.LC611
	bl	printk
	mvn	r0, #21
	b	.L9473
.L9501:
	movw	r0, #:lower16:.LC281
	ldr	r1, .L9506+4
	movt	r0, #:upper16:.LC281
	bl	printk
	mvn	r0, #18
	b	.L9473
.L9503:
	mov	r1, fp
	mov	r0, r8
	bl	printk
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #104]
	cmp	r3, #0
	bne	.L9477
	cmp	r2, #0
	bne	.L9496
	ldr	ip, [r7, #12]
	movw	r1, #:lower16:autoremove_wake_function
	add	r0, sp, #24
	movt	r1, #:upper16:autoremove_wake_function
	add	r3, r4, #144
	str	r2, [sp, #12]
	str	r0, [sp, #24]
	str	ip, [sp, #16]
	str	r1, [sp, #20]
	str	r0, [sp, #28]
	b	.L9481
.L9505:
	ldr	r2, [r4, #104]
	cmp	r2, #0
	bne	.L9479
	ldr	r2, [r7, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	bne	.L9480
	bl	schedule
	ldr	r3, [sp, #4]
.L9481:
	mov	r2, #1
	mov	r0, r3
	str	r3, [sp, #4]
	add	r1, sp, #12
	bl	prepare_to_wait
	ldr	r2, [r4, #100]
	ldr	r3, [sp, #4]
	cmp	r2, #0
	beq	.L9505
.L9479:
	mov	r0, r3
	add	r1, sp, #12
	bl	finish_wait
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #104]
	b	.L9477
.L9480:
	mov	r0, r3
	add	r1, sp, #12
	bl	finish_wait
	mov	r2, #65024
	movw	r0, #:lower16:.LC617
	sub	r1, r10, #4
	movt	r2, 65535
	movt	r0, #:upper16:.LC617
	bl	printk
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #65024
	movt	r0, 65535
	b	.L9473
.L9507:
	.align	2
.L9506:
	.word	.LANCHOR3-2576
	.word	.LANCHOR3-2580
	.fnend
	.size	conn_gadget_read, .-conn_gadget_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_setup, %function
fsg_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #88]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r5, [r1, #6]	@ unaligned
	ldr	r2, [r3, #8]
	ldr	r0, [r3, #52]
	cmp	r2, #0
	beq	.L9509
	ldr	r2, [r3, #56]
	mov	ip, #0
	add	r2, r2, #1
	str	r2, [r3, #56]
	str	ip, [r0, #4]
	str	ip, [r0, #32]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #254
	beq	.L9511
	cmp	r3, #255
	bne	.L9521
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #33
	bne	.L9521
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L9523
	orrs	r3, r6, r5
	bne	.L9523
	ldr	r5, [r4, #88]
	add	r6, r5, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	mov	r7, r0
	cmp	r3, #2
	bgt	.L9514
	ldr	r3, [r5, #56]
	mov	r1, #2
	ldr	r2, [r5, #168]
	str	r1, [r5, #112]
	str	r3, [r5, #116]
	cmp	r2, #0
	beq	.L9514
	mov	r0, #10
	bl	send_sig_info
.L9514:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #88]
	movw	r3, #1255
	movw	r4, #32767
	ldr	r2, [r2, #4]
	cmp	r2, #0
	moveq	r4, r3
	b	.L9508
.L9521:
	mvn	r4, #94
.L9508:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9511:
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #161
	bne	.L9521
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L9523
	cmp	r5, #1
	cmpeq	r6, #0
	bne	.L9523
	ldr	r3, [r4, #88]
	mov	r1, #1
	mov	r2, #32
	ldr	ip, [r0]
	ldr	r3, [r3, #92]
	sub	r3, r3, #1
	strb	r3, [ip]
	str	r1, [r0, #4]
	ldr	r5, [r4, #88]
	ldrd	r0, [r5, #48]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r5, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r4, r0
	str	r5, [r3]
	beq	.L9508
	mov	r3, r0
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC85
	ldr	r2, [r5, #48]
	movt	r1, #:upper16:.LC85
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
	b	.L9508
.L9509:
	ldr	r0, [r3]
	movw	r1, #:lower16:.LC83
	movw	r3, #706
	movt	r1, #:upper16:.LC83
	ldr	r2, .L9532
	mvn	r4, #94
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC84
	movw	r1, #550
	movt	r0, #:upper16:.LC84
	bl	warn_slowpath_null
	b	.L9508
.L9523:
	mvn	r4, #32
	b	.L9508
.L9533:
	.align	2
.L9532:
	.word	.LANCHOR3-2560
	.fnend
	.size	fsg_setup, .-fsg_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_unbind, %function
fsg_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #88]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r4, #8]
	cmp	r3, r1
	beq	.L9548
.L9536:
	add	r0, r4, #336
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r0]
	sub	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L9543
	bl	fsg_common_release
.L9543:
	ldr	r0, [r5, #16]
	bl	kfree
	ldr	r0, [r5, #8]
	bl	kfree
	ldr	r0, [r5, #12]
	bl	kfree
	mov	r0, r5
	bl	kfree
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9548:
	mov	r3, #0
	str	r3, [r4, #12]
	ldr	r6, [r1, #88]
	add	r7, r6, #44
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	r8, r0
	cmp	r3, #4
	bgt	.L9538
	ldr	r3, [r6, #56]
	mov	r1, #4
	ldr	r2, [r6, #168]
	str	r1, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L9538
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L9538:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #8]
	cmp	r3, r5
	bne	.L9536
	mov	r3, sp
	add	r1, sp, #16
	bic	r2, r3, #8128
	mov	r3, #0
	bic	r2, r2, #63
	add	r6, r4, #16
	ldr	r0, [r2, #12]
	movw	r2, #:lower16:autoremove_wake_function
	str	r3, [sp, #4]
	movt	r2, #:upper16:autoremove_wake_function
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L9542
.L9549:
	bl	schedule
.L9542:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #8]
	cmp	r3, r5
	beq	.L9549
	add	r1, sp, #4
	mov	r0, r6
	bl	finish_wait
	b	.L9536
	.fnend
	.size	fsg_unbind, .-fsg_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_open, %function
ecm_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #148]
	strb	r3, [r0, #152]
	strb	r3, [r0, #153]
	cmp	r5, #0
	beq	.L9550
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	r2, #8
	mov	r1, #2
	mvn	r0, #94
	strb	ip, [r3, #1]
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	r2, [r5, #4]
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	ip, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #148]
.L9550:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_open, .-ecm_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_close, %function
ecm_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	ip, #0
	mov	r3, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #148]
	strb	r3, [r0, #152]
	strb	ip, [r0, #153]
	cmp	r5, ip
	beq	.L9555
	ldr	r3, [r5]
	mov	r4, r0
	mov	lr, #8
	mov	r1, #2
	mvn	r0, #94
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r6, [r4, #153]	@ zero_extendqisi2
	strh	r6, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	lr, [r5, #4]
	strb	r1, [r4, #152]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	ip, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #148]
.L9555:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_close, .-ecm_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_open, %function
ecm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #168]
	strb	r3, [r0, #172]
	strb	r3, [r0, #173]
	cmp	r5, #0
	beq	.L9560
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	r2, #8
	mov	r1, #2
	mvn	r0, #94
	strb	ip, [r3, #1]
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	r2, [r5, #4]
	mov	r2, #32
	strb	r1, [r4, #172]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	ip, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #168]
.L9560:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_open, .-ecm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_close, %function
ecm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	ip, #0
	mov	r3, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #168]
	strb	r3, [r0, #172]
	strb	ip, [r0, #173]
	cmp	r5, ip
	beq	.L9565
	ldr	r3, [r5]
	mov	r4, r0
	mov	lr, #8
	mov	r1, #2
	mvn	r0, #94
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r6, [r4, #173]	@ zero_extendqisi2
	strh	r6, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	lr, [r5, #4]
	strb	r1, [r4, #172]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	ip, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #168]
.L9565:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_close, .-ecm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_close, %function
rndis_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #1
	strd	r6, [sp, #8]
	ldr	r7, .L9583
	movt	r4, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #164]
	lsl	r9, r6, #4
	ands	r3, r6, #255
	sub	r5, r9, r6
	streq	r3, [r4, #3644]
	lsl	r5, r5, #2
	streq	r3, [r4, #3648]
	add	r3, r4, r5
	add	r8, r7, r5
	str	r2, [r3, #3652]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L9570
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L9576
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L9570
	add	r3, r0, #20
.L9574:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #12
	str	r2, [r0, #16]
	ldr	r3, [r4, #3692]
	mov	lr, #7
	str	r0, [r4, #3692]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L9576:
	mov	r3, #36
	mov	r0, #16
	b	.L9574
.L9570:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9584:
	.align	2
.L9583:
	.word	.LANCHOR1+3636
	.fnend
	.size	rndis_close, .-rndis_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_close, %function
rndis_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #1
	strd	r6, [sp, #8]
	ldr	r7, .L9598
	movt	r4, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #144]
	lsl	r9, r6, #4
	ands	r3, r6, #255
	sub	r5, r9, r6
	streq	r3, [r4, #3644]
	lsl	r5, r5, #2
	streq	r3, [r4, #3648]
	add	r3, r4, r5
	add	r8, r7, r5
	str	r2, [r3, #3652]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L9585
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L9591
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L9585
	add	r3, r0, #20
.L9589:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #12
	str	r2, [r0, #16]
	ldr	r3, [r4, #3692]
	mov	lr, #7
	str	r0, [r4, #3692]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L9591:
	mov	r3, #36
	mov	r0, #16
	b	.L9589
.L9585:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9599:
	.align	2
.L9598:
	.word	.LANCHOR1+3636
	.fnend
	.size	rndis_qc_close, .-rndis_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_notify_complete, %function
ecm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	cmn	r3, #108
	beq	.L9602
	cmn	r3, #104
	beq	.L9602
.L9601:
	cmp	r1, #0
	str	r1, [r5, #168]
	beq	.L9600
	ldrb	r2, [r5, #172]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L9606
	bcc	.L9600
	cmp	r2, #2
	bne	.L9605
	ldr	ip, [r5, #20]
	mov	r2, #0
	mov	r0, #8
	mov	r4, #42
	mov	lr, #16
	ldr	ip, [ip, #24]
	strb	r4, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r0, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r0, [r1]
	str	lr, [r1, #4]
	ldr	r2, [ip]
	ldr	ip, [r2, #20]
	cmp	ip, #4
	bls	.L9608
	ldr	ip, [r2, #16]
	cmp	ip, #5
	beq	.L9622
.L9610:
	mov	lr, #0
	mov	r2, #28672
	movt	lr, 6500
	cmp	ip, #3
	movt	r2, 148
	moveq	r2, lr
.L9609:
	mov	ip, #0
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	strb	ip, [r5, #172]
.L9605:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r4, r1
	strb	r0, [r3]
	ldrb	r0, [r5, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #164]
	str	ip, [r5, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #168]
.L9600:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9602:
	mov	r3, #0
	strb	r3, [r5, #172]
	b	.L9601
.L9606:
	mov	r2, #0
	mov	ip, #8
	mov	r0, #2
	strb	r2, [r3, #1]
	ldrb	lr, [r5, #173]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	ip, [r1, #4]
	strb	r0, [r5, #172]
	b	.L9605
.L9608:
	cmp	ip, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L9609
	ldr	ip, [r2, #16]
	b	.L9610
.L9622:
	mov	r2, #0
	movt	r2, 13000
	b	.L9609
	.fnend
	.size	ecm_notify_complete, .-ecm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_notify_complete, %function
ecm_qc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	cmn	r3, #108
	beq	.L9625
	cmn	r3, #104
	beq	.L9625
.L9624:
	cmp	r1, #0
	str	r1, [r5, #148]
	beq	.L9623
	ldrb	r2, [r5, #152]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L9629
	bcc	.L9623
	cmp	r2, #2
	bne	.L9628
	ldr	ip, [r5, #20]
	mov	r2, #0
	mov	r0, #8
	mov	r4, #42
	mov	lr, #16
	ldr	ip, [ip, #24]
	strb	r4, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r0, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r0, [r1]
	str	lr, [r1, #4]
	ldr	r2, [ip]
	ldr	ip, [r2, #20]
	cmp	ip, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L9631
	ldr	lr, [r2, #16]
	mov	ip, #0
	mov	r2, #28672
	movt	ip, 6500
	movt	r2, 148
	cmp	lr, #3
	moveq	r2, ip
.L9631:
	mov	ip, #0
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	strb	ip, [r5, #152]
.L9628:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r4, r1
	strb	r0, [r3]
	ldrb	r0, [r5, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #144]
	str	ip, [r5, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #148]
.L9623:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9625:
	mov	r3, #0
	strb	r3, [r5, #152]
	b	.L9624
.L9629:
	mov	r2, #0
	mov	ip, #8
	mov	r0, #2
	strb	r2, [r3, #1]
	ldrb	lr, [r5, #153]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	ip, [r1, #4]
	strb	r0, [r5, #152]
	b	.L9628
	.fnend
	.size	ecm_qc_notify_complete, .-ecm_qc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open, %function
rndis_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #20]
	ldr	r6, [r0, #144]
	ldr	r3, [r3, #24]
	uxtb	r2, r6
	ldr	r3, [r3]
	ldr	r1, [r3, #20]
	cmp	r1, #4
	bls	.L9643
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L9661
.L9645:
	cmp	r3, #3
	movne	r3, #97280
	moveq	r3, #4259840
.L9644:
	lsl	r9, r6, #4
	movw	r4, #:lower16:.LANCHOR1
	ldr	r7, .L9662
	cmp	r2, #0
	sub	r5, r9, r6
	movt	r4, #:upper16:.LANCHOR1
	lsl	r5, r5, #2
	streq	r2, [r4, #3644]
	mov	r2, #0
	streq	r3, [r4, #3648]
	add	r3, r4, r5
	add	r8, r7, r5
	str	r2, [r3, #3652]
	ldr	r3, [r8, #4]
	cmp	r3, r2
	beq	.L9642
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r2
	beq	.L9654
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L9642
	add	r3, r0, #20
.L9649:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #11
	str	r2, [r0, #16]
	ldr	r3, [r4, #3692]
	mov	lr, #7
	str	r0, [r4, #3692]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L9643:
	cmp	r1, #2
	movls	r3, #97280
	bls	.L9644
	ldr	r3, [r3, #16]
	b	.L9645
.L9661:
	mov	r3, #8519680
	b	.L9644
.L9654:
	mov	r3, #36
	mov	r0, #16
	b	.L9649
.L9642:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9663:
	.align	2
.L9662:
	.word	.LANCHOR1+3636
	.fnend
	.size	rndis_qc_open, .-rndis_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_open, %function
rndis_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #20]
	ldr	r6, [r0, #164]
	ldr	r3, [r3, #24]
	uxtb	r2, r6
	ldr	r3, [r3]
	ldr	r1, [r3, #20]
	cmp	r1, #4
	bls	.L9665
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L9683
.L9667:
	cmp	r3, #3
	movne	r3, #97280
	moveq	r3, #4259840
.L9666:
	lsl	r9, r6, #4
	movw	r4, #:lower16:.LANCHOR1
	ldr	r7, .L9684
	cmp	r2, #0
	sub	r5, r9, r6
	movt	r4, #:upper16:.LANCHOR1
	lsl	r5, r5, #2
	streq	r2, [r4, #3644]
	mov	r2, #0
	streq	r3, [r4, #3648]
	add	r3, r4, r5
	add	r8, r7, r5
	str	r2, [r3, #3652]
	ldr	r3, [r8, #4]
	cmp	r3, r2
	beq	.L9664
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r2
	beq	.L9676
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L9664
	add	r3, r0, #20
.L9671:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #11
	str	r2, [r0, #16]
	ldr	r3, [r4, #3692]
	mov	lr, #7
	str	r0, [r4, #3692]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L9665:
	cmp	r1, #2
	movls	r3, #97280
	bls	.L9666
	ldr	r3, [r3, #16]
	b	.L9667
.L9683:
	mov	r3, #8519680
	b	.L9666
.L9676:
	mov	r3, #36
	mov	r0, #16
	b	.L9671
.L9664:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9685:
	.align	2
.L9684:
	.word	.LANCHOR1+3636
	.fnend
	.size	rndis_open, .-rndis_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_remove, %function
gsdio_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r3]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #4]
	cmp	r5, #0
	beq	.L9687
	add	r9, r3, #4
	mov	r10, #0
	str	r0, [sp]
	mov	r6, #256
.L9699:
	ldr	r3, [sp]
	mov	r2, #9
	ldr	r4, [r9, #24]
	ldr	r1, [r3]
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp
	subs	r1, r0, #0
	bne	.L9688
	ldr	r7, [r4, #96]
	mov	r3, #1
	str	r1, [r4, #108]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r7, #0
	beq	.L9717
	str	r1, [r4, #176]
	ldr	r3, [r7, #136]
	cmp	r3, #0
	beq	.L9690
	mov	r0, r7
	blx	r3
.L9690:
	ldr	r0, [r7, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9691
	blx	r3
.L9691:
	ldr	r0, [r7, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9692
	blx	r3
.L9692:
	add	r3, r4, #4
	add	r0, r4, #28
	mov	r5, r3
	add	r8, r4, #12
	str	r3, [sp, #8]
	bl	cancel_work_sync
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	str	r0, [sp, #12]
	ldr	r5, [r7, #92]
	cmp	r8, r3
	beq	.L9693
.L9694:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	mov	r2, #512
	str	r6, [r3]
	str	r2, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r8, r3
	bne	.L9694
	ldr	r5, [r7, #92]
.L9693:
	ldr	r3, [r4, #20]
	add	r8, r4, #20
	cmp	r8, r3
	beq	.L9695
.L9696:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	mov	r2, #512
	str	r6, [r3]
	str	r2, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r8, r3
	bne	.L9696
.L9695:
	ldr	r3, [r4, #52]
	add	r8, r4, #52
	ldr	r5, [r7, #88]
	cmp	r8, r3
	beq	.L9697
	mov	r7, #512
.L9698:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	strd	r6, [r3]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #52]
	cmp	r8, r3
	bne	.L9698
.L9697:
	mov	r3, #0
	ldrd	r0, [sp, #8]
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
.L9717:
	ldr	r3, [sp, #4]
	ldr	r5, [r3]
.L9688:
	add	r10, r10, #1
	add	r9, r9, #108
	cmp	r10, r5
	bcc	.L9699
.L9687:
	mov	r0, #0
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_ch_remove, .-gsdio_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind_config, %function
ccid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L9734
	movt	r2, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
	ldr	r4, [r2, #2236]
	movw	ip, #:lower16:ccid_function_unbind
	ldr	r6, [r1, #24]
	movw	r1, #:lower16:.LC618
	movw	r0, #:lower16:ccid_function_set_alt
	movt	r1, #:upper16:.LC618
	movw	lr, #:lower16:ccid_function_bind
	movw	r2, #:lower16:ccid_function_setup
	movt	r0, #:upper16:ccid_function_set_alt
	str	r1, [r4]
	movw	r1, #:lower16:ccid_function_disable
	movt	ip, #:upper16:ccid_function_unbind
	str	r3, [r4, #16]
	movt	r1, #:upper16:ccid_function_disable
	add	r3, r3, #24
	movt	lr, #:upper16:ccid_function_bind
	movt	r2, #:upper16:ccid_function_setup
	str	r3, [r4, #8]
	str	r5, [r4, #20]
	str	lr, [r4, #32]
	str	ip, [r4, #36]
	str	r0, [r4, #40]
	add	r0, r5, #36
	str	r1, [r4, #48]
	add	r1, r4, #72
	str	r2, [r4, #52]
	str	r6, [r4, #84]
	ldr	r3, [r5, #40]
	str	r1, [r5, #40]
	str	r0, [r4, #72]
	str	r3, [r4, #76]
	str	r1, [r3]
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L9723
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9719
	ldrd	r2, [r4, #72]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #72]
	str	r1, [r4, #76]
.L9719:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9720
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9720
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9720:
	tst	r3, #2
	bne	.L9721
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9721
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9721:
	tst	r3, #1
	bne	.L9718
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9718
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9722:
.L9718:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9723:
	mov	r0, r3
	b	.L9719
.L9735:
	.align	2
.L9734:
	.word	.LANCHOR0+2016
	.fnend
	.size	ccid_function_bind_config, .-ccid_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind_config, %function
adb_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC619
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC619
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
	ldr	r4, [r3, #3424]
	bl	printk
	ldr	r3, .L9753
	movw	r2, #:lower16:.LC620
	movw	r0, #:lower16:adb_function_set_alt
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC620
	movt	r0, #:upper16:adb_function_set_alt
	str	r2, [r4]
	add	r2, r3, #16
	str	r2, [r4, #8]
	str	r3, [r4, #16]
	str	r1, [r4, #84]
	ldr	r2, [r5, #24]
	movw	r1, #:lower16:adb_function_disable
	movt	r1, #:upper16:adb_function_disable
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r5, [r4, #20]
	str	r0, [r4, #40]
	str	r1, [r4, #48]
	cmp	r2, #4
	movw	r2, #:lower16:adb_function_unbind
	addhi	r3, r3, #32
	movt	r2, #:upper16:adb_function_unbind
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:adb_function_bind
	movt	r3, #:upper16:adb_function_bind
	str	r3, [r4, #32]
	add	r3, r4, #72
	str	r2, [r4, #36]
	ldr	r1, [r5, #40]
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L9742
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9738
	ldrd	r2, [r4, #72]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #72]
	str	r1, [r4, #76]
.L9738:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9739
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9739
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9739:
	tst	r3, #2
	bne	.L9740
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9740
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9740:
	tst	r3, #1
	bne	.L9736
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9736
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9741:
.L9736:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9742:
	mov	r0, r3
	b	.L9738
.L9754:
	.align	2
.L9753:
	.word	.LANCHOR0+2064
	.fnend
	.size	adb_function_bind_config, .-adb_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_bind_config, %function
accessory_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC621
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC621
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	mov	r5, r1
	ldr	r4, [r3, #2520]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2120]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L9756
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L9762
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2120]
	strb	r2, [r3, #2144]
.L9756:
	ldr	r3, .L9774
	movw	r2, #:lower16:.LC622
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC622
	add	r1, r3, #24
	strd	r2, [r4]
	add	r2, r3, #8
	str	r1, [r4, #8]
	movw	r1, #:lower16:acc_function_disable
	str	r2, [r4, #16]
	movt	r1, #:upper16:acc_function_disable
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	movw	r0, #:lower16:acc_function_set_alt
	movt	r0, #:upper16:acc_function_set_alt
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r5, [r4, #20]
	str	r0, [r4, #40]
	str	r1, [r4, #48]
	cmp	r2, #4
	movw	r2, #:lower16:acc_function_unbind
	addhi	r3, r3, #40
	movt	r2, #:upper16:acc_function_unbind
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:acc_function_bind
	movt	r3, #:upper16:acc_function_bind
	str	r3, [r4, #32]
	add	r3, r4, #72
	str	r2, [r4, #36]
	ldr	r1, [r5, #40]
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L9763
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9759
	ldrd	r2, [r4, #72]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #72]
	str	r1, [r4, #76]
.L9759:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9760
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9760
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9760:
	tst	r3, #2
	bne	.L9761
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9761
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9761:
	tst	r3, #1
	bne	.L9755
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9755
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9755:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9763:
	mov	r0, r3
	b	.L9759
.L9762:
	mvn	r0, #18
	b	.L9755
.L9775:
	.align	2
.L9774:
	.word	.LANCHOR0+2148
	.fnend
	.size	accessory_function_bind_config, .-accessory_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_bind_config, %function
rmnet_smd_sdio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r3, #2512]
	cmp	r4, #0
	beq	.L9781
	ldr	r3, .L9793
	movw	r0, #:lower16:.LC623
	movw	r2, #:lower16:rmnet_mux_bind
	movt	r0, #:upper16:.LC623
	movt	r2, #:upper16:rmnet_mux_bind
	mov	r5, r1
	movw	lr, #:lower16:rmnet_mux_unbind
	movw	r1, #:lower16:rmnet_mux_setup
	movw	ip, #:lower16:rmnet_mux_set_alt
	stm	r4, {r0, r3}
	movw	r0, #:lower16:rmnet_mux_disable
	add	r6, r3, #8
	str	r2, [r4, #32]
	movw	r2, #:lower16:rmnet_mux_suspend
	add	r3, r3, #28
	movt	r0, #:upper16:rmnet_mux_disable
	movt	r2, #:upper16:rmnet_mux_suspend
	movt	lr, #:upper16:rmnet_mux_unbind
	movt	r1, #:upper16:rmnet_mux_setup
	str	r3, [r4, #8]
	movt	ip, #:upper16:rmnet_mux_set_alt
	str	r6, [r4, #16]
	add	r3, r4, #72
	str	r5, [r4, #20]
	str	lr, [r4, #36]
	str	ip, [r4, #40]
	str	r0, [r4, #48]
	add	r0, r5, #36
	str	r1, [r4, #52]
	str	r2, [r4, #56]
	ldr	r2, [r5, #40]
	str	r3, [r5, #40]
	str	r0, [r4, #72]
	str	r2, [r4, #76]
	str	r3, [r2]
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L9782
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9778
	ldrd	r2, [r4, #72]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #72]
	str	r1, [r4, #76]
.L9778:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9779
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9779
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9779:
	tst	r3, #2
	bne	.L9780
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9780
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9780:
	tst	r3, #1
	bne	.L9776
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9776
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9776:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9782:
	mov	r0, r3
	b	.L9778
.L9781:
	mvn	r0, #18
	b	.L9776
.L9794:
	.align	2
.L9793:
	.word	.LANCHOR0+2212
	.fnend
	.size	rmnet_smd_sdio_bind_config, .-rmnet_smd_sdio_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind_config, %function
mtp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC624
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC624
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	mov	r5, r1
	ldr	r4, [r3, #2532]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2260]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L9796
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L9802
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2260]
	strb	r2, [r3, #2284]
.L9796:
	ldr	r3, .L9814
	movw	r2, #:lower16:.LC625
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC625
	add	r1, r3, #28
	strd	r2, [r4]
	add	r2, r3, #8
	str	r1, [r4, #8]
	movw	r1, #:lower16:mtp_function_disable
	str	r2, [r4, #16]
	movt	r1, #:upper16:mtp_function_disable
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	movw	r0, #:lower16:mtp_function_set_alt
	movt	r0, #:upper16:mtp_function_set_alt
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r5, [r4, #20]
	str	r0, [r4, #40]
	str	r1, [r4, #48]
	cmp	r2, #4
	movw	r2, #:lower16:mtp_function_unbind
	addhi	r3, r3, #48
	movt	r2, #:upper16:mtp_function_unbind
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:mtp_function_bind
	movt	r3, #:upper16:mtp_function_bind
	str	r3, [r4, #32]
	add	r3, r4, #72
	str	r2, [r4, #36]
	ldr	r1, [r5, #40]
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L9803
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9799
	ldrd	r2, [r4, #72]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #72]
	str	r1, [r4, #76]
.L9799:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9800
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9800
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9800:
	tst	r3, #2
	bne	.L9801
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9801
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9801:
	tst	r3, #1
	bne	.L9795
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9795
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9795:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9803:
	mov	r0, r3
	b	.L9799
.L9802:
	mvn	r0, #18
	b	.L9795
.L9815:
	.align	2
.L9814:
	.word	.LANCHOR0+2288
	.fnend
	.size	mtp_function_bind_config, .-mtp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_bind_config, %function
ptp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC624
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC624
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	mov	r5, r1
	ldr	r4, [r3, #2532]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2260]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L9817
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L9823
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2260]
	strb	r2, [r3, #2284]
.L9817:
	ldr	r3, .L9835
	movw	r2, #:lower16:.LC625
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC625
	add	r1, r3, #100
	strd	r2, [r4]
	add	r2, r3, #80
	str	r1, [r4, #8]
	movw	r1, #:lower16:mtp_function_disable
	str	r2, [r4, #16]
	movt	r1, #:upper16:mtp_function_disable
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	movw	r0, #:lower16:mtp_function_set_alt
	movt	r0, #:upper16:mtp_function_set_alt
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r5, [r4, #20]
	str	r0, [r4, #40]
	str	r1, [r4, #48]
	cmp	r2, #4
	movw	r2, #:lower16:mtp_function_unbind
	addhi	r3, r3, #120
	movt	r2, #:upper16:mtp_function_unbind
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:mtp_function_bind
	movt	r3, #:upper16:mtp_function_bind
	str	r3, [r4, #32]
	add	r3, r4, #72
	str	r2, [r4, #36]
	ldr	r1, [r5, #40]
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L9824
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9820
	ldrd	r2, [r4, #72]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #72]
	str	r1, [r4, #76]
.L9820:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9821
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9821
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9821:
	tst	r3, #2
	bne	.L9822
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9822
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9822:
	tst	r3, #1
	bne	.L9816
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9816
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9816:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9824:
	mov	r0, r3
	b	.L9820
.L9823:
	mvn	r0, #18
	b	.L9816
.L9836:
	.align	2
.L9835:
	.word	.LANCHOR0+2288
	.fnend
	.size	ptp_function_bind_config, .-ptp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind_config, %function
conn_gadget_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC626
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	movt	r0, #:upper16:.LC626
	ldr	r1, .L9853
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC627
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC627
	ldr	r4, [r3, #2516]
	bl	printk
	ldr	r3, .L9853+4
	movw	r2, #:lower16:.LC628
	movw	ip, #:lower16:conn_gadget_function_bind
	movt	r2, #:upper16:.LC628
	ldr	lr, [r5, #24]
	movt	ip, #:upper16:conn_gadget_function_bind
	movw	r0, #:lower16:conn_gadget_function_unbind
	movw	r1, #:lower16:conn_gadget_function_set_alt
	str	r2, [r4]
	movw	r2, #:lower16:conn_gadget_function_disable
	movt	r0, #:upper16:conn_gadget_function_unbind
	str	r3, [r4, #16]
	movt	r1, #:upper16:conn_gadget_function_set_alt
	movt	r2, #:upper16:conn_gadget_function_disable
	str	r5, [r4, #20]
	str	ip, [r4, #32]
	add	ip, r3, #16
	add	r3, r3, #32
	str	ip, [r4, #8]
	str	r3, [r4, #12]
	strd	r0, [r4, #36]
	add	r1, r4, #72
	add	r0, r5, #36
	str	r2, [r4, #48]
	str	lr, [r4, #84]
	ldr	r3, [r5, #40]
	str	r1, [r5, #40]
	str	r0, [r4, #72]
	str	r3, [r4, #76]
	str	r1, [r3]
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L9842
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9838
	ldrd	r2, [r4, #72]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #72]
	str	r1, [r4, #76]
.L9838:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9839
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9839
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9839:
	tst	r3, #2
	bne	.L9840
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9840
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9840:
	tst	r3, #1
	bne	.L9837
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9837
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9841:
.L9837:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9842:
	mov	r0, r3
	b	.L9838
.L9854:
	.align	2
.L9853:
	.word	.LANCHOR3-2548
	.word	.LANCHOR0+2440
	.fnend
	.size	conn_gadget_function_bind_config, .-conn_gadget_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_bind_config, %function
qdss_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR0
	mov	r6, r1
	movt	r7, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r7, #2496]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	cmp	r3, #0
	bne	.L9856
	ldr	r2, [r1, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L9859
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r1, #24]
	strb	r3, [r7, #2496]
	strb	r3, [r7, #2528]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L9859
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r7, #2504]
	strb	r3, [r7, #2540]
.L9856:
	ldr	r0, .L9894
	bl	_raw_spin_lock_irqsave
	ldr	r8, .L9894+4
	mov	r9, r0
	ldr	r3, [r7, #268]
	cmp	r3, r8
	sub	r5, r3, #4
	beq	.L9860
	movw	r4, #:lower16:.LC629
	movt	r4, #:upper16:.LC629
	b	.L9862
.L9889:
	ldr	r5, [r5, #4]
	cmp	r5, r8
	sub	r5, r5, #4
	beq	.L9860
.L9862:
	mov	r0, r4
	ldr	r1, [r5]
	bl	strcmp
	cmp	r0, #0
	bne	.L9889
	movw	r10, #:lower16:.LC629
	sub	r4, r5, #112
	movt	r10, #:upper16:.LC629
	str	r4, [r5, #20]
.L9870:
	mov	r1, r9
	ldr	r0, .L9894
	mov	r8, #0
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, .L9894+8
	movw	r3, #:lower16:qdss_bind
	movw	r1, #:lower16:qdss_unbind
	movt	r3, #:upper16:qdss_bind
	movt	r1, #:upper16:qdss_unbind
	ldr	lr, [r6, #24]
	movw	ip, #:lower16:qdss_set_alt
	movw	r0, #:lower16:qdss_disable
	str	r10, [r4]
	movt	ip, #:upper16:qdss_set_alt
	movt	r0, #:upper16:qdss_disable
	add	r7, r2, #24
	add	r9, r4, #140
	str	r3, [r4, #32]
	movw	r3, #:lower16:usb_qdss_connect_work
	str	r2, [r4, #8]
	movt	r3, #:upper16:usb_qdss_connect_work
	str	r2, [r4, #16]
	mov	r2, #65024
	str	r1, [r4, #36]
	movw	r1, #:lower16:usb_qdss_disconnect_work
	movt	r2, 65535
	str	r7, [r4, #4]
	movt	r1, #:upper16:usb_qdss_disconnect_work
	add	r7, r4, #148
	str	r6, [r4, #20]
	str	ip, [r4, #40]
	add	ip, r4, #160
	str	r0, [r4, #48]
	add	r0, r4, #176
	str	lr, [r4, #84]
	str	r9, [r4, #140]
	str	r9, [r4, #144]
	str	r7, [r4, #148]
	str	r7, [r4, #152]
	str	r2, [r4, #156]
	str	ip, [r4, #160]
	str	ip, [r4, #164]
	str	r3, [r4, #168]
	add	r3, r4, #72
	str	r2, [r4, #172]
	add	r2, r6, #36
	str	r0, [r4, #176]
	strd	r0, [r4, #180]
	str	r8, [r4, #188]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r7, [r4, #32]
	cmp	r7, r8
	beq	.L9865
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	bge	.L9865
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r8, [r4, #20]
	strd	r0, [r4, #72]
.L9865:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9866
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9866
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L9866:
	tst	r3, #2
	bne	.L9867
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9867
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L9867:
	tst	r3, #1
	bne	.L9868
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9868
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L9868:
	cmp	r7, #0
	bne	.L9890
.L9855:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9860:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L9891
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L9892
.L9863:
	mov	r1, r9
	ldr	r0, .L9894
	movw	r10, #:lower16:.LC629
	bl	_raw_spin_unlock_irqrestore
	movt	r10, #:upper16:.LC629
	mov	r3, #0
	mov	r1, #10
	movw	r0, #:lower16:.LC79
	movt	r1, 2
	movt	r0, #:upper16:.LC79
	stm	sp, {r3, r10}
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #196]
	beq	.L9893
	ldr	r0, .L9894
	add	r5, r4, #112
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r7, #272]
	add	r3, r4, #116
	str	r10, [r4, #112]
	str	r8, [r4, #116]
	mov	r9, r0
	str	r3, [r7, #272]
	str	r2, [r4, #120]
	str	r3, [r2]
	b	.L9870
.L9891:
	mov	r4, #16
	b	.L9863
.L9859:
	mvn	r7, #18
.L9858:
	movw	r0, #:lower16:.LC632
	ldr	r1, .L9894+12
	movt	r0, #:upper16:.LC632
	bl	printk
	b	.L9855
.L9893:
	mov	r0, r4
	mvn	r7, #11
	bl	kfree
	b	.L9858
.L9890:
	movw	r0, #:lower16:.LC631
	movt	r0, #:upper16:.LC631
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #20]
	bl	kfree
	b	.L9858
.L9892:
	movw	r0, #:lower16:.LC630
	mvn	r7, #11
	movt	r0, #:upper16:.LC630
	bl	printk
	mov	r1, r9
	ldr	r0, .L9894
	bl	_raw_spin_unlock_irqrestore
	b	.L9858
.L9895:
	.align	2
.L9894:
	.word	.LANCHOR1+3360
	.word	.LANCHOR0+268
	.word	.LANCHOR0+2544
	.word	.LANCHOR3-2512
	.fnend
	.size	qdss_function_bind_config, .-qdss_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_bind_config, %function
mbim_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	ldr	r7, .L9930
	movt	r4, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	add	r0, r4, #3280
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	bl	strim
	mov	r8, r0
	sub	r9, r7, #4
	movw	r0, #:lower16:.LC633
	mov	r1, r9
	movt	r0, #:upper16:.LC633
	mov	r2, #0
	bl	printk
	ldr	r6, [r4, #3560]
	cmp	r6, #0
	beq	.L9926
	movw	r0, #:lower16:.LC635
	mov	r2, r6
	movt	r0, #:upper16:.LC635
	add	r1, r7, #16
	bl	printk
	cmp	r6, #1
	bne	.L9927
	ldr	r3, [r4, #3352]
	cmp	r3, #0
	beq	.L9928
.L9901:
	movw	r0, #:lower16:.LC440
	movw	r6, #:lower16:.LANCHOR0
	ldr	r1, .L9930+4
	movt	r0, #:upper16:.LC440
	mov	r2, #1
	movt	r6, #:upper16:.LANCHOR0
	bl	printk
	ldrb	r3, [r6, #2576]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9904
.L9905:
	ldr	r4, [r4, #3564]
	cmp	r4, #0
	beq	.L9929
	ldr	lr, .L9930+8
	movw	r2, #:lower16:.LC642
	movw	r3, #:lower16:mbim_unbind
	movt	r2, #:upper16:.LC642
	movt	r3, #:upper16:mbim_unbind
	mov	r0, r8
	movw	r1, #:lower16:mbim_bind
	ldr	r8, [r5, #24]
	str	r3, [r4, #36]
	movw	r3, #:lower16:mbim_setup
	movt	r1, #:upper16:mbim_bind
	add	r9, lr, #980
	movt	r3, #:upper16:mbim_setup
	movw	ip, #:lower16:mbim_get_alt
	stm	r4, {r2, r9}
	movw	r2, #:lower16:mbim_set_alt
	movt	ip, #:upper16:mbim_get_alt
	movt	r2, #:upper16:mbim_set_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:mbim_disable
	movt	r1, #:upper16:mbim_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:mbim_suspend
	str	r3, [r4, #52]
	movw	r3, #:lower16:mbim_resume
	movt	r2, #:upper16:mbim_suspend
	movt	r3, #:upper16:mbim_resume
	str	ip, [r4, #44]
	str	r1, [r4, #48]
	mov	r1, #16384
	strd	r2, [r4, #56]
	mov	r2, #0
	str	r8, [r4, #84]
	str	r2, [r4, #88]
	str	lr, [r4, #200]
	str	r1, [r4, #224]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #132]
	beq	.L9909
	mov	r3, #6
	str	r3, [r4, #132]
.L9910:
	add	r1, r4, #216
	add	r0, r4, #208
	str	r5, [r4, #20]
	add	r3, r4, #72
	add	r2, r5, #36
	str	r0, [r4, #208]
	strd	r0, [r4, #212]
	str	r1, [r4, #220]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r6, [r4, #32]
	cmp	r6, #0
	beq	.L9911
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L9911
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #72]
.L9911:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9912
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9912
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9912:
	tst	r3, #2
	bne	.L9913
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9913
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9913:
	tst	r3, #1
	bne	.L9914
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9914
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9914:
	movw	r0, #:lower16:.LC643
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC643
	mov	r2, r6
	bl	printk
.L9896:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L9904:
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L9907
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #2576]
	strb	r3, [r6, #2608]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L9907
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r6, #2584]
	strb	r3, [r6, #2620]
	strb	r3, [r6, #2632]
	b	.L9905
.L9909:
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r6, #52]
	strh	r1, [r6, #56]	@ movhi
	str	r3, [r6, #64]
	strh	r2, [r6, #74]	@ movhi
	b	.L9910
.L9928:
	movw	r0, #:lower16:.LC637
	mov	r2, r6
	str	r3, [sp]
	movt	r0, #:upper16:.LC637
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3352]
	beq	.L9902
	bl	bam_data_setup.part.103
	subs	r6, r0, #0
	beq	.L9901
.L9900:
	movw	r0, #:lower16:.LC639
	mov	r2, r6
	ldr	r1, .L9930+4
	movt	r0, #:upper16:.LC639
	bl	printk
.L9903:
	movw	r0, #:lower16:.LC640
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC640
	bl	printk
	b	.L9896
.L9907:
	mvn	r6, #18
	b	.L9896
.L9929:
	movw	r0, #:lower16:.LC641
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC641
	mvn	r6, #11
	bl	printk
	b	.L9896
.L9926:
	movw	r0, #:lower16:.LC634
	mov	r3, r6
	mov	r2, r6
	mov	r1, r9
	movt	r0, #:upper16:.LC634
	mvn	r6, #18
	bl	printk
	b	.L9896
.L9927:
	movw	r0, #:lower16:.LC636
	mov	r2, r6
	ldr	r1, .L9930+12
	movt	r0, #:upper16:.LC636
	mvn	r6, #21
	bl	printk
	b	.L9900
.L9902:
	movw	r0, #:lower16:.LC638
	ldr	r1, .L9930+12
	mvn	r6, #11
	movt	r0, #:upper16:.LC638
	bl	printk
	movw	r0, #:lower16:.LC639
	mov	r2, r6
	add	r1, r7, #16
	movt	r0, #:upper16:.LC639
	bl	printk
	b	.L9903
.L9931:
	.align	2
.L9930:
	.word	.LANCHOR3-2480
	.word	.LANCHOR3-2464
	.word	.LANCHOR0+1656
	.word	.LANCHOR2+3704
	.fnend
	.size	mbim_function_bind_config, .-mbim_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_bind_config, %function
mass_storage_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r3, #2644]	@ zero_extendqisi2
	ldr	r0, [r0, #4]
	cmp	r2, #0
	ldr	r6, [r0, #96]
	bne	.L9933
	ldr	r0, [r1, #24]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	mvnhi	r6, #18
	bhi	.L9932
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r0, #48]
	strb	r2, [r3, #2644]
	strb	r2, [r3, #2668]
.L9933:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L9942
	mov	r2, #108
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r6, #11
	bne	.L9935
.L9932:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9942:
	mov	r4, #16
.L9935:
	ldr	r0, .L9956
	movw	r2, #:lower16:.LC644
	movw	ip, #:lower16:fsg_bind
	movt	r2, #:upper16:.LC644
	movw	r3, #:lower16:fsg_unbind
	movw	r1, #:lower16:fsg_setup
	movt	r3, #:upper16:fsg_unbind
	str	r2, [r4]
	movw	r2, #:lower16:fsg_set_alt
	movt	r1, #:upper16:fsg_setup
	str	r0, [r4, #4]
	movw	r0, #:lower16:fsg_disable
	movt	r2, #:upper16:fsg_set_alt
	movt	ip, #:upper16:fsg_bind
	movt	r0, #:upper16:fsg_disable
	str	r5, [r4, #20]
	str	ip, [r4, #32]
	str	r3, [r4, #36]
	add	r3, r4, #72
	str	r2, [r4, #40]
	add	r2, r5, #36
	str	r0, [r4, #48]
	str	r1, [r4, #52]
	str	r6, [r4, #88]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r6, [r4, #32]
	cmp	r6, #0
	beq	.L9936
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L9936
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #72]
.L9936:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9937
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9937
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9937:
	tst	r3, #2
	bne	.L9938
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9938
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9938:
	tst	r3, #1
	bne	.L9939
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9939
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9939:
	cmp	r6, #0
	bne	.L9955
	ldr	r3, [r4, #88]
	add	r2, r3, #336
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bgt	.L9932
	movw	r4, #:lower16:.LANCHOR4
	movt	r4, #:upper16:.LANCHOR4
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9932
	movw	r0, #:lower16:.LC645
	mov	r1, #47
	movt	r0, #:upper16:.LC645
	bl	warn_slowpath_null
	mov	r3, #1
	strb	r3, [r4]
	b	.L9932
.L9955:
	mov	r0, r4
	bl	kfree
	b	.L9932
.L9957:
	.align	2
.L9956:
	.word	.LANCHOR0+2672
	.fnend
	.size	mass_storage_function_bind_config, .-mass_storage_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_bind_config, %function
rmnet_sdio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L9967
	mov	r2, #376
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L9981
.L9959:
	movw	r2, #:lower16:.LC646
	mov	r5, #0
	movt	r2, #:upper16:.LC646
	mov	r1, #10
	movw	r0, #:lower16:.LC79
	mov	r3, r5
	str	r5, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC79
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #200]
	beq	.L9969
	movw	r0, #:lower16:rmnet_sdio_disconnect_work
	add	r8, r4, #208
	str	r5, [r4, #188]
	add	lr, r4, #224
	movt	r0, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #192]
	mov	r7, #65024
	movw	ip, #:lower16:rmnet_sdio_set_modem_cbits_w
	str	r5, [r4, #196]
	movw	r2, #:lower16:rmnet_sdio_control_rx_work
	movw	r3, #:lower16:rmnet_sdio_data_rx_work
	str	r8, [r4, #208]
	movw	r1, #:lower16:rmnet_open_sdio_work
	movt	r7, 65535
	str	r8, [r4, #212]
	movt	ip, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #240
	movt	r2, #:upper16:rmnet_sdio_control_rx_work
	movt	r3, #:upper16:rmnet_sdio_data_rx_work
	str	r7, [r4, #204]
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r0, [r4, #216]
	add	r0, r4, #340
	str	lr, [r4, #224]
	movw	r10, #:lower16:rmnet_sdio_suspend
	add	r9, r4, #108
	str	lr, [r4, #228]
	add	lr, r4, #256
	movt	r10, #:upper16:rmnet_sdio_suspend
	str	r7, [r4, #220]
	str	r2, [r4, #232]
	mov	r2, r5
	str	r7, [r4, #236]
	str	r8, [r4, #240]
	str	r8, [r4, #244]
	movw	r8, #:lower16:rmnet_sdio_unbind
	str	r3, [r4, #248]
	mov	r3, r5
	movt	r8, #:upper16:rmnet_sdio_unbind
	str	r7, [r4, #252]
	str	lr, [r4, #256]
	str	lr, [r4, #260]
	str	r1, [r4, #264]
	mov	r1, r5
	str	r7, [r4, #336]
	str	r0, [r4, #340]
	str	r0, [r4, #344]
	add	r0, r4, #268
	str	ip, [r4, #348]
	bl	init_timer_key
	movw	ip, #:lower16:.LC647
	ldr	r3, .L9985
	movw	r0, #:lower16:rmnet_sdio_bind
	movt	ip, #:upper16:.LC647
	movt	r0, #:upper16:rmnet_sdio_bind
	movw	lr, #:lower16:rmnet_sdio_setup
	movw	r2, #:lower16:delayed_work_timer_fn
	str	ip, [r4]
	movw	ip, #:lower16:rmnet_sdio_set_alt
	movt	lr, #:upper16:rmnet_sdio_setup
	movt	ip, #:upper16:rmnet_sdio_set_alt
	str	r3, [r4, #4]
	movw	r1, #:lower16:rmnet_close_sdio_work
	str	r0, [r4, #32]
	movw	r0, #:lower16:rmnet_sdio_disable
	movt	r2, #:upper16:delayed_work_timer_fn
	movt	r0, #:upper16:rmnet_sdio_disable
	movt	r1, #:upper16:rmnet_close_sdio_work
	str	r8, [r4, #36]
	str	ip, [r4, #40]
	add	ip, r3, #8
	add	r3, r3, #28
	str	lr, [r4, #52]
	add	lr, r4, #120
	add	r8, r4, #252
	str	r3, [r4, #8]
	add	r3, r4, #132
	str	ip, [r4, #16]
	add	ip, r4, #160
	str	r0, [r4, #48]
	add	r0, r4, #308
	str	r10, [r4, #56]
	str	lr, [r4, #120]
	str	lr, [r4, #124]
	add	lr, r4, #144
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	add	r3, r4, #172
	str	r9, [r4, #108]
	str	r9, [r4, #112]
	str	lr, [r4, #144]
	str	lr, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	ip, [r4, #160]
	str	ip, [r4, #164]
	str	r3, [r4, #172]
	str	r3, [r4, #176]
	add	r3, r4, #72
	str	r5, [r4, #180]
	str	r5, [r4, #184]
	str	r2, [r4, #284]
	add	r2, r6, #36
	str	r8, [r4, #288]
	str	r7, [r4, #304]
	str	r0, [r4, #308]
	str	r0, [r4, #312]
	str	r1, [r4, #316]
	str	r6, [r4, #20]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r7, [r4, #32]
	cmp	r7, r5
	beq	.L9962
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L9982
.L9962:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9963
.L9984:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9963
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L9963:
	tst	r3, #2
	bne	.L9964
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9964
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L9964:
	tst	r3, #1
	bne	.L9965
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9965
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L9965:
	cmp	r7, #0
	beq	.L9983
.L9966:
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
.L9961:
	mov	r0, r4
	bl	kfree
.L9958:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9983:
	movw	r0, #:lower16:.LC648
	mov	r1, r7
	movt	r0, #:upper16:.LC648
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #352]
	bhi	.L9958
	ldr	ip, .L9985+4
	movw	r0, #:lower16:.LC164
	mov	r3, r4
	mov	r1, #292
	movt	r0, #:upper16:.LC164
	str	ip, [sp]
	bl	debugfs_create_file
	b	.L9958
.L9982:
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r4, #20]
	strd	r0, [r4, #72]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9963
	b	.L9984
.L9967:
	mov	r4, #16
	b	.L9959
.L9969:
	mvn	r7, #11
	b	.L9961
.L9981:
	mvn	r7, #11
	b	.L9958
.L9986:
	.align	2
.L9985:
	.word	.LANCHOR0+2680
	.word	.LANCHOR3-2448
	.fnend
	.size	rmnet_sdio_function_bind_config, .-rmnet_sdio_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_function_bind_config, %function
rmnet_smd_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L9999
	mov	r2, #456
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L10016
.L9988:
	movw	r2, #:lower16:.LC646
	mov	r5, #0
	movt	r2, #:upper16:.LC646
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	mov	r1, #10
	str	r5, [sp]
	movw	r0, #:lower16:.LC79
	str	r2, [sp, #4]
	mov	r3, r5
	movt	r1, 2
	movt	r0, #:upper16:.LC79
	str	r4, [r8, #3332]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #388]
	beq	.L10001
	add	r1, r4, #396
	mov	r2, #65024
	str	r5, [r4, #164]
	movw	r0, #:lower16:rmnet_smd_connect_work
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	str	r5, [r4, #168]
	add	ip, r4, #412
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	str	r5, [r4, #172]
	movt	r2, 65535
	movt	r0, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #396]
	str	r1, [r4, #400]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	movw	r9, #:lower16:rmnet_smd_setup
	str	r5, [r4, #308]
	movt	r1, #:upper16:rmnet_control_rx_tlet
	add	r7, r4, #124
	str	r5, [r4, #372]
	movt	r9, #:upper16:rmnet_smd_setup
	str	r2, [r4, #392]
	str	r0, [r4, #404]
	add	r0, r4, #284
	str	r2, [r4, #408]
	mov	r2, r4
	str	ip, [r4, #412]
	str	ip, [r4, #416]
	str	r3, [r4, #420]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	add	r0, r4, #264
	movt	r1, #:upper16:rmnet_control_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	add	r0, r4, #348
	movt	r1, #:upper16:rmnet_data_rx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #328
	movt	r1, #:upper16:rmnet_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC649
	ldr	r2, .L10020
	add	r0, r4, #312
	movt	r1, #:upper16:.LC649
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC650
	ldr	r2, .L10020
	add	r0, r4, #376
	movt	r1, #:upper16:.LC650
	bl	__init_waitqueue_head
	ldr	r3, .L10020+4
	movw	r0, #:lower16:rmnet_smd_ch_probe
	movw	r2, #:lower16:.LC651
	movt	r0, #:upper16:rmnet_smd_ch_probe
	movt	r2, #:upper16:.LC651
	movw	ip, #:lower16:rmnet_smd_bind
	movw	r1, #:lower16:.LC591
	movt	ip, #:upper16:rmnet_smd_bind
	movt	r1, #:upper16:.LC591
	strd	r2, [r4]
	add	lr, r3, #8
	add	r3, r3, #28
	str	r0, [r4, #176]
	movw	r0, #:lower16:rmnet_smd_unbind
	movw	r2, #:lower16:rmnet_smd_set_alt
	movt	r0, #:upper16:rmnet_smd_unbind
	str	r3, [r4, #8]
	movw	r3, #:lower16:rmnet_smd_disable
	movt	r2, #:upper16:rmnet_smd_set_alt
	movt	r3, #:upper16:rmnet_smd_disable
	str	lr, [r4, #16]
	add	lr, r4, #116
	str	r6, [r4, #20]
	str	r0, [r4, #36]
	add	r0, r4, #108
	str	ip, [r4, #32]
	add	ip, r4, #132
	str	r2, [r4, #40]
	add	r2, r4, #148
	str	r3, [r4, #48]
	add	r3, r4, #140
	str	r9, [r4, #52]
	str	r0, [r4, #108]
	str	r0, [r4, #112]
	add	r0, r4, #156
	str	lr, [r4, #116]
	str	lr, [r4, #120]
	str	r7, [r4, #124]
	str	r7, [r4, #128]
	str	ip, [r4, #132]
	str	ip, [r4, #136]
	str	r3, [r4, #140]
	str	r3, [r4, #144]
	add	r3, r4, #72
	str	r2, [r4, #148]
	str	r2, [r4, #152]
	add	r2, r6, #36
	str	r0, [r4, #156]
	str	r0, [r4, #160]
	str	r1, [r4, #196]
	str	r5, [r4, #204]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r7, [r4, #32]
	cmp	r7, r5
	beq	.L9991
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L10017
.L9991:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9992
.L10019:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9992
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L9992:
	tst	r3, #2
	bne	.L9993
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9993
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L9993:
	tst	r3, #1
	bne	.L9994
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9994
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L9994:
	cmp	r7, #0
	beq	.L10018
.L9995:
	ldr	r0, [r4, #388]
	bl	destroy_workqueue
.L9990:
	mov	r0, r4
	bl	kfree
.L9987:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10018:
	movw	r0, #:lower16:.LC652
	mov	r1, r7
	movt	r0, #:upper16:.LC652
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r8, #3364]
	beq	.L9987
	cmn	r0, #4096
	bhi	.L9987
	ldr	ip, .L10020+8
	movw	r0, #:lower16:.LC164
	mov	r3, r4
	movt	r0, #:upper16:.LC164
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L9998
	cmn	r0, #4096
	bls	.L9987
.L9998:
	ldr	r0, [r8, #3364]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r8, #3364]
	b	.L9987
.L10017:
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r4, #20]
	strd	r0, [r4, #72]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9992
	b	.L10019
.L9999:
	mov	r4, #16
	b	.L9988
.L10001:
	mvn	r7, #11
	b	.L9990
.L10016:
	mvn	r7, #11
	b	.L9987
.L10021:
	.align	2
.L10020:
	.word	.LANCHOR1+4056
	.word	.LANCHOR0+2728
	.word	.LANCHOR3-2340
	.fnend
	.size	rmnet_smd_function_bind_config, .-rmnet_smd_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_write, %function
ffs_ep0_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r6, r4, #100
	.syntax divided
@ 193 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L10023:
	.syntax divided
@ 170 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	lr, [r6]
	mov	ip, #0
	teq	lr, #2
	strexeq ip, r3, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #0
	bne	.L10023
	.syntax divided
@ 195 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	lr, #2
	beq	.L10095
	ldr	r3, [r0, #32]
	add	r10, r4, #4
	mov	fp, r2
	mov	r7, r1
	mov	r0, r10
	tst	r3, #2048
	bne	.L10157
	bl	mutex_lock_interruptible
	subs	r5, r0, #0
	blt	.L10022
.L10029:
	ldr	r3, [r4, #96]
	cmp	r3, #1
	bls	.L10027
	cmp	r3, #2
	bne	.L10158
	add	r9, r4, #120
	mov	r0, r9
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L10081:
	.syntax divided
@ 170 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r6]
	mov	r8, #0
	teq	r2, #2
	strexeq r8, r3, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r8, #0
	bne	.L10081
	.syntax divided
@ 195 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L10103
	cmp	r2, #2
	moveq	r7, r8
	mvneq	r5, #42
	beq	.L10083
	ldrsb	r3, [r4, #112]
	cmp	r3, #0
	blt	.L10085
	mov	r0, r9
	bl	_raw_spin_unlock_irq
	ldrh	r3, [r4, #110]
	cmp	r3, #0
	mvneq	r5, #2
	beq	.L10026
	ldr	r3, [r4]
	mvn	r5, #50
	mov	r1, #1
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	str	r8, [r4, #100]
.L10026:
	mov	r0, r10
	bl	mutex_unlock
.L10022:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10157:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L10029
	mvn	r5, #10
	b	.L10022
.L10027:
	cmp	fp, #15
	bls	.L10098
	mov	r0, r7
	mov	r1, fp
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r6, r0
	movhi	r5, r0
	bhi	.L10026
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L10031
	movw	r0, #:lower16:.LC653
	movt	r0, #:upper16:.LC653
	bl	printk
	ldr	r3, [r6]	@ unaligned
	cmp	r3, #1
	bne	.L10046
	ldr	r3, [r6, #4]	@ unaligned
	cmp	fp, r3
	bne	.L10046
	ldr	r9, [r6, #8]	@ unaligned
	add	r8, r6, #16
	sub	r7, fp, #16
	ldr	r3, [r6, #12]	@ unaligned
	cmp	r9, #0
	str	r3, [sp, #12]
	beq	.L10099
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r7
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r1, r8
	mov	r0, r9
	bl	ffs_do_descs.constprop.157
	subs	r5, r0, #0
	blt	.L10035
	ldr	r0, [sp, #12]
	add	r8, r8, r5
	sub	r7, r7, r5
.L10034:
	cmp	r0, #0
	beq	.L10036
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r7
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r1, r8
	bl	ffs_do_descs.constprop.157
	subs	r2, r0, #0
	str	r2, [sp, #16]
	blt	.L10100
	add	r3, r2, #8
	cmp	r7, r3
	bcc	.L10038
.L10037:
	ldr	r1, [r8, r2]	@ unaligned
	movw	r3, #56924
	movt	r3, 85
	cmp	r1, r3
	beq	.L10159
.L10046:
	mov	r0, r6
	mvn	r5, #21
	bl	kfree
	mov	r0, r10
	bl	mutex_unlock
	b	.L10022
.L10158:
	mov	r0, r10
	mvn	r5, #76
	bl	mutex_unlock
	b	.L10022
.L10031:
	movw	r0, #:lower16:.LC654
	movt	r0, #:upper16:.LC654
	bl	printk
	ldr	r3, [r6]	@ unaligned
	cmp	r3, #2
	bne	.L10046
	ldr	r3, [r6, #4]	@ unaligned
	cmp	fp, r3
	bne	.L10046
	ldr	r3, [r6, #12]	@ unaligned
	ldr	r9, [r6, #8]	@ unaligned
	str	r3, [sp, #12]
	clz	r3, r3
	clz	r2, r9
	lsr	r3, r3, #5
	lsr	r2, r2, #5
	cmp	r2, r3
	bne	.L10046
	ldrh	r3, [r4, #180]
	cmp	r9, r3
	str	r3, [sp, #16]
	bcc	.L10046
	cmp	r3, #0
	beq	.L10160
	ldr	r0, [sp, #12]
	mov	r1, #208
	mla	r2, r3, r0, r0
	add	r3, r0, #1
	add	r8, r3, r0, lsl #1
	lsl	r5, r3, #2
	add	r2, r2, r0
	lsl	r8, r8, #2
	add	r3, r3, r2, lsl #1
	lsl	r0, r3, #2
	bl	__kmalloc
	subs	r3, r0, #0
	str	r3, [sp, #20]
	beq	.L10161
	add	r0, r3, r5
	mov	r1, r3
	ldr	r3, [sp, #12]
	mov	r2, r0
.L10050:
	subs	r3, r3, #1
	str	r2, [r1], #4
	add	r2, r2, #8
	bne	.L10050
	str	r3, [r0, #-4]
	ldr	r3, [sp, #20]
	sub	r5, fp, #16
	cmp	r5, #2
	add	r7, r6, #16
	add	r8, r3, r8
	bls	.L10051
	add	r3, r0, #8
	str	r4, [sp, #24]
	mov	r4, r3
	str	fp, [sp, #28]
.L10052:
	ldrb	r0, [r7, #1]	@ zero_extendqisi2
	sub	r5, r5, #2
	ldrb	r1, [r7], #2	@ zero_extendqisi2
	str	r8, [r4, #-4]
	ldr	fp, [sp, #16]
	orr	r1, r1, r0, lsl #8
	strh	r1, [r4, #-8]	@ movhi
	b	.L10054
.L10163:
	cmp	fp, #0
	beq	.L10053
	str	r7, [r8, #4]
	sub	fp, fp, #1
	add	r8, r8, #8
.L10053:
	subs	r9, r9, #1
	add	r3, r0, #1
	mvn	r0, r0
	add	r7, r7, r3
	add	r5, r5, r0
	beq	.L10162
.L10054:
	mov	r1, r5
	mov	r0, r7
	bl	strnlen
	cmp	r5, r0
	bne	.L10163
.L10051:
	ldr	r0, [sp, #20]
	bl	kfree
	b	.L10046
.L10103:
	mov	r7, r2
	mvn	r5, #2
.L10083:
	mov	r0, r9
	bl	_raw_spin_unlock_irq
.L10089:
	mov	r0, r7
	bl	kfree
	mov	r0, r10
	bl	mutex_unlock
	b	.L10022
.L10159:
	add	r1, r8, r2
	ldr	r3, [sp, #12]
	ldr	r1, [r1, #4]	@ unaligned
	orr	r3, r3, r9
	orrs	r3, r3, r1
	str	r1, [sp, #20]
	beq	.L10046
	cmp	r1, #0
	sub	r7, r7, #8
	mov	r0, r1
	sub	r7, r7, r2
	beq	.L10101
	add	r2, r2, #8
	movw	r3, #:lower16:__ffs_data_do_entity
	str	r4, [sp]
	add	r1, r8, r2
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r2, r7
	bl	ffs_do_descs.constprop.157
	subs	r3, r0, #0
	blt	.L10102
.L10043:
	cmp	r3, r7
	bne	.L10046
	ldr	r2, [sp, #16]
	str	r6, [r4, #148]
	ldr	r1, [sp, #20]
	str	r3, [r4, #164]
	str	r9, [r4, #168]
	add	r5, r5, r2
	add	r2, r5, r3
	ldr	r3, [sp, #12]
	cmp	r1, #0
	str	r5, [r4, #156]
	addne	r5, r5, #24
	str	r2, [r4, #152]
	str	r3, [r4, #172]
	mov	r3, #1
	strne	r5, [r4, #160]
	mov	r5, fp
	str	r3, [r4, #96]
	str	r1, [r4, #176]
	b	.L10026
.L10161:
	mov	r0, r6
	mvn	r5, #11
	bl	kfree
	b	.L10026
.L10085:
	ldrh	r5, [r4, #118]
	mov	r0, r9
	cmp	r5, fp
	movcs	r5, fp
	bl	_raw_spin_unlock_irq
	mov	r1, r5
	mov	r0, r7
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r7, r0
	movhi	r5, r0
	bhi	.L10026
	mov	r0, r9
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L10087:
	.syntax divided
@ 170 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r6]
	mov	r3, #0
	teq	r2, #2
	strexeq r3, r8, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L10087
	.syntax divided
@ 195 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #2
	mvneq	r5, #42
	beq	.L10083
	ldr	r6, [r4, #32]
	mov	r0, r9
	ldrh	r3, [r4, #118]
	ldrb	r2, [r6, #26]	@ zero_extendqisi2
	cmp	r5, r3
	movcs	r3, #0
	movcc	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r6, #26]
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	str	r7, [r6]
	str	r5, [r6, #4]
	beq	.L10164
.L10090:
	ldr	r3, [r4]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r6
	str	r0, [r4, #36]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L10089
	add	r0, r4, #36
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	bne	.L10165
	ldr	r5, [r4, #52]
	str	r0, [r4, #100]
	b	.L10089
.L10098:
	mvn	r5, #21
	b	.L10026
.L10162:
	ldr	r3, [sp, #12]
	strb	r9, [r8]
	add	r8, r8, #8
	str	r9, [r8, #-4]
	subs	r3, r3, #1
	str	r3, [sp, #12]
	beq	.L10166
	cmp	r5, #2
	add	r4, r4, #8
	bhi	.L10052
	b	.L10051
.L10160:
	mov	r0, r6
	bl	kfree
.L10048:
	ldrh	r5, [r4, #184]
	movw	r1, #32976
	rsb	r0, r5, r5, lsl #4
	lsl	r0, r0, #2
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L10056
	cmp	r5, #0
	beq	.L10093
	add	r3, r5, #1
	mov	r6, r7
	mov	r5, #1
	str	r3, [sp, #16]
	add	r3, r7, #52
	str	r3, [sp, #12]
	str	fp, [sp, #20]
.L10092:
	movw	r1, #:lower16:.LC655
	ldr	r2, .L10168
	mov	r0, r6
	movt	r1, #:upper16:.LC655
	str	r4, [r6, #40]
	bl	__mutex_init
	movw	r1, #:lower16:.LC656
	ldr	r2, .L10168
	add	r0, r6, #24
	movt	r1, #:upper16:.LC656
	bl	__init_waitqueue_head
	ldr	r8, [sp, #12]
	movw	r1, #:lower16:.LC657
	mov	r2, r5
	movt	r1, #:upper16:.LC657
	mov	r0, r8
	bl	sprintf
	ldr	fp, [r4, #196]
	mov	r1, r8
	ldr	r0, [fp, #60]
	ldr	r8, [fp, #624]
	bl	d_alloc_name
	subs	r9, r0, #0
	beq	.L10058
	mov	r0, fp
	bl	new_inode
	subs	fp, r0, #0
	beq	.L10059
	add	r0, sp, #32
	add	r5, r5, #1
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [fp, #40]
	ldrh	r2, [r8, #200]
	mov	r1, fp
	mov	r0, r9
	strh	r2, [fp]	@ movhi
	ldrd	r2, [sp, #32]
	ldr	ip, [r8, #204]
	str	ip, [fp, #4]
	ldr	ip, [r8, #208]
	strd	r2, [fp, #52]
	strd	r2, [fp, #60]
	strd	r2, [fp, #68]
	ldr	r3, .L10168+4
	str	ip, [fp, #8]
	str	r6, [fp, #340]
	str	r3, [fp, #208]
	bl	d_instantiate
	mov	r0, r9
	bl	d_rehash
	ldr	r3, [sp, #16]
	cmn	r6, #48
	add	r6, r6, #60
	strne	r9, [r6, #-12]
	cmp	r3, r5
	bne	.L10092
	ldr	fp, [sp, #20]
.L10093:
	mov	r3, #2
	mov	r0, r10
	str	r3, [r4, #96]
	str	r7, [r4, #212]
	bl	mutex_unlock
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r8, [r3, #2780]
	ldr	r5, [r3, #2796]
	cmp	r5, #0
	mvneq	r5, #18
	beq	.L10069
	add	r6, r5, #24
	mov	r0, r6
	bl	mutex_lock
	ldr	r3, [r4, #96]
	cmp	r3, #2
	beq	.L10070
.L10071:
	movw	r0, #:lower16:.LC9
	movw	r1, #1443
	movt	r0, #:upper16:.LC9
	mvn	r5, #76
	bl	warn_slowpath_null
	mov	r0, r6
	bl	mutex_unlock
.L10069:
	mov	r3, #3
	str	r3, [r4, #96]
	b	.L10022
.L10059:
	mov	r0, r9
	bl	dput
.L10058:
	subs	r5, r5, #1
	beq	.L10066
	ldr	r3, [r7]
	cmp	r3, #1
	bne	.L10062
	ldr	r2, [r7, #28]
	add	r3, r7, #28
	cmp	r2, r3
	bne	.L10062
	mov	r6, r7
	mov	r8, #0
.L10063:
	ldr	r0, [r6, #48]
	cmp	r0, #0
	beq	.L10064
	bl	d_delete
	ldr	r0, [r6, #48]
	bl	dput
	str	r8, [r6, #48]
.L10064:
	subs	r5, r5, #1
	add	r6, r6, #60
	beq	.L10066
	ldr	r3, [r6]
	cmp	r3, #1
	bne	.L10062
	ldr	r2, [r6, #28]
	add	r3, r6, #28
	cmp	r2, r3
	beq	.L10063
.L10062:
	.syntax divided
@ 1521 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1522, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L10066:
	mov	r0, r7
	bl	kfree
.L10056:
	mov	r3, #3
	mvn	r5, #11
	str	r3, [r4, #96]
	b	.L10026
.L10095:
	mvn	r5, #42
	b	.L10022
.L10036:
	cmp	r7, #7
	bhi	.L10167
	cmp	r9, #0
	beq	.L10046
	ldr	r3, [sp, #12]
	mov	r2, r3
	str	r3, [sp, #16]
.L10038:
	mov	r3, #0
	sub	r7, r7, r2
	str	r3, [sp, #20]
	b	.L10043
.L10102:
	mov	r5, r3
.L10035:
	mov	r0, r6
	bl	kfree
	b	.L10026
.L10099:
	mov	r5, r9
	mov	r0, r3
	b	.L10034
.L10100:
	mov	r5, r2
	b	.L10035
.L10070:
	add	r7, r4, #132
	mov	r0, #1
	ldr	r9, [r5, #8]
	mov	r1, r7
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L10071
	ldrh	r3, [r4, #180]
	ldrb	r10, [r9, #48]	@ zero_extendqisi2
	cmp	r3, #254
	bhi	.L10073
	add	r3, r3, r10
	cmp	r3, #254
	bhi	.L10073
	ldr	r2, [r9]
	strb	r3, [r9, #48]
	mov	r1, #208
	ldr	r0, [r2, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #32]
	beq	.L10074
	movw	r3, #:lower16:ffs_ep0_complete
	movt	r3, #:upper16:ffs_ep0_complete
	str	r3, [r0, #28]
	ldr	r3, [r4, #32]
	str	r4, [r3, #32]
	ldr	r0, [r4, #192]
	cmp	r0, #0
	beq	.L10075
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L10075
	add	ip, r10, #1
.L10078:
	ldr	r3, [r3, #4]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L10076
	add	r3, r3, #8
	mov	r2, ip
.L10077:
	strb	r2, [r3, #-8]
	add	r3, r3, #8
	ldr	r1, [r3, #-4]
	add	r2, r2, #1
	cmp	r1, #0
	bne	.L10077
.L10076:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L10078
.L10075:
	ldr	r2, [r9]
	mov	r3, r4
	str	r2, [r3], #88
	.syntax divided
@ 45 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	mov	r2, #1
	strb	r2, [r8]
	strd	r4, [r8, #4]
	cmp	r3, #0
	beq	.L10080
	mov	r0, r5
	bl	android_enable
.L10080:
	mov	r0, r6
	mov	r5, fp
	bl	mutex_unlock
	mov	r1, r7
	mov	r0, #0
	bl	_set_bit
	b	.L10022
.L10164:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r6]
	b	.L10090
.L10101:
	mov	r3, r1
	b	.L10043
.L10165:
	ldr	r3, [r4]
	mov	r1, r6
	mvn	r5, #3
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L10089
.L10166:
	cmp	r5, #0
	ldr	r4, [sp, #24]
	ldr	fp, [sp, #28]
	bne	.L10051
	ldr	r3, [sp, #20]
	str	r6, [r4, #188]
	str	r3, [r4, #192]
	b	.L10048
.L10074:
	mov	r0, r6
	mvn	r5, #11
	bl	mutex_unlock
	b	.L10069
.L10073:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L10069
.L10167:
	ldr	r3, [sp, #12]
	mov	r2, r3
	str	r3, [sp, #16]
	b	.L10037
.L10169:
	.align	2
.L10168:
	.word	.LANCHOR1+4056
	.word	.LANCHOR3-2232
	.fnend
	.size	ffs_ep0_write, .-ffs_ep0_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_write, %function
ccid_bulk_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L10188
	cmp	r2, #0
	mov	r4, r2
	mov	r8, r1
	beq	.L10203
	cmp	r2, #524
	bcs	.L10204
	add	r7, r5, #92
	add	r9, r5, #192
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #192]
	mov	r1, r0
	cmp	r9, r3
	beq	.L10205
	ldr	ip, [r3]
	mov	lr, #512
	mov	r10, #256
	ldr	r2, [r3, #4]
	sub	r6, r3, #36
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L10176
.L10177:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L10206
	mov	r3, sp
	ldr	r0, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L10184
	mov	r1, r8
	mov	r2, r4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L10185
	str	r4, [r6, #4]
	ldr	r0, [r5, #104]
	mov	r2, #208
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L10207
.L10170:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10184:
	mov	r1, r4
	bl	__memzero
.L10185:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	bne	.L10187
	cmp	r6, #0
	beq	.L10188
	ldr	r5, [r5, #104]
	mvn	r4, #18
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10170
.L10205:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L10176:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L10194
	mov	r2, sp
	add	r1, sp, #24
	str	r4, [sp, #4]
	bic	r10, r2, #8128
	str	r3, [sp, #12]
	movw	r2, #:lower16:autoremove_wake_function
	bic	r10, r10, #63
	add	ip, r5, #172
	ldr	r0, [r10, #12]
	movt	r2, #:upper16:autoremove_wake_function
	mov	r4, ip
	str	ip, [sp]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L10182
.L10209:
	bl	schedule
.L10182:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r4
	mov	fp, #256
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #192]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r7
	mov	r1, r2
	cmp	r9, r3
	sub	r6, r3, #36
	beq	.L10208
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L10201
.L10179:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L10195
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L10209
	add	r1, sp, #12
	mov	r4, #65024
	ldr	r0, [sp]
	movt	r4, 65535
	bl	finish_wait
	b	.L10170
.L10194:
	mov	r6, #0
	b	.L10177
.L10207:
	mov	r3, #1
	mov	r0, r7
	str	r3, [r5, #148]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #196]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #196]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #96]
	str	r0, [sp]
	cmp	r3, #0
	mvnne	r4, #4
	movne	r1, r0
	beq	.L10210
.L10190:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L10170
.L10188:
	mvn	r4, #18
	b	.L10170
.L10210:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	fp, #256
	mov	r8, #512
	b	.L10191
.L10193:
	ldr	r10, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
.L10191:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #192]
	mov	r3, r0
	mov	r0, r7
	mov	r1, r3
	cmp	r9, r4
	sub	r6, r4, #36
	beq	.L10211
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	fp, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L10193
	mvn	r4, #18
	ldr	r1, [sp]
	b	.L10190
.L10187:
	mov	r0, r7
	mvn	r4, #13
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #196]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #196]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L10170
.L10201:
	ldr	r4, [sp, #4]
.L10180:
	add	r1, sp, #12
	ldr	r0, [sp]
	bl	finish_wait
	b	.L10177
.L10195:
	mov	r6, #0
	ldr	r4, [sp, #4]
	b	.L10180
.L10208:
	bl	_raw_spin_unlock_irqrestore
	b	.L10179
.L10211:
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #18
	ldr	r1, [sp]
	b	.L10190
.L10203:
	movw	r0, #:lower16:.LC658
	ldr	r1, .L10212
	mvn	r4, #18
	movt	r0, #:upper16:.LC658
	bl	printk
	b	.L10170
.L10206:
	movw	r0, #:lower16:.LC660
	ldr	r1, .L10212
	mvn	r4, #4
	movt	r0, #:upper16:.LC660
	bl	printk
	b	.L10170
.L10204:
	movw	r0, #:lower16:.LC659
	mov	r3, r2
	ldr	r1, .L10212
	movt	r0, #:upper16:.LC659
	movw	r2, #523
	bl	printk
	mvn	r4, #11
	b	.L10170
.L10213:
	.align	2
.L10212:
	.word	.LANCHOR3-2124
	.fnend
	.size	ccid_bulk_write, .-ccid_bulk_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_bind_config, %function
midi_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	cmp	r7, #0
	beq	.L10215
	mvn	r3, #0
	str	r3, [r7]
	str	r3, [r7, #4]
.L10215:
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	ldr	r0, [r5, #36]
	cmp	r0, #0
	beq	.L10227
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L10250
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L10251
.L10248:
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L10252
.L10221:
	mov	r5, #0
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r4
	movt	r1, #:upper16:f_midi_in_tasklet
	strd	r4, [r3]
	add	r0, r4, #300
	strb	r5, [r3, #8]
	str	r3, [r4, #232]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	str	r3, [r4, #84]
	bl	tasklet_init
	mov	r1, #208
	mov	r0, r5
	bl	kstrdup
	mov	r3, #1
	mvn	ip, #0
	mov	r1, #1024
	mov	r2, #32
	str	r3, [r4, #320]
	str	r3, [r4, #324]
	str	ip, [r4, #328]
	str	r0, [r4, #332]
	mov	r0, r4
	str	r1, [r4, #336]
	str	r2, [r4, #340]
	bl	f_midi_register_card
	subs	r8, r0, #0
	bge	.L10253
.L10219:
	ldr	r0, [r4, #232]
	bl	kfree
.L10218:
	mov	r0, r4
	bl	kfree
.L10214:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10227:
	ldr	r0, [r5, #24]
	mov	r4, #16
	cmp	r0, #0
	bne	.L10248
.L10251:
	mov	r3, #16
	b	.L10221
.L10252:
	mvn	r8, #11
	b	.L10218
.L10253:
	ldr	ip, .L10256
	movw	r1, #:lower16:.LC661
	movw	r3, #:lower16:f_midi_bind
	movt	r1, #:upper16:.LC661
	movw	r2, #:lower16:f_midi_unbind
	movw	r0, #:lower16:f_midi_set_alt
	movt	r3, #:upper16:f_midi_bind
	movt	r2, #:upper16:f_midi_unbind
	movt	r0, #:upper16:f_midi_set_alt
	stm	r4, {r1, ip}
	movw	r1, #:lower16:f_midi_disable
	movt	r1, #:upper16:f_midi_disable
	str	r6, [r4, #20]
	str	r3, [r4, #32]
	add	r3, r4, #72
	str	r2, [r4, #36]
	add	r2, r6, #36
	str	r0, [r4, #40]
	str	r1, [r4, #48]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r8, [r4, #32]
	cmp	r8, #0
	beq	.L10223
	mov	r1, r4
	mov	r0, r6
	blx	r8
	subs	r8, r0, #0
	blt	.L10254
.L10223:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L10224
.L10255:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L10224
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L10224:
	tst	r3, #2
	bne	.L10225
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L10225
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L10225:
	tst	r3, #1
	bne	.L10226
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10226
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L10226:
	cmp	r8, #0
	bne	.L10219
	cmp	r7, #0
	beq	.L10214
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r7]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r7, #4]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r7]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r7, #4]
	b	.L10214
.L10254:
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r4, #20]
	strd	r0, [r4, #72]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L10224
	b	.L10255
.L10250:
	mvn	r8, #11
	b	.L10214
.L10257:
	.align	2
.L10256:
	.word	.LANCHOR0+2828
	.fnend
	.size	midi_function_bind_config, .-midi_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_bind_config, %function
rndis_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:__stack_chk_guard
	str	lr, [sp, #32]
	ldr	r4, [r0, #4]
	movt	fp, #:upper16:__stack_chk_guard
	ldr	r3, [fp]
	.pad #60
	sub	sp, sp, #60
	cmp	r4, #0
	str	r3, [sp, #52]
	beq	.L10311
	ldrb	r2, [r4, #5]	@ zero_extendqisi2
	mov	r5, r1
	movw	r0, #:lower16:.LC663
	ldrb	r3, [r4]	@ zero_extendqisi2
	movw	r6, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC663
	ldr	r9, .L10318
	movt	r6, #:upper16:.LANCHOR1
	str	r2, [sp, #16]
	ldrb	r1, [r4, #4]	@ zero_extendqisi2
	sub	r2, r9, #12
	str	r1, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r7, [r6, #4036]
	ldr	r3, [r5, #24]
	cmp	r7, #0
	ldr	r8, [r3]
	bne	.L10280
	mov	r2, #1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r10, r0, #0
	mvneq	r8, #11
	bne	.L10312
.L10261:
	sub	r2, r9, #12
	movw	r0, #:lower16:.LC671
	mov	r1, r2
	movt	r0, #:upper16:.LC671
	bl	printk
.L10258:
	ldr	r2, [sp, #52]
	mov	r0, r8
	ldr	r3, [fp]
	cmp	r2, r3
	bne	.L10313
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10280:
	mvn	r8, #15
	b	.L10261
.L10311:
	ldr	r2, .L10318+4
	movw	r0, #:lower16:.LC662
	mvn	r8, #0
	movt	r0, #:upper16:.LC662
	mov	r1, r2
	bl	printk
	b	.L10258
.L10313:
	bl	__stack_chk_fail
.L10312:
	add	lr, r10, #1216
	str	r7, [r10, #1216]
	movw	r2, #:lower16:eth_work
	add	r3, lr, #92
	movw	ip, #:lower16:process_rx_w
	str	r10, [r10, #1224]
	str	lr, [sp, #24]
	movt	r2, #:upper16:eth_work
	movt	ip, #:upper16:process_rx_w
	str	r7, [r10, #1232]
	mov	r1, #65024
	str	r7, [r10, #1276]
	movt	r1, 65535
	str	r7, [r10, #1280]
	add	r7, lr, #108
	add	lr, lr, #20
	str	lr, [r10, #1236]
	str	lr, [r10, #1240]
	ldr	lr, [sp, #24]
	str	r3, [r10, #1308]
	str	r3, [r10, #1312]
	movw	r3, #:lower16:.LC664
	str	r2, [r10, #1316]
	movw	r2, #:lower16:.LC665
	movt	r3, #:upper16:.LC664
	add	lr, lr, #28
	str	ip, [r10, #1332]
	add	ip, r8, #32
	movt	r2, #:upper16:.LC665
	str	lr, [r10, #1244]
	str	lr, [r10, #1248]
	ldr	lr, [sp, #24]
	str	r1, [r10, #1304]
	str	r1, [r10, #1320]
	mov	r1, #16
	str	r7, [r10, #1324]
	add	lr, lr, #52
	str	ip, [sp, #28]
	str	lr, [r10, #1268]
	str	lr, [r10, #1272]
	str	r7, [r10, #1328]
	bl	snprintf
	ldr	r0, [r6, #4056]
	ldr	r1, [r10, #444]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L10314
.L10262:
	ldr	r3, [r4]	@ unaligned
	movw	r0, #:lower16:.LC668
	movw	r7, #:lower16:.LANCHOR0
	ldr	r2, [sp, #24]
	movt	r0, #:upper16:.LC668
	movt	r7, #:upper16:.LANCHOR0
	str	r3, [r10, #1341]	@ unaligned
	ldrh	r3, [r4, #4]	@ unaligned
	add	r2, r2, #125
	str	r2, [sp, #28]
	strh	r3, [r2, #4]	@ unaligned
	bl	printk
	ldr	r3, .L10318+8
	add	r2, r8, #32
	mov	r0, r10
	ldr	r1, .L10318+12
	str	r2, [r10, #688]
	add	r2, r3, #136
	str	r3, [r10, #288]
	str	r2, [r10, #292]
	str	r1, [r10, #736]
	str	r8, [r10, #1228]
	bl	register_netdev
	subs	r8, r0, #0
	bge	.L10263
	mov	r0, r10
	bl	free_netdev
	b	.L10261
.L10314:
	movw	r2, #:lower16:.LC666
	movw	r1, #:lower16:.LC667
	movt	r2, #:upper16:.LC666
	movt	r1, #:upper16:.LC667
	add	r0, r8, #32
	bl	dev_warn
	b	.L10262
.L10263:
	movw	r0, #:lower16:.LC669
	ldr	r2, [r10, #444]
	ldr	r1, [r10, #1224]
	movt	r0, #:upper16:.LC669
	bl	printk
	movw	r0, #:lower16:.LC670
	ldr	r1, [r10, #1224]
	ldr	r2, [sp, #28]
	movt	r0, #:upper16:.LC670
	bl	printk
	ldr	r3, [sp, #24]
	mov	r0, r10
	str	r3, [r6, #4036]
	bl	netif_carrier_off
	cmp	r8, #0
	bne	.L10261
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10265
	ldr	r1, .L10318+16
	mov	r3, #3
	mov	r0, #480
	mvn	ip, #31
	mov	r2, #1
	strb	r3, [r7, #2866]
	strb	ip, [r7, #2873]
	strh	r0, [r1, #4]	@ movhi
	strb	r2, [r7, #2874]
	strb	r3, [r7, #2875]
.L10265:
	ldrb	r9, [r6, #4044]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	cmp	r9, #0
	str	r3, [sp, #24]
	beq	.L10315
.L10266:
	ldrb	r3, [r7, #2880]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L10269
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10271
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r7, #2876]
	strb	r3, [r7, #2880]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10271
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r7, #2888]
	strb	r3, [r7, #2920]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10271
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r7, #2867]
	strb	r3, [r7, #2896]
.L10269:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L10282
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r9, r0, #0
	beq	.L10316
.L10272:
	ldr	r0, [r4]	@ unaligned
	movw	r2, #:lower16:rndis_add_header
	movw	r3, #:lower16:rndis_rm_hdr
	ldr	r1, [r7, #2924]
	movt	r2, #:upper16:rndis_add_header
	movt	r3, #:upper16:rndis_rm_hdr
	ldr	ip, .L10318+20
	add	r4, r4, #13
	ldr	lr, [r7, #2928]
	movw	r7, #:lower16:.LC664
	str	r0, [r9, #150]	@ unaligned
	ldrh	r0, [r4, #-9]	@ unaligned
	movt	r7, #:upper16:.LC664
	str	r1, [r9, #116]
	movw	r1, #:lower16:rndis_bind
	movt	r1, #:upper16:rndis_bind
	stm	r9, {r7, ip}
	movw	r7, #:lower16:rndis_set_alt
	movt	r7, #:upper16:rndis_set_alt
	strd	r2, [r9, #128]
	movw	r2, #:lower16:rndis_setup
	str	lr, [r9, #120]
	movw	lr, #:lower16:rndis_unbind
	movt	r2, #:upper16:rndis_setup
	str	r1, [r9, #32]
	movw	r1, #:lower16:rndis_disable
	movt	lr, #:upper16:rndis_unbind
	movt	r1, #:upper16:rndis_disable
	str	r5, [r9, #20]
	add	r3, r9, #72
	str	r7, [r9, #40]
	mov	r7, #0
	str	lr, [r9, #36]
	str	r1, [r9, #48]
	mov	r1, #44
	str	r2, [r9, #52]
	add	r2, r5, #36
	strh	r7, [r9, #98]	@ movhi
	str	r1, [r9, #100]
	ldr	r1, [sp, #24]
	strh	r0, [r9, #154]	@ unaligned
	str	r4, [r9, #160]
	str	r1, [r9, #156]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r9, #72]
	str	r1, [r9, #76]
	str	r3, [r1]
	ldr	r3, [r9, #32]
	cmp	r3, r7
	beq	.L10274
	mov	r1, r9
	mov	r0, r5
	blx	r3
	subs	r8, r0, #0
	bge	.L10274
	ldrd	r2, [r9, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r9, #20]
	strd	r0, [r9, #72]
.L10274:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L10275
	ldr	r2, [r9, #16]
	cmp	r2, #0
	beq	.L10275
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L10275:
	tst	r3, #2
	bne	.L10276
	ldr	r2, [r9, #8]
	cmp	r2, #0
	beq	.L10276
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L10276:
	tst	r3, #1
	bne	.L10277
	ldr	r3, [r9, #12]
	cmp	r3, #0
	beq	.L10277
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L10277:
	cmp	r8, #0
	beq	.L10258
	mov	r0, r9
	bl	kfree
.L10273:
	ldrb	r3, [r6, #4044]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10258
	mov	r4, #0
	movw	r1, #:lower16:.LC543
	mov	r2, r4
	movt	r1, #:upper16:.LC543
	add	r0, sp, #32
	strb	r4, [r6, #4044]
	bl	sprintf
	add	r0, sp, #32
	mov	r1, r4
	bl	remove_proc_entry
	b	.L10258
.L10315:
	ldr	r10, .L10318+24
	movw	r1, #:lower16:.LC543
	mov	r2, r9
	movt	r1, #:upper16:.LC543
	add	r0, sp, #32
	bl	sprintf
	add	r0, sp, #32
	ldr	r3, .L10318+28
	mov	r2, r9
	mov	r1, #432
	str	r10, [sp]
	bl	proc_create_data
	cmp	r0, #0
	beq	.L10317
	add	r10, r10, #52
	mov	r3, #1
	str	r9, [r6, #3640]
	movw	r2, #3636
	strh	r9, [r6, r2]	@ movhi
	str	r3, [r6, #3652]
	str	r10, [r6, #3688]
	str	r10, [r6, #3692]
	strb	r3, [r6, #4044]
	b	.L10266
.L10282:
	mov	r9, #16
	b	.L10272
.L10316:
	mvn	r8, #11
	b	.L10273
.L10271:
	mvn	r8, #18
	b	.L10258
.L10317:
	mvn	r8, #4
	b	.L10258
.L10319:
	.align	2
.L10318:
	.word	.LANCHOR3-2096
	.word	.LANCHOR3-2108
	.word	.LANCHOR3-2080
	.word	.LANCHOR0+2836
	.word	.LANCHOR0+2860
	.word	.LANCHOR0+2932
	.word	.LANCHOR1+3636
	.word	.LANCHOR3-1780
	.fnend
	.size	rndis_function_bind_config, .-rndis_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_ioctl, %function
mtp_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	add	r5, r4, #112
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L10321
	movw	r3, #19713
	mov	r8, r2
	movt	r3, 16416
	mov	r6, r1
	cmp	r1, r3
	bhi	.L10323
	mov	r3, #19712
	movt	r3, 16416
	cmp	r1, r3
	bcs	.L10324
	movw	r3, #19715
	movt	r3, 16392
	cmp	r1, r3
	bne	.L10322
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, #8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L10338
	mov	r2, #8
	mov	r1, r8
	add	r0, sp, r2
	bl	__copy_from_user
	cmp	r0, #0
	mvnne	r10, #13
	bne	.L10337
	ldr	r7, [sp, #8]
	cmp	r7, #28
	bhi	.L10360
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L10361
	mov	r0, #1000
	add	r8, r4, #88
	bl	msecs_to_jiffies
	mov	r10, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	add	r9, r4, #124
	mov	r1, r0
	cmp	r9, r3
	beq	.L10384
	ldr	ip, [r3]
	mov	lr, #512
	mov	fp, #256
	ldr	r2, [r3, #4]
	sub	r6, r3, #36
	mov	r0, r8
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L10342
.L10343:
	mov	r3, sp
	ldr	r1, [sp, #12]
	bic	r3, r3, #8128
	ldr	r0, [r6]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r7; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L10385
	cmp	r7, #0
	bne	.L10386
.L10355:
	str	r7, [r6, #4]
	ldr	r0, [r4, #100]
	mov	r2, #208
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	beq	.L10337
	mov	r0, r8
.L10383:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #128]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r8
	str	r2, [r4, #128]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L10337
.L10323:
	movw	r3, #19716
	movt	r3, 16416
	cmp	r1, r3
	beq	.L10324
.L10322:
	add	r7, r4, #88
	mvn	r10, #21
.L10336:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	mvneq	r10, #124
	beq	.L10356
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L10356:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
.L10337:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L10320:
	mov	r0, r10
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10324:
	add	r7, r4, #88
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L10387
	cmp	r3, #0
	beq	.L10388
	mov	r3, #2
	mov	r0, r7
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, #32; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L10330
	mov	r1, r8
	mov	r2, #32
	add	r0, sp, #16
	bl	__copy_from_user
	subs	r9, r0, #0
	mvnne	r10, #13
	bne	.L10336
	ldr	r0, [sp, #16]
	bl	fget
	subs	r8, r0, #0
	mvneq	r10, #8
	beq	.L10336
	str	r8, [r4, #216]
	ldrd	r2, [sp, #24]
	strd	r2, [r4, #224]
	ldrd	r2, [sp, #32]
	strd	r2, [r4, #232]
	.syntax divided
@ 1028 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #19716
	movt	r3, 16416
	cmp	r6, r3
	beq	.L10389
	mov	r3, #19712
	movt	r3, 16416
	cmp	r6, r3
	addeq	r2, r4, #184
	addne	r2, r4, #200
	streq	r9, [r4, #240]
.L10334:
	ldr	r1, [r4, #180]
	mov	r0, #4
	bl	queue_work_on
	ldr	r0, [r4, #180]
	bl	flush_workqueue
	mov	r0, r8
	bl	fput
	.syntax divided
@ 1052 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r10, [r4, #252]
	b	.L10336
.L10338:
	mov	r1, #8
	mvn	r10, #13
	add	r0, sp, r1
	bl	__memzero
	b	.L10337
.L10388:
	mov	r0, r7
	mvn	r10, #18
	bl	_raw_spin_unlock_irq
	b	.L10337
.L10387:
	mov	r3, #1
	mov	r0, r7
	mvn	r10, #124
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	b	.L10337
.L10330:
	mov	r1, #32
	add	r0, sp, #16
	bl	__memzero
	mvn	r10, #13
	b	.L10336
.L10361:
	mvn	r10, #18
	b	.L10337
.L10321:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r10, #15
	b	.L10320
.L10385:
	mov	r2, r7
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L10355
.L10354:
	mov	r0, r8
	mvn	r10, #13
	b	.L10383
.L10384:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L10342:
	mov	r3, sp
	movw	r2, #:lower16:autoremove_wake_function
	str	r7, [sp, #4]
	bic	r3, r3, #8128
	add	r1, sp, #28
	bic	r3, r3, #63
	mov	fp, r10
	ldr	r0, [r3, #12]
	mov	r10, r3
	movt	r2, #:upper16:autoremove_wake_function
	add	ip, r4, #156
	mov	r3, #0
	str	ip, [sp]
	str	r3, [sp, #16]
	str	r0, [sp, #20]
	str	r2, [sp, #24]
	str	r1, [sp, #28]
	str	r1, [sp, #32]
.L10348:
	mov	r2, #1
	add	r1, sp, #16
	ldr	r0, [sp]
	bl	prepare_to_wait
	mov	r0, r8
	mov	r7, #512
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	mov	r2, r0
	mov	lr, #256
	mov	r0, r8
	mov	r1, r2
	cmp	r9, r3
	sub	r6, r3, #36
	beq	.L10390
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	lr, [r3]
	str	r7, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L10346
.L10345:
	ldr	r3, [r10, #12]
	mov	r0, fp
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L10347
	bl	schedule_timeout
	subs	fp, r0, #0
	bne	.L10348
	ldr	r7, [sp, #4]
.L10351:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	mov	r1, r0
	cmp	r9, r3
	beq	.L10391
	ldr	ip, [r3]
	mov	lr, #512
	mov	fp, #256
	ldr	r2, [r3, #4]
	mov	r0, r8
	sub	r6, r3, #36
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #16
	ldr	r0, [sp]
	bl	finish_wait
	cmp	r6, #0
	bne	.L10343
.L10382:
	mvn	r10, #61
	b	.L10337
.L10386:
	mov	r1, r7
	bl	__memzero
	b	.L10354
.L10389:
	mov	r3, #1
	add	r2, r4, #184
	str	r3, [r4, #240]
	ldrh	r3, [sp, #40]
	strh	r3, [r4, #244]	@ movhi
	ldr	r3, [sp, #44]
	str	r3, [r4, #248]
	b	.L10334
.L10347:
	add	r1, sp, #16
	ldr	r0, [sp]
	bl	finish_wait
	b	.L10382
.L10360:
	mvn	r10, #21
	b	.L10337
.L10346:
	cmp	fp, #0
	ldr	r7, [sp, #4]
	beq	.L10351
	add	r1, sp, #16
	ldr	r0, [sp]
	bl	finish_wait
	b	.L10343
.L10390:
	bl	_raw_spin_unlock_irqrestore
	b	.L10345
.L10391:
	mov	r0, r8
	mvn	r10, #61
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #16
	ldr	r0, [sp]
	bl	finish_wait
	b	.L10337
	.fnend
	.size	mtp_ioctl, .-mtp_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_cmd_complete, %function
fmbim_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r7, [r1, #48]
	cmp	r5, #0
	beq	.L10400
	ldr	r2, [r1, #44]
	cmp	r2, #0
	blt	.L10401
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10398
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L10402
.L10395:
	mov	r1, #32
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	strne	r7, [r6, #4]
	beq	.L10403
.L10396:
	mov	r2, r7
	ldr	r1, [r4]
	add	r4, r5, #204
	bl	memcpy
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r5, #212]
	add	r2, r6, #8
	add	r1, r5, #208
	mov	r0, r4
	str	r2, [r5, #212]
	str	r1, [r6, #8]
	str	r3, [r6, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	add	r0, r5, #108
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L10398:
	mov	r6, #16
	b	.L10395
.L10402:
	mvn	r3, #0
	mvn	r6, #11
	ldr	r0, [r3, #-11]
	b	.L10396
.L10403:
	mov	r0, r6
	mvn	r6, #11
	bl	kfree
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L10396
.L10400:
	movw	r0, #:lower16:.LC672
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC672
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L10404
	b	printk
.L10401:
	movw	r0, #:lower16:.LC673
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC673
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L10404
	b	printk
.L10405:
	.align	2
.L10404:
	.word	.LANCHOR3-1672
	.fnend
	.size	fmbim_cmd_complete, .-fmbim_cmd_complete
	.align	2
	.global	usb_rmnet_mux_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_write, %function
usb_rmnet_mux_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L10421
	cmp	r2, #0
	mov	r5, r2
	mov	r7, r1
	beq	.L10431
	cmp	r2, #4096
	bhi	.L10432
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10422
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L10411
.L10410:
	movw	r1, #32976
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	beq	.L10433
	mov	r3, sp
	str	r5, [r6, #4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L10434
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	subs	r9, r0, #0
	bne	.L10435
	add	r7, r4, #368
	add	r8, r4, #376
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #348]
	mov	r3, r4
	add	ip, r6, #8
	mov	r1, r0
	mov	r0, r7
	add	r2, r2, #1
	str	r2, [r4, #348]
	ldr	r2, [r3, #340]!
	str	ip, [r2, #4]
	strd	r2, [r6, #8]
	str	ip, [r4, #340]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r8]
	add	r2, r2, #1
	strex	r1, r2, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L10406
	mvn	r1, #94
	strb	r1, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r9, [r3, #2]
	strb	r9, [r3, #3]
	ldrb	r1, [r4, #360]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	r9, [r3, #6]
	strb	r9, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L10406
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r1, r3, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC677
	movt	r1, #:upper16:.LC677
	add	r0, r0, #32
	bl	dev_err
	b	.L10406
.L10434:
	mov	r1, r5
	bl	__memzero
.L10414:
	movw	r0, #:lower16:.LC676
	mov	r2, r5
	ldr	r1, .L10436
	movt	r0, #:upper16:.LC676
	bl	printk
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
.L10406:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10422:
	mov	r6, #16
	b	.L10410
.L10421:
	mvn	r5, #18
	b	.L10406
.L10433:
	mov	r0, r6
	bl	kfree
.L10411:
	movw	r0, #:lower16:.LC675
	ldr	r1, .L10436
	mvn	r5, #11
	movt	r0, #:upper16:.LC675
	bl	printk
	b	.L10406
.L10432:
	movw	r0, #:lower16:.LC674
	mov	r3, r2
	ldr	r1, .L10436
	movt	r0, #:upper16:.LC674
	mov	r2, #4096
	bl	printk
	mvn	r5, #11
	b	.L10406
.L10431:
	movw	r0, #:lower16:.LC658
	ldr	r1, .L10436
	mvn	r5, #18
	movt	r0, #:upper16:.LC658
	bl	printk
	b	.L10406
.L10435:
	mov	r5, r9
	b	.L10414
.L10437:
	.align	2
.L10436:
	.word	.LANCHOR3-1652
	.fnend
	.size	usb_rmnet_mux_ctrl_write, .-usb_rmnet_mux_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_bind_config, %function
audio_source_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mvn	ip, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r2, r3
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r1, r3
	str	lr, [sp, #24]
	ldr	r5, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	add	lr, sp, #8
	mov	r0, ip
	str	ip, [r5]
	str	ip, [r5, #4]
	str	lr, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L10464
.L10438:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10464:
	ldr	r3, [r7, #24]
	add	r6, sp, #12
	movw	r1, #:lower16:.LC678
	ldr	lr, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC678
	ldr	ip, [r3]
	mov	r3, #1
	mov	r0, lr
	add	ip, ip, #32
	str	ip, [lr, #500]
	stm	sp, {r4, r6}
	movw	r6, #:lower16:.LANCHOR0
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r6, #:upper16:.LANCHOR0
	bne	.L10446
	ldr	r3, [sp, #12]
	movt	r6, #:upper16:.LANCHOR0
	movw	r1, #:lower16:.LC679
	add	r9, r6, #2944
	movt	r1, #:upper16:.LC679
	mov	r2, #80
	mov	r8, r4
	str	r4, [r3, #16]
	add	r0, r3, #88
	str	r9, [r3, #276]
	str	r3, [r6, #3032]
	bl	strlcpy
	ldr	r0, [sp, #12]
	mov	r1, r4
	add	r2, r6, #3104
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC680
	mov	r2, #16
	movt	r1, #:upper16:.LC680
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC681
	mov	r2, #80
	movt	r1, #:upper16:.LC681
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	bne	.L10446
	ldr	r3, [r6, #2984]
	cmp	r3, #0
	beq	.L10448
	ldr	r3, [r6, #2992]
	cmp	r3, #0
	beq	.L10448
	ldr	r1, [r7, #40]
	add	r3, r9, #72
	add	r2, r7, #36
	str	r7, [r6, #2964]
	str	r3, [r7, #40]
	str	r2, [r6, #3016]
	str	r1, [r6, #3020]
	str	r3, [r1]
	ldr	r3, [r6, #2976]
	cmp	r3, #0
	beq	.L10441
	mov	r1, r9
	mov	r0, r7
	blx	r3
	subs	r4, r0, #0
	blt	.L10465
.L10441:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L10442
	ldr	r2, [r6, #2960]
	cmp	r2, #0
	beq	.L10442
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L10442:
	tst	r3, #2
	bne	.L10443
	ldr	r2, [r6, #2952]
	cmp	r2, #0
	beq	.L10443
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L10443:
	tst	r3, #1
	bne	.L10444
	ldr	r3, [r6, #2956]
	cmp	r3, #0
	beq	.L10444
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L10444:
	cmp	r4, #0
	beq	.L10466
.L10440:
.L10445:
.L10446:
	ldr	r0, [r6, #3028]
	bl	snd_card_free
	b	.L10438
.L10466:
	ldr	r3, [sp, #12]
	ldr	r2, [r3]
	ldr	r2, [r2]
	str	r2, [r5]
	ldr	r2, [r3, #12]
	ldr	r3, [sp, #8]
	str	r2, [r5, #4]
	str	r3, [r6, #3028]
	b	.L10438
.L10465:
	ldr	r2, [r6, #3016]
	mov	r0, #256
	mov	r1, #512
	ldr	r3, [r6, #3020]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r8, [r6, #2964]
	str	r0, [r6, #3016]
	str	r1, [r6, #3020]
	b	.L10441
.L10448:
	mvn	r4, #21
	b	.L10446
	.fnend
	.size	audio_source_function_bind_config, .-audio_source_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_write, %function
mbim_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L10496
	cmp	r2, #0
	mov	r5, r2
	beq	.L10497
	cmp	r2, #4096
	bhi	.L10498
	add	r6, r4, #104
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L10472
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L10499
	movw	r3, #:lower16:kmalloc_caches
	mov	r8, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10489
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L10500
.L10475:
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r7]
	strne	r5, [r7, #4]
	beq	.L10501
.L10476:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L10502
	mov	r1, r5
	mov	r10, r5
	bl	__memzero
.L10478:
	cmp	r10, #0
	bne	.L10503
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L10504
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	cmp	r3, #3
	bne	.L10505
	add	r8, r4, #204
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #220]
	add	ip, r7, #8
	add	r3, r4, #216
	mov	r1, r0
	mov	r0, r8
	str	ip, [r4, #220]
	str	r3, [r7, #8]
	str	r2, [r7, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	ldr	r7, [r4, #160]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	mov	fp, r0
	cmp	r3, #0
	beq	.L10506
	cmp	r7, #0
	beq	.L10507
	ldr	r3, [r7]
	cmp	r3, #0
	beq	.L10508
	add	r9, r4, #168
	.syntax divided
@ 61 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r9]
	add	r2, r2, #1
	strex	r3, r2, [r9]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L10486
	mov	r1, r0
	mov	r0, r8
	ldr	r3, [r4, #168]
	bl	_raw_spin_unlock_irqrestore
.L10481:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
.L10467:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10502:
	mov	r1, r8
	mov	r2, r5
	bl	__copy_from_user
	mov	r10, r0
	b	.L10478
.L10489:
	mov	r7, #16
	b	.L10475
.L10486:
	ldr	r3, [r7]
	mov	lr, #8
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r8
	str	lr, [r7, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r10, [r3, #2]
	strb	r10, [r3, #3]
	ldrb	r2, [r4, #196]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	r10, [r3, #6]
	strb	r10, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L10481
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r1, r3, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC689
	ldr	r1, .L10509
	movt	r0, #:upper16:.LC689
	bl	printk
	b	.L10481
.L10500:
	mvn	r3, #0
	mvn	r7, #11
	ldr	r0, [r3, #-11]
	b	.L10476
.L10501:
	mov	r0, r7
	mvn	r7, #11
	bl	kfree
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L10476
.L10498:
	movw	r0, #:lower16:.LC682
	mov	r3, #4096
	ldr	r1, .L10509+4
	movt	r0, #:upper16:.LC682
	bl	printk
	mvn	r0, #11
	b	.L10467
.L10497:
	movw	r0, #:lower16:.LC658
	ldr	r1, .L10509+4
	movt	r0, #:upper16:.LC658
	bl	printk
	mvn	r0, #18
	b	.L10467
.L10496:
	movw	r0, #:lower16:.LC516
	ldr	r1, .L10509+4
	movt	r0, #:upper16:.LC516
	bl	printk
	mvn	r0, #18
	b	.L10467
.L10503:
	movw	r0, #:lower16:.LC676
	mov	r2, r10
	ldr	r1, .L10509+4
	movt	r0, #:upper16:.LC676
	bl	printk
	mov	r0, r7
	bl	mbim_free_ctrl_pkt.part.9
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	b	.L10467
.L10504:
	movw	r0, #:lower16:.LC684
	mov	r2, r4
	ldr	r1, .L10509+8
	movt	r0, #:upper16:.LC684
	bl	printk
	mov	r0, r7
	bl	mbim_free_ctrl_pkt.part.9
	b	.L10481
.L10505:
	movw	r0, #:lower16:.LC685
	ldr	r1, .L10509+8
	mov	r2, r4
	movt	r0, #:upper16:.LC685
	bl	printk
	mov	r0, r7
	bl	mbim_free_ctrl_pkt.part.9
	b	.L10481
.L10506:
	movw	r0, #:lower16:.LC686
	mov	r2, r4
	ldr	r1, .L10509
	movt	r0, #:upper16:.LC686
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L10481
.L10507:
	movw	r0, #:lower16:.LC687
	mov	r2, r4
	ldr	r1, .L10509
	movt	r0, #:upper16:.LC687
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L10481
.L10499:
	movw	r0, #:lower16:.LC67
	ldr	r1, .L10509+4
	movt	r0, #:upper16:.LC67
	bl	printk
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #31
	b	.L10467
.L10472:
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC683
	ldr	r1, .L10509+4
	movt	r0, #:upper16:.LC683
	bl	printk
	mvn	r0, #15
	b	.L10467
.L10508:
	movw	r0, #:lower16:.LC688
	mov	r2, r4
	ldr	r1, .L10509
	movt	r0, #:upper16:.LC688
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L10481
.L10510:
	.align	2
.L10509:
	.word	.LANCHOR3-1584
	.word	.LANCHOR3-1624
	.word	.LANCHOR3-1612
	.fnend
	.size	mbim_write, .-mbim_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	handle_exception, %function
handle_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r7, r0, #44
	strd	r8, [sp, #16]
	movw	r8, #1284
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #128
	sub	sp, sp, #128
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
	b	.L10513
.L10587:
	cmp	r5, #10
	bne	.L10586
.L10513:
	ldr	r4, [r10, #12]
	ldr	r0, [r4, #740]
	add	r0, r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, sp
	add	r1, r4, #744
	mov	r0, r4
	bl	dequeue_signal
	mov	r5, r0
	ldr	r0, [r4, #740]
	mov	r1, r9
	add	r0, r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L10587
	ldr	r3, [r6, #8]
	cmp	r3, #0
	beq	.L10519
	mov	r8, r5
.L10518:
	ldr	r4, [r6, #68]
	add	r4, r4, r8
	add	r8, r8, #32
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L10520
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #16]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L10520:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L10521
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #24]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L10521:
	cmp	r8, #128
	bne	.L10518
	b	.L10524
.L10588:
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10511
.L10524:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	mov	r0, r7
	ldr	r1, [r3, #20]
	ldr	r4, [r3, #28]
	ldr	ip, [r3, #52]
	ldr	r9, [r3, #60]
	ldr	r2, [r3, #84]
	ldr	r8, [r3, #92]
	add	r1, r1, r4
	ldr	r4, [r3, #116]
	ldr	lr, [r3, #124]
	add	r3, ip, r9
	add	r1, r1, r3
	add	r3, r2, r8
	add	r3, r3, r1
	add	r4, r4, lr
	add	r4, r4, r3
	bl	_raw_spin_unlock_irq
	cmp	r4, #0
	mov	r0, r6
	bne	.L10588
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L10525
	ldr	r0, [r3, #100]
	ldr	r1, [r0, #8]
	ldr	r1, [r1, #36]
	cmp	r1, #0
	beq	.L10525
	blx	r1
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
.L10525:
	tst	r2, #2
	beq	.L10519
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10519
	blx	r3
.L10519:
	mov	r0, r7
	mov	r9, #0
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	str	r9, [r3, #4]
	ldr	r3, [r6, #68]
	str	r9, [r3, #36]
	ldr	r3, [r6, #68]
	str	r9, [r3, #68]
	ldr	r3, [r6, #68]
	str	r9, [r3, #100]
	ldr	r3, [r6, #68]
	ldr	r8, [r6, #112]
	str	r3, [r6, #60]
	cmp	r8, #1
	str	r3, [r6, #64]
	beq	.L10527
	ldr	r3, [r6, #92]
	ldr	r4, [r6, #116]
	cmp	r3, r9
	movne	r0, r9
	movne	r1, r0
	beq	.L10529
.L10528:
	ldr	r3, [r6, #100]
	add	r5, r5, #1
	add	r3, r3, r0
	add	r0, r0, #400
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	str	r1, [r3, #28]
	str	r1, [r3, #32]
	str	r1, [r3, #36]
	and	r2, r2, #239
	bfi	r2, r1, #6, #1
	strb	r2, [r3, #24]
	ldr	r3, [r6, #92]
	cmp	r3, r5
	bhi	.L10528
.L10529:
	mov	r3, #0
	sub	r8, r8, #2
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	cmp	r8, #5
	ldrls	pc, [pc, r8, asl #2]
	b	.L10511
.L10534:
	.word	.L10533
	.word	.L10511
	.word	.L10535
	.word	.L10511
	.word	.L10536
	.word	.L10536
.L10533:
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L10537
	add	r1, r1, #96
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L10539
	ldr	r3, [r6, #8]
	mov	r1, #0
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L10539:
	ldr	r3, [r6, #56]
	cmp	r3, r4
	bne	.L10511
	ldr	r5, [r6, #4]
	cmp	r5, #0
	beq	.L10541
	add	r7, r5, #60
	ldr	r6, [r5, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #56]
	mov	r8, r0
	cmp	r4, #0
	bne	.L10542
	movw	r2, #:lower16:.LC690
	movw	r0, #:lower16:.LC487
	ldr	r3, .L10591
	movt	r2, #:upper16:.LC690
	movt	r0, #:upper16:.LC487
	movw	r1, #1845
	bl	warn_slowpath_fmt
.L10543:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L10511:
	add	sp, sp, #128
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10586:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	ip, #6
	mov	r4, r0
	cmp	r3, ip
	bgt	.L10515
	ldr	r3, [r6, #56]
	mov	r1, #2
	mov	r0, #10
	ldr	r2, [r6, #168]
	str	ip, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L10515
	bl	send_sig_info
.L10515:
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L10513
.L10527:
	mvn	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	send_status
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #112]
	cmn	r3, #8
	beq	.L10589
.L10531:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	b	.L10511
.L10535:
	mov	r0, r6
	ldr	r1, [r6, #12]
	bl	do_set_interface
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L10511
	ldr	r4, [r6, #4]
	add	r6, r4, #60
	ldr	r7, [r4, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #56]
	mov	r8, r0
	cmp	r5, #0
	beq	.L10590
	sub	r5, r5, #1
	cmp	r5, #0
	str	r5, [r4, #56]
	bne	.L10549
	str	r5, [r7, #4]
	ldr	r3, [r4]
	mov	r2, #32
	mov	r1, r7
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r7, #44]
.L10549:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L10511
.L10536:
	mov	r1, #0
	mov	r0, r6
	bl	do_set_interface
	mov	r0, r7
	bl	_raw_spin_lock_irq
	mov	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	b	.L10511
.L10590:
	cmp	r4, #0
	beq	.L10549
	movw	r2, #:lower16:.LC690
	movw	r0, #:lower16:.LC487
	ldr	r3, .L10591
	movt	r2, #:upper16:.LC690
	movt	r0, #:upper16:.LC487
	movw	r1, #1845
	bl	warn_slowpath_fmt
	b	.L10549
.L10589:
	str	r9, [r6, #112]
	b	.L10531
.L10537:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC83
	movw	r3, #3112
	movt	r1, #:upper16:.LC83
	ldr	r2, .L10591+4
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC84
	movw	r1, #550
	movt	r0, #:upper16:.LC84
	bl	warn_slowpath_null
	b	.L10511
.L10542:
	sub	r4, r4, #1
	cmp	r4, #0
	str	r4, [r5, #56]
	bne	.L10543
	str	r4, [r6, #4]
	ldr	r3, [r5]
	mov	r2, #32
	mov	r1, r6
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r6, #44]
	b	.L10543
.L10541:
	ldrd	r0, [r6, #48]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r2, [r6, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r3, r0
	str	r6, [r2]
	beq	.L10511
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC85
	ldr	r2, [r6, #48]
	movt	r1, #:upper16:.LC85
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
	b	.L10511
.L10592:
	.align	2
.L10591:
	.word	.LANCHOR3-1532
	.word	.LANCHOR3-1552
	.fnend
	.size	handle_exception, .-handle_exception
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_main_thread, %function
fsg_main_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 80
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #5121
	movw	r4, #257
	strd	r6, [sp, #8]
	movw	r7, #21333
	movt	r4, 5121
	strd	r8, [sp, #16]
	mov	r9, r5
	movt	r7, 17218
	strd	r10, [sp, #24]
	mov	fp, r0
	mov	r0, #2
	str	lr, [sp, #32]
	.pad #92
	sub	sp, sp, #92
	movt	r5, 41472
	bl	allow_signal
	mov	r0, #15
	add	r10, fp, #44
	bl	allow_signal
	mov	r0, #9
	movt	r9, 256
	bl	allow_signal
	mov	r0, #10
	bl	allow_signal
	bl	set_freezable
	mov	r3, sp
	mov	r2, #0
	strd	r4, [sp, #16]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r2, [r3, #8]
.L10594:
	ldr	r3, [fp, #112]
	cmp	r3, #7
	beq	.L10984
.L10783:
	cmp	r3, #0
	bgt	.L10595
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L10595
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #32
	beq	.L10985
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L10599
.L10601:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10594
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L10601
.L10599:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r2, #31
	mov	r0, fp
	str	r2, [r4, #12]
	ldr	r1, [fp, #108]
	udiv	r3, r2, r1
	mul	r3, r1, r3
	subs	r3, r2, r3
	addne	r2, r1, r2
	mov	r1, r4
	subne	r2, r2, r3
	ldr	r3, [r4, #24]
	str	r2, [r3, #4]
	bl	start_out_transfer
	cmp	r0, #0
	bne	.L10961
	b	.L10594
.L10986:
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10594
.L10961:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	mov	r0, r10
	cmp	r3, #1
	bne	.L10986
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 2858 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r5, [fp, #8]
	cmp	r5, #0
	beq	.L10606
	ldr	r2, [r4, #24]
	ldr	r8, [r5, #88]
	ldr	r3, [r2]
	ldr	r6, [r2, #44]
	cmp	r6, #0
	bne	.L10970
	ldr	r1, [r5, #96]
	tst	r1, #1
	bne	.L10609
	ldr	r2, [r2, #48]
	cmp	r2, #31
	bne	.L10610
	ldr	r2, [r3]
	cmp	r2, r7
	bne	.L10610
	ldrb	r2, [r3, #13]	@ zero_extendqisi2
	cmp	r2, #7
	bls	.L10987
.L10622:
	ldrb	r3, [r8, #144]	@ zero_extendqisi2
	ands	r6, r3, #1
	beq	.L10609
	ldr	r0, [r5, #104]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L10983
.L10989:
	cmn	r0, #11
	bne	.L10988
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L10970
.L10983:
	ldr	r0, [r5, #100]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	bne	.L10989
.L10970:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L10594
.L10595:
	mov	r0, fp
	bl	handle_exception
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L10783
.L10984:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [fp, #168]
	bl	_raw_spin_unlock_irq
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L10787
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L10787
	mov	r0, fp
	blx	r3
	cmp	r0, #0
	blt	.L10787
.L10788:
	add	r0, fp, #152
	mov	r1, #0
	bl	complete_and_exit
.L10985:
	mov	r0, fp
	bl	sleep_thread
	b	.L10594
.L10787:
	ldr	r5, [fp, #92]
	add	r7, fp, #28
	mov	r0, r7
	ldr	r4, [fp, #100]
	bl	down_write
	cmp	r5, #0
	sub	r5, r5, #1
	beq	.L10786
	mov	r6, #14848
	add	r4, r4, #400
	movt	r6, 2
	mov	r8, #0
.L10790:
	ldr	r0, [r4, #-400]
	cmp	r0, #0
	beq	.L10789
	bl	fput
	str	r8, [r4, #-400]
	str	r6, [r4, #-364]
.L10789:
	sub	r5, r5, #1
	add	r4, r4, #400
	cmn	r5, #1
	bne	.L10790
.L10786:
	mov	r0, r7
	bl	up_write
	b	.L10788
.L10987:
	ldrb	r6, [r3, #12]	@ zero_extendqisi2
	bics	r6, r6, #128
	bne	.L10622
	ldrb	r2, [r3, #14]	@ zero_extendqisi2
	sub	r1, r2, #1
	cmp	r1, #15
	bhi	.L10622
	add	r1, r3, #15
	str	r2, [r8, #72]
	add	r0, r8, #76
	str	r3, [sp, #12]
	bl	memcpy
	ldr	r3, [sp, #12]
	ldr	r1, [r8, #92]
	ldrsb	r2, [r3, #12]
	cmp	r2, #0
	movge	r2, #1
	movlt	r2, #2
	str	r2, [r8, #120]
	ldr	r2, [r3, #8]
	cmp	r2, #0
	str	r2, [r8, #124]
	moveq	r2, #3
	streq	r2, [r8, #120]
	ldrb	r2, [r3, #13]	@ zero_extendqisi2
	cmp	r2, r1
	str	r2, [r8, #96]
	ldrcc	r1, [r8, #100]
	movcc	r0, #400
	movcs	r2, #0
	mlacc	r2, r0, r2, r1
	mov	r0, r10
	str	r2, [r8, #104]
	ldr	r3, [r3, #4]
	str	r3, [r8, #132]
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	cmp	r3, #0
	bgt	.L10633
	mvn	r3, #8
	str	r3, [fp, #112]
.L10633:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	str	r4, [fp, #64]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L10634
.L10635:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10594
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L10635
.L10634:
	add	r5, fp, #28
	mov	r0, r10
	str	r5, [sp, #12]
	bl	_raw_spin_unlock_irq
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r0, r5
	and	r3, r3, #251
	bfc	r3, #3, #1
	strb	r3, [fp, #144]
	bl	down_read
	ldrb	r2, [fp, #76]	@ zero_extendqisi2
	cmp	r2, #37
	beq	.L10637
	bls	.L10990
	cmp	r2, #68
	beq	.L10654
	bls	.L10991
	cmp	r2, #168
	beq	.L10662
	bls	.L10992
	cmp	r2, #190
	beq	.L10666
	cmp	r2, #250
	beq	.L10667
	cmp	r2, #170
	beq	.L10993
.L10636:
	mov	r5, #0
	movw	r1, #:lower16:.LC700
	ldr	r0, .L11011
	movt	r1, #:upper16:.LC700
	str	r5, [fp, #128]
	bl	sprintf
	str	r5, [sp]
	mov	r2, r5
	mvn	r3, #0
	mov	r0, fp
	ldr	r1, [fp, #72]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldr	r3, [fp, #104]
.L10973:
	mov	r2, #335872
	mvn	r6, #21
	str	r2, [r3, #28]
.L10671:
	ldr	r0, [sp, #12]
	mov	r5, r6
	bl	up_read
.L10792:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L10594
	cmn	r5, #22
	beq	.L10745
	cmp	r5, #0
	ldrlt	r6, [fp, #120]
	blt	.L10746
	mov	r3, r5
.L10745:
	ldr	r6, [fp, #120]
	cmp	r6, #2
	bne	.L10746
	ldr	r2, [fp, #128]
	mov	r1, #1
	ldr	r0, [r4, #16]
	cmp	r3, r2
	movcs	r3, r2
	str	r3, [r0, #4]
	str	r1, [r4, #4]
	ldr	r6, [fp, #120]
	ldr	r2, [fp, #136]
	sub	r3, r2, r3
	str	r3, [fp, #136]
.L10746:
	cmp	r6, #1
	beq	.L10748
	bcc	.L10749
	cmp	r6, #2
	bne	.L10747
	ldr	r3, [fp, #124]
	cmp	r3, #0
	beq	.L10747
	ldr	r3, [fp, #8]
	cmp	r3, #0
	beq	.L10994
	ldr	r4, [fp, #60]
	ldr	r2, [fp, #136]
	ldr	r3, [r4, #16]
	cmp	r2, #0
	bne	.L10758
	ldrb	ip, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	bfi	ip, r2, #1, #1
	strb	ip, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L10594
	ldr	r3, [r4, #8]
	str	r3, [fp, #60]
.L10747:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	mvnle	r3, #7
	strle	r3, [fp, #112]
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #4016]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3, #4016]
	bne	.L10594
	mov	r0, fp
	bl	send_status
	subs	r4, r0, #0
	bne	.L10594
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	strle	r4, [fp, #112]
	bl	_raw_spin_unlock_irq
	b	.L10594
.L10988:
	ldr	r3, [r5, #84]
	movw	r1, #:lower16:.LC692
	mov	r2, r0
	movt	r1, #:upper16:.LC692
	add	r0, r3, #32
	bl	dev_warn
	b	.L10970
.L10606:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC83
	movw	r3, #2859
	ldr	r2, .L11011+4
	movt	r1, #:upper16:.LC83
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC84
	movw	r1, #550
	movt	r0, #:upper16:.LC84
	bl	warn_slowpath_null
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r5, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L10594
.L10609:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r6, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L10594
.L10697:
	tst	r2, #16
	movwne	r3, #21250
	mvnne	r6, #21
	movtne	r3, 5
	strne	r3, [r8, #28]
	bne	.L10671
	cmp	r3, #0
	beq	.L10671
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L10705
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L10705
	ldr	r2, [fp, #100]
	movw	ip, #23593
	mov	r1, r8
	movt	ip, 49807
	mov	r0, fp
	sub	r2, r8, r2
	asr	r2, r2, #4
	mul	r2, ip, r2
	blx	r3
	subs	r5, r0, #0
	blt	.L10669
	bne	.L10671
.L10705:
	ldr	r5, [sp, #12]
	mov	r0, r5
	bl	up_read
	mov	r0, r5
	bl	down_write
	ldr	r0, [r8]
	cmp	r0, #0
	beq	.L10704
	bl	fput
	mov	r3, #0
	str	r3, [r8]
.L10704:
	ldr	r5, [sp, #12]
	mov	r0, r5
	bl	up_write
	mov	r0, r5
	bl	down_read
	movw	r1, #:lower16:.LC695
	mov	r0, fp
	movt	r1, #:upper16:.LC695
	bl	send_message
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L10671
	ldr	r3, [r3, #8]
	cmp	r3, #0
	beq	.L10671
	ldr	r2, [fp, #100]
	mov	r1, r8
	movw	ip, #23593
	movt	ip, 49807
	mov	r0, fp
	sub	r8, r8, r2
	asr	r2, r8, #4
	mul	r2, ip, r2
	blx	r3
	and	r5, r0, r0, asr #31
.L10669:
	ldr	r0, [sp, #12]
	bl	up_read
	cmn	r5, #4
	bne	.L10792
	b	.L10594
.L10990:
	cmp	r2, #21
	beq	.L10639
	bhi	.L10640
	cmp	r2, #8
	beq	.L10641
	bhi	.L10642
	cmp	r2, #0
	beq	.L10643
	cmp	r2, #3
	bne	.L10636
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #16
	mov	r2, #2
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldr	r2, [fp, #104]
	ldr	r8, [r4]
	cmp	r2, #0
	beq	.L10995
	ldrb	r1, [r2, #24]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r6, [r2, #28]
	ldr	r3, [r2, #32]
	str	r0, [r2, #28]
	str	r0, [r2, #32]
	ubfx	r5, r1, #6, #1
	bfi	r1, r0, #6, #1
	lsl	r5, r5, #7
	strb	r1, [r2, #24]
.L10693:
	mov	r1, #18
	mov	r0, r8
	str	r3, [sp, #40]
	bl	__memzero
	ldr	r3, [sp, #40]
	lsr	ip, r6, #16
	lsr	r1, r6, #8
	orr	r5, r5, #112
	lsr	r2, r3, #16
	strb	r5, [r8]
	strb	r3, [r8, #6]
	ubfx	r3, r3, #8, #8
	lsr	r0, r2, #8
	strb	ip, [r8, #2]
	strb	r1, [r8, #12]
	strb	r2, [r8, #4]
	mov	r2, #10
	strb	r0, [r8, #3]
	strb	r3, [r8, #5]
	strb	r2, [r8, #7]
	strb	r6, [r8, #13]
	mov	r6, #18
	b	.L10671
.L10748:
	ldr	r3, [fp, #136]
	cmp	r3, #0
	beq	.L10747
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	ands	r5, r3, #8
	bne	.L10996
.L10771:
	ldr	r3, [fp, #64]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	bne	.L10778
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L10747
	ldr	r6, [fp, #60]
	ldr	r2, [r6, #4]
	cmp	r2, #0
	beq	.L10794
.L10775:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	beq	.L10771
	b	.L10594
.L10778:
	cmp	r2, #1
	bne	.L10769
	.syntax divided
@ 2060 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r3, #8]
	str	r5, [r3, #4]
	str	r2, [fp, #64]
	ldr	r2, [r3, #24]
	ldr	r3, [r3, #12]
	ldr	r1, [r2, #48]
	cmp	r1, r3
	bcc	.L10770
	ldr	r3, [r2, #44]
	cmp	r3, #0
	beq	.L10771
.L10770:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L10773
	ldr	r3, [fp, #56]
	mov	r1, #1
	ldr	r2, [fp, #168]
	str	r1, [fp, #112]
	str	r3, [fp, #116]
	cmp	r2, #0
	beq	.L10773
.L10982:
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L10773:
	mov	r1, r4
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L10594
.L10769:
	ldr	r6, [fp, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L10775
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L10775
.L10794:
	cmp	r3, #16384
	mov	r1, r6
	movcc	r4, r3
	movcs	r4, #16384
	mov	r0, fp
	str	r4, [r6, #12]
	ldr	r3, [fp, #108]
	udiv	r2, r4, r3
	mls	r2, r3, r2, r4
	cmp	r2, #0
	addne	r3, r4, r3
	moveq	r3, r4
	subne	r3, r3, r2
	ldr	r2, [r6, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L10594
	ldr	r3, [fp, #140]
	ldr	r2, [r6, #8]
	sub	r3, r3, r4
	str	r2, [fp, #60]
	str	r3, [fp, #140]
	b	.L10771
.L10749:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L10747
	ldr	r3, [fp, #8]
	cmp	r3, #0
	movweq	r1, #:lower16:.LC83
	movweq	r3, #2120
	ldreq	r0, [fp]
	beq	.L10971
	ldr	r0, [r3, #104]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r4, [fp, #8]
	mov	r1, #1
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L10753
.L10754:
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L10594
	ldr	r0, [r4, #100]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L10753:
	cmp	r0, #0
	beq	.L10747
	cmn	r0, #11
	beq	.L10754
.L10969:
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC692
	mov	r2, r0
	movt	r1, #:upper16:.LC692
	add	r0, r3, #32
	bl	dev_warn
	b	.L10747
.L10991:
	cmp	r2, #47
	beq	.L10656
	bhi	.L10657
	cmp	r2, #40
	beq	.L10658
	cmp	r2, #42
	bne	.L10636
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10723
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10723:
	mov	r0, #1
	movw	r3, #446
	mov	r2, r0
	mov	r1, #10
.L10978:
	str	r0, [sp]
	mov	r0, fp
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	mov	r0, fp
	bl	do_write
	mov	r5, r0
	b	.L10669
.L10640:
	cmp	r2, #26
	beq	.L10647
	bls	.L10997
	cmp	r2, #30
	beq	.L10651
	cmp	r2, #35
	beq	.L10652
	cmp	r2, #27
	bne	.L10636
	mov	ip, #0
	mov	r3, #18
	mov	r2, #3
	mov	r1, #6
	str	ip, [fp, #128]
	mov	r0, fp
	str	ip, [sp]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldr	r8, [fp, #104]
	cmp	r8, #0
	beq	.L10674
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	tst	r2, #4
	moveq	r3, #335872
	mvneq	r6, #21
	streq	r3, [r8, #28]
	beq	.L10671
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	tst	r3, #254
	bne	.L10695
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	tst	r3, #252
	bne	.L10695
	tst	r3, #1
	and	r3, r3, #2
	beq	.L10697
	cmp	r3, #0
	beq	.L10698
	movw	r1, #:lower16:.LC694
	mov	r0, fp
	movt	r1, #:upper16:.LC694
	bl	send_message
.L10698:
	ldr	r3, [r8]
	cmp	r3, #0
	moveq	r3, #14848
	mvneq	r6, #21
	movteq	r3, 2
	streq	r3, [r8, #28]
	b	.L10671
.L10657:
	cmp	r2, #53
	beq	.L10660
	cmp	r2, #67
	bne	.L10636
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L10636
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L10636
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r6, #1
	movw	r3, #962
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r1, #10
	str	r6, [sp]
	mov	r0, fp
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldrb	r5, [fp, #82]	@ zero_extendqisi2
	ldrb	r0, [fp, #85]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	and	r1, r3, #253
	and	r3, r3, #2
	ldr	r8, [r4]
	cmp	r5, r6
	cmpls	r1, #0
	movne	r3, #9216
	movne	r5, #1
	movtne	r3, 5
	moveq	r5, #0
	lsr	lr, r0, #6
	mvnne	r6, #21
	strne	r3, [r2, #28]
	bne	.L10671
	cmp	lr, #2
	beq	.L10998
	mov	r1, #20
	mov	r0, r8
	strd	r2, [sp, #40]
	bl	__memzero
	ldrd	r2, [sp, #40]
	mov	r0, #18
	mov	r1, #22
	strb	r0, [r8, #1]
	strb	r6, [r8, #2]
	cmp	r3, #0
	strb	r6, [r8, #3]
	strb	r1, [r8, #5]
	strb	r6, [r8, #6]
	bne	.L10999
	mvn	r0, #85
	str	r3, [r8, #8]	@ unaligned
	mov	r6, #20
	strb	r1, [r8, #13]
	strb	r0, [r8, #14]
	ldr	r3, [r2, #16]
	lsr	r2, r3, #16
	ubfx	r1, r3, #8, #8
	strb	r2, [r8, #17]
	strb	r3, [r8, #19]
	lsr	r3, r2, #8
	strb	r1, [r8, #18]
	strb	r3, [r8, #16]
	b	.L10671
.L10642:
	cmp	r2, #10
	beq	.L10645
	cmp	r2, #18
	bne	.L10636
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #16
	mov	r2, #2
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldr	r2, [fp, #104]
	ldr	r8, [r4]
	cmp	r2, #0
	beq	.L11000
	ldrb	ip, [r2, #24]	@ zero_extendqisi2
	mov	r5, #0
	mov	r0, #2
	ldr	r3, .L11011+8
	mov	r1, #31
	movw	lr, #:lower16:.LANCHOR1
	movt	lr, #:upper16:.LANCHOR1
	add	r6, fp, #218
	tst	ip, #8
	str	lr, [sp, #40]
	moveq	ip, r5
	movne	ip, #5
	strb	ip, [r8]
	ldrb	ip, [r2, #24]	@ zero_extendqisi2
	mov	r2, #16
	strb	r0, [r8, #2]
	strb	r0, [r8, #3]
	mov	r0, r3
	strb	r1, [r8, #4]
	mov	r1, r6
	lsl	ip, ip, #5
	strb	r5, [r8, #5]
	strb	r5, [r8, #6]
	bic	ip, ip, #127
	strb	ip, [r8, #1]
	strb	r5, [r8, #7]
	bl	strncpy
	ldr	lr, [sp, #40]
	mov	r0, r6
	strb	r5, [lr, #4076]
	bl	strlen
	cmp	r0, #11
	ldr	r3, .L11011+8
	bhi	.L10673
	ldr	r2, [fp, #96]
	cmp	r2, r5
	beq	.L10673
	mov	r0, r3
	bl	strlen
	ldr	r3, .L11011+8
	movw	r2, #:lower16:.LC693
	movt	r2, #:upper16:.LC693
	ldr	ip, [r2]
	ldrh	r2, [r2, #4]
	add	r1, r3, r0
	str	ip, [r3, r0]	@ unaligned
	strh	r2, [r1, #4]	@ unaligned
	ldr	r2, [sp, #40]
	strb	r5, [r2, #4076]
.L10673:
	mov	r1, #1
	add	r5, fp, #180
	str	r3, [sp]
	movw	r2, #:lower16:.LC598
	mov	r0, r5
	movt	r2, #:upper16:.LC598
	str	r1, [sp, #4]
	add	r3, fp, #209
	mov	r1, #29
	mov	r6, #36
	bl	snprintf
	ldr	r0, [fp, #180]	@ unaligned
	ldr	r1, [fp, #184]	@ unaligned
	ldr	r2, [fp, #188]	@ unaligned
	ldr	ip, [fp, #192]	@ unaligned
	str	r0, [r8, #8]	@ unaligned
	str	r1, [r8, #12]	@ unaligned
	str	r2, [r8, #16]	@ unaligned
	str	ip, [r8, #20]	@ unaligned
	ldr	r2, [fp, #204]	@ unaligned
	ldr	r0, [fp, #196]	@ unaligned
	ldr	r1, [fp, #200]	@ unaligned
	str	r0, [r8, #24]	@ unaligned
	str	r1, [r8, #28]	@ unaligned
	str	r2, [r8, #32]	@ unaligned
	ldrb	r2, [fp, #208]	@ zero_extendqisi2
	strb	r2, [r8, #36]
	b	.L10671
.L10992:
	cmp	r2, #85
	beq	.L10664
	cmp	r2, #90
	bne	.L10636
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r1, #0
	movw	r3, #390
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
.L10964:
	mov	r1, r4
	mov	r0, fp
	bl	do_mode_sense
	mov	r5, r0
	b	.L10669
.L10758:
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	orr	r2, r2, #2
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	bne	.L10759
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	beq	.L10594
.L10793:
	ldr	r4, [fp, #8]
	mov	r1, #1
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L10761
.L10762:
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L10594
	ldr	r0, [r4, #100]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L10761:
	cmp	r0, #0
	beq	.L10747
	cmn	r0, #11
	beq	.L10762
	b	.L10969
.L10610:
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	beq	.L10612
	blx	r2
.L10613:
	cmp	r0, #0
	beq	.L10616
	cmn	r0, #11
	bne	.L11001
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L10616
	ldr	r0, [r5, #100]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L10618
	blx	r3
	b	.L10613
.L10618:
	mov	r1, #1
	ldr	r3, [r2, #24]
	blx	r3
	b	.L10613
.L11001:
	ldr	r3, [r5, #84]
	movw	r1, #:lower16:.LC691
	mov	r2, r0
	movt	r1, #:upper16:.LC691
	add	r0, r3, #32
	bl	dev_warn
.L10616:
	add	r1, r5, #96
	mov	r0, #0
	bl	_set_bit
	b	.L10970
.L10994:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC83
	movw	r3, #2135
.L10971:
	movt	r1, #:upper16:.LC83
	ldr	r2, .L11011+12
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC84
	movw	r1, #550
	movt	r0, #:upper16:.LC84
	bl	warn_slowpath_null
	b	.L10594
.L10662:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10681
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10681:
	mov	r0, #1
	movw	r3, #1022
	mov	r2, #2
	mov	r1, #12
.L10975:
	str	r0, [sp]
	mov	r0, fp
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	mov	r0, fp
	bl	do_read
	mov	r5, r0
	b	.L10669
.L10658:
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10680
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10680:
	mov	r0, #1
	movw	r3, #446
	mov	r2, #2
	mov	r1, #10
	b	.L10975
.L10639:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #18
	mov	r2, #1
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
.L10981:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	bne	.L10973
.L10674:
	mvn	r6, #21
	b	.L10671
.L10652:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r1, #1
	mov	r3, #384
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldr	r1, [fp, #104]
	mov	r2, #134217728
	mov	ip, #2
	ldr	r3, [r4]
	mov	r6, #12
	str	r2, [r3]	@ unaligned
	ldr	r2, [r1, #16]
	lsr	r0, r2, #16
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	r0, [r3, #5]
	strb	r2, [r3, #6]
	lsr	r2, r0, #8
	strb	r2, [r3, #4]
	ldr	r2, [r1, #44]
	strb	ip, [r3, #8]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #9]
	strb	r0, [r3, #10]
	strb	r2, [r3, #11]
	b	.L10671
.L10651:
	mov	ip, #0
	mov	r3, #16
	mov	r2, #3
	mov	r1, #6
	str	ip, [fp, #128]
	mov	r0, fp
	str	ip, [sp]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldr	r5, [fp, #104]
	cmp	r5, #0
	beq	.L10674
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	tst	r3, #4
	moveq	r3, #335872
	mvneq	r6, #21
	streq	r3, [r5, #28]
	beq	.L10671
	ldrb	r8, [fp, #80]	@ zero_extendqisi2
	bics	r6, r8, #1
	movne	r3, #9216
	mvnne	r6, #21
	movtne	r3, 5
	strne	r3, [r5, #28]
	bne	.L10671
	and	r1, r3, #144
	mvn	r2, r8
	cmp	r1, #16
	movne	r2, #0
	andeq	r2, r2, #1
	cmp	r2, #0
	bne	.L11002
.L10677:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	bfi	r3, r8, #4, #1
	strb	r3, [r5, #24]
	b	.L10671
.L10647:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #22
	mov	r2, #2
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	b	.L10964
.L10656:
	mov	r1, #0
	mov	ip, #1
	movw	r3, #446
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r0, fp
	mov	r1, #10
	str	ip, [sp]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldr	r6, [fp, #104]
	mov	r1, #0
	ldr	ip, [fp, #78]	@ unaligned
	ldrd	r2, [r6, #16]
	rev	ip, ip
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L10669
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	bics	r0, r3, #16
	movne	r3, #9216
	mvnne	r5, #21
	movtne	r3, 5
	strne	r3, [r6, #28]
	bne	.L10669
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	orrs	r1, r3, r1, lsl #8
	beq	.L10741
	ldr	r2, [r6, #40]
	str	r0, [sp, #28]
	ldr	r0, [r6]
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	sub	lr, r2, #32
	lsl	r1, r1, r2
	cmp	r0, #0
	ubfx	r3, r3, #1, #1
	moveq	r3, #1
	str	r1, [sp, #44]
	ldr	r1, [sp, #28]
	cmp	r3, #0
	ldr	r3, [fp, #60]
	orr	r1, r1, ip, lsl lr
	str	r1, [sp, #28]
	rsb	r1, r2, #32
	ldr	lr, [sp, #28]
	str	r3, [sp, #68]
	lsl	r3, ip, r2
	str	r3, [sp, #24]
	orr	r1, lr, ip, lsr r1
	str	r1, [sp, #28]
	beq	.L11003
.L10709:
	mov	r8, #57344
	mov	r3, sp
	movt	r8, 65535
	and	r3, r3, r8
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L10968
	ldr	r3, [r6]
	mvn	r2, #0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #32]
	ldr	r0, [r3, #32]
	bl	invalidate_mapping_pages
	mov	r3, sp
	and	r3, r3, r8
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r5, [r3]
	ands	r5, r5, #1
	bne	.L10968
	str	r4, [sp, #40]
	ldr	r4, [sp, #44]
	mov	r3, sp
	str	r10, [sp, #44]
	and	r8, r8, r3
	str	fp, [sp, #64]
	ldrd	r10, [sp, #48]
.L10712:
	cmp	r4, #0
	beq	.L11004
	ldr	r1, [r6, #8]
	cmp	r4, #16384
	mov	r3, #0
	ldr	ip, [sp, #24]
	movcc	r2, r4
	movcs	r2, #16384
	ldr	r0, [r6, #12]
	subs	r10, r1, ip
	ldr	r1, [sp, #28]
	sbc	fp, r0, r1
	cmp	r2, r10
	sbcs	r1, r3, fp
	movlt	r10, r2
	movlt	fp, r3
	cmp	r10, #0
	str	r10, [sp, #48]
	beq	.L11005
	ldrd	r0, [sp, #24]
	add	r3, sp, #88
	mov	r2, r10
	strd	r0, [r3, #-8]!
	ldr	r1, [sp, #68]
	ldr	r0, [r6]
	ldr	r1, [r1]
	bl	vfs_read
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L10952
	cmp	r0, #0
	blt	.L10716
	ldr	r3, [sp, #48]
	cmp	r3, r0
	bls	.L10717
	ldr	r3, [r6, #44]
	rsb	r3, r3, #0
	and	r0, r0, r3
.L10717:
	cmp	r0, #0
	beq	.L10716
	ldrd	r2, [sp, #24]
	sub	r4, r4, r0
	adds	r2, r2, r0
	adc	r3, r3, r0, asr #31
	strd	r2, [sp, #24]
	b	.L10712
.L11012:
	.align	2
.L11011:
	.word	.LANCHOR1+4080
	.word	.LANCHOR3-1500
	.word	.LANCHOR1+4060
	.word	.LANCHOR3-1428
	.word	.LANCHOR3-1448
	.word	.LANCHOR3-1480
	.word	.LANCHOR3-1464
.L10637:
	mov	ip, #1
	mov	r6, #8
	mov	r3, #316
	mov	r2, #2
	str	r6, [fp, #128]
	mov	r1, #10
	mov	r0, fp
	str	ip, [sp]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldrb	r2, [fp, #84]	@ zero_extendqisi2
	ldr	r0, [fp, #78]	@ unaligned
	ldr	r3, [r4]
	ldr	r1, [fp, #104]
	cmp	r2, #1
	rev	r0, r0
	bhi	.L10682
	eor	r2, r2, #1
	cmp	r0, #0
	moveq	r2, #0
	andne	r2, r2, #1
	cmp	r2, #0
	bne	.L10682
	ldr	r2, [r1, #16]
	sub	r2, r2, #1
	lsr	r0, r2, #16
	ubfx	ip, r2, #8, #8
	strb	r2, [r3, #3]
	lsr	r2, r0, #8
	strb	r2, [r3]
	strb	r0, [r3, #1]
	strb	ip, [r3, #2]
	ldr	r2, [r1, #44]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #5]
	strb	r2, [r3, #7]
	lsr	r2, r1, #8
	strb	r0, [r3, #6]
	strb	r2, [r3, #4]
	b	.L10671
.L10654:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L10636
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L10636
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r8, #1
	movw	r3, #446
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r1, #10
	str	r8, [sp]
	mov	r0, fp
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldr	r6, [fp, #78]	@ unaligned
	ldr	ip, [fp, #104]
	ldr	r5, [r4]
	bics	r2, r3, #2
	and	lr, r3, #2
	movne	r3, #9216
	rev	r6, r6
	movtne	r3, 5
	str	r2, [sp, #40]
	mvnne	r6, #21
	strne	r3, [ip, #28]
	bne	.L10671
	ldrd	r2, [ip, #16]
	mov	r1, #0
	cmp	r6, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r6, #21
	movtge	r3, 5
	strge	r3, [ip, #28]
	bge	.L10671
	mov	r1, #8
	mov	r0, r5
	str	lr, [sp, #44]
	bl	__memzero
	ldr	lr, [sp, #44]
	strb	r8, [r5]
	cmp	lr, #0
	bne	.L11006
	lsr	r3, r6, #16
	ubfx	r1, r6, #8, #8
	strb	r3, [r5, #5]
	strb	r6, [r5, #7]
	mov	r6, #8
	lsr	r2, r3, r6
	strb	r1, [r5, #6]
	strb	r2, [r5, #4]
	b	.L10671
.L10641:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10679
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10679:
	mov	r0, #1
	mov	r3, #30
	mov	r2, #2
	mov	r1, #6
	b	.L10975
.L10993:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10724
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10724:
	mov	r0, #1
	movw	r3, #1022
	mov	r2, r0
	mov	r1, #12
	b	.L10978
.L10667:
	ldrb	r5, [fp, #80]	@ zero_extendqisi2
	add	r8, fp, #235
	movw	r0, #:lower16:.LC699
	ldr	r1, .L11011+16
	mov	r3, r8
	movt	r0, #:upper16:.LC699
	str	r5, [fp, #128]
	mov	r2, r5
	ldr	r6, [r4]
	bl	printk
	ldr	r1, [fp, #128]
	cmp	r1, #0
	bne	.L11007
.L10742:
	cmp	r5, #101
	mov	r0, r6
	movhi	r2, #101
	mov	r1, r8
	movhi	r5, r2
	movls	r2, r5
	bl	memcpy
	mov	r6, r5
	b	.L10671
.L10666:
	ldrb	ip, [fp, #83]	@ zero_extendqisi2
	mov	r1, #1
	mov	r3, #956
	ldrb	r0, [fp, #82]	@ zero_extendqisi2
	mov	r2, #2
	ldrb	lr, [fp, #84]	@ zero_extendqisi2
	str	r1, [sp]
	mov	r1, #12
	lsl	ip, ip, #8
	orr	ip, ip, r0, lsl #16
	mov	r0, fp
	orr	ip, ip, lr
	lsl	ip, ip, #9
	str	ip, [fp, #128]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldrb	r5, [fp, #83]	@ zero_extendqisi2
	ldrb	r1, [fp, #82]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #78]	@ unaligned
	lsl	r5, r5, #8
	orr	r5, r5, r1, lsl #16
	rev	ip, r2
	orrs	r5, r5, r3
	str	ip, [sp, #68]
	beq	.L10669
	ldr	r8, [fp, #104]
	mov	r1, #0
	ldrd	r2, [r8, #16]
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [r8, #28]
	bge	.L10669
	ldrb	r3, [fp, #85]	@ zero_extendqisi2
	and	r3, r3, #248
	cmp	r3, #248
	str	r3, [sp, #72]
	beq	.L11008
	ldr	r2, [sp, #68]
	ldr	r3, [fp, #128]
	lsr	r1, r2, #23
	lsl	r2, r2, #9
	cmp	r3, #0
	mov	r0, r3
	str	r2, [sp, #32]
	str	r1, [sp, #36]
	beq	.L10741
.L10729:
	mov	r3, sp
	str	r4, [sp, #40]
	ldrd	r4, [sp, #32]
	bic	r3, r3, #8128
	str	r7, [sp, #44]
	mov	r7, r0
	bic	r3, r3, #63
	str	r9, [sp, #64]
	str	r3, [sp, #76]
.L10728:
	ldr	r1, [r8, #8]
	cmp	r7, #16384
	mov	r3, #0
	ldr	r0, [r8, #12]
	movcc	r2, r7
	movcs	r2, #16384
	subs	r1, r1, r4
	str	r1, [sp, #56]
	sbc	r1, r0, r5
	str	r1, [sp, #60]
	ldrd	r0, [sp, #56]
	cmp	r2, r0
	sbcs	r1, r3, r1
	strdlt	r2, [sp, #56]
.L10730:
	ldrd	r0, [sp, #56]
	ubfx	r3, r4, #0, #12
	cmp	r3, #0
	mov	r9, r0
	beq	.L10731
	rsb	r3, r3, #4096
	cmp	r3, r0
	movcc	r9, r3
	movcs	r9, r0
.L10731:
	ldr	r6, [fp, #60]
	b	.L10732
.L10733:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10953
.L10732:
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L10733
	cmp	r9, #0
	beq	.L11009
	ldr	r3, [sp, #72]
	strd	r4, [sp, #80]
	mov	r2, r9
	ldr	r1, [r6]
	ldr	r0, [r8]
	cmp	r3, #248
	add	r3, sp, #80
	addeq	r1, r1, #16
	bl	vfs_read
	ldr	r3, [sp, #76]
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L10802
	cmp	r0, #0
	blt	.L10738
	cmp	r9, r0
	ldr	r3, [fp, #136]
	bls	.L10739
	bic	r0, r0, #508
	mov	r2, #1
	bic	r0, r0, #3
	sub	r3, r3, r0
	adds	r4, r4, r0
	adc	r5, r5, r0, asr #31
	cmp	r9, r0
	str	r3, [fp, #136]
	ldr	r3, [r6, #16]
	sub	r7, r7, r0
	str	r0, [r3, #4]
	str	r2, [r6, #4]
	bhi	.L11010
.L10740:
	cmp	r7, #0
	beq	.L10954
	mov	r1, r6
	mov	r0, fp
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L10955
	ldr	r3, [r6, #8]
	str	r3, [fp, #60]
	b	.L10728
.L10645:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10722
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10722:
	mov	r0, #1
	mov	r3, #30
	mov	r2, r0
	mov	r1, #6
	b	.L10978
.L10643:
	mov	r0, #1
	str	r2, [fp, #128]
	mov	r3, r2
	mov	r1, #6
	mov	r2, #3
	str	r0, [sp]
	mov	r0, fp
	bl	check_command.constprop.154
	mov	r5, r0
	b	.L10669
.L10664:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r1, #0
	movw	r3, #386
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	b	.L10981
.L10660:
	mov	r1, #0
	mov	r8, #1
	mov	r3, #444
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r0, fp
	mov	r1, #10
	str	r8, [sp]
	bl	check_command.constprop.154
	subs	r5, r0, #0
	bne	.L10669
	ldr	r5, [fp, #104]
	ldr	r0, [r5]
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	cmp	r0, #0
	ubfx	r3, r3, #1, #1
	moveq	r3, r8
	cmp	r3, #0
	bne	.L10671
	mov	r1, r8
	bl	vfs_fsync
	cmp	r0, #0
	beq	.L10671
	movw	r3, #3074
	mov	r6, #0
	movt	r3, 3
	str	r3, [r5, #28]
	b	.L10671
.L10759:
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	bne	.L10793
	b	.L10747
.L10612:
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	b	.L10613
.L11007:
	mov	r0, r6
	bl	__memzero
	b	.L10742
.L10953:
	strd	r4, [sp, #32]
	mov	r5, r0
	ldr	r4, [sp, #40]
	ldr	r7, [sp, #44]
	ldr	r9, [sp, #64]
	b	.L10669
.L10997:
	cmp	r2, #22
	beq	.L10649
	cmp	r2, #23
	bne	.L10636
	movw	r0, #:lower16:.LC696
	ldr	r1, .L11011+20
	movt	r0, #:upper16:.LC696
	bl	printk
	movw	r1, #:lower16:.LC697
	mov	r0, fp
	movt	r1, #:upper16:.LC697
	bl	send_message
	b	.L10671
.L10952:
	strd	r10, [sp, #48]
	ldr	r4, [sp, #40]
	ldr	r10, [sp, #44]
	ldr	fp, [sp, #64]
.L10968:
	mvn	r5, #3
	b	.L10669
.L10955:
	strd	r4, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	r7, [sp, #44]
	ldr	r9, [sp, #64]
.L10741:
	mvn	r5, #4
	b	.L10669
.L10716:
	mov	r2, #4352
	ldr	r3, [r6, #40]
	strd	r10, [sp, #48]
	movt	r2, 3
	ldr	r0, [sp, #28]
	mov	r5, #0
	ldr	r4, [sp, #40]
	str	r2, [r6, #28]
	ldr	r2, [sp, #24]
	subs	r1, r3, #32
	ldr	r10, [sp, #44]
	ldr	fp, [sp, #64]
	lsr	r2, r2, r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, lsl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L10669
.L11008:
	ldr	r3, [sp, #68]
	lsr	r2, r3, #21
	lsl	r3, r3, #11
	str	r3, [sp, #32]
	str	r2, [sp, #36]
	mov	r2, #2352
	mov	r0, r2
	b	.L10729
.L10995:
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	mov	r6, #9472
	mov	r3, #0
	movt	r6, 5
	orr	r2, r2, #16
	strb	r2, [fp, #144]
	b	.L10693
.L11002:
	ldr	r0, [r5]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L10677
	mov	r1, #1
	bl	vfs_fsync
	b	.L10677
.L11003:
	mov	r1, #1
	bl	vfs_fsync
	b	.L10709
.L11005:
	mov	r2, #8448
	ldr	r3, [r6, #40]
	strd	r10, [sp, #48]
	movt	r2, 5
	ldr	r0, [sp, #28]
	ldr	r4, [sp, #40]
	str	r2, [r6, #28]
	ldr	r2, [sp, #24]
	subs	r1, r3, #32
	ldr	r10, [sp, #44]
	ldr	fp, [sp, #64]
	lsr	r2, r2, r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, lsl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L10669
.L11004:
	strd	r10, [sp, #48]
	ldr	r4, [sp, #40]
	ldr	r10, [sp, #44]
	ldr	fp, [sp, #64]
	b	.L10669
.L10996:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L10773
	ldr	r3, [fp, #56]
	str	r6, [fp, #112]
	ldr	r2, [fp, #168]
	str	r3, [fp, #116]
	cmp	r2, #0
	bne	.L10982
	b	.L10773
.L11000:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r1, #36
	mov	r0, r8
	mov	r6, r1
	orr	r3, r3, #16
	strb	r3, [fp, #144]
	bl	__memzero
	mov	r2, #127
	mov	r3, #31
	strb	r2, [r8]
	strb	r3, [r8, #4]
	b	.L10671
.L10739:
	sub	r3, r3, r0
	mov	r2, #1
	adds	r4, r4, r0
	sub	r7, r7, r0
	str	r3, [fp, #136]
	ldr	r3, [r6, #16]
	adc	r5, r5, r0, asr #31
	str	r0, [r3, #4]
	str	r2, [r6, #4]
	b	.L10740
.L10738:
	ldr	r1, [r6, #16]
	strd	r4, [sp, #32]
	mov	r2, #1
	ldr	r4, [sp, #40]
	ldr	r7, [sp, #44]
	ldr	r9, [sp, #64]
	str	r3, [r1, #4]
	str	r2, [r6, #4]
.L10791:
	ldr	r2, [sp, #32]
	mov	r1, #4352
	ldr	r0, [sp, #36]
	movt	r1, 3
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	str	r1, [r8, #28]
	lsr	r2, r2, #9
	orr	r2, r2, r0, lsl #23
	orr	r3, r3, #64
	strb	r3, [r8, #24]
	str	r2, [r8, #32]
.L10735:
	ldr	r3, [sp, #72]
	cmp	r3, #248
	bne	.L10741
	ldr	r3, [sp, #68]
	movw	r1, #4500
	mov	r2, #75
	mvn	ip, #0
	mov	r8, #60
	mov	r5, #0
	add	r0, r3, #150
	ldr	r3, [r6]
	mov	r6, #1
	sdiv	r1, r0, r1
	sdiv	lr, r0, r2
	str	r1, [sp, #40]
	mov	r1, r3
	mls	r2, r2, lr, r0
	add	r0, r3, #2064
	strb	r5, [r1], #1
	str	ip, [r3, #1]	@ unaligned
	str	ip, [r1, #4]	@ unaligned
	strh	ip, [r1, #8]	@ unaligned
	sdiv	ip, lr, r8
	ldr	r1, [sp, #40]
	strb	r5, [r3, #11]
	mvn	r5, #4
	strb	r1, [r3, #12]
	mov	r1, #288
	strb	r2, [r3, #14]
	strb	r6, [r3, #15]
	mls	ip, r8, ip, lr
	strb	ip, [r3, #13]
	bl	__memzero
	b	.L10669
.L10802:
	strd	r4, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	r7, [sp, #44]
	ldr	r9, [sp, #64]
	b	.L10968
.L11009:
	mov	r0, r4
	mov	r1, r5
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	lsr	r2, r4, #9
	mov	ip, r9
	ldr	r4, [sp, #40]
	strd	r0, [sp, #32]
	mov	r1, #8448
	ldr	r0, [sp, #36]
	movt	r1, 5
	orr	r3, r3, #64
	ldr	r7, [sp, #44]
	ldr	r9, [sp, #64]
	strb	r3, [r8, #24]
	orr	r2, r2, r0, lsl #23
	str	r1, [r8, #28]
	str	r2, [r8, #32]
	ldr	r3, [r6, #16]
	mov	r2, #1
	str	ip, [r3, #4]
	str	r2, [r6, #4]
	b	.L10735
.L10649:
	movw	r0, #:lower16:.LC696
	ldr	r1, .L11011+24
	movt	r0, #:upper16:.LC696
	bl	printk
	movw	r1, #:lower16:.LC698
	mov	r0, fp
	movt	r1, #:upper16:.LC698
	bl	send_message
	b	.L10671
.L10998:
	ldr	r0, [sp, #16]
	mov	r1, #256
	cmp	r3, #0
	ldr	ip, [sp, #20]
	movt	r1, 20
	str	r0, [r8, #2]	@ unaligned
	mov	r0, #40960
	str	r1, [r8, #14]	@ unaligned
	mov	r1, #256
	str	r0, [r8, #6]	@ unaligned
	mov	r0, #65536
	str	ip, [r8, #26]	@ unaligned
	mov	ip, #161
	str	r0, [r8, #10]	@ unaligned
	str	ip, [r8, #18]	@ unaligned
	str	r1, [r8, #22]	@ unaligned
	strb	r5, [r8, #30]
	strb	r5, [r8, #31]
	strb	r5, [r8, #32]
	beq	.L10689
	strb	r5, [r8, #33]
	ldr	r3, [r2, #16]
	mov	r2, #75
	mov	ip, #60
	movw	r0, #4500
	strb	r6, [r8, #37]
	strb	lr, [r8, #46]
	mov	lr, #20
	add	r3, r3, #150
	strb	lr, [r8, #38]
	strb	r5, [r8, #39]
	sdiv	r1, r3, r2
	strb	r6, [r8, #40]
	sdiv	r0, r3, r0
	strb	r5, [r8, #41]
	strb	r5, [r8, #42]
	strb	r5, [r8, #43]
	strb	r5, [r8, #44]
	strb	r5, [r8, #45]
	strb	r5, [r8, #47]
	sdiv	lr, r1, ip
	mls	r3, r2, r1, r3
	strb	r0, [r8, #34]
	strb	r3, [r8, #36]
	mls	r1, ip, lr, r1
	strb	r1, [r8, #35]
.L10690:
	mov	r3, #46
	mov	r2, #0
	mov	r5, #48
	strb	r2, [r8]
	strb	r3, [r8, #1]
	b	.L10669
.L10999:
	mov	r0, #131072
	mvn	r3, #85
	mov	ip, #60
	movw	lr, #4500
	str	r0, [r8, #8]	@ unaligned
	mov	r6, #20
	strb	r1, [r8, #13]
	mov	r1, #75
	strb	r3, [r8, #14]
	ldr	r3, [r2, #16]
	strb	r5, [r8, #16]
	lsr	r3, r3, #2
	add	r3, r3, #150
	udiv	r0, r3, r1
	udiv	lr, r3, lr
	udiv	r2, r0, ip
	mls	r3, r1, r0, r3
	strb	lr, [r8, #17]
	strb	r3, [r8, #19]
	mls	r2, ip, r2, r0
	strb	r2, [r8, #18]
	b	.L10671
.L11006:
	lsr	r3, r6, #2
	mov	r2, #75
	ldr	r1, [sp, #40]
	mov	lr, #60
	add	r3, r3, #150
	movw	ip, #4500
	mov	r6, #8
	udiv	r0, r3, r2
	strb	r1, [r5, #4]
	udiv	ip, r3, ip
	udiv	r1, r0, lr
	mls	r3, r2, r0, r3
	strb	ip, [r5, #5]
	strb	r3, [r5, #7]
	mls	r1, lr, r1, r0
	strb	r1, [r5, #6]
	b	.L10671
.L10689:
	ldr	r2, [r2, #16]
	str	r3, [r8, #41]	@ unaligned
	strb	r3, [r8, #45]
	strb	r3, [r8, #46]
	lsr	r1, r2, #16
	strb	r3, [r8, #47]
	lsr	r3, r1, #8
	str	r9, [r8, #37]	@ unaligned
	strb	r2, [r8, #36]
	ubfx	r2, r2, #8, #8
	strb	r3, [r8, #33]
	strb	r1, [r8, #34]
	strb	r2, [r8, #35]
	b	.L10690
.L10682:
	mov	r3, #9216
	mvn	r6, #21
	movt	r3, 5
	str	r3, [r1, #28]
	b	.L10671
.L10695:
	mov	r3, #9216
	mvn	r6, #21
	movt	r3, 5
	str	r3, [r8, #28]
	b	.L10671
.L10954:
	strd	r4, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	r7, [sp, #44]
	ldr	r9, [sp, #64]
	b	.L10735
.L11010:
	strd	r4, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	r7, [sp, #44]
	ldr	r9, [sp, #64]
	b	.L10791
	.fnend
	.size	fsg_main_thread, .-fsg_main_thread
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_write, %function
ffs_epfile_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r9, [r0, #124]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r9, #36]
	ldr	r6, [r9, #40]
	cmp	r4, #0
	bne	.L11034
	mov	r7, r2
	ldr	r2, [r6, #96]
	mov	r5, r0
	str	r1, [sp, #4]
	cmp	r2, #2
	bne	.L11015
	ldr	r8, [r9, #44]
	cmp	r8, #0
	beq	.L11036
.L11017:
	ldrb	fp, [r9, #57]	@ zero_extendqisi2
	cmp	fp, #0
	bne	.L11020
	ldrb	r2, [r9, #58]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L11049
.L11021:
	ldr	r2, [r5, #32]
	mov	r0, r9
	tst	r2, #2048
	beq	.L11022
	bl	mutex_trylock
	cmp	r0, #0
	beq	.L11041
.L11025:
	ldr	r0, [r9, #40]
	add	r0, r0, #28
	bl	_raw_spin_lock_irq
	ldr	r2, [r9, #44]
	cmp	r2, r8
	bne	.L11050
	cmp	fp, #0
	beq	.L11051
	ldr	r5, [r8, #4]
	movw	r0, #:lower16:ffs_epfile_io_complete
	mov	ip, #0
	movt	r0, #:upper16:ffs_epfile_io_complete
	mov	r2, #32
	stm	r5, {r4, r7}
	mov	r1, r5
	str	r0, [r5, #28]
	str	ip, [r6, #56]!
	str	r6, [r5, #32]
	ldr	r0, [r8]
	ldr	ip, [r0, #8]
	ldr	r7, [ip, #16]
	blx	r7
	mov	r7, r0
	ldr	r0, [r9, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	blt	.L11042
	mov	r0, r6
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r0, [r9, #40]
	add	r0, r0, #28
	bne	.L11052
	bl	_raw_spin_lock_irq
	ldr	r0, [r9, #40]
	ldr	r2, [r9, #44]
	add	r0, r0, #28
	cmp	r8, r2
	ldreq	r10, [r8, #24]
	mvnne	r10, #18
	bl	_raw_spin_unlock_irq
.L11028:
	mov	r0, r9
	bl	mutex_unlock
.L11019:
	mov	r0, r4
	bl	kfree
.L11013:
	mov	r0, r10
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11020:
	cmp	r4, #0
	bne	.L11021
	movw	r1, #32976
	mov	r0, r7
	bl	__kmalloc
	subs	r4, r0, #0
	beq	.L11039
	mov	r2, r7
	ldr	r1, [sp, #4]
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L11021
	mvn	r10, #13
	b	.L11019
.L11022:
	bl	mutex_lock_interruptible
	subs	r10, r0, #0
	bne	.L11019
	b	.L11025
.L11036:
	mov	r4, r8
.L11016:
	ldr	r3, [r5, #32]
	tst	r3, #2048
	mvnne	r10, #10
	mvneq	r10, #18
	b	.L11019
.L11050:
	ldr	r0, [r9, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	mov	r0, r9
	bl	mutex_unlock
	ldr	r2, [r9, #40]
	ldr	r2, [r2, #96]
	cmp	r2, #2
	beq	.L11018
.L11015:
	movw	r0, #:lower16:.LC9
	movw	r1, #785
	movt	r0, #:upper16:.LC9
	mvn	r10, #18
	bl	warn_slowpath_null
	b	.L11019
.L11018:
	ldr	r8, [r9, #44]
	cmp	r8, #0
	bne	.L11017
	b	.L11016
.L11039:
	mvn	r10, #11
	b	.L11013
.L11042:
	mvn	r10, #4
	b	.L11028
.L11051:
	ldr	r0, [r8]
	cmp	r0, #0
	beq	.L11053
	ldr	r2, [r0, #8]
	mov	r1, #1
	ldr	r2, [r2, #24]
	blx	r2
.L11033:
	ldr	r0, [r9, #40]
	mvn	r10, #73
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	b	.L11028
.L11052:
	bl	_raw_spin_lock_irq
	ldr	r2, [r9, #44]
	cmp	r8, r2
	bne	.L11030
	ldr	r0, [r8]
	mov	r1, r5
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
.L11030:
	ldr	r0, [r9, #40]
	mvn	r10, #3
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	b	.L11028
.L11041:
	mvn	r10, #10
	b	.L11019
.L11034:
	mvn	r10, #18
	b	.L11013
.L11049:
	mvn	r10, #21
	b	.L11019
.L11053:
	movw	r0, #:lower16:.LC9
	mov	r1, #860
	movt	r0, #:upper16:.LC9
	bl	warn_slowpath_null
	b	.L11033
	.fnend
	.size	ffs_epfile_write, .-ffs_epfile_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_ctrlrequest, %function
accessory_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r0, [r2]	@ zero_extendqisi2
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldr	r4, [r3, #2520]
	cmp	r0, #64
	beq	.L11113
	cmp	r1, #51
	cmpeq	r0, #192
	bne	.L11097
	ldr	r3, [r5, #4]
	mov	r6, #2
	mov	r1, #256
	add	r0, r4, #101
	ldr	r3, [r3]
	strh	r6, [r3]	@ movhi
	bl	__memzero
	add	r0, r4, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	add	r0, r4, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	mov	r2, #0
	mov	r3, r6
	str	r2, [r4, #1644]
	str	r2, [r4, #1648]
.L11057:
	ldr	r1, [r5, #4]
	mov	r2, #32
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfc	r0, #1, #1
	strb	r0, [r1, #26]
	ldr	r1, [r5, #4]
	str	r3, [r1, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L11114
.L11054:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11113:
	cmp	r1, #53
	beq	.L11115
	cmp	r1, #52
	ldrh	r7, [r2, #4]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	beq	.L11116
	cmp	r1, #58
	cmpeq	r7, #0
	ldrh	r8, [r2, #2]	@ unaligned
	moveq	r3, #1
	movne	r3, #0
	cmp	r6, #0
	movne	r3, #0
	cmp	r3, #0
	movne	r3, #0
	strne	r8, [r4, #1648]
	bne	.L11057
	cmp	r1, #54
	beq	.L11117
	cmp	r1, #55
	beq	.L11118
	cmp	r1, #56
	beq	.L11119
	cmp	r1, #57
	bne	.L11097
	add	r9, r4, #88
	add	r4, r4, #1760
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #8]
	add	r4, r4, #8
	cmp	r4, r7
	bne	.L11094
	b	.L11091
.L11120:
	ldr	r7, [r7]
	cmp	r4, r7
	beq	.L11091
.L11094:
	ldr	r3, [r7, #16]
	cmp	r8, r3
	bne	.L11120
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L11112
	ldr	r1, [r5, #4]
	movw	r2, #:lower16:acc_complete_send_hid_event
	mov	r3, r6
	movt	r2, #:upper16:acc_complete_send_hid_event
	str	r7, [r1, #32]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L11057
.L11114:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC701
	movt	r1, #:upper16:.LC701
	ldr	r2, .L11127
	add	r0, r0, #32
	bl	dev_err
	b	.L11054
.L11116:
	str	r7, [r4, #1640]
	ldr	r1, [r5]
	movw	r2, #:lower16:acc_complete_set_string
	movt	r2, #:upper16:acc_complete_set_string
	mov	r3, r6
	ldr	r1, [r1, #4]
	str	r4, [r1]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L11057
.L11097:
.L11062:
	mvn	r4, #94
	b	.L11054
.L11115:
	mov	r3, #1
	mov	r0, #200
	str	r3, [r4, #1644]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	add	r2, r4, #1696
	movt	r1, #:upper16:system_wq
	mov	r3, r0
	add	r2, r2, #4
	mov	r0, #4
	ldr	r1, [r1]
	bl	queue_delayed_work_on
	mov	r3, #0
	b	.L11057
.L11091:
	mov	r1, r0
	mov	r0, r9
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L11054
.L11117:
	cmp	r7, #0
	beq	.L11112
	add	r6, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1768]
	add	r1, r4, #1760
	mov	r9, r0
	add	r1, r1, #8
	cmp	r1, r3
	bne	.L11066
	b	.L11063
.L11121:
	ldr	r3, [r3]
	cmp	r1, r3
	beq	.L11063
.L11066:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L11121
	cmp	r3, #0
	beq	.L11063
.L11067:
	ldrd	r0, [r3]
	add	r2, r4, #1776
	add	r2, r2, #8
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r1, [r4, #1784]
	str	r3, [r1, #4]
	stm	r3, {r1, r2}
	str	r3, [r4, #1784]
.L11068:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L11095
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L11073
.L11072:
	movw	r1, #32800
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r10, #20]
	beq	.L11122
	mov	r3, r4
	str	r4, [r10, #12]
	mov	r1, r9
	str	r8, [r10, #16]
	mov	r0, r6
	str	r7, [r10, #24]
	ldr	r2, [r3, #1776]!
	str	r10, [r2, #4]
	strd	r2, [r10]
	str	r10, [r4, #1776]
.L11111:
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r4, #1744
	movt	r3, #:upper16:system_wq
	add	r2, r2, #8
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
	mov	r3, #0
	b	.L11057
.L11118:
	add	r6, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1768]
	add	ip, r4, #1760
	mov	r1, r0
	add	ip, ip, #8
	cmp	ip, r3
	bne	.L11079
	b	.L11076
.L11123:
	ldr	r3, [r3]
	cmp	ip, r3
	beq	.L11076
.L11079:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L11123
	cmp	r3, #0
	beq	.L11076
.L11080:
	ldr	lr, [r3]
	add	r2, r4, #1776
	mov	r0, r6
	ldr	ip, [r3, #4]
	add	r2, r2, #8
	str	ip, [lr, #4]
	str	lr, [ip]
	ldr	ip, [r4, #1784]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #1784]
	b	.L11111
.L11119:
	add	r10, r4, #88
	add	r4, r4, #1776
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4]
	mov	r1, r0
	cmp	r4, r9
	bne	.L11089
	b	.L11086
.L11124:
	ldr	r9, [r9]
	cmp	r4, r9
	beq	.L11086
.L11089:
	ldr	r3, [r9, #16]
	cmp	r8, r3
	bne	.L11124
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L11112
	ldr	r3, [r9, #28]
	cmp	r7, r3
	bne	.L11112
	ldr	r3, [r9, #24]
	add	r7, r6, r7
	cmp	r7, r3
	bgt	.L11112
	ldr	r1, [r5, #4]
	movw	r2, #:lower16:acc_complete_set_hid_report_desc
	mov	r3, r6
	movt	r2, #:upper16:acc_complete_set_hid_report_desc
	str	r9, [r1, #32]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L11057
.L11095:
	mov	r10, #16
	b	.L11072
.L11086:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L11112:
	mvn	r4, #21
	b	.L11054
.L11063:
	ldr	r3, [r4, #1776]
	add	r1, r4, #1776
	cmp	r1, r3
	bne	.L11071
	b	.L11068
.L11125:
	ldr	r3, [r3]
	cmp	r1, r3
	beq	.L11068
.L11071:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L11125
	cmp	r3, #0
	beq	.L11068
	b	.L11067
.L11076:
	ldr	r3, [r4, #1776]
	add	ip, r4, #1776
	cmp	ip, r3
	bne	.L11084
	b	.L11081
.L11126:
	ldr	r3, [r3]
	cmp	ip, r3
	beq	.L11081
.L11084:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L11126
	cmp	r3, #0
	bne	.L11080
.L11081:
	mov	r0, r6
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L11054
.L11122:
	mov	r0, r10
	bl	kfree
.L11073:
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #11
	b	.L11054
.L11128:
	.align	2
.L11127:
	.word	.LANCHOR3-1412
	.fnend
	.size	accessory_function_ctrlrequest, .-accessory_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_send_cpkt_response, %function
frmnet_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L11160
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r2
	movt	r3, #:upper16:kmalloc_caches
	ldr	r4, [r3, #24]
	cmp	r4, #0
	beq	.L11132
	mov	r0, r4
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L11134
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L11144
	cmn	r4, #4096
	str	r5, [r4, #4]
	bhi	.L11134
.L11136:
	mov	r1, r7
	mov	r2, r5
	bl	memcpy
	str	r5, [r4, #4]
	ldr	r3, [r6, #120]
	cmp	r3, #0
	beq	.L11137
	ldr	r3, [r6, #124]
	cmp	r3, #0
	bne	.L11138
.L11137:
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	mov	r0, #0
.L11129:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11132:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4, #16]
	strne	r5, [r4, #20]
	movne	r4, #16
	bne	.L11136
	mov	r4, #16
.L11144:
	mov	r0, r4
	bl	kfree
.L11134:
	movw	r0, #:lower16:.LC465
	ldr	r1, .L11161
	movt	r0, #:upper16:.LC465
	bl	printk
	mvn	r0, #11
	b	.L11129
.L11138:
	add	r5, r6, #132
	add	r7, r6, #144
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #148]
	add	r2, r4, #8
	mov	r1, r0
	mov	r0, r5
	str	r2, [r6, #148]
	str	r7, [r4, #8]
	str	r3, [r4, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldr	r8, [r6, #140]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #120]
	cmp	r8, #0
	moveq	r4, #1
	clz	r3, r3
	lsr	r3, r3, #5
	movne	r4, r3
	cmp	r4, #0
	bne	.L11139
	ldr	r3, [r8]
	cmp	r3, #0
	beq	.L11139
	ldr	r3, [r6, #152]
	add	r3, r3, #1
	cmp	r3, #1
	str	r3, [r6, #152]
	beq	.L11141
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L11129
.L11139:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L11129
.L11141:
	ldr	r2, [r8]
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	strb	ip, [r2]
	strb	r3, [r2, #1]
	strb	r4, [r2, #2]
	strb	r4, [r2, #3]
	ldrh	r3, [r6, #112]
	strh	r3, [r2, #4]	@ unaligned
	strb	r4, [r2, #6]
	strb	r4, [r2, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r6, #136]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L11129
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #144]
	mov	r8, r0
	cmp	r7, r3
	beq	.L11142
	ldr	r4, [r6, #152]
	cmp	r4, #0
	beq	.L11142
	sub	r0, r4, #1
	mov	ip, #256
	mov	r4, r3
	str	r0, [r6, #152]
	ldm	r3, {r1, r2}
	mov	r0, #512
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
.L11142:
	mov	r0, r5
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L11129
.L11160:
	movw	r0, #:lower16:.LC702
	mov	r3, r1
	ldr	r1, .L11161
	mov	r2, r6
	movt	r0, #:upper16:.LC702
	bl	printk
	mvn	r0, #18
	b	.L11129
.L11162:
	.align	2
.L11161:
	.word	.LANCHOR3-1396
	.fnend
	.size	frmnet_send_cpkt_response, .-frmnet_send_cpkt_response
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_qti_send_cpkt_tomodem, %function
grmnet_ctrl_qti_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	cmp	r2, #2048
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #1032]
	bhi	.L11182
	movw	r3, #:lower16:kmalloc_caches
	mov	r7, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r5, [r3, #24]
	cmp	r5, #0
	beq	.L11166
	mov	r0, r5
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L11168
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5]
	beq	.L11172
	cmn	r5, #4096
	str	r6, [r5, #4]
	bhi	.L11168
.L11170:
	mov	r1, r7
	mov	r2, r6
	add	r7, r4, #52
	bl	memcpy
	str	r6, [r5, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldrb	r6, [r4, #4]	@ zero_extendqisi2
	mov	r8, r0
	cmp	r6, #0
	beq	.L11183
	ldr	r3, [r4, #48]
	add	r2, r5, #8
	add	ip, r4, #44
	mov	r1, r0
	mov	r0, r7
	str	r2, [r4, #48]
	str	ip, [r5, #8]
	str	r3, [r5, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #32
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L11163:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11166:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #16]
	strne	r6, [r5, #20]
	movne	r5, #16
	bne	.L11170
	mov	r5, #16
.L11172:
	mov	r0, r5
	bl	kfree
.L11168:
	movw	r0, #:lower16:.LC465
	ldr	r1, .L11184
	movt	r0, #:upper16:.LC465
	bl	printk
	mvn	r0, #11
	b	.L11163
.L11182:
	movw	r0, #:lower16:.LC703
	mov	r1, r2
	movt	r0, #:upper16:.LC703
	mov	r2, #2048
	bl	printk
	mvn	r0, #21
	b	.L11163
.L11183:
	movw	r0, #:lower16:.LC704
	mov	r1, r4
	movt	r0, #:upper16:.LC704
	bl	printk
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5]
	bl	kfree
	mov	r0, r5
	bl	kfree
	mov	r0, r6
	b	.L11163
.L11185:
	.align	2
.L11184:
	.word	.LANCHOR3-1368
	.fnend
	.size	grmnet_ctrl_qti_send_cpkt_tomodem, .-grmnet_ctrl_qti_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_capture_work, %function
f_audio_capture_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r4, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #24]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r5, #1340]
	cmp	r3, #0
	beq	.L11195
	mov	r0, r3
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L11197
.L11187:
	mov	r0, r7
	movw	r1, #32800
	bl	__kmalloc
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r6]
	beq	.L11198
.L11188:
	movw	r7, #:lower16:.LANCHOR1
	ldr	r9, [r4, #-68]
	movt	r7, #:upper16:.LANCHOR1
	ldr	r10, [r5, #1340]
	ldrb	r2, [r7, #2240]	@ zero_extendqisi2
	ldr	fp, [r9, #168]
	cmp	r2, #0
	beq	.L11199
.L11189:
	lsl	r3, r10, #3
	mov	r5, #57344
	movt	r5, 65535
	movw	r10, #:lower16:.LC706
	str	r3, [sp, #12]
	mov	r3, sp
	movt	r10, #:upper16:.LC706
	and	r3, r3, r5
	str	r3, [sp, #8]
	mov	r3, r10
	mov	r10, r8
	mov	r8, fp
	mov	fp, r3
.L11194:
	ldr	ip, [r8, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r9
	ldr	ip, [ip]
	cmp	ip, #7
	mvn	r2, r2, lsr ip
	bhi	.L11192
	ands	r2, r2, #1
	bne	.L11192
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L11200
.L11192:
	ldr	r3, [sp, #8]
	mov	r2, #0
	mov	r1, r10
	ldr	r7, [r8, #80]
	ldr	r0, [r3, #8]
	str	r2, [r3, #8]
	ldr	r3, [sp, #12]
	str	r0, [sp, #4]
	mov	r0, r9
	udiv	r7, r3, r7
	mov	r2, r7
	bl	snd_pcm_lib_read
	cmp	r7, r0
	bne	.L11201
	mov	r3, sp
	and	r5, r5, r3
	ldr	r3, [sp, #4]
	str	r3, [r5, #8]
.L11191:
	sub	r5, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #20]
	add	r2, r6, #8
	add	ip, r4, #16
	mov	r1, r0
	mov	r0, r5
	str	r2, [r4, #20]
	str	ip, [r6, #8]
	str	r3, [r6, #12]
	str	r2, [r3]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L11195:
	mov	r6, #16
	b	.L11187
.L11199:
	bl	gaudio_open_streams
	subs	r2, r0, #0
	moveq	r2, #1
	strbeq	r2, [r7, #2240]
	beq	.L11189
	movw	r0, #:lower16:.LC705
	ldr	r1, .L11202
	movt	r0, #:upper16:.LC705
	bl	printk
	b	.L11191
.L11201:
	mov	r2, r0
	ldr	r1, .L11202
	mov	r0, fp
	bl	printk
	ldrd	r2, [sp, #4]
	str	r2, [r3, #8]
	b	.L11194
.L11200:
	ldr	r5, .L11202+4
	mov	r2, r0
	movw	r0, #:lower16:.LC432
	movt	r0, #:upper16:.LC432
	sub	r1, r5, #4
	bl	printk
	movw	r0, #:lower16:.LC475
	add	r1, r5, #12
	movt	r0, #:upper16:.LC475
	bl	printk
	b	.L11191
.L11198:
	movw	r0, #:lower16:.LC27
	ldr	r1, .L11202+8
	movt	r0, #:upper16:.LC27
	bl	printk
	mov	r0, r6
	mvn	r6, #11
	bl	kfree
	mvn	r3, #0
	ldr	r8, [r3, #-11]
	b	.L11188
.L11197:
	movw	r0, #:lower16:.LC26
	ldr	r1, .L11202+8
	mvn	r6, #11
	movt	r0, #:upper16:.LC26
	bl	printk
	mvn	r3, #0
	ldr	r8, [r3, #-11]
	b	.L11188
.L11203:
	.align	2
.L11202:
	.word	.LANCHOR3-1332
	.word	.LANCHOR3-1328
	.word	.LANCHOR2+264
	.fnend
	.size	f_audio_capture_work, .-f_audio_capture_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_read, %function
ccid_bulk_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r2
	movw	r2, #522
	cmp	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #124]
	bhi	.L11233
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11207
	mov	r3, sp
	mov	r9, r1
	bic	r7, r3, #8128
	add	r5, r4, #92
	bic	r7, r7, #63
	b	.L11208
.L11210:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11221
.L11237:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L11234
	ldr	r2, [r6, #48]
	cmp	r2, #0
	bne	.L11215
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L11208:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L11220
	ldr	r6, [r4, #184]
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r8, [r6, #4]
	str	r3, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #108]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L11235
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L11210
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11210
	ldr	r2, [r4, #96]
	cmp	r2, #0
	beq	.L11210
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, r4, #160
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	b	.L11213
.L11236:
	bl	schedule
.L11213:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L11211
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11211
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L11211
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L11236
	add	r1, sp, #4
	mov	r0, r10
	bl	finish_wait
	ldr	r0, [r4, #108]
	mov	r3, #1
	mov	r8, #65024
	mov	r1, r6
	movt	r8, 65535
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L11204:
	mov	r0, r8
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11211:
	add	r1, sp, #4
	mov	r0, r10
	bl	finish_wait
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L11237
.L11221:
	mvn	r8, #4
	b	.L11204
.L11220:
	mvn	r8, #18
	b	.L11204
.L11234:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r8, #18
	b	.L11204
.L11215:
	mov	r3, #1
	cmp	r2, r8
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #156]
	movcc	r7, r2
	movcs	r7, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r7; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L11238
.L11216:
	cmp	r7, #0
	mov	r0, r5
	mvnne	r8, #13
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r2, #0
	mov	r6, r0
	str	r2, [r4, #156]
	cmp	r3, r2
	beq	.L11239
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L11204
.L11238:
	mov	r2, r7
	mov	r0, r9
	ldr	r1, [r6]
	bl	__copy_to_user
	mov	r7, r0
	b	.L11216
.L11239:
	ldr	r7, [r4, #184]
	cmp	r7, r2
	beq	.L11219
	ldr	r4, [r4, #108]
	ldr	r0, [r7]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L11219:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r8, #18
	b	.L11204
.L11235:
	movw	r0, #:lower16:.LC708
	ldr	r1, .L11240
	mvn	r8, #4
	movt	r0, #:upper16:.LC708
	bl	printk
	mov	r3, #1
	str	r3, [r4, #148]
	b	.L11204
.L11207:
	movw	r0, #:lower16:.LC707
	ldr	r1, .L11240
	mvn	r8, #4
	movt	r0, #:upper16:.LC707
	bl	printk
	b	.L11204
.L11233:
	movw	r0, #:lower16:.LC659
	mov	r3, r8
	ldr	r1, .L11240
	movt	r0, #:upper16:.LC659
	mvn	r8, #11
	bl	printk
	b	.L11204
.L11241:
	.align	2
.L11240:
	.word	.LANCHOR3-1292
	.fnend
	.size	ccid_bulk_read, .-ccid_bulk_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_command_complete, %function
rndis_qc_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r1]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [r1, #32]
	cmp	r4, #0
	ldrb	r3, [r8, #144]	@ zero_extendqisi2
	beq	.L11257
	cmp	r3, #0
	ldr	r2, [r4]	@ unaligned
	ldr	r3, [r4, #4]	@ unaligned
	bne	.L11331
	sub	r1, r2, #2
	cmp	r1, #6
	ldrls	pc, [pc, r1, asl #2]
	b	.L11246
.L11248:
	.word	.L11247
	.word	.L11249
	.word	.L11250
	.word	.L11251
	.word	.L11252
	.word	.L11246
	.word	.L11253
.L11252:
	movw	r6, #:lower16:.LANCHOR1
	ldr	r2, .L11339
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3688]
	add	fp, r2, #52
	ldr	r4, [r3]
.L11254:
	cmp	r3, fp
	beq	.L11281
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L11279
	b	.L11333
.L11282:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L11278
	mov	r4, r3
.L11279:
	cmp	r4, fp
	ldr	r3, [r4]
	bne	.L11282
.L11281:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L11334
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L11257
	add	r3, r0, #20
.L11276:
	str	r3, [r0, #8]
	ldr	r3, .L11339
	mov	r1, #16
	mov	r2, #0
	mov	lr, #-2147483642
	str	r1, [r0, #12]
	mov	ip, #1
	str	r2, [r0, #16]
	add	r9, r3, #52
	ldr	r3, [r6, #3692]
	str	r0, [r6, #3692]
	str	r9, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	stmib	r3, {r1, r2, ip}
.L11332:
	ldr	r3, [r6, #3680]
	ldr	r0, [r6, #3684]
	blx	r3
.L11258:
	ldr	r3, [r7]
	ldr	r2, [r3]
	cmp	r2, #2
	bne	.L11242
	ldr	r3, [r3, #20]
	str	r3, [r8, #136]
.L11242:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11247:
	movw	r6, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3664]
	str	r2, [r6, #3640]
	cmp	r3, #0
	beq	.L11331
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L11285
	mov	r2, #72
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L11257
	add	r3, r0, #20
.L11256:
	mov	r2, #0
	mov	ip, #52
	str	r3, [r0, #8]
	ldr	r1, .L11339+4
	mov	lr, #-2147483646
	str	ip, [r0, #12]
	str	r2, [r0, #16]
	ldr	r3, [r6, #3692]
	str	r0, [r6, #3692]
	stm	r0, {r1, r3}
	mov	r1, #1
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	ldr	r0, [r4, #8]
	str	r0, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r3, #16]
	str	r2, [r3, #20]
	str	r1, [r3, #24]
	str	r2, [r3, #28]
	ldrb	r1, [r6, #3672]	@ zero_extendqisi2
	ldr	r0, [r6, #3664]
	str	r1, [r3, #32]
	ldrb	r1, [r6, #3672]	@ zero_extendqisi2
	ldr	r0, [r0, #316]
	str	r2, [r3, #44]
	str	r2, [r3, #48]
	add	r2, r0, #80
	mul	r2, r1, r2
	str	r2, [r3, #36]
	ldrb	r2, [r6, #3673]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r3, [r6, #3680]
	ldr	r0, [r6, #3684]
	blx	r3
	b	.L11258
.L11249:
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, #0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3664]
	str	r5, [r4, #3640]
	cmp	r0, r5
	beq	.L11258
	bl	netif_carrier_off
	ldr	r3, [r4, #3664]
	ldr	r1, [r3, #576]
	cmp	r1, r5
	beq	.L11335
	add	r1, r1, #80
	mov	r0, r5
	bl	_set_bit
	b	.L11258
.L11250:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3664]
	cmp	r3, #0
	beq	.L11331
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L11286
	mov	r2, #156
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L11257
	add	r2, r0, #20
.L11260:
	mov	r3, #136
	mov	r9, #0
	ldr	r1, .L11339+4
	strd	r2, [r0, #8]
	mov	r2, #-2147483644
	str	r9, [r0, #16]
	ldr	r3, [r6, #3692]
	str	r0, [r6, #3692]
	stm	r0, {r1, r3}
	mov	r1, r0
	str	r0, [r3]
	ldr	r5, [r0, #8]
	str	r2, [r5]
	ldr	r3, [r4, #8]
	str	r3, [r5, #8]
	ldr	r0, [r4, #12]
	bl	gen_ndis_query_resp.constprop.128
	cmp	r0, #0
	beq	.L11261
	mov	r0, #187
	mov	r3, #24
	movt	r0, 49152
	str	r3, [r5, #4]
	str	r9, [r5, #16]
	str	r9, [r5, #20]
.L11261:
	str	r0, [r5, #12]
	ldr	r3, [r6, #3680]
	ldr	r0, [r6, #3684]
	blx	r3
	b	.L11258
.L11333:
	mov	r4, r3
.L11278:
	ldr	r9, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r9, #0
	beq	.L11281
	ldr	r3, [r6, #3688]
	cmp	r3, fp
	ldr	r4, [r3]
	moveq	r3, fp
	beq	.L11254
	mov	r5, r4
	mov	r10, #512
	b	.L11274
.L11290:
	mov	r5, r4
.L11274:
	cmp	r3, #0
	beq	.L11273
	ldr	r0, [r3, #8]
	cmp	r9, r0
	beq	.L11336
.L11273:
	cmp	r5, fp
	mov	r3, r5
	ldr	r4, [r4]
	bne	.L11290
	ldr	r3, [r6, #3688]
	ldr	r4, [r3]
	b	.L11254
.L11336:
	ldr	ip, [r3, #4]
	mov	r2, #256
	mov	r0, r3
	str	ip, [r4, #4]
	str	r4, [ip]
	stm	r3, {r2, r10}
	bl	kfree
	b	.L11273
.L11334:
	mov	r3, #36
	mov	r0, #16
	b	.L11276
.L11251:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L11288
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L11257
	add	r3, r0, #20
.L11262:
	mov	r2, #16
	mov	r9, #0
	str	r3, [r0, #8]
	movw	r6, #:lower16:.LANCHOR1
	ldr	ip, .L11339+4
	mov	r1, #-2147483643
	movt	r6, #:upper16:.LANCHOR1
	str	r2, [r0, #12]
	str	r9, [r0, #16]
	ldr	r3, [r6, #3692]
	str	r0, [r6, #3692]
	str	ip, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r5, [r0, #8]
	ldr	r3, [r4, #16]
	ldr	ip, [r4, #20]
	stm	r5, {r1, r2}
	ldr	r2, [r4, #8]
	str	r2, [r5, #8]
	ldr	r1, [r0, #8]
	ldr	r2, [r4, #12]
	cmp	r1, r9
	beq	.L11263
	movw	r1, #270
	movt	r1, 1
	cmp	r2, r1
	beq	.L11265
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	bne	.L11337
.L11266:
	mov	r3, #0
	str	r3, [r5, #12]
	b	.L11332
.L11253:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L11294
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L11257
	add	r3, r0, #20
.L11283:
	str	r3, [r0, #8]
	mov	ip, #16
	mov	r1, #0
	movw	r3, #:lower16:.LANCHOR1
	ldr	r5, .L11339+4
	mov	lr, #-2147483640
	movt	r3, #:upper16:.LANCHOR1
	str	ip, [r0, #12]
	str	r1, [r0, #16]
	ldr	r2, [r3, #3692]
	str	r0, [r3, #3692]
	str	r5, [r0]
	str	r2, [r0, #4]
	str	r0, [r2]
	ldr	r2, [r0, #8]
	str	lr, [r2]
	str	ip, [r2, #4]
	ldr	r0, [r4, #8]
	strd	r0, [r2, #8]
	ldr	r2, [r3, #3680]
	ldr	r0, [r3, #3684]
	blx	r2
	b	.L11258
.L11285:
	mov	r3, #36
	mov	r0, #16
	b	.L11256
.L11286:
	mov	r2, #36
	mov	r0, #16
	b	.L11260
.L11337:
	movw	r0, #:lower16:.LC709
	ldr	r1, .L11339+8
	movt	r0, #:upper16:.LC709
	bl	printk
.L11263:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r5, #12]
	b	.L11332
.L11265:
	add	ip, r4, ip
	ldr	r3, [r6, #3660]
	ldr	r2, [ip, #8]	@ unaligned
	strh	r2, [r3]	@ movhi
	ldr	r3, [r6, #3660]
	ldrh	r4, [r3]
	cmp	r4, #0
	beq	.L11267
	mov	r3, #2
	ldr	r0, [r6, #3664]
	str	r3, [r6, #3640]
	bl	netif_carrier_on
	ldr	r3, [r6, #3664]
	ldr	r2, [r3, #120]
	tst	r2, #1
	beq	.L11266
	ldr	r4, [r3, #576]
	mov	r0, r9
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L11266
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	b	.L11266
.L11267:
	mov	r3, #1
	ldr	r0, [r6, #3664]
	str	r3, [r6, #3640]
	bl	netif_carrier_off
	ldr	r3, [r6, #3664]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L11338
	add	r1, r1, #80
	mov	r0, r4
	bl	_set_bit
	b	.L11266
.L11257:
	mvn	r2, #11
.L11244:
	ldr	ip, [r7, #4]
	movw	r0, #:lower16:.LC711
	ldr	r3, [r7, #48]
	movt	r0, #:upper16:.LC711
	ldr	r1, .L11339+12
	str	ip, [sp]
	bl	printk
	b	.L11258
.L11246:
	movw	r0, #:lower16:.LC710
	ldr	r1, .L11339+16
	movt	r0, #:upper16:.LC710
	bl	printk
.L11331:
	movw	r2, #65012
	movt	r2, 65535
	b	.L11244
.L11288:
	mov	r3, #36
	mov	r0, #16
	b	.L11262
.L11294:
	mov	r3, #36
	mov	r0, #16
	b	.L11283
.L11335:
	movw	r0, #:lower16:.LC95
	movw	r1, #1847
	movt	r0, #:upper16:.LC95
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC96
	movt	r0, #:upper16:.LC96
	bl	printk
	b	.L11258
.L11338:
	movw	r0, #:lower16:.LC95
	movw	r1, #1847
	movt	r0, #:upper16:.LC95
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC96
	movt	r0, #:upper16:.LC96
	bl	printk
	b	.L11266
.L11340:
	.align	2
.L11339:
	.word	.LANCHOR1+3636
	.word	.LANCHOR1+3688
	.word	.LANCHOR3-1276
	.word	.LANCHOR3-1236
	.word	.LANCHOR3-1256
	.fnend
	.size	rndis_qc_command_complete, .-rndis_qc_command_complete
	.align	2
	.global	usb_gadget_get_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_get_string, %function
usb_gadget_get_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L11361
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L11362
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r3, #4]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L11345
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r0, r1
	bne	.L11347
	b	.L11346
.L11363:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L11345
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r1, r0
	beq	.L11346
.L11347:
	adds	r3, r3, #8
	bne	.L11363
.L11345:
	mvn	r1, #21
	b	.L11341
.L11346:
	mov	r0, r4
	mov	r5, r2
	bl	strlen
	mov	r2, #126
	add	r3, r5, #2
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r4
	mov	r2, #1
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L11345
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r5, #1]
	uxtb	r3, r3
	mov	r1, r3
	strb	r3, [r5]
.L11341:
	mov	r0, r1
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L11361:
	mov	r3, #4
	mov	ip, #3
	mov	r1, r3
	strb	r3, [r2]
	strb	ip, [r2, #1]
	ldrh	r3, [r0]
	strb	r3, [r2, #2]
	ldrh	r3, [r0]
	lsr	r3, r3, #8
	strb	r3, [r2, #3]
.L11358:
	mov	r0, r1
	bx	lr
.L11362:
	mvn	r1, #21
	b	.L11358
	.fnend
	.size	usb_gadget_get_string, .-usb_gadget_get_string
	.align	2
	.global	usb_find_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_find_descriptor_fillbuf, %function
usb_find_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L11379
	ldr	ip, [r2]
	cmp	ip, #0
	beq	.L11372
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	bne	.L11369
.L11367:
	ldrb	r4, [ip]	@ zero_extendqisi2
	cmp	r1, r4
	bcc	.L11371
	mov	r1, ip
	mov	r2, r4
	bl	memcpy
	mov	r0, r4
.L11364:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L11369:
	ldr	ip, [r2, #4]!
	cmp	ip, #0
	beq	.L11380
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	beq	.L11367
	b	.L11369
.L11372:
	mvn	r0, #1
	bx	lr
.L11380:
	mvn	r0, #1
	b	.L11364
.L11371:
	mvn	r0, #21
	b	.L11364
.L11379:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_find_descriptor_fillbuf, .-usb_find_descriptor_fillbuf
	.align	2
	.global	usb_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_descriptor_fillbuf, %function
usb_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L11385
	mov	r5, r1
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L11388
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r5, r4
	bcc	.L11385
	mov	r7, r0
	mov	r3, r0
	b	.L11386
.L11387:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L11385
.L11386:
	mov	r0, r3
	mov	r2, r4
	bl	memcpy
	ldr	r1, [r6, #4]!
	sub	r5, r5, r4
	add	r3, r0, r4
	cmp	r1, #0
	bne	.L11387
	sub	r0, r3, r7
.L11381:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11385:
	mvn	r0, #21
	b	.L11381
.L11388:
	mov	r0, r1
	b	.L11381
	.fnend
	.size	usb_descriptor_fillbuf, .-usb_descriptor_fillbuf
	.align	2
	.global	usb_gadget_config_buf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_config_buf, %function
usb_gadget_config_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #0
	cmpne	r2, #8
	bls	.L11401
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	sub	r6, r2, #9
	strd	r8, [sp, #16]
	mov	r8, r3
	add	r9, r7, #9
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0]	@ unaligned
	ldr	r3, [r0, #4]	@ unaligned
	str	r1, [r7]	@ unaligned
	str	r3, [r7, #4]	@ unaligned
	ldrb	r3, [r0, #8]	@ zero_extendqisi2
	strb	r3, [r7, #8]
	ldr	r1, [r8]
	cmp	r1, #0
	beq	.L11397
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r6, r4
	bcc	.L11394
	mov	r5, r9
	b	.L11395
.L11396:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r6
	bhi	.L11394
.L11395:
	mov	r0, r5
	mov	r2, r4
	bl	memcpy
	ldr	r1, [r8, #4]!
	sub	r6, r6, r4
	add	r5, r5, r4
	cmp	r1, #0
	bne	.L11396
	subs	r0, r5, r9
	bmi	.L11390
	add	r0, r0, #9
	cmp	r0, #65536
	bge	.L11394
.L11393:
	ldrb	r3, [r7, #7]	@ zero_extendqisi2
	mov	r1, #9
	mov	r2, #2
	strb	r1, [r7]
	strb	r2, [r7, #1]
	mvn	r3, r3, lsl #25
	strh	r0, [r7, #2]	@ unaligned
	mvn	r3, r3, lsr #25
	strb	r3, [r7, #7]
.L11390:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11394:
	mvn	r0, #21
	b	.L11390
.L11397:
	mov	r0, #9
	b	.L11393
.L11401:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_config_buf, .-usb_gadget_config_buf
	.align	2
	.global	usb_copy_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_copy_descriptors, %function
usb_copy_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L11408
	mov	r3, #0
	mov	r1, r0
	mov	r0, r3
	b	.L11404
.L11409:
	mov	r3, lr
.L11404:
	ldrb	ip, [r2]	@ zero_extendqisi2
	add	lr, r3, #1
	ldr	r2, [r1, #4]!
	add	r0, r0, ip
	cmp	r2, #0
	bne	.L11409
	add	r3, r3, #2
	lsl	r4, r3, #2
	add	r0, r0, r4
.L11403:
	mov	r1, #208
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L11402
	ldr	r1, [r5]
	add	r3, r6, r4
	mov	r4, r6
	cmp	r1, #0
	beq	.L11406
.L11407:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r3
	bl	memcpy
	str	r0, [r4], #4
	ldr	r2, [r5]
	ldr	r1, [r5, #4]!
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r0, r2
	bne	.L11407
.L11406:
	mov	r3, #0
	str	r3, [r4]
.L11402:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11408:
	mov	r0, #4
	mov	r4, r0
	b	.L11403
	.fnend
	.size	usb_copy_descriptors, .-usb_copy_descriptors
	.align	2
	.global	usb_assign_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_assign_descriptors, %function
usb_assign_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	subs	r0, r1, #0
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r4, #20]
	ldr	r3, [ip, #24]
	ldr	r5, [r3]
	beq	.L11421
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L11420
.L11421:
	cmp	r7, #0
	beq	.L11419
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L11430
.L11419:
	cmp	r6, #0
	beq	.L11423
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L11431
.L11423:
	mov	r0, #0
.L11416:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11431:
	mov	r0, r6
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L11423
.L11429:
	ldr	r0, [r4, #16]
.L11420:
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mvn	r0, #11
	b	.L11416
.L11430:
	mov	r0, r7
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L11419
	b	.L11429
	.fnend
	.size	usb_assign_descriptors, .-usb_assign_descriptors
	.align	2
	.global	usb_free_all_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_free_all_descriptors, %function
usb_free_all_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #12]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	usb_free_all_descriptors, .-usb_free_all_descriptors
	.align	2
	.global	usb_ep_autoconfig_ss
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_ss, %function
usb_ep_autoconfig_ss:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #28]
	.pad #12
	sub	sp, sp, #12
	movw	r0, #:lower16:.LC324
	ldrb	r6, [r1, #3]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC324
	str	r2, [sp]
	mov	r1, fp
	bl	strcmp
	ldr	r9, [r5, #8]!
	cmp	r0, #0
	and	r6, r6, #3
	sub	r4, r9, #12
	mov	r10, r9
	bne	.L11435
	cmp	r6, #3
	beq	.L11544
	movw	r0, #:lower16:.LC327
	mov	r1, fp
	movt	r0, #:upper16:.LC327
	bl	strcmp
	cmp	r0, #0
	bne	.L11445
.L11446:
	cmp	r6, #2
	beq	.L11545
.L11445:
	cmp	r10, r5
	beq	.L11450
.L11444:
	movw	r9, #:lower16:_ctype
	movw	r10, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LC326
	movt	r9, #:upper16:_ctype
	movt	r10, #:upper16:.LANCHOR1
	movt	fp, #:upper16:.LC326
	b	.L11471
.L11453:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L11450
.L11471:
	ldr	r2, [r4]
	cmp	r2, #0
	bne	.L11453
	ldrb	r6, [r7, #3]	@ zero_extendqisi2
	ands	r6, r6, #3
	beq	.L11453
	ldr	r2, [r4, #4]
	ldrb	r1, [r2]	@ zero_extendqisi2
	cmp	r1, #101
	bne	.L11453
	ldrb	r1, [r2, #2]	@ zero_extendqisi2
	cmp	r1, #45
	beq	.L11454
	mov	r0, r2
	mov	r1, #45
	str	r2, [sp, #4]
	bl	strrchr
	subs	r3, r0, #0
	ldr	r2, [sp, #4]
	beq	.L11455
	cmp	r6, #2
	beq	.L11457
	cmp	r6, #3
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	bne	.L11530
	cmp	r2, #115
	str	r3, [sp, #4]
	beq	.L11453
	mov	r0, fp
	ldr	r1, [r8, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #4]
	bne	.L11459
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #105
	beq	.L11453
.L11459:
	ldrb	r2, [r3, #-1]	@ zero_extendqisi2
	ldrb	r1, [r9, r2]	@ zero_extendqisi2
	tst	r1, #4
	beq	.L11472
	ldrh	r2, [r7, #4]	@ unaligned
	cmp	r2, #0
	bne	.L11533
	str	r2, [sp, #4]
	ldrh	r2, [r4, #20]
	strh	r2, [r7, #4]	@ unaligned
.L11463:
	cmp	r6, #1
	ubfx	r1, r2, #0, #11
	beq	.L11465
	cmp	r6, #3
	bne	.L11464
.L11466:
	ldr	r3, [r8, #20]
	cmp	r3, #2
	movls	r0, #1
	movhi	r0, #0
	cmp	r1, #64
	movls	r0, #0
	cmp	r0, #0
	bne	.L11453
.L11465:
	ldrh	r0, [r4, #20]
	cmp	r0, r1
	bcc	.L11453
	ldr	r0, [r8, #20]
	cmp	r0, #2
	bhi	.L11464
	cmp	r1, #1024
	bcs	.L11453
	tst	r2, #6144
	bne	.L11453
.L11464:
	ldrb	r2, [r7, #2]	@ zero_extendqisi2
	and	r2, r2, #128
	strb	r2, [r7, #2]
	ldr	r0, [r4, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r1, [r9, r1]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L11546
	ldr	r1, [r10, #3604]
	add	r1, r1, #1
	cmp	r1, #15
	str	r1, [r10, #3604]
	bhi	.L11453
	orr	r3, r2, r1
	uxtb	r3, r3
	strb	r3, [r7, #2]
.L11469:
	ldm	sp, {r2, fp}
	cmp	r2, #0
	movne	fp, #0
	cmp	fp, #0
	beq	.L11470
	ldrh	r2, [r4, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r7, #4]	@ unaligned
.L11470:
	strb	r3, [r4, #25]
.L11441:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L11434
.L11435:
	movw	r0, #:lower16:.LC327
	mov	r1, fp
	movt	r0, #:upper16:.LC327
	bl	strcmp
	cmp	r0, #0
	bne	.L11445
	cmp	r6, #3
	bne	.L11446
	cmp	r5, r9
	movwne	r9, #:lower16:.LC714
	movne	r6, r4
	movtne	r9, #:upper16:.LC714
	bne	.L11447
	b	.L11450
.L11547:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L11444
.L11447:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11547
.L11451:
	cmp	r6, #0
	beq	.L11444
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L11444
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [sp]
	mov	r0, r8
	bl	ep_matches.part.17
	cmp	r0, #0
	bne	.L11480
	ldr	r10, [r8, #8]
	sub	r4, r10, #12
	b	.L11445
.L11544:
	cmp	r5, r9
	beq	.L11450
	movw	r9, #:lower16:.LC712
	mov	r6, r4
	movt	r9, #:upper16:.LC712
	b	.L11439
.L11548:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L11440
.L11439:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11548
	cmp	r6, #0
	beq	.L11440
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L11440
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [sp]
	mov	r0, r8
	bl	ep_matches.part.17
	cmp	r0, #0
	bne	.L11480
	ldr	r4, [r8, #8]
	cmp	r5, r4
	sub	r4, r4, #12
	bne	.L11440
.L11450:
	mov	r4, #0
.L11434:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11455:
	mov	r0, r2
	str	r2, [sp, #4]
	bl	strlen
	ldr	r2, [sp, #4]
	add	r3, r2, r0
.L11460:
	ldrb	r2, [r3, #-1]	@ zero_extendqisi2
	ldrb	r1, [r9, r2]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L11454
.L11472:
	ldrsb	r1, [r7, #2]
	cmp	r1, #0
	blt	.L11549
	cmp	r2, #116
	bne	.L11453
.L11454:
	sub	r3, r6, #2
	clz	r3, r3
	lsr	r3, r3, #5
	mov	r2, r3
	str	r3, [sp, #4]
	ldr	r3, [sp]
	cmp	r3, #0
	moveq	r2, #0
	cmp	r2, #0
	bne	.L11550
.L11462:
	ldrh	r2, [r7, #4]	@ unaligned
	cmp	r2, #0
	bne	.L11463
	ldrh	r2, [r4, #20]
	strh	r2, [r7, #4]	@ unaligned
	b	.L11463
.L11545:
	ldrsb	r3, [r7, #2]
	cmp	r3, #0
	bge	.L11445
	cmp	r5, r9
	beq	.L11450
	movw	r9, #:lower16:.LC715
	mov	r6, r4
	movt	r9, #:upper16:.LC715
	b	.L11452
.L11551:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L11444
.L11452:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11551
	b	.L11451
.L11550:
	ldr	r1, [r8, #20]
	cmp	r1, #4
	bls	.L11481
	ldrb	r1, [r3, #3]	@ zero_extendqisi2
	ldrh	r0, [r4, #22]
	and	r1, r1, #31
	cmp	r0, r1
	bcc	.L11453
.L11481:
	str	r2, [sp, #4]
	b	.L11462
.L11440:
	movw	r9, #:lower16:.LC713
	mov	r6, r4
	movt	r9, #:upper16:.LC713
	b	.L11443
.L11552:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L11444
.L11443:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11552
	b	.L11451
.L11457:
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #98
	bne	.L11453
	b	.L11460
.L11530:
	cmp	r2, #115
	bne	.L11453
	b	.L11460
.L11546:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r7, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r7, #2]
	b	.L11469
.L11549:
	cmp	r2, #110
	bne	.L11453
	b	.L11454
.L11480:
	mov	r4, r6
	b	.L11441
.L11533:
	mov	r3, #0
	ubfx	r1, r2, #0, #11
	str	r3, [sp, #4]
	b	.L11466
	.fnend
	.size	usb_ep_autoconfig_ss, .-usb_ep_autoconfig_ss
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_func_bind_do_descs, %function
__ffs_func_bind_do_descs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bne	.L11568
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L11556
	str	r2, [r0, r1, lsl #2]
	mov	r0, #2
.L11557:
	cmp	r2, #0
	beq	.L11568
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L11571
.L11568:
	mov	r0, #0
	bx	lr
.L11556:
	ldr	r0, [r3, #44]
	cmp	r0, #0
	ldreq	ip, [r3, #52]
	strne	r2, [r0, r1, lsl #2]
	movne	r0, #1
	streq	r2, [ip, r1, lsl #2]
	b	.L11557
.L11571:
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r7, [r2, #2]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r3, #12]
	and	r7, r7, #15
	sub	r5, r7, #1
	rsb	r5, r5, r5, lsl #3
	lsl	r5, r5, #2
	add	r6, r8, r5
	add	r0, r6, r0, lsl #2
	ldr	r1, [r0, #8]
	cmp	r1, #0
	bne	.L11561
	str	r2, [r0, #8]
	ldr	r4, [r8, r5]
	cmp	r4, #0
	beq	.L11560
	ldr	r3, [r6, #8]
	ldrh	r0, [r2, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r0, #0
	movne	r0, #0
	strb	r3, [r2, #2]
	bne	.L11553
	ldr	r3, [r6, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
.L11553:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11560:
	mov	r10, r2
	ldr	r0, [r3, #4]
	mov	r2, r4
	mov	r1, r10
	mov	r9, r3
	bl	usb_ep_autoconfig_ss
	subs	fp, r0, #0
	beq	.L11562
	ldr	r3, [r9, #12]
	mov	r1, #208
	ldr	r2, [fp, #8]
	add	r3, r3, r5
	str	r3, [fp]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r3, r0, #0
	beq	.L11563
	str	fp, [r8, r5]
	mov	r0, r4
	str	r3, [r6, #4]
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r9, r3
	strb	r7, [r3, #16]
	b	.L11553
.L11561:
	mvn	r0, #21
	b	.L11553
.L11562:
	movw	r0, #65012
	movt	r0, 65535
	b	.L11553
.L11563:
	mvn	r0, #11
	b	.L11553
	.fnend
	.size	__ffs_func_bind_do_descs, .-__ffs_func_bind_do_descs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind, %function
diag_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	movhi	r3, #237
	bhi	.L11573
	add	r1, r3, #12
	add	r2, r3, #1
	str	r4, [r0, r1, lsl #2]
	strb	r2, [r0, #44]
.L11573:
	movw	r5, #:lower16:.LANCHOR0
	mov	r2, #0
	ldr	r1, .L11629
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r5, #3162]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11574
	str	r0, [r4, #88]
	mov	r2, #0
	add	r1, r5, #3184
	str	r4, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11574
	str	r3, [r4, #84]
	ldr	r0, .L11629+4
	str	r4, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L11591
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11626
.L11576:
	ldr	r3, [r4, #120]
	cmp	r3, #0
	beq	.L11594
	ldrb	r2, [r5, #3162]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L11594
	ldr	r2, [r4, #116]
	ldrb	r1, [r2, #33]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L11582
.L11624:
	ldrh	r0, [r2, #27]	@ unaligned
	mov	r5, #0
	blx	r3
	b	.L11572
.L11574:
	mvn	r5, #18
.L11575:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L11581
.L11589:
	bl	kfree
.L11581:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L11586
	bl	kfree
.L11586:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L11587
	bl	kfree
.L11587:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L11572
	mov	r2, #0
	str	r2, [r3]
.L11572:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11626:
	ldrb	r2, [r5, #3174]	@ zero_extendqisi2
	ldrb	r3, [r5, #3186]	@ zero_extendqisi2
	ldr	r0, .L11629+8
	strb	r2, [r5, #3214]
	strb	r3, [r5, #3226]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11577
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L11576
	ldrb	r2, [r5, #3174]	@ zero_extendqisi2
	ldrb	r3, [r5, #3186]	@ zero_extendqisi2
	ldr	r0, .L11629+12
	strb	r2, [r5, #3254]
	strb	r3, [r5, #3266]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L11576
	mvn	r5, #11
	b	.L11581
.L11582:
	ldr	r0, [r2, #44]
	ldr	r0, [r0, #16]
	ldr	r0, [r0]
	ldr	r5, [r0, #4]
	cmp	r5, #0
	bne	.L11625
	b	.L11572
.L11628:
	ldrb	ip, [r5]	@ zero_extendqisi2
	cmp	ip, r1
	beq	.L11627
	adds	r5, r5, #8
	beq	.L11572
.L11625:
	ldr	r0, [r5, #4]
	cmp	r0, #0
	bne	.L11628
.L11594:
	mov	r5, #0
	b	.L11572
.L11591:
	mvn	r5, #11
	b	.L11575
.L11577:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	bne	.L11589
	b	.L11586
.L11627:
	mov	r1, r0
	b	.L11624
.L11630:
	.align	2
.L11629:
	.word	.LANCHOR0+3172
	.word	.LANCHOR0+3196
	.word	.LANCHOR0+3236
	.word	.LANCHOR0+3276
	.fnend
	.size	diag_function_bind, .-diag_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind, %function
rmnet_smd_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r8, [r0, #24]
	str	r8, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11634
	movw	r5, #:lower16:.LANCHOR0
	mov	r7, r0
	add	r2, r3, #12
	add	r0, r3, #1
	mov	r4, r1
	movt	r5, #:upper16:.LANCHOR0
	str	r1, [r7, r2, lsl #2]
	add	r1, r5, #3312
	mov	r2, #0
	strb	r0, [r7, #44]
	strb	r3, [r5, #3302]
	strb	r3, [r4, #104]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11634
	str	r8, [r0]
	mov	r2, #0
	ldr	r1, .L11692
	str	r0, [r4, #92]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11634
	str	r8, [r0]
	mov	r2, #0
	ldr	r1, .L11692+4
	str	r0, [r4, #88]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L11634
	str	r8, [r6]
	str	r6, [r4, #96]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11690
.L11635:
	ldr	r3, [r6, #8]
	mov	r1, #208
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L11636
	mov	r2, #8
	movw	r7, #:lower16:kmalloc_caches
	movt	r7, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r7, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L11638
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L11638
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L11636:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L11631:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11690:
	ldrb	r1, [r5, #3314]	@ zero_extendqisi2
	ldrb	r2, [r5, #3326]	@ zero_extendqisi2
	ldrb	r3, [r5, #3338]	@ zero_extendqisi2
	strb	r1, [r5, #3350]
	strb	r2, [r5, #3362]
	strb	r3, [r5, #3374]
	b	.L11635
.L11638:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L11631
	movw	r3, #:lower16:rmnet_smd_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_smd_notify_complete
	mov	r6, #4
	mov	r8, #16
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r2, [r3, #4]
.L11644:
	ldr	r3, [r7, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r5, r2
	subs	r0, r3, #0
	beq	.L11639
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L11670
.L11639:
	ldr	r3, [r7, #44]
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	r8, [r5]
	beq	.L11642
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L11689
.L11642:
	cmn	r5, #4096
	add	r2, r5, #8
	add	r1, r4, #108
	bhi	.L11643
	ldr	r3, [r4, #112]
	subs	r6, r6, #1
	str	r2, [r4, #112]
	str	r1, [r5, #8]
	str	r3, [r5, #12]
	str	r2, [r3]
	bne	.L11644
	mov	r6, #8
	mov	r8, #16
.L11649:
	ldr	r3, [r7, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r5, r2
	subs	r0, r3, #0
	beq	.L11645
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L11670
.L11645:
	ldr	r3, [r7, #44]
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	r8, [r5]
	beq	.L11648
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L11689
.L11648:
	cmn	r5, #4096
	add	r2, r5, #8
	add	r1, r4, #116
	bhi	.L11643
	ldr	r3, [r4, #120]
	subs	r6, r6, #1
	str	r2, [r4, #120]
	str	r1, [r5, #8]
	str	r3, [r5, #12]
	str	r2, [r3]
	bne	.L11649
	movw	r9, #:lower16:rmnet_smd_complete_epout
	mov	r8, #8
	movt	r9, #:upper16:rmnet_smd_complete_epout
	mov	r10, #2048
.L11653:
	ldr	r6, [r4, #88]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L11670
	str	r10, [r5, #4]
	ldr	r3, [r7, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L11652
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L11652
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L11643
.L11670:
	mvn	r5, #11
.L11643:
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	b	.L11631
.L11689:
	mov	r0, r5
	mvn	r5, #11
	bl	kfree
	b	.L11643
.L11652:
	cmn	r5, #4096
	add	r2, r5, #36
	add	r1, r4, #148
	bhi	.L11643
	str	r10, [r5, #4]
	subs	r8, r8, #1
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	ldr	r3, [r4, #152]
	str	r2, [r4, #152]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bne	.L11653
	movw	r9, #:lower16:rmnet_smd_complete_epin
	mov	r5, #8
	movt	r9, #:upper16:rmnet_smd_complete_epin
	mov	r10, #2048
.L11657:
	ldr	r8, [r4, #92]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L11670
	str	r10, [r6, #4]
	ldr	r3, [r7, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r6]
	beq	.L11656
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	bne	.L11656
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r0, r8
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L11643
.L11634:
	mvn	r5, #18
	b	.L11631
.L11656:
	cmn	r6, #4096
	add	r2, r6, #36
	add	r1, r4, #140
	bhi	.L11691
	str	r9, [r6, #28]
	subs	r5, r5, #1
	str	r4, [r6, #32]
	ldr	r3, [r4, #144]
	str	r2, [r4, #144]
	str	r1, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bne	.L11657
	b	.L11631
.L11691:
	mov	r5, r6
	b	.L11643
.L11693:
	.align	2
.L11692:
	.word	.LANCHOR0+3324
	.word	.LANCHOR0+3336
	.fnend
	.size	rmnet_smd_bind, .-rmnet_smd_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_bind, %function
rmnet_sdio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11701
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	ldr	r1, .L11721
	mov	r6, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	strb	r3, [r5, #3386]
	strb	r3, [r4, #104]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11697
	str	r7, [r0]
	mov	r2, #0
	add	r1, r5, #3408
	str	r0, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11697
	str	r7, [r0]
	mov	r2, #0
	ldr	r1, .L11721+4
	str	r0, [r4, #88]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11697
	str	r7, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L11698
	ldrb	r1, [r5, #3398]	@ zero_extendqisi2
	ldrb	r2, [r5, #3410]	@ zero_extendqisi2
	ldrb	r3, [r5, #3422]	@ zero_extendqisi2
	strb	r1, [r5, #3434]
	strb	r2, [r5, #3446]
	strb	r3, [r5, #3458]
.L11698:
	mov	r3, #0
	add	r2, r4, #252
	ldr	r1, [r4, #200]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
	b	.L11694
.L11697:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L11701
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L11694:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11701:
	mvn	r0, #18
	b	.L11694
.L11722:
	.align	2
.L11721:
	.word	.LANCHOR0+3396
	.word	.LANCHOR0+3420
	.fnend
	.size	rmnet_sdio_bind, .-rmnet_sdio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind, %function
audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR0
	movw	r3, #44100
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR0
	mov	ip, #0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	add	lr, r4, #3488
	.pad #8
	sub	sp, sp, #8
	strh	r3, [lr]	@ movhi
	ldr	lr, [r0, #24]
	str	r3, [sp, #4]
	mov	r3, #2
	cmp	r2, #15
	strb	r3, [r4, #3475]
	strb	r3, [r4, #3484]
	strb	ip, [r4, #3490]
	bhi	.L11724
	add	r3, r2, #1
	add	ip, r2, #12
	strb	r2, [r4, #3494]
	uxtb	r3, r3
	str	r1, [r0, ip, lsl #2]
	cmp	r3, #15
	strb	r3, [r0, #44]
	bhi	.L11724
	mov	r6, r0
	mov	r5, r1
	strb	r3, [r4, #3506]
	add	r0, r2, #2
	add	r1, r3, #12
	strb	r3, [r4, #3518]
	mov	r2, #0
	str	r5, [r6, r1, lsl #2]
	ldr	r1, .L11740
	strb	r0, [r6, #44]
	ldr	r0, [lr]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L11724
	str	r7, [r5, #104]
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:audio_data_complete
	str	r5, [r7]
	ldr	r3, [r6, #24]
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:audio_data_complete
	mov	r8, #4
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	ldrbhi	r3, [r4, #3530]	@ zero_extendqisi2
	strbhi	r3, [r4, #3542]
.L11729:
	ldr	r3, [r7, #8]
	mov	r1, #208
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r2, #256
	mov	r1, #208
	mov	r3, #16
	beq	.L11726
	ldr	ip, [r10, #32]
	subs	r0, ip, #0
	streq	r3, [r4]
	beq	.L11728
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L11739
.L11728:
	mov	r3, #256
	add	r6, r5, #108
	mov	r0, r6
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r5, [r4, #32]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #100]
	add	ip, r4, #36
	add	r3, r5, #96
	mov	r1, r0
	mov	r0, r6
	str	ip, [r5, #100]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	bne	.L11729
	mov	r0, r8
	b	.L11723
.L11739:
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L11726:
	mvn	r0, #11
.L11723:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11724:
.L11730:
	mvn	r0, #18
	b	.L11723
.L11741:
	.align	2
.L11740:
	.word	.LANCHOR0+3528
	.fnend
	.size	audio_bind, .-audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind, %function
ecm_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r2, #15
	bhi	.L11743
	add	r3, r2, #1
	add	r1, r2, #12
	movw	r5, #:lower16:.LANCHOR0
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r0, #44]
	strb	r2, [r4, #120]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	strb	r2, [r5, #3554]
	strb	r2, [r5, #3567]
	cmp	r3, #15
	bhi	.L11743
	add	r1, r3, #12
	add	r0, r3, #1
	strb	r3, [r5, #3568]
	strb	r3, [r5, #3574]
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	ldr	r1, .L11806
	strb	r0, [r6, #44]
	strb	r3, [r5, #3586]
	strb	r3, [r4, #121]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11743
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L11806+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11743
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L11806+8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11743
	str	r3, [r4, #144]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #148]
	beq	.L11747
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L11746
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L11746:
	str	r0, [r7]
	ldr	r3, [r4, #148]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L11747
	str	r4, [r3, #32]
	ldr	r2, [r4, #148]
	movw	r3, #:lower16:ecm_qc_notify_complete
	movt	r3, #:upper16:ecm_qc_notify_complete
	ldr	r0, .L11806+12
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L11747
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11805
.L11748:
	movw	r2, #:lower16:ecm_qc_open
	movw	r3, #:lower16:ecm_qc_close
	movt	r2, #:upper16:ecm_qc_open
	movt	r3, #:upper16:ecm_qc_close
	mov	r5, #0
	strd	r2, [r4, #112]
.L11742:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11805:
	ldrb	r1, [r5, #3598]	@ zero_extendqisi2
	ldrb	r2, [r5, #3610]	@ zero_extendqisi2
	ldrb	r3, [r5, #3622]	@ zero_extendqisi2
	ldr	r0, .L11806+16
	strb	r1, [r5, #3674]
	strb	r2, [r5, #3686]
	strb	r3, [r5, #3698]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11749
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L11748
	ldrb	r3, [r5, #3622]	@ zero_extendqisi2
	ldrb	r1, [r5, #3598]	@ zero_extendqisi2
	ldrb	r2, [r5, #3610]	@ zero_extendqisi2
	ldr	r0, .L11806+20
	strb	r1, [r5, #3750]
	strb	r2, [r5, #3762]
	strb	r3, [r5, #3774]
	bl	usb_copy_descriptors
	ldr	r3, [r4, #8]
	str	r0, [r4, #12]
	cmp	r3, #0
	bne	.L11748
.L11749:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	beq	.L11753
.L11759:
	bl	kfree
.L11752:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L11753
	bl	kfree
.L11753:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L11754
	bl	kfree
.L11754:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L11755
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L11755:
	ldr	r3, [r4, #144]
	movw	r0, #:lower16:.LC716
	ldr	r1, .L11806+24
	movt	r0, #:upper16:.LC716
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L11742
.L11743:
	mvn	r5, #18
.L11745:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L11759
	b	.L11752
.L11747:
	mvn	r5, #11
	b	.L11745
.L11807:
	.align	2
.L11806:
	.word	.LANCHOR0+3596
	.word	.LANCHOR0+3608
	.word	.LANCHOR0+3620
	.word	.LANCHOR0+3632
	.word	.LANCHOR0+3708
	.word	.LANCHOR0+3784
	.word	.LANCHOR3-1208
	.fnend
	.size	ecm_qc_bind, .-ecm_qc_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind, %function
mbim_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	ldr	r9, .L11868
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r0, #24]
	movw	r0, #:lower16:.LC245
	.pad #20
	sub	sp, sp, #20
	movt	r0, #:upper16:.LC245
	sub	r8, r9, #12
	mov	r1, r8
	bl	printk
	str	r7, [r4, #84]
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11809
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r6, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r6, #44]
	strb	r3, [r4, #196]
	ldrb	r0, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r5, #2602]
	strb	r3, [r5, #3838]
	strb	r3, [r5, #3847]
	cmp	r0, #15
	bhi	.L11809
	add	r2, r0, #12
	add	r3, r0, #1
	strb	r0, [r5, #2614]
	mov	r10, #0
	strb	r0, [r5, #2626]
	ldr	r1, .L11868+4
	str	r4, [r6, r2, lsl #2]
	mov	r2, r10
	strb	r3, [r6, #44]
	strb	r0, [r5, #3848]
	str	r7, [r4, #140]
	str	r4, [r4, #144]
	strb	r0, [r4, #197]
	strb	r10, [r4, #198]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	fp, r0, #0
	beq	.L11863
	movw	r0, #:lower16:.LC720
	mov	r1, r8
	movt	r0, #:upper16:.LC720
	bl	printk
	str	r7, [fp]
	mov	r2, r10
	ldr	r1, .L11868+8
	str	fp, [r4, #148]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	fp, r0, #0
	beq	.L11864
	movw	r0, #:lower16:.LC722
	mov	r1, r8
	movt	r0, #:upper16:.LC722
	bl	printk
	str	r7, [fp]
	mov	r2, r10
	ldr	r1, .L11868+12
	str	fp, [r4, #152]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r10, r0, #0
	beq	.L11865
	movw	r0, #:lower16:.LC724
	mov	r1, r8
	movt	r0, #:upper16:.LC724
	bl	printk
	str	r10, [r4, #156]
	ldr	r3, [r10, #8]
	mov	r1, #208
	str	r7, [r10]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	streq	r7, [r4, #160]
	beq	.L11815
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r7]
	beq	.L11817
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r7]
	beq	.L11866
.L11817:
	mov	r3, #16
	movw	r0, #:lower16:.LC725
	sub	r1, r9, #12
	movt	r0, #:upper16:.LC725
	str	r3, [r7, #4]
	str	r7, [r4, #160]
	ldr	r7, .L11868+16
	bl	printk
	ldr	r2, [r4, #160]
	movw	r3, #:lower16:mbim_notify_complete
	movt	r3, #:upper16:mbim_notify_complete
	add	r0, r7, #12
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	ldr	r3, [r4, #132]
	cmp	r3, #7
	movne	r3, #4064
	moveq	r3, #2048
	strh	r3, [r7, #9]	@ unaligned
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L11821
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11867
.L11820:
	ldrb	r3, [r6, #20]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC717
	sub	r1, r9, #12
	ldr	lr, [r4, #152]
	movt	r0, #:upper16:.LC717
	sub	r2, r3, #2
	cmp	r2, #2
	ldr	r2, [r4, #156]
	addls	r3, r3, #48
	strbls	r3, [r5, #190]
	ldr	ip, [r6, #24]
	movw	r3, #:lower16:.LC718
	ldr	r5, [r2, #4]
	movt	r3, #:upper16:.LC718
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	ldr	r6, [ip]
	ldr	ip, [r4, #148]
	ldr	r4, [r6, #20]
	str	r5, [sp, #8]
	mov	r5, #0
	ldr	lr, [lr, #4]
	cmp	r4, #2
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	movhi	r3, r0
	movw	r0, #:lower16:.LC727
	movt	r0, #:upper16:.LC727
	str	ip, [sp]
	bl	printk
	b	.L11808
.L11864:
	movw	r0, #:lower16:.LC721
	mov	r1, r8
	movt	r0, #:upper16:.LC721
	mvn	r5, #18
	bl	printk
.L11811:
	movw	r0, #:lower16:.LC728
	sub	r1, r9, #12
	ldr	r2, [r4]
	movt	r0, #:upper16:.LC728
	mov	r3, r5
	bl	printk
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L11827
	bl	kfree
.L11827:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L11828
	bl	kfree
.L11828:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L11829
	bl	kfree
.L11829:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L11830
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L11830:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #152]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #148]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L11808:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11863:
	movw	r0, #:lower16:.LC719
	mov	r1, r8
	movt	r0, #:upper16:.LC719
	mvn	r5, #18
	bl	printk
	b	.L11811
.L11867:
	ldrb	r1, [r5, #3854]	@ zero_extendqisi2
	add	r0, r7, #96
	ldrb	r2, [r5, #3866]	@ zero_extendqisi2
	ldrb	r3, [r5, #3878]	@ zero_extendqisi2
	strb	r1, [r5, #3950]
	strb	r2, [r5, #3962]
	strb	r3, [r5, #3974]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11821
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L11820
	ldrb	r1, [r5, #3854]	@ zero_extendqisi2
	add	r0, r7, #180
	ldrb	r2, [r5, #3866]	@ zero_extendqisi2
	ldrb	r3, [r5, #3878]	@ zero_extendqisi2
	strb	r1, [r5, #4034]
	strb	r2, [r5, #4046]
	strb	r3, [r5, #4058]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L11820
.L11821:
	mvn	r5, #11
	b	.L11811
.L11865:
	movw	r0, #:lower16:.LC723
	mov	r1, r8
	movt	r0, #:upper16:.LC723
	mvn	r5, #18
	bl	printk
	b	.L11811
.L11866:
	ldr	r3, [r10, #8]
	mov	r1, r7
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	str	r8, [r4, #160]
.L11815:
	movw	r0, #:lower16:.LC726
	sub	r1, r9, #12
	movt	r0, #:upper16:.LC726
	mvn	r5, #11
	bl	printk
	b	.L11811
.L11809:
	mvn	r5, #18
	b	.L11811
.L11869:
	.align	2
.L11868:
	.word	.LANCHOR3-1184
	.word	.LANCHOR0+3852
	.word	.LANCHOR0+3864
	.word	.LANCHOR0+3876
	.word	.LANCHOR0+3888
	.fnend
	.size	mbim_bind, .-mbim_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind, %function
ecm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L11871
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR5
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-4054]
	strb	r3, [r5, #-4046]
	strb	r3, [r5, #-4033]
	cmp	ip, #15
	bls	.L11872
.L11871:
	ldr	r3, [r4, #168]
	mvn	r5, #18
.L11873:
	cmp	r3, #0
	beq	.L11877
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L11877:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC729
	movt	r1, #:upper16:.LC729
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L11870:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11872:
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #-4032]
	strb	ip, [r5, #-4026]
	ldr	r1, .L11910
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r5, #-4014]
	strb	ip, [r4, #149]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11871
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L11910+4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11871
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L11910+8
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11871
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r6, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #168]
	beq	.L11886
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L11878
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L11878:
	str	r0, [r7]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L11888
	str	r4, [r3, #32]
	ldr	r0, [r4, #168]
	movw	r3, #:lower16:ecm_notify_complete
	movt	r3, #:upper16:ecm_notify_complete
	ldrb	r1, [r5, #-4002]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3990]	@ zero_extendqisi2
	str	r3, [r0, #28]
	ldr	r0, [r4, #20]
	ldrb	r3, [r5, #-3978]	@ zero_extendqisi2
	strb	r1, [r5, #-3966]
	strb	r2, [r5, #-3954]
	strb	r1, [r5, #-3930]
	ldr	r1, [r0, #24]
	ldr	r0, .L11910+12
	strb	r3, [r5, #-3942]
	strb	r2, [r5, #-3918]
	strb	r3, [r5, #-3906]
	ldr	r5, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L11881
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L11909
.L11880:
	movw	r2, #:lower16:ecm_open
	movw	r3, #:lower16:ecm_close
	movt	r2, #:upper16:ecm_open
	movt	r3, #:upper16:ecm_close
	mov	r5, #0
	strd	r2, [r4, #136]
	b	.L11870
.L11888:
	mvn	r5, #11
	b	.L11873
.L11886:
	mvn	r5, #11
	b	.L11877
.L11909:
	ldr	r0, .L11910+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11881
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L11880
	ldr	r0, .L11910+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L11880
.L11881:
	ldr	r0, [r4, #16]
	mvn	r5, #11
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	b	.L11873
.L11911:
	.align	2
.L11910:
	.word	.LANCHOR5-4004
	.word	.LANCHOR5-3992
	.word	.LANCHOR5-3980
	.word	.LANCHOR5-3896
	.word	.LANCHOR5-3852
	.word	.LANCHOR5-3808
	.fnend
	.size	ecm_bind, .-ecm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_bind, %function
f_audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r4, #:lower16:.LANCHOR5
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR5
	strd	r8, [sp, #16]
	sub	ip, r4, #3712
	sub	r6, r4, #3728
	str	lr, [sp, #24]
	ldr	r3, [r1, #168]
	.pad #12
	sub	sp, sp, #12
	ldrb	lr, [r1, #136]	@ zero_extendqisi2
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	ldr	r1, [r1, #140]
	strh	r3, [ip]	@ movhi
	ldrb	ip, [r5, #164]	@ zero_extendqisi2
	str	r3, [sp, #4]
	ubfx	r3, r3, #16, #8
	cmp	r2, #15
	strb	lr, [r4, #-3749]
	strh	r1, [r6, #-8]	@ movhi
	ubfx	r1, r1, #16, #8
	ldr	r6, [r0, #24]
	strb	lr, [r4, #-3740]
	strb	r1, [r4, #-3734]
	strb	ip, [r4, #-3725]
	strb	ip, [r4, #-3716]
	strb	r3, [r4, #-3710]
	bhi	.L11926
	add	r3, r2, #1
	add	r1, r2, #12
	strb	r2, [r4, #-3706]
	uxtb	r3, r3
	str	r5, [r0, r1, lsl #2]
	cmp	r3, #15
	strb	r3, [r0, #44]
	bhi	.L11916
	add	r2, r2, #2
	add	ip, r3, #12
	strb	r3, [r4, #-3694]
	mov	r7, #0
	movw	r1, #:lower16:.LANCHOR0
	strb	r3, [r4, #-3682]
	str	r5, [r0, ip, lsl #2]
	movt	r1, #:upper16:.LANCHOR0
	strb	r2, [r0, #44]
	strb	r7, [r5, #248]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r1, #16]
	cmp	r2, #15
	bhi	.L11916
	add	ip, r2, #12
	add	r3, r2, #1
	strb	r2, [r1, #17]
	sub	r8, r4, #3648
	strb	r2, [r4, #-3670]
	str	r5, [r0, ip, lsl #2]
	mov	r1, r8
	strb	r3, [r0, #44]
	strb	r2, [r4, #-3658]
	mov	r2, r7
	strb	r7, [r5, #249]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11927
	ldr	r9, .L11929
	str	r0, [r5, #176]
	mov	r2, r7
	str	r6, [r0]
	str	r8, [r0, #28]
	ldr	r0, [r6]
	mov	r1, r9
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L11928
	str	r7, [r5, #172]
	ldr	r8, .L11929+4
	str	r6, [r7]
	ldrb	r2, [r4, #-3646]	@ zero_extendqisi2
	str	r9, [r7, #28]
	ldr	r1, [r5, #20]
	ldrb	r3, [r4, #-3634]	@ zero_extendqisi2
	mov	r0, r8
	and	r2, r2, #127
	ldr	r1, [r1, #24]
	and	r3, r3, #127
	strb	r2, [r4, #-3608]
	strb	r3, [r4, #-3576]
	ldr	r4, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #16]
	beq	.L11919
	ldr	r3, [r4, #20]
	cmp	r3, #2
	bhi	.L11920
.L11921:
	mov	r0, #0
.L11912:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L11920:
	mov	r0, r8
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #8]
	bne	.L11921
	ldr	r0, [r5, #16]
.L11919:
	bl	kfree
	ldr	r0, [r5, #8]
	bl	kfree
	ldr	r0, [r5, #12]
	bl	kfree
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r7]
	b	.L11912
.L11916:
	ldr	r2, .L11929+8
	movw	r0, #:lower16:.LC731
	movt	r0, #:upper16:.LC731
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L11912
.L11927:
	ldr	r2, .L11929+8
	movw	r0, #:lower16:.LC732
	movt	r0, #:upper16:.LC732
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L11912
.L11928:
	ldr	r2, .L11929+8
	movw	r0, #:lower16:.LC733
	movt	r0, #:upper16:.LC733
	mov	r1, r2
	bl	printk
	mvn	r0, #11
	b	.L11912
.L11926:
	ldr	r2, .L11929+8
	movw	r0, #:lower16:.LC730
	movt	r0, #:upper16:.LC730
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L11912
.L11930:
	.align	2
.L11929:
	.word	.LANCHOR5-3636
	.word	.LANCHOR5-3560
	.word	.LANCHOR3-1184
	.fnend
	.size	f_audio_bind, .-f_audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind, %function
ncm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L11932
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR5
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-3482]
	strb	r3, [r5, #-3474]
	strb	r3, [r5, #-3461]
	cmp	ip, #15
	bls	.L11976
.L11932:
	mvn	r5, #18
.L11934:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	cmp	r3, #0
	beq	.L11943
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L11943:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC729
	movt	r1, #:upper16:.LC729
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L11931:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11976:
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #-3460]
	strb	ip, [r5, #-3454]
	ldr	r1, .L11978
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r5, #-3442]
	strb	ip, [r4, #149]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11932
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L11978+4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11932
	str	r0, [r4, #92]
	mov	r2, #0
	sub	r1, r5, #3408
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11932
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r6, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #168]
	beq	.L11936
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L11935
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L11935:
	str	r0, [r7]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L11936
	str	r4, [r3, #32]
	ldr	r2, [r4, #168]
	movw	r3, #:lower16:ncm_notify_complete
	movt	r3, #:upper16:ncm_notify_complete
	ldrb	r0, [r5, #-3430]	@ zero_extendqisi2
	ldrb	r1, [r5, #-3418]	@ zero_extendqisi2
	str	r3, [r2, #28]
	ldr	r3, [r4, #20]
	ldrb	r2, [r5, #-3406]	@ zero_extendqisi2
	strb	r0, [r5, #-3394]
	ldr	r0, .L11978+8
	strb	r1, [r5, #-3382]
	ldr	r3, [r3, #24]
	strb	r2, [r5, #-3370]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L11940
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L11977
.L11938:
	movw	r2, #:lower16:ncm_open
	movw	r3, #:lower16:ncm_close
	movt	r2, #:upper16:ncm_open
	movt	r3, #:upper16:ncm_close
	mov	r5, #0
	strd	r2, [r4, #136]
	b	.L11931
.L11936:
	mvn	r5, #11
	b	.L11934
.L11977:
	ldr	r0, .L11978+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L11938
.L11940:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L11938
.L11979:
	.align	2
.L11978:
	.word	.LANCHOR5-3432
	.word	.LANCHOR5-3420
	.word	.LANCHOR5-3360
	.word	.LANCHOR5-3312
	.fnend
	.size	ncm_bind, .-ncm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_bind, %function
fsg_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	str	r6, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11989
	add	r2, r3, #1
	mov	r4, r1
	movw	ip, #:lower16:.LANCHOR0
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR5
	movt	ip, #:upper16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	strb	r2, [r0, #44]
	sub	r1, r5, #3264
	mov	r2, #0
	strh	r3, [r4, #92]	@ movhi
	mov	r0, r6
	strb	r3, [ip, #2662]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11983
	ldr	ip, [r4, #88]
	mov	r0, r6
	mov	r2, #0
	ldr	r1, .L11999
	str	ip, [r3]
	str	r3, [r4, #100]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11983
	ldr	r2, [r4, #88]
	mov	r1, #15
	ldr	r0, .L11999+4
	str	r2, [r3]
	ldr	ip, [r4, #20]
	str	r3, [r4, #104]
	ldrb	r2, [r5, #-3262]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3250]	@ zero_extendqisi2
	strb	r2, [r5, #-3238]
	strb	r1, [r5, #-3202]
	strb	r1, [r5, #-3182]
	ldr	r1, [ip, #24]
	strb	r3, [r5, #-3226]
	strb	r2, [r5, #-3214]
	strb	r3, [r5, #-3194]
	ldr	r5, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L11985
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L11998
.L11986:
	mov	r0, #0
.L11980:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11998:
	ldr	r0, .L11999+8
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11997
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L11986
	ldr	r0, .L11999+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L11986
.L11997:
	ldr	r0, [r4, #16]
.L11985:
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
.L11983:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC734
	movt	r1, #:upper16:.LC734
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #65012
	movt	r0, 65535
	b	.L11980
.L11989:
	mvn	r0, #18
	b	.L11980
.L12000:
	.align	2
.L11999:
	.word	.LANCHOR5-3252
	.word	.LANCHOR5-3176
	.word	.LANCHOR5-3160
	.word	.LANCHOR5-3144
	.fnend
	.size	fsg_bind, .-fsg_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind, %function
ccid_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r5, [r0, #24]
	cmp	r3, #15
	bls	.L12002
	mvn	r3, #18
	movw	r0, #:lower16:.LC735
	ldr	r1, .L12020
	mov	r2, r3
	movt	r0, #:upper16:.LC735
	str	r3, [r4, #88]
	bl	printk
	ldr	r0, [r4, #88]
.L12001:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12002:
	add	r1, r3, #12
	movw	r6, #:lower16:.LANCHOR5
	add	r2, r3, #1
	movt	r6, #:upper16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	sub	r1, r6, #3104
	strb	r2, [r0, #44]
	sub	r1, r1, #4
	mov	r2, #0
	str	r3, [r4, #88]
	strb	r3, [r6, #-3118]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12017
	str	r0, [r4, #100]
	mov	r2, #0
	ldr	r1, .L12020+4
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12018
	str	r0, [r4, #104]
	mov	r2, #0
	ldr	r1, .L12020+8
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12019
	str	r3, [r4, #108]
	ldr	r0, .L12020+12
	str	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12008
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12010
.L12012:
	mov	r0, #0
	b	.L12001
.L12010:
	ldrb	r1, [r6, #-3094]	@ zero_extendqisi2
	ldrb	r2, [r6, #-3082]	@ zero_extendqisi2
	ldrb	r3, [r6, #-3106]	@ zero_extendqisi2
	ldr	r0, .L12020+16
	strb	r1, [r6, #-3070]
	strb	r2, [r6, #-3058]
	strb	r3, [r6, #-3046]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L12012
.L12008:
	ldr	r2, [r4, #108]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #108]
.L12006:
	ldr	r2, [r4, #104]
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r2]
	str	r3, [r4, #104]
	b	.L12001
.L12019:
	movw	r0, #:lower16:.LC721
	ldr	r1, .L12020
	movt	r0, #:upper16:.LC721
	bl	printk
	b	.L12008
.L12018:
	movw	r0, #:lower16:.LC719
	ldr	r1, .L12020
	movt	r0, #:upper16:.LC719
	bl	printk
	b	.L12006
.L12017:
	movw	r0, #:lower16:.LC736
	ldr	r1, .L12020
	movt	r0, #:upper16:.LC736
	bl	printk
	mvn	r0, #18
	b	.L12001
.L12021:
	.align	2
.L12020:
	.word	.LANCHOR3-1168
	.word	.LANCHOR5-3096
	.word	.LANCHOR5-3084
	.word	.LANCHOR0+2016
	.word	.LANCHOR0+2040
	.fnend
	.size	ccid_function_bind, .-ccid_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_bind, %function
qdss_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #24]
	ldr	r6, [r2]
	ldr	r2, [r6, #20]
	cmp	r2, #2
	bls	.L12062
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	mov	r3, r0
	cmp	r2, #15
	bhi	.L12026
	mov	r4, r1
	add	r0, r2, #12
	add	r1, r2, #1
	movw	r7, #:lower16:.LANCHOR0
	str	r4, [r3, r0, lsl #2]
	movt	r7, #:upper16:.LANCHOR0
	strb	r1, [r3, #44]
	strb	r2, [r4, #89]
	ldrb	ip, [r3, #44]	@ zero_extendqisi2
	strb	r2, [r7, #2522]
	cmp	ip, #15
	bhi	.L12026
	movw	r5, #:lower16:.LANCHOR5
	add	r2, ip, #12
	strb	ip, [r7, #2534]
	add	lr, ip, #1
	movt	r5, #:upper16:.LANCHOR5
	sub	r1, r5, #3024
	str	r4, [r3, r2, lsl #2]
	mov	r0, r6
	sub	r2, r1, #12
	strb	lr, [r3, #44]
	sub	r1, r1, #4
	strb	ip, [r4, #88]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12029
	str	r0, [r4, #108]
	ldr	r2, .L12065
	sub	r1, r5, #3008
	str	r4, [r0]
	mov	r0, r6
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12029
	sub	r1, r5, #2976
	str	r0, [r4, #104]
	ldr	r2, .L12065+4
	str	r4, [r0]
	sub	r1, r1, #12
	mov	r0, r6
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12029
	str	r3, [r4, #100]
	add	r0, r7, #2544
	str	r4, [r3]
	ldrb	r1, [r5, #-3026]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3006]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2986]	@ zero_extendqisi2
	strb	r1, [r5, #-2974]
	strb	r2, [r5, #-2962]
	strb	r3, [r5, #-2950]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12032
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bhi	.L12063
.L12031:
	movw	r0, #:lower16:.LC348
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC348
	bl	strcmp
	subs	r5, r0, #0
	movne	r5, #0
	beq	.L12064
.L12022:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12063:
	ldr	r0, .L12065+8
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12031
.L12032:
	movw	r0, #:lower16:.LC740
	movt	r0, #:upper16:.LC740
	bl	printk
.L12028:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bls	.L12036
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12036
	bl	kfree
	ldr	r3, [r6, #20]
.L12036:
	cmp	r3, #2
	movwls	r5, #65012
	movtls	r5, 65535
	bls	.L12022
	ldr	r0, [r4, #8]
	movw	r5, #65012
	cmp	r0, #0
	movteq	r5, 65535
	beq	.L12022
	bl	kfree
	movt	r5, 65535
	b	.L12022
.L12064:
	mov	r1, #1
	ldr	r0, [r4, #108]
	bl	dwc3_tx_fifo_resize_request
	b	.L12022
.L12029:
	movw	r0, #:lower16:.LC739
	movt	r0, #:upper16:.LC739
	bl	printk
	b	.L12028
.L12026:
	movw	r0, #:lower16:.LC738
	mvn	r5, #18
	movt	r0, #:upper16:.LC738
	bl	printk
	b	.L12022
.L12062:
	movw	r0, #:lower16:.LC737
	movw	r5, #65012
	movt	r0, #:upper16:.LC737
	movt	r5, 65535
	bl	printk
	b	.L12022
.L12066:
	.align	2
.L12065:
	.word	.LANCHOR5-3016
	.word	.LANCHOR5-2996
	.word	.LANCHOR5-2940
	.fnend
	.size	qdss_bind, .-qdss_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_bind, %function
rmnet_mux_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12074
	movw	r5, #:lower16:.LANCHOR5
	mov	r6, r0
	add	r2, r3, #12
	add	r0, r3, #1
	mov	r4, r1
	movt	r5, #:upper16:.LANCHOR5
	sub	r8, r5, #2880
	str	r1, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	sub	r1, r8, #12
	strb	r3, [r5, #-2902]
	strb	r3, [r4, #360]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12070
	str	r7, [r0]
	mov	r1, r8
	mov	r2, #0
	str	r0, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12070
	str	r7, [r0]
	mov	r2, #0
	add	r1, r8, #12
	str	r0, [r4, #88]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12070
	str	r7, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L12071
	ldrb	r1, [r5, #-2890]	@ zero_extendqisi2
	ldrb	r2, [r5, #-2878]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2866]	@ zero_extendqisi2
	strb	r1, [r5, #-2854]
	strb	r2, [r5, #-2842]
	strb	r3, [r5, #-2830]
.L12071:
	mov	r3, #0
	add	r2, r4, #256
	ldr	r1, [r4, #380]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
	b	.L12067
.L12070:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L12074
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L12067:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12074:
	mvn	r0, #18
	b	.L12067
	.fnend
	.size	rmnet_mux_bind, .-rmnet_mux_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind, %function
f_midi_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 504
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR5
	mov	r4, r1
	movt	r5, #:upper16:.LANCHOR5
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r5, #-2820]	@ zero_extendqisi2
	.pad #508
	sub	sp, sp, #508
	ldr	r7, [r0, #24]
	cmp	r3, #0
	bne	.L12095
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L12096
.L12098:
	mvn	r5, #18
.L12097:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L12100
.L12110:
	mov	r2, #0
	str	r2, [r3]
.L12100:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L12109:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC729
	mov	r3, r5
	movt	r1, #:upper16:.LC729
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L12094:
	mov	r0, r5
	add	sp, sp, #508
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12096:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #-2820]
	strb	r3, [r7, #48]
.L12095:
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12098
	add	r1, r3, #1
	add	r2, r3, #12
	strb	r3, [r5, #-2802]
	uxtb	r1, r1
	str	r4, [r6, r2, lsl #2]
	cmp	r1, #15
	strb	r1, [r6, #44]
	bhi	.L12098
	add	r0, r1, #12
	add	r3, r3, #2
	strb	r1, [r5, #-2790]
	strb	r1, [r5, #-2772]
	mov	r2, #0
	ldr	r1, .L12128
	str	r4, [r6, r0, lsl #2]
	strb	r3, [r6, #44]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #88]
	beq	.L12099
	ldr	r8, .L12128
	str	r7, [r0]
	mov	r2, #0
	ldr	r0, [r7]
	add	r1, r8, #12
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #92]
	beq	.L12111
	str	r7, [r0]
	movw	r1, #32976
	mov	r0, #292
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [sp, #4]
	beq	.L12112
	sub	r2, r8, #36
	sub	r1, r8, #12
	sub	r3, r8, #24
	mov	lr, r8
	str	r2, [r0]
	add	r2, r8, #24
	stmib	r0, {r1, r3}
	ldr	r3, [r4, #320]
	ldr	r1, [r4, #324]
	str	r2, [r0, #12]
	ldr	r10, [r4, #320]
	add	r3, r3, r1
	rsb	r3, r3, r3, lsl #4
	cmp	r10, #0
	add	r3, r3, #7
	strh	r3, [r8, #29]	@ unaligned
	beq	.L12113
	movw	r10, #9222
	mov	r3, #1
	str	r7, [sp]
	mov	ip, #0
	movw	fp, #9225
	str	r6, [sp, #8]
	movt	r10, 514
	mov	r9, r3
	str	r5, [sp, #12]
	mov	r8, ip
	movt	fp, 259
	add	r1, sp, #24
	add	r2, sp, #360
	add	lr, lr, #35
	mov	r7, r10
.L12102:
	str	r7, [r1]	@ unaligned
	add	ip, ip, #1
	add	r0, r0, #8
	strb	r3, [r1, #4]
	add	r3, r3, #2
	strb	r8, [r1, #5]
	sub	r6, r3, #1
	add	r10, r3, #3
	str	r1, [r0, #8]
	ldrb	r5, [r1, #4]	@ zero_extendqisi2
	add	r1, r1, #6
	str	fp, [r2]	@ unaligned
	strb	r6, [r2, #4]
	strb	r9, [r2, #5]
	strb	r5, [r2, #6]
	strb	r9, [r2, #7]
	strb	r8, [r2, #8]
	str	r2, [r0, #12]
	ldrb	r5, [r2, #4]	@ zero_extendqisi2
	add	r2, r2, #9
	strb	r5, [lr, #1]!
	ldr	r5, [r4, #320]
	cmp	r5, ip
	bhi	.L12102
	mov	r2, r10
	mov	ip, r10
	ldr	r7, [sp]
	lsl	r2, r2, #2
	mov	r10, r5
	ldr	r6, [sp, #8]
	ldr	r5, [sp, #12]
	add	fp, r2, #4
	add	r9, r2, #8
.L12101:
	ldr	r0, [r4, #324]
	cmp	r0, #0
	beq	.L12114
	ldr	r2, .L12128+4
	movw	lr, #9222
	movw	r10, #9225
	ldr	r0, [sp, #4]
	movt	lr, 258
	mov	r1, ip
	movt	r10, 515
	mov	ip, #0
	sub	fp, r1, r3
	str	lr, [sp]
	mov	r9, ip
	sub	r8, r2, #9
	str	r2, [sp, #8]
	mov	lr, #1
	add	r0, r0, r1, lsl #2
	str	r7, [sp, #12]
	add	r1, sp, #120
	add	r2, sp, #216
	str	r6, [sp, #16]
	mov	r7, r10
	str	r5, [sp, #20]
.L12104:
	ldr	r5, [sp]
	add	ip, ip, #1
	add	r0, r0, #8
	str	r5, [r1]	@ unaligned
	strb	r3, [r1, #4]
	add	r3, r3, #2
	strb	r9, [r1, #5]
	sub	r6, r3, #1
	add	r10, fp, r3
	str	r1, [r0, #-8]
	ldrb	r5, [r1, #4]	@ zero_extendqisi2
	add	r1, r1, #6
	str	r7, [r2]	@ unaligned
	strb	r6, [r2, #4]
	strb	lr, [r2, #5]
	strb	r5, [r2, #6]
	strb	lr, [r2, #7]
	strb	r9, [r2, #8]
	str	r2, [r0, #-4]
	ldrb	r5, [r1, #-2]	@ zero_extendqisi2
	add	r2, r2, #9
	strb	r5, [r8, #1]!
	ldr	r5, [r4, #324]
	cmp	r5, ip
	bhi	.L12104
	uxtb	r0, r5
	mov	r3, r10
	ldr	r7, [sp, #12]
	lsl	r2, r3, #2
	ldr	r6, [sp, #16]
	mov	ip, r10
	ldr	r5, [sp, #20]
	add	r1, r0, #4
	ldr	r10, [r4, #320]
	add	fp, r2, #4
	uxtb	r1, r1
	add	r9, r2, #8
.L12103:
	add	r3, ip, #3
	ldr	ip, .L12128+8
	strb	r1, [r5, #-2736]
	uxtb	r10, r10
	strb	r0, [r5, #-2733]
	ldr	r1, [sp, #4]
	add	r0, r10, #4
	sub	r8, ip, #4
	ldr	ip, [sp, #8]
	strb	r0, [r5, #-2716]
	add	r1, r1, r3, lsl #2
	strb	r10, [r5, #-2713]
	ldr	r5, [sp, #4]
	sub	lr, ip, #12
	mov	ip, #0
	str	r8, [r5, r2]
	sub	r2, r8, #12
	mov	r0, r5
	str	lr, [r5, fp]
	str	r2, [r5, r9]
	add	r2, r8, #20
	str	r2, [r5, r3, lsl #2]
	str	ip, [r1, #4]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12105
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L12108
	ldr	r2, .L12128
	mov	r3, #512
	ldr	r0, [sp, #4]
	strh	r3, [r8, #4]	@ movhi
	strh	r3, [r2, #4]	@ movhi
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12105
.L12108:
	ldr	r0, [sp, #4]
	mov	r5, #0
	bl	kfree
	b	.L12094
.L12099:
	ldr	r3, [r4, #92]
	mvn	r5, #18
	cmp	r3, #0
	bne	.L12110
	b	.L12109
.L12111:
	mvn	r5, #18
	b	.L12100
.L12112:
	mvn	r5, #11
	b	.L12097
.L12105:
	ldr	r0, [sp, #4]
	mvn	r5, #18
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L12097
.L12113:
	mov	r3, #4
	mov	r9, #24
	mov	ip, r3
	mov	fp, #20
	mov	r2, #16
	mov	r3, #1
	b	.L12101
.L12114:
	ldr	r3, .L12128+4
	mov	r1, #4
	str	r3, [sp, #8]
	b	.L12103
.L12129:
	.align	2
.L12128:
	.word	.LANCHOR5-2768
	.word	.LANCHOR5-2704
	.word	.LANCHOR5-2752
	.fnend
	.size	f_midi_bind, .-f_midi_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_bind, %function
frmnet_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bls	.L12131
	mvn	r3, #18
	movw	r0, #:lower16:.LC735
	ldr	r1, .L12175
	mov	r2, r3
	movt	r0, #:upper16:.LC735
	str	r3, [r4, #112]
	bl	printk
	ldr	r0, [r4, #112]
.L12130:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12131:
	movw	r5, #:lower16:.LANCHOR5
	add	r2, r3, #12
	add	r1, r3, #1
	movt	r5, #:upper16:.LANCHOR5
	sub	r7, r5, #2672
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r1, [r0, #44]
	sub	r1, r7, #12
	str	r3, [r4, #112]
	strb	r3, [r5, #-2694]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12171
	str	r0, [r4, #84]
	mov	r1, r7
	mov	r2, #0
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12172
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L12175+4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L12173
	str	r7, [r4, #136]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r6, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r8, r0, #0
	beq	.L12138
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r8]
	beq	.L12140
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r8]
	bne	.L12140
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L12138:
	mvn	r3, #11
	str	r3, [r4, #140]
.L12154:
	movw	r0, #:lower16:.LC741
	ldr	r1, .L12175
	movt	r0, #:upper16:.LC741
	bl	printk
	ldr	r5, [r4, #136]
.L12142:
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r5]
	str	r3, [r4, #136]
.L12137:
	ldr	r2, [r4, #88]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #88]
.L12135:
	ldr	r2, [r4, #84]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #84]
	b	.L12130
.L12140:
	mov	r3, #8
	cmn	r8, #4096
	str	r3, [r8, #4]
	str	r8, [r4, #140]
	bhi	.L12154
	movw	r3, #:lower16:frmnet_notify_complete
	ldr	r0, .L12175+8
	movt	r3, #:upper16:frmnet_notify_complete
	str	r3, [r8, #28]
	ldr	r3, [r4, #140]
	str	r4, [r3, #32]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12143
	ldr	r2, [r6]
	ldr	r3, [r2, #20]
	cmp	r3, #2
	bhi	.L12174
.L12144:
	ldr	ip, [r4, #84]
	movw	r1, #:lower16:.LC718
	movw	r3, #:lower16:.LC717
	ldr	r0, [r4, #88]
	movt	r1, #:upper16:.LC718
	movt	r3, #:upper16:.LC717
	ldr	r5, [r2, #20]
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	ldr	lr, [r0, #4]
	movw	r0, #:lower16:.LC742
	cmp	r5, #2
	movt	r0, #:upper16:.LC742
	movls	r3, r1
	ldr	r1, .L12175
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	printk
	mov	r0, #0
	b	.L12130
.L12143:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12149
.L12155:
	bl	kfree
.L12149:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12152
	bl	kfree
.L12152:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12153
	bl	kfree
.L12153:
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	cmp	r6, #0
	beq	.L12142
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #136]
	b	.L12142
.L12174:
	ldrb	r1, [r5, #-2682]	@ zero_extendqisi2
	ldrb	r2, [r5, #-2670]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2658]	@ zero_extendqisi2
	ldr	r0, .L12175+12
	strb	r1, [r5, #-2626]
	strb	r2, [r5, #-2614]
	strb	r3, [r5, #-2602]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12145
	ldr	r2, [r6]
	ldr	r3, [r2, #20]
	cmp	r3, #4
	bls	.L12144
	ldrb	r2, [r5, #-2670]	@ zero_extendqisi2
	ldrb	r1, [r5, #-2682]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2658]	@ zero_extendqisi2
	ldr	r0, .L12175+16
	strb	r1, [r5, #-2570]
	strb	r2, [r5, #-2558]
	strb	r3, [r5, #-2546]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	ldrne	r2, [r6]
	beq	.L12149
	b	.L12144
.L12145:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L12155
	b	.L12152
.L12171:
	movw	r0, #:lower16:.LC719
	ldr	r1, .L12175
	movt	r0, #:upper16:.LC719
	bl	printk
	mvn	r0, #18
	b	.L12130
.L12173:
	movw	r0, #:lower16:.LC736
	ldr	r1, .L12175
	movt	r0, #:upper16:.LC736
	bl	printk
	mvn	r0, #18
	b	.L12137
.L12172:
	movw	r0, #:lower16:.LC721
	ldr	r1, .L12175
	movt	r0, #:upper16:.LC721
	bl	printk
	mvn	r0, #18
	b	.L12135
.L12176:
	.align	2
.L12175:
	.word	.LANCHOR3-1148
	.word	.LANCHOR5-2660
	.word	.LANCHOR5-2648
	.word	.LANCHOR5-2592
	.word	.LANCHOR5-2536
	.fnend
	.size	frmnet_bind, .-frmnet_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind, %function
acm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [r0, #24]
	cmp	r3, #15
	bhi	.L12178
	add	ip, r3, #12
	add	r1, r3, #1
	movw	r2, #:lower16:.LANCHOR0
	movw	r5, #:lower16:.LANCHOR5
	str	r4, [r0, ip, lsl #2]
	movt	r2, #:upper16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR5
	strb	r1, [r0, #44]
	strb	r3, [r4, #144]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r2, #1914]
	strb	r3, [r2, #1938]
	strb	r3, [r5, #-2501]
	cmp	ip, #15
	bls	.L12230
.L12178:
	mvn	r7, #18
.L12182:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12188
	bl	kfree
.L12188:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12189
	bl	kfree
.L12189:
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	cmp	r6, #0
	beq	.L12190
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #152]
.L12190:
	cmp	r5, #0
	movw	r1, #:lower16:.LC745
	movne	r3, #0
	movt	r1, #:upper16:.LC745
	strne	r3, [r5]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r8]
	mov	r3, r4
	str	r7, [sp]
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L12177:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12230:
	add	r1, ip, #12
	add	r3, ip, #1
	strb	ip, [r2, #1926]
	strb	ip, [r5, #-2500]
	mov	r2, #0
	str	r4, [r0, r1, lsl #2]
	ldr	r1, .L12233
	strb	r3, [r0, #44]
	strb	ip, [r5, #-2492]
	strb	ip, [r4, #145]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12178
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L12233+4
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12178
	str	r0, [r4, #92]
	mov	r2, #0
	sub	r1, r5, #2464
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L12178
	str	r6, [r4, #152]
	ldr	r3, [r6, #8]
	mov	r1, #208
	str	r8, [r6]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	beq	.L12179
	mov	r2, #10
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r7, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r7]
	beq	.L12181
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r9, r0
	str	r0, [r7]
	bne	.L12181
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mvn	r7, #18
	ldr	r3, [r3, #12]
	blx	r3
	str	r9, [r4, #156]
	b	.L12182
.L12181:
	movw	r3, #:lower16:acm_cdc_notify_complete
	str	r7, [r4, #156]
	ldrb	r1, [r5, #-2486]	@ zero_extendqisi2
	movt	r3, #:upper16:acm_cdc_notify_complete
	ldrb	r2, [r5, #-2474]	@ zero_extendqisi2
	ldr	r0, .L12233+8
	str	r3, [r7, #28]
	ldr	r3, [r4, #156]
	strb	r1, [r5, #-2350]
	strb	r2, [r5, #-2338]
	strb	r1, [r5, #-2314]
	ldrb	r1, [r5, #-2462]	@ zero_extendqisi2
	str	r4, [r3, #32]
	ldr	r3, [r4, #20]
	strb	r1, [r5, #-2326]
	ldr	r3, [r3, #24]
	strb	r2, [r5, #-2302]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12185
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L12231
.L12183:
	cmp	r4, #0
	beq	.L12232
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC744
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC744
	mov	r7, #0
	str	r4, [r3, #4040]
	bl	printk
	b	.L12177
.L12179:
	str	r7, [r4, #156]
	mvn	r7, #18
	b	.L12182
.L12231:
	ldr	r0, .L12233+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12185
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L12183
	ldr	r0, .L12233+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12183
.L12185:
	ldr	r0, [r4, #16]
	mvn	r7, #11
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L12182
.L12232:
	movw	r0, #:lower16:.LC743
	mov	r7, r4
	movt	r0, #:upper16:.LC743
	bl	printk
	b	.L12177
.L12234:
	.align	2
.L12233:
	.word	.LANCHOR5-2488
	.word	.LANCHOR5-2476
	.word	.LANCHOR5-2292
	.word	.LANCHOR5-2452
	.word	.LANCHOR5-2408
	.fnend
	.size	acm_bind, .-acm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind, %function
rndis_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L12236
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR0
	movw	r6, #:lower16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR5
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #2862]
	strb	r3, [r5, #2870]
	strb	r3, [r6, #-2245]
	cmp	ip, #15
	bls	.L12283
.L12236:
	mvn	r5, #18
.L12238:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #172]
	cmp	r3, #0
	beq	.L12245
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12245:
	ldr	r3, [r4, #168]
	movw	r1, #:lower16:.LC729
	movt	r1, #:upper16:.LC729
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L12235:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12283:
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #2914]
	strb	ip, [r6, #-2244]
	sub	r1, r6, #2240
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12236
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L12285
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12236
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L12285+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12236
	str	r3, [r4, #168]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #172]
	beq	.L12240
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L12239
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L12239:
	str	r0, [r8]
	ldr	r3, [r4, #172]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L12240
	mov	r1, #8
	movw	r2, #:lower16:rndis_response_complete
	movt	r2, #:upper16:rndis_response_complete
	str	r1, [r3, #4]
	ldr	r0, [r4, #172]
	ldrb	r3, [r6, #-2238]	@ zero_extendqisi2
	ldrb	r1, [r6, #-2226]	@ zero_extendqisi2
	str	r4, [r0, #32]
	ldr	r0, [r4, #172]
	strb	r3, [r6, #-2202]
	strb	r1, [r6, #-2190]
	strb	r3, [r6, #-2166]
	ldrb	r3, [r6, #-2214]	@ zero_extendqisi2
	str	r2, [r0, #28]
	ldr	r2, [r4, #20]
	ldr	r0, .L12285+8
	strb	r3, [r6, #-2178]
	ldr	r2, [r2, #24]
	strb	r1, [r6, #-2154]
	strb	r3, [r6, #-2142]
	ldr	r6, [r2]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12243
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bhi	.L12284
.L12242:
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_open
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_close
	ldrb	r0, [r3, #3637]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_open
	movt	r2, #:upper16:rndis_close
	str	r1, [r4, #136]
	str	r2, [r4, #140]
	cmp	r0, #0
	bne	.L12236
	ldr	r1, [r4, #160]
	movw	r2, #:lower16:rndis_response_available
	add	lr, r4, #150
	ldr	ip, [r5, #2924]
	movt	r2, #:upper16:rndis_response_available
	mov	r5, #1
	str	r0, [r4, #164]
	strb	r5, [r3, #3637]
	cmp	r1, #0
	str	r0, [r3, #3644]
	str	r0, [r3, #3648]
	moveq	r5, r1
	str	lr, [r3, #3656]
	strb	ip, [r3, #3672]
	strb	r0, [r3, #3673]
	str	r2, [r3, #3680]
	str	r4, [r3, #3684]
	beq	.L12235
	ldr	r5, [r4, #156]
	cmp	r5, #0
	beq	.L12235
	str	r5, [r3, #3668]
	mov	r5, r0
	str	r1, [r3, #3676]
	b	.L12235
.L12240:
	mvn	r5, #11
	b	.L12238
.L12284:
	ldr	r0, .L12285+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12243
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bls	.L12242
	ldr	r0, .L12285+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12242
.L12243:
	ldr	r0, [r4, #16]
	mvn	r5, #11
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L12238
.L12286:
	.align	2
.L12285:
	.word	.LANCHOR5-2228
	.word	.LANCHOR5-2216
	.word	.LANCHOR5-2132
	.word	.LANCHOR5-2088
	.word	.LANCHOR5-2044
	.fnend
	.size	rndis_bind, .-rndis_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind, %function
rndis_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L12288
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR5
	strb	r2, [r0, #44]
	strb	r3, [r4, #120]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-1986]
	strb	r3, [r5, #-1978]
	strb	r3, [r5, #-1965]
	cmp	r0, #15
	bhi	.L12350
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r5, #-1964]
	strb	r0, [r5, #-1958]
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	ldr	r1, .L12353
	strb	r3, [r6, #44]
	strb	r0, [r4, #121]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12350
	str	r0, [r4, #88]
	mov	r2, #0
	sub	r1, r5, #1936
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12350
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L12353+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12350
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #160]
	beq	.L12292
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L12291
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L12291:
	str	r0, [r7]
	ldr	r2, [r4, #160]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12292
	mov	r1, #8
	movw	r3, #:lower16:rndis_qc_response_complete
	ldr	r0, .L12353+8
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r1, [r2, #4]
	ldr	r2, [r4, #160]
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12292
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12351
.L12293:
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_qc_open
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_qc_close
	ldrb	r0, [r3, #3637]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_qc_open
	movt	r2, #:upper16:rndis_qc_close
	str	r1, [r4, #112]
	str	r2, [r4, #116]
	cmp	r0, #0
	beq	.L12295
.L12350:
	ldr	r7, [r6, #24]
.L12288:
	mvn	r5, #18
.L12290:
	ldr	r3, [r7]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L12352
.L12298:
	cmp	r3, #2
	bhi	.L12299
.L12300:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12301
	bl	kfree
.L12301:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L12302
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12302:
	ldr	r3, [r4, #156]
	movw	r0, #:lower16:.LC716
	ldr	r1, .L12353+12
	movt	r0, #:upper16:.LC716
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L12287
.L12295:
	ldr	r5, [r4, #140]
	movw	r2, #:lower16:rndis_qc_response_available
	mov	r1, #1
	ldr	ip, .L12353+16
	movt	r2, #:upper16:rndis_qc_response_available
	add	lr, r4, #122
	strb	r1, [r3, #3637]
	str	r0, [r3, #3644]
	cmp	r5, #0
	str	r0, [r3, #3648]
	str	lr, [r3, #3656]
	str	r2, [r3, #3680]
	ldr	r2, [r4, #128]
	str	r4, [r3, #3684]
	str	r0, [r4, #144]
	strh	r1, [ip, #36]	@ movhi
	beq	.L12307
	ldrb	r1, [r4, #132]	@ zero_extendqisi2
	mov	ip, #2
	str	r2, [r3, #3668]
	str	r5, [r3, #3676]
	mov	r5, r0
	strb	r1, [r3, #3672]
	strb	ip, [r3, #3673]
.L12287:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12351:
	ldrb	r1, [r5, #-1946]	@ zero_extendqisi2
	ldrb	r2, [r5, #-1934]	@ zero_extendqisi2
	ldrb	r3, [r5, #-1922]	@ zero_extendqisi2
	ldr	r0, .L12353+20
	strb	r1, [r5, #-1866]
	strb	r2, [r5, #-1854]
	strb	r3, [r5, #-1842]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12292
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12293
	ldrb	r1, [r5, #-1946]	@ zero_extendqisi2
	ldrb	r2, [r5, #-1934]	@ zero_extendqisi2
	ldrb	r3, [r5, #-1922]	@ zero_extendqisi2
	ldr	r0, .L12353+24
	strb	r1, [r5, #-1786]
	strb	r2, [r5, #-1774]
	strb	r3, [r5, #-1762]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12293
	ldr	r3, [r6, #24]
	mvn	r5, #11
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L12298
.L12352:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12299
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L12298
.L12299:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12300
	bl	kfree
	b	.L12300
.L12292:
	mvn	r5, #11
	ldr	r7, [r6, #24]
	b	.L12290
.L12307:
	ldr	r7, [r6, #24]
	b	.L12290
.L12354:
	.align	2
.L12353:
	.word	.LANCHOR5-1948
	.word	.LANCHOR5-1924
	.word	.LANCHOR5-1912
	.word	.LANCHOR3-1136
	.word	.LANCHOR1+3636
	.word	.LANCHOR5-1832
	.word	.LANCHOR5-1752
	.fnend
	.size	rndis_qc_bind, .-rndis_qc_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind, %function
conn_gadget_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	movw	r0, #:lower16:.LC747
	.pad #20
	sub	sp, sp, #20
	movt	r0, #:upper16:.LC747
	str	r3, [r1, #84]
	bl	printk
	ldrb	r3, [r9, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12369
	add	r0, r3, #12
	add	r1, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	str	r4, [r9, r0, lsl #2]
	mov	ip, r2
	mov	r2, #0
	strb	r1, [r9, #44]
	ldr	r5, [r4, #84]
	mov	r0, ip
	movt	r0, #:upper16:.LANCHOR5
	sub	r1, r0, #1680
	strb	r3, [r0, #-1694]
	sub	r1, r1, #4
	str	r0, [sp, #12]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12383
	str	r4, [r0]
	mov	r2, #0
	ldr	r1, .L12386
	str	r0, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r10, r0, #0
	beq	.L12384
	movw	fp, #:lower16:conn_gadget_complete_out
	mov	r8, #4
	str	r4, [r10]
	movt	fp, #:upper16:conn_gadget_complete_out
	add	r7, r4, #88
	str	r10, [r4, #96]
.L12368:
	ldr	r6, [r4, #192]
	mov	r1, #208
	mov	r0, r10
	ldr	r2, [r10, #8]
	cmp	r6, #0
	ldr	r2, [r2, #8]
	moveq	r6, #4096
	blx	r2
	subs	r5, r0, #0
	mov	r1, #208
	mov	r0, r6
	beq	.L12362
	bl	__kmalloc
	mov	r2, r0
	mov	r0, r7
	cmp	r2, #0
	str	r2, [r5]
	beq	.L12385
	str	fp, [r5, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #132]
	add	ip, r5, #36
	add	r3, r4, #128
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #132]
	str	r3, [r5, #36]
	str	r2, [r5, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	beq	.L12373
	ldr	r10, [r4, #96]
	b	.L12368
.L12373:
	movw	r8, #:lower16:conn_gadget_complete_in
	mov	r6, #4
	movt	r8, #:upper16:conn_gadget_complete_in
	add	fp, r4, #120
.L12364:
	ldr	r0, [r4, #92]
	ldr	r1, [r4, #192]
	cmp	r1, #0
	moveq	r1, #4096
	bl	conn_gadget_request_new
	subs	r5, r0, #0
	mov	r0, r7
	beq	.L12362
	str	r8, [r5, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	add	r2, r5, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r4, #124]
	str	fp, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	subs	r6, r6, #1
	bne	.L12364
	ldr	r3, [r9, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	movwls	r1, #:lower16:.LC718
	movtls	r1, #:upper16:.LC718
	bls	.L12366
	ldr	ip, [sp, #12]
	ldrb	r0, [ip, #-1682]	@ zero_extendqisi2
	ldrb	r1, [ip, #-1670]	@ zero_extendqisi2
	strb	r0, [ip, #-1658]
	strb	r1, [ip, #-1646]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L12367
	strb	r0, [ip, #-1634]
	strb	r1, [ip, #-1622]
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r1, #:lower16:.LC746
	movthi	r1, #:upper16:.LC746
	bhi	.L12366
.L12367:
	movw	r3, #:lower16:.LC717
	movw	r1, #:lower16:.LC718
	movt	r3, #:upper16:.LC717
	cmp	r2, #2
	movt	r1, #:upper16:.LC718
	movhi	r1, r3
.L12366:
	movw	r0, #:lower16:.LC751
	ldr	r2, [r4]
	ldr	ip, [r4, #96]
	movt	r0, #:upper16:.LC751
	ldr	r3, [r4, #92]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	ldr	r3, [r3, #4]
	bl	printk
	mov	r0, #0
.L12355:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12385:
	ldr	r2, [r10, #8]
	mov	r1, r5
	mov	r0, r10
	ldr	r3, [r2, #12]
	blx	r3
.L12362:
	movw	r0, #:lower16:.LC750
	ldr	r1, .L12386+4
	movt	r0, #:upper16:.LC750
	bl	printk
	mvn	r0, #0
	b	.L12355
.L12369:
	mvn	r0, #18
	b	.L12355
.L12384:
	movw	r0, #:lower16:.LC749
	movt	r0, #:upper16:.LC749
	bl	printk
	mvn	r0, #18
	b	.L12355
.L12383:
	movw	r0, #:lower16:.LC748
	movt	r0, #:upper16:.LC748
	bl	printk
	mvn	r0, #18
	b	.L12355
.L12387:
	.align	2
.L12386:
	.word	.LANCHOR5-1672
	.word	.LANCHOR3-1120
	.fnend
	.size	conn_gadget_function_bind, .-conn_gadget_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_bind, %function
acc_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r2, #:lower16:.LC752
	mov	r4, r1
	strd	r6, [sp, #8]
	movt	r2, #:upper16:.LC752
	mov	r1, #0
	strd	r8, [sp, #16]
	mov	r6, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r0, [sp]
	ldr	r0, .L12436
	bl	__hid_register_driver
	subs	r8, r0, #0
	bne	.L12388
	str	r8, [r4, #1644]
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12391
	movw	r5, #:lower16:.LANCHOR0
	add	ip, r3, #12
	ldr	r1, .L12436+4
	movt	r5, #:upper16:.LANCHOR0
	add	r0, r3, #1
	mov	r2, r8
	strb	r3, [r5, #2138]
	ldr	r3, [sp]
	str	r4, [r3, ip, lsl #2]
	strb	r0, [r3, #44]
	ldr	r5, [r4, #84]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12391
	str	r4, [r0]
	mov	r2, r8
	ldr	r1, .L12436+8
	str	r0, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12391
	str	r4, [r0]
	mov	r2, r8
	ldr	r1, .L12436+8
	str	r0, [r4, #96]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12391
	add	r9, r4, #1648
	movw	fp, #:lower16:acc_complete_in
	str	r4, [r0]
	add	r9, r9, #8
	movt	fp, #:upper16:acc_complete_in
	str	r0, [r4, #96]
	add	r6, r4, #88
	mov	r7, #4
.L12395:
	ldr	r10, [r4, #92]
	mov	r1, #208
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	beq	.L12394
	bl	kmalloc_order_trace
	mov	r3, r0
	mov	r0, r6
	cmp	r3, #0
	str	r3, [r5]
	beq	.L12433
	str	fp, [r5, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1660]
	add	r2, r5, #36
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #1660]
	str	r9, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	bne	.L12395
	add	r5, r4, #1680
	movw	r10, #:lower16:acc_complete_out
	add	r3, r4, #1696
	add	r5, r5, #8
	movt	r10, #:upper16:acc_complete_out
	str	r3, [sp, #4]
.L12397:
	ldr	fp, [r4, #96]
	mov	r1, #208
	ldr	r2, [fp, #8]
	mov	r0, fp
	ldr	r2, [r2, #8]
	blx	r2
	subs	r7, r0, #0
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	beq	.L12394
	bl	kmalloc_order_trace
	cmp	r0, #0
	str	r0, [r7]
	beq	.L12434
	ldr	r3, [sp, #4]
	str	r10, [r7, #28]
	str	r7, [r5], #4
	cmp	r5, r3
	bne	.L12397
	ldr	r3, [sp]
	ldr	r2, [r3, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L12388
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldrb	r0, [r3, #-1610]	@ zero_extendqisi2
	ldrb	r1, [r3, #-1598]	@ zero_extendqisi2
	strb	r0, [r3, #-1586]
	strb	r1, [r3, #-1574]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L12388
	strb	r0, [r3, #-1562]
	strb	r1, [r3, #-1550]
.L12388:
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12433:
	ldr	r2, [r10, #8]
	mov	r1, r5
	mov	r0, r10
	ldr	r3, [r2, #12]
	blx	r3
.L12394:
	movw	r0, #:lower16:.LC753
	mov	r10, #256
	movt	r0, #:upper16:.LC753
	mov	r8, #512
	bl	printk
.L12399:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1656]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r9, r5
	sub	r7, r5, #36
	beq	.L12435
	ldrd	r2, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r5]
	str	r8, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L12401
	ldr	fp, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12399
.L12434:
	ldr	r2, [fp, #8]
	mov	r1, r7
	mov	r0, fp
	ldr	r3, [r2, #12]
	blx	r3
	b	.L12394
.L12391:
	mvn	r8, #18
	b	.L12388
.L12435:
	bl	_raw_spin_unlock_irqrestore
.L12401:
	ldr	r5, [r4, #1688]
	cmp	r5, #0
	beq	.L12403
	ldr	r6, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L12403:
	ldr	r5, [r4, #1692]
	cmp	r5, #0
	beq	.L12404
	ldr	r4, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L12404:
	mvn	r8, #0
	b	.L12388
.L12437:
	.align	2
.L12436:
	.word	.LANCHOR0+1748
	.word	.LANCHOR5-1612
	.word	.LANCHOR5-1600
	.fnend
	.size	acc_function_bind, .-acc_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind, %function
mtp_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #24]
	str	r3, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12495
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r2, r3, #1
	mov	r4, r1
	add	r1, r3, #12
	strd	r6, [sp, #8]
	movw	r5, #:lower16:.LANCHOR0
	strd	r8, [sp, #16]
	movw	r6, #:lower16:.LANCHOR5
	movt	r5, #:upper16:.LANCHOR0
	strd	r10, [sp, #24]
	movt	r6, #:upper16:.LANCHOR5
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r4, [r0, r1, lsl #2]
	sub	r1, r6, #1536
	strb	r2, [r0, #44]
	ldr	r7, [r4, #84]
	sub	r1, r1, #4
	strb	r3, [r5, #2278]
	mov	r2, #0
	str	r0, [sp, #4]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12441
	str	r4, [r0]
	mov	r2, #0
	ldr	r1, .L12499
	str	r0, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12441
	str	r4, [r0]
	mov	r2, #0
	ldr	r1, .L12499+4
	str	r0, [r4, #96]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12441
	str	r4, [r0]
	ldr	r10, [r5, #1744]
	str	r0, [r4, #100]
	cmp	r10, #16384
	bls	.L12442
	mov	r2, #4
	str	r2, [r6, #-1504]
.L12443:
	movw	r3, #:lower16:mtp_complete_in
	mov	r8, #0
	movt	r3, #:upper16:mtp_complete_in
	add	r9, r4, #88
	str	r3, [sp]
	b	.L12464
.L12446:
	ldr	r3, [sp]
	str	r3, [r7, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #120]
	add	ip, r7, #36
	add	r3, r4, #116
	mov	r1, r0
	mov	r0, r9
	str	ip, [r4, #120]
	str	r3, [r7, #36]
	str	r2, [r7, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6, #-1504]
	cmp	r8, r3
	bcs	.L12444
	ldr	r10, [r5, #1744]
.L12464:
	ldr	fp, [r4, #92]
	mov	r1, #208
	add	r8, r8, #1
	ldr	r2, [fp, #8]
	mov	r0, fp
	ldr	r2, [r2, #8]
	blx	r2
	subs	r7, r0, #0
	mov	r1, #208
	mov	r0, r10
	beq	.L12445
	bl	__kmalloc
	mov	r3, r0
	mov	r0, r9
	cmp	r3, #0
	str	r3, [r7]
	bne	.L12446
	ldr	r3, [fp, #8]
	mov	r1, r7
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L12445:
	ldr	r3, [r5, #1744]
	cmp	r3, #16384
	bls	.L12448
	add	r9, r4, #116
	add	r8, r4, #88
	b	.L12449
.L12452:
	ldr	fp, [r4, #92]
	ldr	r0, [r10, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L12449:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #116]
	mov	r2, r0
	mov	r0, r8
	mov	r1, r2
	cmp	r9, r10
	sub	r7, r10, #36
	beq	.L12496
	ldr	ip, [r10]
	mov	r3, #256
	ldr	r2, [r10, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r3, [r10]
	mov	r3, #512
	str	r3, [r10, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L12452
.L12451:
	mov	r2, #16384
	mov	r1, #8
	mov	r10, r2
	str	r2, [r5, #1744]
	str	r1, [r6, #-1504]
.L12442:
	ldr	r2, [r6, #-1504]
	cmp	r2, #0
	bne	.L12443
.L12444:
	ldr	r1, [r5, #536]
	ubfx	r3, r1, #0, #10
	cmp	r3, #0
	bne	.L12497
.L12453:
	ldr	r9, [r4, #96]
	movw	r7, #:lower16:mtp_complete_out
	mov	r8, #16384
	movt	r7, #:upper16:mtp_complete_out
.L12461:
	mov	r0, r9
	bl	mtp_request_new
	cmp	r0, #0
	beq	.L12454
	str	r7, [r0, #28]
	ldr	r1, [r5, #536]
	str	r0, [r4, #168]
	ldr	r0, [r4, #96]
	bl	mtp_request_new
	cmp	r0, #0
	beq	.L12455
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:mtp_complete_intr
	str	r7, [r0, #28]
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:mtp_complete_intr
	str	r0, [r4, #172]
	mov	r8, #5
.L12456:
	ldr	r7, [r4, #100]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #28
	mov	r1, #208
	mov	r3, #16
	beq	.L12448
	ldr	ip, [r10, #24]
	subs	r0, ip, #0
	streq	r3, [r5]
	beq	.L12463
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L12498
.L12463:
	add	r7, r4, #88
	str	r9, [r5, #28]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #128]
	add	ip, r5, #36
	add	r3, r4, #124
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #128]
	str	r3, [r5, #36]
	str	r2, [r5, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	bne	.L12456
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L12467
	ldrb	r1, [r6, #-1538]	@ zero_extendqisi2
	ldrb	r2, [r6, #-1526]	@ zero_extendqisi2
	strb	r1, [r6, #-1498]
	strb	r2, [r6, #-1486]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12467
	mov	r0, r8
	strb	r1, [r6, #-1474]
	strb	r2, [r6, #-1462]
.L12438:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12498:
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L12448:
	movw	r0, #:lower16:.LC754
	movt	r0, #:upper16:.LC754
	bl	printk
	mvn	r0, #0
	b	.L12438
.L12497:
	mov	r3, #16384
	mov	r1, r3
	str	r3, [r5, #536]
	b	.L12453
.L12467:
	mov	r0, r8
	b	.L12438
.L12496:
	bl	_raw_spin_unlock_irqrestore
	b	.L12451
.L12454:
	ldr	r3, [r5, #536]
	cmp	r3, #16384
	bls	.L12448
	ldr	r9, [r4, #96]
.L12459:
	mov	r1, #16384
	str	r8, [r5, #536]
	b	.L12461
.L12441:
	mvn	r0, #18
	b	.L12438
.L12455:
	ldr	r3, [r5, #536]
	cmp	r3, #16384
	bls	.L12448
	ldr	r9, [r4, #96]
	ldr	r10, [r4, #172]
	cmp	r10, #0
	beq	.L12459
	ldr	r0, [r10]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r9, [r4, #96]
	b	.L12459
.L12495:
	mvn	r0, #18
	bx	lr
.L12500:
	.align	2
.L12499:
	.word	.LANCHOR5-1528
	.word	.LANCHOR5-1516
	.fnend
	.size	mtp_function_bind, .-mtp_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind, %function
adb_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #24]
	str	r3, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12530
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	add	r1, r3, #1
	strd	r6, [sp, #8]
	mov	r2, #0
	strd	r8, [sp, #16]
	mov	r8, r0
	add	r0, r3, #12
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LANCHOR5
	str	lr, [sp, #32]
	movt	r10, #:upper16:.LANCHOR5
	.pad #4
	sub	sp, sp, #4
	str	r4, [r8, r0, lsl #2]
	strb	r1, [r8, #44]
	ldr	r5, [r4, #84]
	sub	r1, r10, #1440
	strb	r3, [r10, #-1450]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12504
	str	r4, [r0]
	mov	r2, #0
	ldr	r1, .L12533
	str	r0, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r5, r0, #0
	beq	.L12504
	str	r4, [r5]
	mov	r1, #208
	str	r5, [r4, #96]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L12506
	movw	fp, #:lower16:kmalloc_caches
	movt	fp, #:upper16:kmalloc_caches
	ldr	r0, [fp, #48]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r6]
	beq	.L12508
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	beq	.L12531
.L12508:
	movw	r3, #:lower16:adb_complete_out
	movw	r9, #:lower16:adb_complete_in
	movt	r3, #:upper16:adb_complete_out
	movt	r9, #:upper16:adb_complete_in
	mov	r7, #4
	str	r3, [r6, #28]
	str	r6, [r4, #152]
.L12512:
	ldr	r6, [r4, #92]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #4096
	mov	r1, #208
	mov	r3, #16
	beq	.L12506
	ldr	ip, [fp, #48]
	subs	r0, ip, #0
	streq	r3, [r5]
	beq	.L12511
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L12532
.L12511:
	add	r6, r4, #88
	str	r9, [r5, #28]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #124]
	add	ip, r5, #36
	add	r3, r4, #120
	mov	r1, r0
	mov	r0, r6
	str	ip, [r4, #124]
	str	r3, [r5, #36]
	str	r2, [r5, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	bne	.L12512
	ldr	r3, [r8, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L12515
	ldrb	r1, [r10, #-1438]	@ zero_extendqisi2
	ldrb	r2, [r10, #-1426]	@ zero_extendqisi2
	strb	r1, [r10, #-1414]
	strb	r2, [r10, #-1402]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12515
	mov	r0, r7
	strb	r1, [r10, #-1390]
	strb	r2, [r10, #-1378]
.L12501:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12532:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L12506:
	movw	r0, #:lower16:.LC755
	movt	r0, #:upper16:.LC755
	bl	printk
	mvn	r0, #0
	b	.L12501
.L12515:
	mov	r0, r7
	b	.L12501
.L12531:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12506
.L12504:
	mvn	r0, #18
	b	.L12501
.L12530:
	mvn	r0, #18
	bx	lr
.L12534:
	.align	2
.L12533:
	.word	.LANCHOR5-1428
	.fnend
	.size	adb_function_bind, .-adb_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs.constprop.158, %function
ffs_do_descs.constprop.158:
	.fnstart
	@ args = 4, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, #0
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [sp, #56]
	str	r2, [sp, #4]
.L12553:
	ldr	r3, [r7, #48]
	cmp	r5, fp
	lsl	r1, r5, #2
	moveq	r4, #0
	cmp	r3, #0
	beq	.L12537
	cmp	r4, #0
	str	r4, [r3, r5, lsl #2]
	mov	r2, #2
	beq	.L12540
.L12565:
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #5
	beq	.L12564
.L12544:
	cmp	r6, #1
	bls	.L12558
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r6, r2
	bcc	.L12558
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r3, r3, #4
	cmp	r3, #44
	ldrls	pc, [pc, r3, asl #2]
	b	.L12558
.L12547:
	.word	.L12546
	.word	.L12548
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12549
	.word	.L12558
	.word	.L12550
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12558
	.word	.L12551
.L12548:
	sub	r3, r2, #7
	tst	r3, #253
	bne	.L12558
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L12552
.L12558:
	mvn	r0, #21
.L12535:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12549:
	cmp	r2, #5
	bne	.L12558
.L12552:
	sub	r6, r6, r2
	add	r4, r4, r2
	add	r5, r5, #1
	b	.L12553
.L12551:
	cmp	r2, #6
	beq	.L12552
	b	.L12558
.L12546:
	cmp	r2, #9
	beq	.L12552
	b	.L12558
.L12550:
	cmp	r2, #8
	beq	.L12552
	b	.L12558
.L12537:
	ldr	r2, [r7, #44]
	cmp	r2, #0
	ldreq	r3, [r7, #52]
	strne	r4, [r2, r1]
	movne	r2, #1
	streq	r4, [r3, r1]
	cmp	r4, #0
	bne	.L12565
.L12540:
	ldr	r3, [sp, #4]
	sub	r0, r3, r6
	b	.L12535
.L12564:
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	ldr	r10, [r7, #12]
	and	r3, r3, #15
	sub	r8, r3, #1
	rsb	r8, r8, r8, lsl #3
	str	r3, [sp, #8]
	lsl	r3, r8, #2
	add	r9, r10, r3
	add	r2, r9, r2, lsl #2
	ldr	r1, [r2, #8]
	cmp	r1, #0
	bne	.L12558
	str	r4, [r2, #8]
	ldr	r2, [r10, r8, lsl #2]
	cmp	r2, #0
	beq	.L12543
	ldr	r3, [r9, #8]
	ldrh	r2, [r4, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r2, #0
	strb	r3, [r4, #2]
	bne	.L12544
	ldr	r3, [r9, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r4, #4]	@ unaligned
	b	.L12544
.L12543:
	mov	r1, r4
	ldr	r0, [r7, #4]
	str	r3, [sp, #12]
	bl	usb_ep_autoconfig_ss
	subs	r2, r0, #0
	beq	.L12556
	ldr	lr, [r7, #12]
	mov	r1, #208
	ldr	r3, [sp, #12]
	str	r2, [sp, #12]
	ldr	ip, [r2, #8]
	add	r3, lr, r3
	str	r3, [r2]
	ldr	r3, [ip, #8]
	blx	r3
	cmp	r0, #0
	beq	.L12557
	ldr	r2, [sp, #12]
	str	r2, [r10, r8, lsl #2]
	ldr	r2, [sp, #8]
	str	r0, [r9, #4]
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r7, r3
	strb	r2, [r3, #16]
	b	.L12544
.L12556:
	movw	r0, #65012
	movt	r0, 65535
	b	.L12535
.L12557:
	mvn	r0, #11
	b	.L12535
	.fnend
	.size	ffs_do_descs.constprop.158, .-ffs_do_descs.constprop.158
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_bind, %function
ffs_func_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r2, r1, #36
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r1, #-32]
	.pad #44
	sub	sp, sp, #44
	ldr	r6, [r1, #-28]
	str	r2, [sp, #12]
	ldr	r3, [r3, #20]
	ldr	r4, [r6, #168]
	adds	r0, r4, #0
	movne	r0, #1
	cmp	r3, #2
	movls	r10, #0
	strls	r10, [sp, #20]
	bls	.L12567
	ldr	r10, [r6, #172]
	cmp	r10, #0
	movne	r0, #1
	movne	r10, r0
	cmp	r3, #4
	movls	r3, #0
	strls	r3, [sp, #20]
	bls	.L12567
	ldr	r3, [r6, #176]
	cmp	r3, #0
	movne	r0, #1
	streq	r3, [sp, #20]
	strne	r0, [sp, #20]
.L12567:
	ldrh	r3, [r6, #184]
	cmp	r4, #0
	lsl	r2, r3, #3
	sub	ip, r2, r3
	sub	r3, r2, r3
	lsl	ip, ip, #2
	str	ip, [sp, #16]
	addne	ip, r4, #1
	moveq	ip, r4
	add	r3, r3, ip
	cmp	r10, #0
	lsl	r2, r3, #2
	str	r2, [sp, #32]
	ldrne	r2, [r6, #172]
	addne	r2, r2, #1
	addne	r3, r3, r2
	lsl	r2, r3, #2
	str	r2, [sp, #24]
	ldr	r2, [sp, #20]
	cmp	r2, #0
	beq	.L12613
	ldr	r2, [r6, #176]
	add	r2, r2, #1
	add	r3, r3, r2
	lsl	r2, r3, #2
	str	r2, [sp, #28]
.L12571:
	ldrh	fp, [r6, #182]
	cmp	r0, #0
	ldr	r9, [r6, #152]
	add	r3, fp, r3, lsl #1
	lsl	fp, fp, #1
	lsl	r5, r3, #1
	add	r0, r9, #3
	str	r3, [sp, #36]
	add	r0, r0, r5
	bic	r0, r0, #3
	beq	.L12614
	mov	r7, r1
	mov	r1, #208
	bl	__kmalloc
	subs	r8, r0, #0
	mvneq	r4, #11
	beq	.L12566
	ldr	r3, [sp, #16]
	cmp	r3, #0
	bne	.L12651
.L12573:
	ldr	r1, [r6, #148]
	add	r5, r8, r5
	mov	r0, r5
	ldr	r2, [r6, #156]
	add	r1, r1, #16
	bl	memcpy
	ldr	r3, [r7, #-28]
	ldr	r3, [r3, #176]
	cmp	r3, #0
	bne	.L12652
.L12574:
	ldr	r3, [sp, #28]
	cmp	fp, #0
	add	r3, r8, r3
	bne	.L12653
.L12575:
	ldrh	r1, [r6, #184]
	cmp	r1, #0
	beq	.L12576
	rsb	r2, r1, r1, lsl #3
	mvn	r0, #0
	add	r2, r8, r2, lsl #2
.L12577:
	subs	r1, r1, #1
	strb	r0, [r2, #20]
	sub	r2, r2, #28
	bne	.L12577
.L12576:
	cmp	r4, #0
	str	r8, [r7, #-24]
	str	r3, [r7, #-4]
	beq	.L12578
	ldr	ip, [sp, #12]
	mov	r2, r9
	ldr	r3, [sp, #16]
	add	r1, r8, r3
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	r1, [r7, #16]
	mov	r1, r5
	ldr	r0, [r6, #168]
	str	ip, [sp]
	bl	ffs_do_descs.constprop.158
	subs	r4, r0, #0
	blt	.L12566
.L12578:
	cmp	r10, #0
	beq	.L12579
	ldr	r3, [sp, #32]
	sub	fp, r9, r4
	mov	r2, fp
	add	r1, r8, r3
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	r1, [r7, #8]
	ldr	r1, [sp, #12]
	ldr	r0, [r6, #172]
	str	r1, [sp]
	add	r1, r5, r4
	bl	ffs_do_descs.constprop.158
	cmp	r0, #0
	blt	.L12654
	ldr	r3, [sp, #20]
	cmp	r3, #0
	beq	.L12655
.L12604:
	ldr	ip, [sp, #12]
	add	r4, r4, r0
	sub	r2, fp, r0
	ldr	r3, [sp, #24]
	add	r1, r5, r4
	add	r3, r8, r3
	str	r3, [r7, #12]
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	ldr	r0, [r6, #176]
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	ip, [sp]
	bl	ffs_do_descs.constprop.158
	subs	r4, r0, #0
	blt	.L12566
	cmp	r10, #0
	ldr	r3, [r6, #168]
	bne	.L12656
.L12602:
	ldr	r1, [r6, #176]
.L12603:
	adds	r1, r1, r3
	moveq	r0, #1
	movne	r0, #0
	cmp	r5, #0
	moveq	r0, #1
	cmp	r0, #0
	bne	.L12582
	cmp	r9, #1
	bls	.L12618
	ldr	r3, [sp, #36]
	ldrb	r3, [r8, r3, lsl #1]	@ zero_extendqisi2
	cmp	r9, r3
	bcc	.L12618
	mov	r4, r9
.L12585:
	ldrb	r2, [r5, #1]	@ zero_extendqisi2
	sub	r2, r2, #4
	cmp	r2, #44
	ldrls	pc, [pc, r2, asl #2]
	b	.L12618
.L12587:
	.word	.L12586
	.word	.L12588
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12589
	.word	.L12618
	.word	.L12590
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12618
	.word	.L12591
.L12659:
	ldr	lr, [r7, #-36]
	ldrb	ip, [lr, #44]	@ zero_extendqisi2
	cmp	ip, #15
	bls	.L12657
	mvn	r4, #18
.L12566:
	mov	r0, r4
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12613:
	ldr	r2, [sp, #24]
	str	r2, [sp, #28]
	b	.L12571
.L12588:
	sub	r2, r3, #7
	tst	r2, #253
	bne	.L12618
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L12594
.L12618:
	mvn	r4, #21
	b	.L12566
.L12589:
	cmp	r3, #5
	bne	.L12618
.L12594:
	adds	r5, r5, r3
	add	r0, r0, #1
	moveq	r2, #1
	movne	r2, #0
	sub	r4, r4, r3
	cmp	r1, r0
	movne	r3, r2
	orreq	r3, r2, #1
	cmp	r3, #0
	bne	.L12658
	cmp	r4, #1
	bls	.L12618
	ldrb	r3, [r5]	@ zero_extendqisi2
	cmp	r4, r3
	bcs	.L12585
	b	.L12618
.L12591:
	cmp	r3, #6
	beq	.L12594
	b	.L12618
.L12586:
	cmp	r3, #9
	bne	.L12618
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	ldr	ip, [r7, #-4]
	lsl	r2, r2, #1
	ldrsh	ip, [ip, r2]
	cmp	ip, #0
	blt	.L12659
.L12592:
	ldrb	r2, [r5, #8]	@ zero_extendqisi2
	strb	ip, [r5, #2]
	cmp	r2, #0
	beq	.L12594
	ldr	ip, [r7, #-28]
	sub	r2, r2, #-536870911
	ldr	ip, [ip, #192]
	ldr	ip, [ip]
	ldr	ip, [ip, #4]
	ldrb	r2, [ip, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r5, #8]
	b	.L12594
.L12656:
	ldr	r2, [r6, #172]
	add	r3, r3, r2
	b	.L12602
.L12590:
	cmp	r3, #8
	bne	.L12618
	ldrb	r2, [r5, #7]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L12594
	ldr	ip, [r7, #-28]
	sub	r2, r2, #-536870911
	ldr	ip, [ip, #192]
	ldr	ip, [ip]
	ldr	ip, [ip, #4]
	ldrb	r2, [ip, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r5, #7]
	b	.L12594
.L12658:
	subs	r4, r9, r4
	bmi	.L12566
.L12582:
	add	r5, r6, #120
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #100]
	mov	r7, r0
	add	r0, r6, #104
	ldrh	r2, [r6, #108]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #100]
	cmp	r2, #0
	beq	.L12620
	add	r2, r0, r2
	mov	r3, r0
.L12601:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L12601
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L12599:
	add	r3, r6, r2
	strh	r1, [r6, #108]	@ movhi
	mov	r4, #0
	mov	r0, r5
	mov	r2, #1
	mov	r1, #3
	strb	r4, [r3, #104]
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L12566
.L12653:
	mov	r0, r3
	mov	r2, fp
	mov	r1, #255
	bl	memset
	mov	r3, r0
	b	.L12575
.L12652:
	ldr	r1, [r6, #148]
	ldr	r0, [r6, #156]
	ldr	r3, [r6, #160]
	ldr	r2, [r6, #164]
	add	r0, r5, r0
	add	r1, r1, r3
	bl	memcpy
	b	.L12574
.L12651:
	mov	r1, r3
	bl	__memzero
	b	.L12573
.L12657:
	add	r10, ip, #12
	add	r8, ip, #1
	str	r7, [lr, r10, lsl #2]
	strb	r8, [lr, #44]
	ldr	lr, [r7, #-4]
	strh	ip, [lr, r2]	@ movhi
	ldr	ip, [r7, #-4]
	ldrsh	ip, [ip, r2]
	b	.L12592
.L12614:
	movw	r4, #65012
	movt	r4, 65535
	b	.L12566
.L12620:
	mov	r1, #1
	b	.L12599
.L12579:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	movne	r0, r10
	subne	fp, r9, r4
	bne	.L12604
	ldr	r3, [r6, #168]
	ldr	r1, [sp, #20]
	b	.L12603
.L12655:
	mov	r1, r3
	ldrd	r2, [r6, #168]
	add	r3, r3, r2
	b	.L12603
.L12654:
	mov	r4, r0
	b	.L12566
	.fnend
	.size	ffs_func_bind, .-ffs_func_bind
	.align	2
	.global	usb_ep_autoconfig
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig, %function
usb_ep_autoconfig:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r0, #28]
	movw	r0, #:lower16:.LC324
	ldrb	r8, [r1, #3]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC324
	mov	r1, r10
	bl	strcmp
	ldr	r9, [r5, #8]!
	cmp	r0, #0
	and	r8, r8, #3
	sub	r4, r9, #12
	mov	fp, r9
	bne	.L12661
	cmp	r8, #3
	beq	.L12748
	movw	r0, #:lower16:.LC327
	mov	r1, r10
	movt	r0, #:upper16:.LC327
	bl	strcmp
	cmp	r0, #0
	bne	.L12671
.L12672:
	cmp	r8, #2
	beq	.L12749
.L12671:
	cmp	fp, r5
	beq	.L12676
.L12670:
	movw	r8, #:lower16:_ctype
	movw	r9, #:lower16:.LANCHOR1
	movw	r10, #:lower16:.LC326
	movt	r8, #:upper16:_ctype
	movt	r9, #:upper16:.LANCHOR1
	movt	r10, #:upper16:.LC326
	b	.L12695
.L12679:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L12676
.L12695:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L12679
	ldrb	r3, [r6, #3]	@ zero_extendqisi2
	ands	fp, r3, #3
	beq	.L12679
	ldr	r3, [r4, #4]
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r2, #101
	bne	.L12679
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	cmp	r2, #45
	beq	.L12680
	mov	r0, r3
	mov	r1, #45
	str	r3, [sp, #4]
	bl	strrchr
	subs	r2, r0, #0
	ldr	r3, [sp, #4]
	beq	.L12681
	cmp	fp, #2
	beq	.L12683
	cmp	fp, #3
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	bne	.L12736
	cmp	r3, #115
	str	r2, [sp, #4]
	beq	.L12679
	mov	r0, r10
	ldr	r1, [r7, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r2, [sp, #4]
	bne	.L12685
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #105
	bne	.L12685
	b	.L12679
.L12661:
	movw	r0, #:lower16:.LC327
	mov	r1, r10
	movt	r0, #:upper16:.LC327
	bl	strcmp
	cmp	r0, #0
	bne	.L12671
	cmp	r8, #3
	bne	.L12672
	cmp	r5, r9
	movwne	r9, #:lower16:.LC714
	movne	r8, r4
	movtne	r9, #:upper16:.LC714
	bne	.L12673
	b	.L12676
.L12750:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L12670
.L12673:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L12750
.L12677:
	cmp	r8, #0
	beq	.L12670
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L12670
	mov	r2, r6
	mov	r1, r8
	mov	r0, r7
	bl	ep_matches.part.17
	cmp	r0, #0
	bne	.L12700
	ldr	fp, [r7, #8]
	sub	r4, fp, #12
	b	.L12671
.L12748:
	cmp	r5, r9
	beq	.L12676
	movw	r9, #:lower16:.LC712
	mov	r8, r4
	movt	r9, #:upper16:.LC712
	b	.L12665
.L12751:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L12666
.L12665:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L12751
	cmp	r8, #0
	beq	.L12666
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L12666
	mov	r2, r6
	mov	r1, r8
	mov	r0, r7
	bl	ep_matches.part.17
	cmp	r0, #0
	bne	.L12700
	ldr	r4, [r7, #8]
	cmp	r5, r4
	sub	r4, r4, #12
	bne	.L12666
.L12676:
	mov	r4, #0
.L12660:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12681:
	mov	r0, r3
	str	r3, [sp, #4]
	bl	strlen
	ldr	r3, [sp, #4]
	add	r2, r3, r0
.L12685:
	ldrb	r3, [r2, #-1]	@ zero_extendqisi2
	ldrb	r2, [r8, r3]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L12680
	ldrsb	r2, [r6, #2]
	cmp	r2, #0
	blt	.L12752
	cmp	r3, #116
	bne	.L12679
.L12680:
	ldrh	r3, [r6, #4]	@ unaligned
	cmp	r3, #0
	ldrheq	r3, [r4, #20]
	strheq	r3, [r6, #4]	@ unaligned
	cmp	fp, #1
	ubfx	r2, r3, #0, #11
	beq	.L12689
	cmp	fp, #3
	bne	.L12688
	ldr	r0, [r7, #20]
	cmp	r0, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L12679
.L12689:
	ldrh	r1, [r4, #20]
	cmp	r1, r2
	bcc	.L12679
	ldr	r1, [r7, #20]
	cmp	r1, #2
	bhi	.L12688
	cmp	r2, #1024
	bcs	.L12679
	tst	r3, #6144
	bne	.L12679
.L12688:
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	and	r3, r3, #128
	strb	r3, [r6, #2]
	ldr	r0, [r4, #4]
	ldrb	r2, [r0, #2]	@ zero_extendqisi2
	ldrb	r2, [r8, r2]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L12753
	ldr	r2, [r9, #3604]
	add	r2, r2, #1
	cmp	r2, #15
	str	r2, [r9, #3604]
	bhi	.L12679
	orr	r3, r3, r2
	uxtb	r3, r3
	strb	r3, [r6, #2]
.L12693:
	cmp	fp, #2
	bne	.L12694
	ldrh	r2, [r4, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r6, #4]	@ unaligned
.L12694:
	strb	r3, [r4, #25]
.L12667:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L12660
.L12749:
	ldrsb	r3, [r6, #2]
	cmp	r3, #0
	bge	.L12671
	cmp	r5, r9
	beq	.L12676
	movw	r9, #:lower16:.LC715
	mov	r8, r4
	movt	r9, #:upper16:.LC715
	b	.L12678
.L12754:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L12670
.L12678:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L12754
	b	.L12677
.L12666:
	movw	r9, #:lower16:.LC713
	mov	r8, r4
	movt	r9, #:upper16:.LC713
	b	.L12669
.L12755:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L12670
.L12669:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L12755
	b	.L12677
.L12683:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L12679
	b	.L12685
.L12736:
	cmp	r3, #115
	bne	.L12679
	b	.L12685
.L12753:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r6, #2]
	b	.L12693
.L12752:
	cmp	r3, #110
	bne	.L12679
	b	.L12680
.L12700:
	mov	r4, r8
	b	.L12667
	.fnend
	.size	usb_ep_autoconfig, .-usb_ep_autoconfig
	.align	2
	.global	usb_ep_autoconfig_reset
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_reset, %function
usb_ep_autoconfig_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L12757
	mov	r1, #0
.L12758:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L12758
.L12757:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #3604]
	bx	lr
	.fnend
	.size	usb_ep_autoconfig_reset, .-usb_ep_autoconfig_reset
	.align	2
	.global	config_ep_by_speed
	.syntax unified
	.arm
	.fpu softvfp
	.type	config_ep_by_speed, %function
config_ep_by_speed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	add	r0, r0, #32
	mov	r6, r1
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r6, #0
	clz	r3, r5
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r4, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L12768
	ldr	r3, [r4, #16]
	cmp	r3, #3
	beq	.L12764
	cmp	r3, #5
	beq	.L12810
.L12763:
	ldr	ip, [r6, #16]
	mov	r6, #0
.L12767:
	ldr	r3, [ip]
	cmp	r3, #0
	beq	.L12768
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #5
	bne	.L12770
	b	.L12769
.L12771:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L12769
.L12770:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	bne	.L12771
.L12768:
	mvn	r0, #4
.L12760:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12810:
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bhi	.L12811
.L12766:
	cmp	r3, #2
	bls	.L12763
	ldr	ip, [r6, #8]
	mov	r6, #0
	b	.L12767
.L12769:
	cmp	ip, #0
	beq	.L12768
	ldrb	lr, [r5, #25]	@ zero_extendqisi2
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	cmp	r2, lr
	beq	.L12772
.L12777:
	ldr	r3, [ip, #4]
	add	r1, ip, #4
	cmp	r3, #0
	bne	.L12776
	b	.L12768
.L12774:
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	beq	.L12768
.L12776:
	ldrb	ip, [r3, #1]	@ zero_extendqisi2
	cmp	ip, #5
	bne	.L12774
	subs	ip, r1, #0
	beq	.L12768
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	cmp	r1, lr
	bne	.L12777
.L12772:
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	mov	r1, #0
	ldrh	lr, [r3, #4]	@ unaligned
	cmp	r6, r1
	and	r2, r2, #131
	bfi	r2, r1, #0, #2
	strh	lr, [r5, #20]	@ movhi
	str	r1, [r5, #32]
	strb	r2, [r5, #24]
	str	r3, [r5, #28]
	beq	.L12779
	ldr	r2, [ip, #4]
	cmp	r2, #0
	beq	.L12768
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #48
	bne	.L12768
	str	r2, [r5, #32]
	ldr	r1, [r4, #16]
	cmp	r1, #5
	beq	.L12812
.L12779:
	mov	r0, #0
	b	.L12760
.L12764:
	ldr	r3, [r4, #20]
	b	.L12766
.L12811:
	ldr	ip, [r6, #12]
	mov	r6, #1
	b	.L12767
.L12812:
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
	and	r3, r3, #3
	cmp	r3, #1
	beq	.L12781
	bcc	.L12813
.L12782:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	mov	r0, #0
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	add	r3, r3, #1
	bfi	r2, r3, #2, #5
	strb	r2, [r5, #24]
	b	.L12760
.L12781:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	ldrb	r1, [r2, #3]	@ zero_extendqisi2
	bfi	r3, r1, #0, #2
	strb	r3, [r5, #24]
	b	.L12782
.L12813:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12783
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC756
	movt	r1, #:upper16:.LC756
	add	r0, r0, #32
	bl	dev_err
.L12783:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, #0
	bfi	r3, r2, #2, #5
	strb	r3, [r5, #24]
	b	.L12760
	.fnend
	.size	config_ep_by_speed, .-config_ep_by_speed
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_set_alt, %function
diag_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #88]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12817
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12817
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L12820
	str	r4, [r3, #20]
	ldr	r3, [r4, #88]
	str	r4, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12825
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12826
	add	r6, r4, #108
	str	r5, [r4, #128]
	mov	r0, r6
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	bl	_raw_spin_lock_irqsave
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #112]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #124]
	ldr	r3, [r2, #12]
	cmp	r3, #0
	beq	.L12814
	ldr	r0, [r2, #16]
	mov	r1, r5
	mov	r2, r5
	blx	r3
.L12814:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12826:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC757
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC757
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12814
.L12825:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC757
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC757
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	b	.L12814
.L12817:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L12814
.L12820:
	mvn	r5, #18
	b	.L12814
	.fnend
	.size	diag_function_set_alt, .-diag_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_set_alt, %function
rmnet_smd_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12838
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12839
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12840
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12841
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12842
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12843
	add	r2, r4, #392
	ldr	r1, [r4, #388]
	mov	r0, #4
	bl	queue_work_on
	b	.L12827
.L12839:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC757
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC757
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
.L12827:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12841:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC757
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC757
.L12837:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12827
.L12843:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC757
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC757
.L12836:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12827
.L12838:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC758
	movt	r1, #:upper16:.LC758
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12827
.L12840:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC758
	movt	r1, #:upper16:.LC758
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L12837
.L12842:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC758
	movt	r1, #:upper16:.LC758
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L12836
	.fnend
	.size	rmnet_smd_set_alt, .-rmnet_smd_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_alt, %function
rmnet_sdio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r3, [r0, #92]
	str	r0, [r3]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12865
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12866
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12867
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12868
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12869
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12870
	ldr	r6, [r4, #96]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L12871
.L12852:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L12857:
	movw	r0, #:lower16:.LC760
	ldr	r1, .L12872
	movt	r0, #:upper16:.LC760
	bl	printk
	b	.L12844
.L12866:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC757
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC757
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
.L12844:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12868:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC757
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC757
.L12864:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12844
.L12870:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC757
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC757
.L12863:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12844
.L12871:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L12854
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L12854
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12852
.L12854:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L12857
	movw	r3, #:lower16:rmnet_sdio_notify_complete
	mov	r1, #8
	movt	r3, #:upper16:rmnet_sdio_notify_complete
	mov	r2, #1
	mov	r0, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r1, [r3, #4]
	str	r2, [r4, #192]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rmnet_sdio_start_io
.L12865:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12844
.L12867:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L12864
.L12869:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L12863
.L12873:
	.align	2
.L12872:
	.word	.LANCHOR3-1084
	.fnend
	.size	rmnet_sdio_set_alt, .-rmnet_sdio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_alt, %function
audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r3, #3518]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L12883
.L12880:
	mov	r5, #0
.L12874:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12883:
	cmp	r2, #0
	mov	r4, r2
	ldrb	r7, [r0, #152]	@ zero_extendqisi2
	mov	r6, r0
	beq	.L12876
	cmp	r7, #0
	bne	.L12880
	ldr	r3, [r0, #20]
	mov	r1, r0
	ldr	r2, [r0, #104]
	ldr	r4, [r3, #24]
	ldr	r0, [r4]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12884
	ldr	r3, [r6, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	strbeq	r3, [r6, #152]
	beq	.L12874
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC762
	mov	r3, r5
	ldr	r2, [r6, #104]
	movt	r1, #:upper16:.LC762
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L12874
.L12876:
	cmp	r7, #0
	beq	.L12881
	ldr	r0, [r0, #104]
	mov	r5, r2
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	strb	r4, [r6, #152]
	b	.L12874
.L12881:
	mov	r5, r7
	b	.L12874
.L12884:
	ldr	r2, [r6, #104]
	movw	r1, #:lower16:.LC761
	mov	r3, r5
	movt	r1, #:upper16:.LC761
	str	r7, [r2, #28]
	ldr	r0, [r4]
	ldr	r2, [r6, #104]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L12874
	.fnend
	.size	audio_set_alt, .-audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_stop, %function
eth_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0, #576]
	cmp	r1, #0
	beq	.L12899
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L12894:
	add	r6, r5, #1216
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1220]
	mov	r7, r0
	cmp	r4, #0
	beq	.L12888
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L12889
	mov	r0, r4
	blx	r3
.L12889:
	ldr	r3, [r4, #88]
	ldr	r1, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r9, [r3, #28]
	ldr	r8, [r1, #28]
	ldr	r3, [r2, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #120]
	tst	r3, #4
	beq	.L12900
.L12888:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L12885:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12900:
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r5, #1228]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12893
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5, #1228]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12893
	ldr	r3, [r4, #88]
	str	r9, [r3, #28]
	ldr	r3, [r4, #92]
	str	r8, [r3, #28]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	b	.L12888
.L12899:
	movw	r0, #:lower16:.LC95
	movw	r1, #1847
	movt	r0, #:upper16:.LC95
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC96
	movt	r0, #:upper16:.LC96
	bl	printk
	b	.L12894
.L12893:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L12885
	.fnend
	.size	eth_stop, .-eth_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_set_alt, %function
acc_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12909
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12910
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12911
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12912
	ldrb	ip, [r4, #100]	@ zero_extendqisi2
	mov	r2, #1
	add	r0, r4, #1664
	mov	r3, r5
	mov	r1, #3
	orr	ip, ip, r2
	strb	ip, [r4, #100]
	bl	__wake_up
.L12901:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12910:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC763
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC763
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12901
.L12912:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC763
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC763
.L12908:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12901
.L12909:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12901
.L12911:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L12908
	.fnend
	.size	acc_function_set_alt, .-acc_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_set_alt, %function
fsg_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #88]
	ldr	r2, [r0, #100]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12913
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L12923
.L12913:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12923:
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #1
	strb	r3, [r4, #94]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	beq	.L12924
.L12915:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	b	.L12913
.L12924:
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12915
	ldr	r3, [r4, #104]
	add	r1, r4, #96
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #2
	strb	r3, [r4, #94]
	ldr	r3, [r2, #28]
	ldrh	r3, [r3, #4]	@ unaligned
	str	r3, [r6, #108]
	bl	_clear_bit
	ldr	r2, [r4, #88]
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r5, [r3, #4012]
	str	r4, [r2, #12]
	ldr	r4, [r4, #88]
	str	r5, [r3, #4016]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L12917
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L12917
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L12917:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r5, #32767
	b	.L12913
	.fnend
	.size	fsg_set_alt, .-fsg_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_set_alt, %function
mtp_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12934
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12935
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12936
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12937
	ldr	r3, [r4, #100]
	ldr	r2, .L12938
	str	r2, [r3, #28]
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L12931
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L12925:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12935:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC763
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC763
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12925
.L12934:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12925
.L12936:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
.L12933:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12925
.L12931:
	mov	r1, #1
	add	r0, r4, #132
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #104]
	mov	r1, #3
	bl	__wake_up
	b	.L12925
.L12937:
	movw	r1, #:lower16:.LC763
	mov	r3, r5
	ldr	r2, [r4, #96]
	movt	r1, #:upper16:.LC763
	ldr	r0, [r6]
	b	.L12933
.L12939:
	.align	2
.L12938:
	.word	.LANCHOR5-1516
	.fnend
	.size	mtp_function_set_alt, .-mtp_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_set_alt, %function
ccid_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [r0, #84]
	ldr	r7, [r0, #100]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L12941
	mov	r2, #4
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	str	r2, [r6, #4]
	ldr	r0, [r5, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r6]
	beq	.L12943
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	bne	.L12943
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L12941:
	mvn	r3, #11
	str	r3, [r4, #112]
.L12966:
	movw	r0, #:lower16:.LC741
	ldr	r1, .L12990
	movt	r0, #:upper16:.LC741
	bl	printk
	ldr	r5, [r4, #112]
.L12940:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12943:
	cmn	r6, #4096
	str	r6, [r4, #112]
	bhi	.L12966
	movw	r3, #:lower16:ccid_notify_complete
	mov	r1, #32
	movt	r3, #:upper16:ccid_notify_complete
	str	r3, [r6, #28]
	ldr	r3, [r4, #112]
	str	r4, [r3, #32]
	ldr	r6, [r4, #108]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	beq	.L12970
	movw	r2, #522
	str	r2, [r9, #4]
	ldr	r0, [r5, #40]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r9]
	beq	.L12947
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r9]
	bne	.L12947
	ldr	r3, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
.L12945:
	movw	r0, #:lower16:.LC764
	ldr	r1, .L12990
	movt	r0, #:upper16:.LC764
	bl	printk
.L12948:
	ldr	r6, [r4, #112]
	cmp	r6, #0
	beq	.L12940
	ldr	r4, [r4, #100]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12940
.L12947:
	cmn	r9, #4096
	movhi	r5, r9
	bhi	.L12945
	movw	r3, #:lower16:ccid_bulk_complete_out
	movw	r7, #:lower16:ccid_bulk_complete_in
	str	r4, [r9, #32]
	movt	r3, #:upper16:ccid_bulk_complete_out
	movt	r7, #:upper16:ccid_bulk_complete_in
	mov	r6, #4
	movw	r10, #523
	str	r3, [r9, #28]
	str	r9, [r4, #184]
.L12953:
	ldr	r9, [r4, #104]
	mov	r1, #32
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	beq	.L12971
	str	r10, [fp, #4]
	ldr	ip, [r5, #40]
	mov	lr, #16
	movw	r2, #523
	mov	r1, #32
	subs	r0, ip, #0
	streq	lr, [fp]
	beq	.L12951
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [fp]
	bne	.L12951
	ldr	r2, [r9, #8]
	mov	r1, fp
	mov	r0, r9
	mvn	r5, #11
	ldr	r3, [r2, #12]
	blx	r3
.L12949:
	movw	r0, #:lower16:.LC765
	ldr	r1, .L12990
	movt	r0, #:upper16:.LC765
	bl	printk
.L12952:
	ldr	r6, [r4, #184]
	cmp	r6, #0
	beq	.L12948
	ldr	r7, [r4, #108]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12948
.L12951:
	add	r3, r4, #192
	cmn	fp, #4096
	add	r9, r4, #92
	mov	r0, r9
	str	r3, [sp, #4]
	bhi	.L12984
	str	r7, [fp, #28]
	str	r4, [fp, #32]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #196]
	add	ip, fp, #36
	add	r3, r4, #192
	mov	r1, r0
	mov	r0, r9
	str	ip, [r4, #196]
	str	r3, [fp, #36]
	str	r2, [fp, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r6, r6, #1
	bne	.L12953
	mov	r1, r4
	ldr	r2, [r4, #100]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12985
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12986
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #104]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12987
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12988
	mov	r1, r4
	ldr	r2, [r4, #108]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12989
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	streq	r3, [r4, #96]
	streq	r3, [r4, #200]
	beq	.L12940
	ldr	r2, [r4, #108]
	movw	r0, #:lower16:.LC767
	mov	r3, r5
	movt	r0, #:upper16:.LC767
	ldr	r1, .L12990
	ldr	r2, [r2, #4]
	bl	printk
.L12961:
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L12958:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #100]
	mov	r2, #0
	str	r2, [r3]
.L12955:
	mov	r10, #256
	mov	r8, #512
	b	.L12963
.L12964:
	ldrd	r2, [r6]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r6]
	str	r8, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L12952
	ldr	fp, [r4, #104]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r2, [fp, #8]
	mov	r0, fp
	ldr	r3, [r2, #12]
	blx	r3
.L12963:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #4]
	mov	r3, r0
	mov	r0, r9
	ldr	r6, [r4, #192]
	mov	r1, r3
	cmp	r2, r6
	sub	r7, r6, #36
	bne	.L12964
	bl	_raw_spin_unlock_irqrestore
	b	.L12952
.L12971:
	mvn	r5, #11
	b	.L12949
.L12970:
	mvn	r5, #11
	b	.L12945
.L12987:
	ldr	r2, [r4, #104]
	movw	r0, #:lower16:.LC766
	mov	r3, r5
	ldr	r1, .L12990
	movt	r0, #:upper16:.LC766
	str	r6, [r2, #28]
	ldr	r2, [r4, #104]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12958
.L12988:
	ldr	r2, [r4, #104]
	movw	r0, #:lower16:.LC767
	mov	r3, r5
	ldr	r1, .L12990
	movt	r0, #:upper16:.LC767
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12958
.L12986:
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC767
	mov	r3, r5
	ldr	r1, .L12990
	movt	r0, #:upper16:.LC767
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12955
.L12989:
	ldr	r2, [r4, #108]
	movw	r0, #:lower16:.LC766
	mov	r3, r5
	ldr	r1, .L12990
	movt	r0, #:upper16:.LC766
	str	r6, [r2, #28]
	ldr	r2, [r4, #108]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12961
.L12985:
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC766
	mov	r3, r5
	ldr	r1, .L12990
	movt	r0, #:upper16:.LC766
	str	r6, [r2, #28]
	ldr	r2, [r4, #100]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12955
.L12984:
	mov	r5, fp
	b	.L12949
.L12991:
	.align	2
.L12990:
	.word	.LANCHOR3-1064
	.fnend
	.size	ccid_function_set_alt, .-ccid_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_set_alt, %function
adb_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13000
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13001
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13002
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13003
	mov	r1, #1
	add	r0, r4, #128
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #100]
	mov	r1, #3
	bl	__wake_up
.L12992:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13001:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC763
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC763
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12992
.L13003:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC763
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC763
.L12999:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12992
.L13000:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12992
.L13002:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L12999
	.fnend
	.size	adb_function_set_alt, .-adb_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_set_alt, %function
qdss_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	cmp	r2, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #24]
	ldr	r5, [r3]
	bne	.L13017
	ldr	r3, [r5, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L13032
	ldrb	r3, [r0, #89]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L13033
	ldrb	r3, [r0, #88]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L13034
.L13010:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	and	r3, r3, #7
	cmp	r3, #7
	moveq	r3, #1
	streq	r3, [r4, #92]
	beq	.L13013
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L13013
.L13031:
	mov	r6, #0
.L13004:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13013:
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L13031
	add	r2, r4, #156
	ldr	r1, [r4, #196]
	mov	r0, #4
	bl	queue_work_on
	b	.L13031
.L13033:
	mov	r0, r5
	mov	r1, r4
	ldr	r2, [r4, #108]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13011
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L13005
	ldr	r3, [r4, #108]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #192]
	b	.L13010
.L13034:
	mov	r1, r0
	ldr	r2, [r4, #104]
	mov	r0, r5
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13011
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L13005
	ldr	r3, [r4, #104]
	mov	r0, r5
	mov	r1, r4
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	ldr	r2, [r4, #100]
	orr	r3, r3, #2
	strb	r3, [r4, #192]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13011
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L13005
	ldr	r3, [r4, #100]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #4
	strb	r3, [r4, #192]
	b	.L13010
.L13011:
	mvn	r6, #21
	b	.L13004
.L13017:
	mov	r6, #0
.L13005:
	movw	r0, #:lower16:.LC769
	movt	r0, #:upper16:.LC769
	bl	printk
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L13015
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L13015:
	tst	r3, #4
	beq	.L13016
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L13016:
	tst	r3, #1
	beq	.L13004
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
	b	.L13004
.L13032:
	movw	r0, #:lower16:.LC768
	mvn	r6, #21
	movt	r0, #:upper16:.LC768
	bl	printk
	b	.L13005
	.fnend
	.size	qdss_set_alt, .-qdss_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_set_alt, %function
rmnet_mux_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #84]
	ldr	r6, [r0, #96]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L13056
.L13036:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L13035:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13056:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L13038
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L13038
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13036
.L13038:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L13035
	movw	r3, #:lower16:rmnet_mux_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_mux_notify_complete
	mov	r1, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r2, [r3, #4]
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r2, [r4, #92]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13057
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13058
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #88]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13059
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13060
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13061
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13062
	mov	r3, #1
	str	r5, [r4, #312]
	str	r3, [r4, #372]
	str	r5, [r4, #400]
	str	r5, [r4, #404]
	str	r5, [r4, #408]
	str	r5, [r4, #412]
	str	r5, [r4, #416]
	str	r5, [r4, #420]
	str	r5, [r4, #424]
	b	.L13035
.L13058:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC757
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC757
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L13035
.L13060:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC757
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC757
.L13054:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13035
.L13062:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC757
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC757
.L13055:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13035
.L13057:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r7]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L13035
.L13059:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r7]
	b	.L13054
.L13061:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r7]
	b	.L13055
	.fnend
	.size	rmnet_mux_set_alt, .-rmnet_mux_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_set_alt, %function
conn_gadget_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC770
	str	r6, [sp, #8]
	mov	r3, r2
	movt	r0, #:upper16:.LC770
	str	lr, [sp, #12]
	ldr	ip, [r4, #20]
	mov	r2, r1
	ldr	r1, .L13070
	ldr	r6, [ip, #24]
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13063
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L13069
.L13063:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13069:
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13068
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L13066
.L13068:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13063
.L13066:
	ldr	r3, [r4, #100]
	mov	r6, #1
	movw	r0, #:lower16:.LC771
	ldr	r1, .L13070
	movt	r0, #:upper16:.LC771
	str	r6, [r4, #100]
	str	r5, [r4, #104]
	str	r3, [r4, #212]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2516]
	str	r5, [r3, #168]
	mov	r0, r3
	str	r5, [r3, #172]
	bl	conn_gadget_request_ep_out
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #200
	mov	r1, #3
	bl	__wake_up
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #144
	mov	r1, #3
	bl	__wake_up
	b	.L13063
.L13071:
	.align	2
.L13070:
	.word	.LANCHOR3-1040
	.fnend
	.size	conn_gadget_function_set_alt, .-conn_gadget_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_set_alt, %function
f_midi_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	ldr	r5, [r0, #88]
	ldr	r7, [r2, #24]
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L13073
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L13073:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	ldrne	r0, [r7]
	bne	.L13101
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L13103
	str	r4, [r5]
	ldr	r2, [r4, #20]
	ldr	r5, [r4, #92]
	ldr	r8, [r2, #24]
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L13077
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L13077:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L13104
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L13105
	str	r4, [r5]
	ldr	r2, [r4, #92]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13080
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #92]
.L13080:
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L13106
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L13107
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r3, [r4, #340]
	cmp	r3, #0
	beq	.L13072
	movw	r7, #:lower16:f_midi_complete
	mov	r5, r6
	movt	r7, #:upper16:f_midi_complete
.L13085:
	ldr	r0, [r4, #92]
	add	r5, r5, #1
	ldr	r1, [r4, #336]
	bl	midi_alloc_ep_req
	cmp	r0, #0
	mov	r2, #32
	mov	r1, r0
	beq	.L13086
	str	r7, [r0, #28]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	bne	.L13108
	ldr	r3, [r4, #340]
	cmp	r3, r5
	bhi	.L13085
	b	.L13072
.L13103:
	ldr	r0, [r7]
.L13102:
	movw	r1, #:lower16:.LC773
	mov	r3, r6
	ldr	r2, [r5, #4]
	movt	r1, #:upper16:.LC773
	add	r0, r0, #32
	bl	dev_err
.L13072:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13108:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC774
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC774
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13072
.L13105:
	ldr	r0, [r8]
	b	.L13102
.L13104:
	ldr	r0, [r8]
.L13101:
	movw	r1, #:lower16:.LC772
	mov	r3, r6
	ldr	r2, [r5, #4]
	movt	r1, #:upper16:.LC772
	add	r0, r0, #32
	bl	dev_err
	b	.L13072
.L13107:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC773
	mov	r3, r6
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC773
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L13072
.L13086:
	mvn	r6, #11
	b	.L13072
.L13106:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC772
	mov	r3, r6
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC772
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L13072
	.fnend
	.size	f_midi_set_alt, .-f_midi_set_alt
	.align	2
	.global	usb_add_function
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_function, %function
usb_add_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #40]
	cmp	r3, #0
	beq	.L13114
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #48]
	cmp	r3, #0
	beq	.L13115
	str	r0, [r4, #20]
	ldr	r3, [r0, #40]
	add	r2, r1, #72
	add	ip, r0, #36
	mov	r5, r0
	str	r2, [r0, #40]
	str	ip, [r1, #72]
	str	r3, [r1, #76]
	str	r2, [r3]
	ldr	r3, [r1, #32]
	cmp	r3, #0
	beq	.L13116
	blx	r3
	cmp	r0, #0
	bge	.L13111
	ldrd	r2, [r4, #72]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #72]
	str	r1, [r4, #76]
.L13111:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13112
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L13112
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L13112:
	tst	r3, #2
	bne	.L13113
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L13113
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L13113:
	tst	r3, #1
	bne	.L13109
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L13109
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L13109:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13116:
	mov	r0, r3
	b	.L13111
.L13114:
	mvn	r0, #21
	bx	lr
.L13115:
.L13110:
	mvn	r0, #21
	b	.L13109
	.fnend
	.size	usb_add_function, .-usb_add_function
	.align	2
	.global	usb_function_deactivate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_deactivate, %function
usb_function_deactivate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #52]
	mov	r7, r0
	cmp	r1, #0
	bne	.L13131
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L13133
	blx	r3
	subs	r6, r0, #0
	bne	.L13132
	ldr	r1, [r4, #52]
.L13131:
	add	r1, r1, #1
	mov	r6, #0
	str	r1, [r4, #52]
.L13132:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13133:
	mvn	r6, #94
	b	.L13132
	.fnend
	.size	usb_function_deactivate, .-usb_function_deactivate
	.align	2
	.global	usb_function_activate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_activate, %function
usb_function_activate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L13142
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #52]
	bne	.L13143
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L13139
	mov	r1, #1
	blx	r3
	mov	r4, r0
.L13137:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13143:
	mov	r4, #0
	b	.L13137
.L13142:
	movw	r0, #:lower16:.LC487
	movw	r1, #315
	movt	r0, #:upper16:.LC487
	mvn	r4, #21
	bl	warn_slowpath_null
	b	.L13137
.L13139:
	mvn	r4, #94
	b	.L13137
	.fnend
	.size	usb_function_activate, .-usb_function_activate
	.align	2
	.global	usb_interface_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_interface_id, %function
usb_interface_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13146
	add	ip, r3, #12
	add	r2, r3, #1
	str	r1, [r0, ip, lsl #2]
	strb	r2, [r0, #44]
.L13144:
	mov	r0, r3
	bx	lr
.L13146:
	mvn	r3, #18
	b	.L13144
	.fnend
	.size	usb_interface_id, .-usb_interface_id
	.align	2
	.global	usb_add_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_config, %function
usb_add_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r5, [r1, #20]	@ zero_extendqisi2
	cmp	r5, #0
	cmpne	r2, #0
	beq	.L13155
	mov	lr, r0
	ldr	r3, [lr, #36]!
	cmp	lr, r3
	sub	ip, r3, #28
	bne	.L13151
	b	.L13149
.L13161:
	ldr	r3, [ip, #28]
	cmp	lr, r3
	sub	ip, r3, #28
	beq	.L13149
.L13151:
	ldrb	r3, [r3, #-8]	@ zero_extendqisi2
	cmp	r3, r5
	bne	.L13161
.L13148:
	mvn	r0, #15
	b	.L13147
.L13149:
	mov	r4, r1
	mov	r6, r0
	mov	r5, r2
	add	r3, r1, #36
	str	r6, [r4, #24]
	ldr	r2, [r6, #40]
	add	r0, r1, #28
	mov	r7, #0
	mov	r1, #64
	str	r0, [r6, #40]
	str	lr, [r4, #28]
	str	r2, [r4, #32]
	str	r0, [r2]
	add	r0, r4, #48
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	strb	r7, [r4, #44]
	bl	__memzero
	mov	r0, r4
	blx	r5
	cmp	r0, #0
	blt	.L13162
.L13152:
	ldr	r1, [r6]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L13153
	mov	ip, #0
.L13154:
	ldr	r2, [r3, #12]
	str	ip, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L13154
.L13153:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #3604]
.L13147:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13162:
	ldrd	r2, [r4, #28]
	mov	ip, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4, #24]
	str	ip, [r4, #28]
	str	r1, [r4, #32]
	b	.L13152
.L13155:
	mvn	r0, #21
	b	.L13147
	.fnend
	.size	usb_add_config, .-usb_add_config
	.align	2
	.global	usb_remove_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_remove_config, %function
usb_remove_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	ldr	r1, .L13191
	strd	r6, [sp, #8]
	mov	r6, r0
	movw	r0, #:lower16:.LC775
	mov	r3, r4
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC775
	str	r10, [sp, #24]
	add	r7, r6, #60
	str	lr, [sp, #28]
	ldr	r2, [r6, #12]
	bl	printk
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #24]
	mov	r9, r0
	cmp	r3, #0
	beq	.L13188
	ldr	r8, [r6, #12]
	cmp	r8, r4
	beq	.L13189
.L13175:
	ldrd	r2, [r4, #28]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	strd	r0, [r4, #28]
.L13170:
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	add	r5, r4, #36
	mov	r7, #256
	mov	r6, #512
	b	.L13172
.L13173:
	ldrd	r2, [r1]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r3, [r1, #-36]
	str	r7, [r1]
	str	r6, [r1, #4]
	cmp	r3, #0
	bne	.L13190
.L13172:
	ldr	r1, [r4, #36]
	cmp	r5, r1
	bne	.L13173
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L13181
	mov	r0, r4
	blx	r3
.L13181:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13190:
	sub	r1, r1, #72
	mov	r0, r4
	blx	r3
	b	.L13172
.L13189:
	mov	r3, r8
	ldr	r5, [r3, #36]!
	cmp	r3, r5
	sub	r5, r5, #72
	beq	.L13167
	mov	r10, #0
.L13166:
	ldr	r3, [r5, #48]
	mov	r0, r5
	cmp	r3, #0
	beq	.L13168
	blx	r3
	str	r10, [r5, #80]
.L13187:
	ldr	r3, [r6, #12]
	ldr	r5, [r5, #72]
	add	r3, r3, #36
	cmp	r5, r3
	sub	r5, r5, #72
	bne	.L13166
.L13167:
	mov	r3, #0
	str	r3, [r6, #12]
	str	r3, [r6, #56]
	ldr	r3, [r8, #24]
	cmp	r3, #0
	beq	.L13170
	b	.L13175
.L13168:
	str	r3, [r5, #80]
	b	.L13187
.L13188:
	movw	r0, #:lower16:.LC487
	mov	r1, #896
	movt	r0, #:upper16:.LC487
	bl	warn_slowpath_null
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L13181
.L13192:
	.align	2
.L13191:
	.word	.LANCHOR3-1008
	.fnend
	.size	usb_remove_config, .-usb_remove_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_store, %function
enable_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	bl	dev_get_drvdata
	ldr	r4, [r0, #8]
	mov	r3, #0
	str	r3, [sp, #28]
	cmp	r4, r3
	mvneq	r4, #18
	bne	.L13248
.L13193:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13248:
	add	r3, r0, #24
	mov	r5, r0
	mov	r0, r3
	str	r3, [sp, #8]
	bl	mutex_lock
	movw	r1, #:lower16:.LC283
	add	r2, sp, #28
	movt	r1, #:upper16:.LC283
	mov	r0, r7
	bl	sscanf
	movw	r0, #:lower16:.LC778
	ldrb	r2, [r5, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC778
	ldr	r1, [sp, #28]
	bl	printk
	ldr	r3, [sp, #28]
	cmp	r3, #0
	beq	.L13195
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13249
	ldr	r1, .L13257
	ldr	r0, .L13257+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L13250
.L13211:
	ldr	r0, [sp, #8]
	mov	r4, r6
	bl	mutex_unlock
	b	.L13193
.L13195:
	ldrb	r1, [r5, #16]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L13251
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L13224
	blx	r3
.L13224:
	mov	r3, #0
	strb	r3, [r5, #16]
	b	.L13211
.L13251:
	ldr	r7, [r5, #8]
	ldr	r1, [r5, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L13252
	ldr	r0, [r7]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L13215
	blx	r3
	ldr	r0, [r7]
.L13215:
	ldr	r0, [r0, #4]
	mov	r8, r5
	ldr	r1, [r7, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r8, #412]!
	sub	r4, r4, #120
	b	.L13216
.L13217:
	bl	usb_remove_config
	ldr	r4, [r4, #120]
	sub	r4, r4, #120
.L13216:
	add	r3, r4, #120
	mov	r1, r4
	cmp	r3, r8
	mov	r0, r7
	bne	.L13217
.L13218:
	ldr	r7, [r5, #412]
	sub	r7, r7, #120
.L13214:
	add	r3, r7, #120
	cmp	r3, r8
	beq	.L13224
	mov	r9, r7
	ldr	r4, [r9, #112]!
	cmp	r9, r4
	sub	r4, r4, #4
	beq	.L13220
.L13219:
	ldr	r3, [r4]
	mov	r0, r3
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L13221
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r9, r4
	sub	r4, r4, #4
	bne	.L13219
.L13220:
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
	b	.L13214
.L13221:
	ldr	r4, [r4, #4]
	cmp	r9, r4
	sub	r4, r4, #4
	bne	.L13219
	b	.L13220
.L13252:
	add	r8, r5, #412
	b	.L13218
.L13250:
	ldrb	ip, [r5, #16]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC776
	movw	r2, #:lower16:.LC777
	movt	r3, #:upper16:.LC776
	movw	r0, #:lower16:.LC789
	ldr	r1, .L13257
	movt	r2, #:upper16:.LC777
	movt	r0, #:upper16:.LC789
	cmp	ip, #0
	movne	r2, r3
	bl	printk
	b	.L13211
.L13249:
	movw	r3, #:lower16:.LANCHOR1
	movw	ip, #:lower16:.LC780
	ldr	r0, .L13257+8
	movt	r3, #:upper16:.LANCHOR1
	movt	ip, #:upper16:.LC780
	ldr	r3, [r3, #3588]
	movw	r1, #:lower16:.LC599
	mov	r2, #255
	movt	r1, #:upper16:.LC599
	str	ip, [sp, #12]
	movw	r10, #:lower16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR0
	mov	r8, r5
	strb	r3, [r4, #48]
	bl	strncpy
	movw	r1, #:lower16:.LC779
	mov	r2, #255
	ldr	r0, .L13257+12
	movt	r1, #:upper16:.LC779
	bl	strncpy
	ldr	r3, [r10, #232]
	movw	r2, #:lower16:.LC781
	mov	r1, r2
	ldrb	r2, [r10, #228]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC781
	str	r3, [r4, #25]	@ unaligned
	ldrh	r3, [r10, #236]
	strb	r2, [r4, #21]
	str	r1, [sp, #16]
	strh	r3, [r4, #29]	@ unaligned
	ldr	r9, [r8, #412]!
	sub	r9, r9, #120
.L13197:
	add	r7, r9, #120
	cmp	r7, r8
	beq	.L13253
	mov	fp, r9
	ldr	r7, [fp, #112]!
	sub	r7, r7, #4
.L13198:
	add	r3, r7, #4
	cmp	r3, fp
	bne	.L13203
	ldr	r9, [r9, #120]
	sub	r9, r9, #120
	b	.L13197
.L13253:
	movw	r1, #:lower16:.LC599
	mov	r2, #255
	ldr	r0, .L13257+8
	movt	r1, #:upper16:.LC599
	bl	strncpy
	movw	r1, #:lower16:.LC779
	mov	r2, #255
	ldr	r0, .L13257+12
	movt	r1, #:upper16:.LC779
	bl	strncpy
	ldrh	ip, [r4, #29]	@ unaligned
	movw	r0, #:lower16:.LC785
	ldrb	lr, [r10, #229]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC785
	ldrb	r1, [r10, #230]	@ zero_extendqisi2
	ldrh	r3, [r4, #27]	@ unaligned
	ldrh	r2, [r4, #25]	@ unaligned
	strb	lr, [r4, #22]
	strb	r1, [r4, #23]
	ldr	r1, .L13257
	str	ip, [sp]
	bl	printk
	movw	r0, #:lower16:.LC786
	ldrb	r3, [r4, #23]	@ zero_extendqisi2
	ldrb	r2, [r4, #22]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC786
	ldrb	r1, [r4, #21]	@ zero_extendqisi2
	bl	printk
	movw	r0, #:lower16:.LC787
	ldr	r1, .L13257
	movt	r0, #:upper16:.LC787
	bl	printk
	ldr	r4, [r5, #412]
	sub	r4, r4, #120
.L13205:
	add	r3, r4, #120
	cmp	r7, r3
	beq	.L13254
	mov	r9, r4
	ldr	r8, [r9, #112]!
	sub	r8, r8, #4
.L13206:
	add	r3, r8, #4
	cmp	r3, r9
	beq	.L13255
	ldr	r0, [r8]
	ldr	r3, [r0, #32]
	cmp	r3, #0
	beq	.L13207
	blx	r3
.L13207:
	ldr	r8, [r8, #4]
	sub	r8, r8, #4
	b	.L13206
.L13255:
	ldr	r4, [r4, #120]
	sub	r4, r4, #120
	b	.L13205
.L13254:
	mov	r0, r5
	mov	r4, r6
	bl	android_enable
	cmp	r0, #0
	movge	r3, #1
	strbge	r3, [r5, #16]
	bge	.L13211
	ldr	r2, .L13257
	movw	r0, #:lower16:.LC788
	movt	r0, #:upper16:.LC788
	mov	r1, r2
	bl	printk
	mov	r3, #0
	ldr	r0, [sp, #8]
	strb	r3, [r5, #16]
	strb	r3, [r5, #52]
	bl	mutex_unlock
	b	.L13193
.L13203:
	ldr	r3, [r7]
	ldr	r1, .L13257
	ldr	r0, [sp, #12]
	ldr	r2, [r3]
	bl	printk
	ldr	r3, [r7]
	ldr	r1, [sp, #16]
	ldr	r3, [r3]
	mov	r0, r3
	str	r3, [sp, #20]
	bl	strcmp
	ldr	r3, [sp, #20]
	subs	r2, r0, #0
	movw	r1, #:lower16:.LC628
	movt	r1, #:upper16:.LC628
	mov	r0, r3
	beq	.L13256
	bl	strcmp
	subs	r2, r0, #0
	str	r2, [sp, #20]
	bne	.L13201
	ldrh	r3, [r4, #29]	@ unaligned
	movw	r0, #:lower16:.LC784
	movt	r0, #:upper16:.LC784
	cmp	r3, #1024
	beq	.L13200
	bl	printk
	ldr	r2, [sp, #20]
	mov	r3, #8
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
.L13201:
	ldr	r7, [r7, #4]
	sub	r7, r7, #4
	b	.L13198
.L13256:
	movw	r0, #:lower16:.LC782
	str	r2, [sp, #20]
	movt	r0, #:upper16:.LC782
	bl	printk
	ldr	r2, [sp, #20]
	mov	r3, #4
	movw	r1, #:lower16:.LC628
	movt	r1, #:upper16:.LC628
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
	ldr	r3, [r7]
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L13201
.L13200:
	movw	r0, #:lower16:.LC783
	movt	r0, #:upper16:.LC783
	bl	printk
	mov	r2, #0
	mov	r3, #12
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
	b	.L13201
.L13258:
	.align	2
.L13257:
	.word	.LANCHOR3-988
	.word	.LANCHOR5-1368
	.word	.LANCHOR1+2868
	.word	.LANCHOR1+2612
	.fnend
	.size	enable_store, .-enable_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_enable, %function
adb_android_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r5, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L13268
.L13259:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13268:
	ldr	r6, [r5, #8]
	ldr	r1, [r5, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L13259
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L13261
	blx	r3
	ldr	r0, [r6]
.L13261:
	ldr	r0, [r0, #4]
	ldr	r1, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #412]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L13259
.L13262:
	mov	r1, r4
	mov	r0, r6
	bl	usb_remove_config
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L13262
	b	.L13259
	.fnend
	.size	adb_android_function_enable, .-adb_android_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_enable, %function
ffs_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r5, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L13278
.L13269:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13278:
	ldr	r6, [r5, #8]
	ldr	r1, [r5, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L13269
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L13271
	blx	r3
	ldr	r0, [r6]
.L13271:
	ldr	r0, [r0, #4]
	ldr	r1, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #412]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L13269
.L13272:
	mov	r1, r4
	mov	r0, r6
	bl	usb_remove_config
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L13272
	b	.L13269
	.fnend
	.size	ffs_function_enable, .-ffs_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_release, %function
adb_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r1, .L13309
	ldr	r0, .L13309+4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L13305
.L13280:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3424]
	ldrb	r2, [r3, #160]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L13306
.L13281:
	add	r2, r3, #116
	.syntax divided
@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13306:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r7, [r3, #1292]
	ldr	r5, [r3, #1308]
	cmp	r5, #0
	beq	.L13307
.L13282:
	add	r8, r5, #24
	mov	r0, r8
	bl	mutex_lock
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	mov	r2, #0
	strb	r2, [r7]
	cmp	r3, r2
	beq	.L13308
	ldr	r9, [r5, #8]
	ldr	r1, [r5, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L13285
	ldr	r0, [r9]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L13286
	blx	r3
	ldr	r0, [r9]
.L13286:
	ldr	r0, [r0, #4]
	ldr	r1, [r9, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r6, [r5, #412]!
	cmp	r5, r6
	sub	r6, r6, #120
	beq	.L13285
.L13287:
	mov	r1, r6
	mov	r0, r9
	bl	usb_remove_config
	ldr	r6, [r6, #120]
	cmp	r5, r6
	sub	r6, r6, #120
	bne	.L13287
.L13285:
	mov	r3, #0
	str	r3, [r7, #4]
.L13289:
	mov	r0, r8
	bl	mutex_unlock
.L13288:
	ldr	r3, [r4, #3424]
	mov	r2, #1
	strb	r2, [r3, #161]
	b	.L13281
.L13307:
	ldr	r5, [r7, #4]
	cmp	r5, #0
	bne	.L13282
	movw	r0, #:lower16:.LC791
	ldr	r1, .L13309+8
	movt	r0, #:upper16:.LC791
	bl	printk
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	strb	r5, [r7]
	cmp	r3, #0
	moveq	r5, r3
	str	r5, [r7, #4]
	b	.L13288
.L13308:
	str	r3, [r7, #4]
	b	.L13289
.L13305:
	movw	r0, #:lower16:.LC790
	movt	r0, #:upper16:.LC790
	bl	printk
	b	.L13280
.L13310:
	.align	2
.L13309:
	.word	.LANCHOR3-972
	.word	.LANCHOR5-1344
	.word	.LANCHOR3-960
	.fnend
	.size	adb_release, .-adb_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_clear, %function
ffs_data_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	mov	r0, #0
	add	r4, r5, #132
	strd	r6, [sp, #8]
	mov	r1, r4
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L13349
.L13313:
	ldr	r7, [r5]
	cmp	r7, #0
	bne	.L13350
	ldr	r8, [r5, #212]
	cmp	r8, #0
	beq	.L13324
	ldrh	r6, [r5, #184]
	cmp	r6, #0
	beq	.L13330
	ldr	r3, [r8]
	cmp	r3, #1
	bne	.L13326
	ldr	r2, [r8, #28]
	add	r3, r8, #28
	cmp	r2, r3
	bne	.L13326
	mov	r4, r8
.L13327:
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L13328
	bl	d_delete
	ldr	r0, [r4, #48]
	bl	dput
	str	r7, [r4, #48]
.L13328:
	subs	r6, r6, #1
	add	r4, r4, #60
	beq	.L13330
	ldr	r3, [r4]
	cmp	r3, #1
	bne	.L13326
	ldr	r2, [r4, #28]
	add	r3, r4, #28
	cmp	r2, r3
	beq	.L13327
.L13326:
	.syntax divided
@ 1521 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1522, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L13330:
	mov	r0, r8
	bl	kfree
.L13324:
	ldr	r0, [r5, #148]
	bl	kfree
	ldr	r0, [r5, #188]
	bl	kfree
	ldrd	r6, [sp, #8]
	ldr	r0, [r5, #192]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L13349:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r10, [r3, #2780]
	ldr	r6, [r3, #2796]
	cmp	r6, #0
	beq	.L13351
.L13314:
	add	r0, r6, #24
	bl	mutex_lock
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13315
	ldr	r8, [r6, #8]
	ldr	r1, [r6, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r6, #20]
	bne	.L13315
	ldr	r0, [r8]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L13316
	blx	r3
	ldr	r0, [r8]
.L13316:
	ldr	r0, [r0, #4]
	mov	r9, r6
	ldr	r1, [r8, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r7, [r9, #412]!
	cmp	r9, r7
	sub	r7, r7, #120
	beq	.L13315
.L13317:
	mov	r1, r7
	mov	r0, r8
	bl	usb_remove_config
	ldr	r7, [r7, #120]
	cmp	r9, r7
	sub	r7, r7, #120
	bne	.L13317
.L13315:
	mov	r7, #0
	strb	r7, [r10]
	str	r7, [r10, #4]
	str	r7, [r10, #8]
	ldr	r3, [r5]
	cmp	r3, r7
	beq	.L13352
	ldr	r0, [r3, #4]
	ldr	r1, [r5, #32]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, r5
	str	r7, [r5, #32]
	str	r7, [r3], #88
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L13353
.L13333:
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit
.L13319:
	cmp	r6, #0
	beq	.L13313
	add	r0, r6, #24
	bl	mutex_unlock
	b	.L13313
.L13350:
	.syntax divided
@ 1394 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1394, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L13351:
	ldr	r6, [r10, #8]
	cmp	r6, #0
	bne	.L13314
	movw	r0, #:lower16:.LC792
	ldr	r1, .L13354
	movt	r0, #:upper16:.LC792
	bl	printk
	b	.L13315
.L13352:
	movw	r0, #:lower16:.LC9
	movw	r1, #1475
	movt	r0, #:upper16:.LC9
	bl	warn_slowpath_null
	b	.L13319
.L13353:
	movw	r0, #:lower16:.LC793
	ldr	r1, .L13354+4
	movt	r0, #:upper16:.LC793
	bl	printk
	mov	r0, r5
	bl	ffs_data_clear
	ldr	r2, [r5, #124]
	add	r3, r5, #124
	cmp	r2, r3
	bne	.L13320
	ldr	r2, [r5, #44]
	add	r3, r5, #44
	cmp	r2, r3
	bne	.L13320
	mov	r0, r5
	bl	kfree
	b	.L13333
.L13320:
	.syntax divided
@ 1345 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L13355:
	.align	2
.L13354:
	.word	.LANCHOR3-940
	.word	.LANCHOR3-912
	.fnend
	.size	ffs_data_clear, .-ffs_data_clear
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_bind_config, %function
ffs_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r0, #4]
	ldr	r0, [r3, #28]
	ldr	r7, [r1, #24]
	ldr	r6, [r2, #4]
	cmp	r0, #0
	beq	.L13369
	mov	r2, #120
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r6, #11
	bne	.L13357
.L13356:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13369:
	mov	r4, #16
.L13357:
	movw	r3, #:lower16:.LC794
	movw	r1, #:lower16:ffs_func_bind
	movt	r3, #:upper16:.LC794
	movw	r2, #:lower16:ffs_func_set_alt
	movt	r1, #:upper16:ffs_func_bind
	movt	r2, #:upper16:ffs_func_set_alt
	str	r3, [r4, #36]
	movw	r3, #:lower16:ffs_func_unbind
	ldr	ip, [r6, #192]
	movt	r3, #:upper16:ffs_func_unbind
	movw	r0, #:lower16:ffs_func_disable
	str	r5, [r4]
	str	r1, [r4, #68]
	movw	r1, #:lower16:ffs_func_setup
	movt	r0, #:upper16:ffs_func_disable
	str	r2, [r4, #76]
	movw	r2, #:lower16:ffs_func_resume
	movt	r1, #:upper16:ffs_func_setup
	str	r3, [r4, #72]
	movw	r3, #:lower16:ffs_func_suspend
	movt	r2, #:upper16:ffs_func_resume
	movt	r3, #:upper16:ffs_func_suspend
	str	ip, [r4, #40]
	str	r0, [r4, #84]
	str	r1, [r4, #88]
	str	r3, [r4, #92]
	add	r3, r6, #88
	str	r2, [r4, #96]
	ldr	r2, [r7]
	stmib	r4, {r2, r6}
	.syntax divided
@ 45 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #76]
	add	r1, r4, #36
	cmp	r3, #0
	beq	.L13372
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L13372
	str	r5, [r4, #56]
	ldr	r0, [r5, #40]
	add	r3, r4, #108
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #108]
	str	r0, [r4, #112]
	str	r3, [r0]
	ldr	r6, [r4, #68]
	cmp	r6, #0
	beq	.L13360
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L13360
	ldrd	r2, [r4, #108]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #56]
	strd	r0, [r4, #108]
.L13360:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13361
	ldr	r2, [r4, #52]
	cmp	r2, #0
	beq	.L13361
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L13361:
	tst	r3, #2
	bne	.L13362
	ldr	r2, [r4, #44]
	cmp	r2, #0
	beq	.L13362
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L13362:
	tst	r3, #1
	bne	.L13363
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L13363
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L13363:
	cmp	r6, #0
	beq	.L13356
.L13359:
	ldr	r3, [r4, #8]
	mov	r8, #0
	ldr	r5, [r4, #12]
	add	r0, r3, #28
	ldrh	r7, [r3, #184]
	bl	_raw_spin_lock_irqsave
	add	r5, r5, #28
	mov	r9, r0
.L13365:
	ldr	r0, [r5, #-28]
	cmp	r0, #0
	beq	.L13364
	ldr	r1, [r5, #-24]
	cmp	r1, #0
	beq	.L13364
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L13364:
	subs	r7, r7, #1
	str	r8, [r5, #-28]
	add	r5, r5, #28
	str	r8, [r5, #-52]
	bne	.L13365
	ldr	r0, [r4, #8]
	mov	r1, r9
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	ldr	r5, [r4, #8]
	add	r3, r5, #88
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L13394
.L13366:
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r0, r4
	bl	kfree
	b	.L13356
.L13372:
	mvn	r6, #21
	b	.L13359
.L13394:
	movw	r0, #:lower16:.LC793
	ldr	r1, .L13395
	movt	r0, #:upper16:.LC793
	bl	printk
	mov	r0, r5
	bl	ffs_data_clear
	ldr	r2, [r5, #124]
	add	r3, r5, #124
	cmp	r2, r3
	bne	.L13367
	ldr	r2, [r5, #44]
	add	r3, r5, #44
	cmp	r2, r3
	bne	.L13367
	mov	r0, r5
	bl	kfree
	b	.L13366
.L13367:
	.syntax divided
@ 1345 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L13396:
	.align	2
.L13395:
	.word	.LANCHOR3-912
	.fnend
	.size	ffs_function_bind_config, .-ffs_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_release, %function
ffs_ep0_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r3, r4, #92
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	bne	.L13398
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #96]
	bl	ffs_data_clear
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	strh	r5, [r4, #108]	@ movhi
	str	r5, [r4, #132]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	str	r5, [r4, #180]
	strh	r5, [r4, #184]	@ movhi
	str	r5, [r4, #188]
	str	r5, [r4, #192]
	str	r5, [r4, #212]
.L13398:
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L13403
.L13399:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13403:
	movw	r0, #:lower16:.LC793
	ldr	r1, .L13404
	movt	r0, #:upper16:.LC793
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L13400
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L13400
	mov	r0, r4
	bl	kfree
	b	.L13399
.L13400:
	.syntax divided
@ 1345 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L13405:
	.align	2
.L13404:
	.word	.LANCHOR3-912
	.fnend
	.size	ffs_ep0_release, .-ffs_ep0_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_release, %function
ffs_epfile_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r0, #340]
	ldr	r4, [r3, #40]
	str	r2, [r3, #36]
	add	r3, r4, #92
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	bne	.L13407
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #96]
	bl	ffs_data_clear
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	strh	r5, [r4, #108]	@ movhi
	str	r5, [r4, #132]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	str	r5, [r4, #180]
	strh	r5, [r4, #184]	@ movhi
	str	r5, [r4, #188]
	str	r5, [r4, #192]
	str	r5, [r4, #212]
.L13407:
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L13412
.L13408:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #124]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13412:
	movw	r0, #:lower16:.LC793
	ldr	r1, .L13413
	movt	r0, #:upper16:.LC793
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L13409
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L13409
	mov	r0, r4
	bl	kfree
	b	.L13408
.L13409:
	.syntax divided
@ 1345 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L13414:
	.align	2
.L13413:
	.word	.LANCHOR3-912
	.fnend
	.size	ffs_epfile_release, .-ffs_epfile_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_unbind, %function
ffs_func_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	sub	r8, r1, #36
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r1, #-28]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r6, #136]
	cmp	r3, r8
	beq	.L13440
.L13416:
	add	r4, r6, #120
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #100]
	mov	r5, r0
	add	r0, r6, #104
	ldrh	r2, [r6, #108]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #100]
	cmp	r2, #0
	beq	.L13430
	add	r2, r2, r0
	mov	r3, r0
.L13424:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L13424
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L13422:
	add	r3, r6, r2
	strh	r1, [r6, #108]	@ movhi
	mov	r0, #1
	mov	r1, #3
	mov	r2, r0
	mov	r6, #0
	strb	r0, [r3, #104]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #-28]
	ldr	r4, [r7, #-24]
	add	r0, r3, #28
	ldrh	r5, [r3, #184]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	mov	r9, r0
.L13426:
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L13425
	ldr	r1, [r4, #-24]
	cmp	r1, #0
	beq	.L13425
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L13425:
	subs	r5, r5, #1
	str	r6, [r4, #-28]
	add	r4, r4, #28
	str	r6, [r4, #-52]
	bne	.L13426
	ldr	r0, [r7, #-28]
	mov	r1, r9
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	ldr	r4, [r7, #-28]
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L13441
.L13427:
	ldr	r0, [r7, #-24]
	bl	kfree
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree
.L13440:
	ldr	r4, [r1, #-24]
	add	r0, r6, #28
	mov	r10, #1
	mov	r9, #0
	ldrh	fp, [r6, #184]
	ldr	r5, [r6, #212]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	str	r0, [sp, #4]
.L13417:
	str	r10, [r5, #36]
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L13418
	ldr	r2, [r0, #8]
	add	r4, r4, #28
	add	r5, r5, #60
	ldr	r2, [r2, #4]
	blx	r2
	ldr	r2, [r4, #-56]
	subs	fp, fp, #1
	str	r9, [r2]
	str	r9, [r5, #-16]
	bne	.L13417
.L13420:
	ldr	r0, [r7, #-28]
	ldr	r1, [sp, #4]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r6, #136]
	b	.L13416
.L13430:
	mov	r1, #1
	b	.L13422
.L13418:
	subs	fp, fp, #1
	str	r0, [r5, #44]
	add	r4, r4, #28
	add	r5, r5, #60
	bne	.L13417
	b	.L13420
.L13441:
	movw	r0, #:lower16:.LC793
	ldr	r1, .L13442
	movt	r0, #:upper16:.LC793
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L13428
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L13428
	mov	r0, r4
	bl	kfree
	b	.L13427
.L13428:
	.syntax divided
@ 1345 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L13443:
	.align	2
.L13442:
	.word	.LANCHOR3-912
	.fnend
	.size	ffs_func_unbind, .-ffs_func_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_kill_sb, %function
ffs_fs_kill_sb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	kill_litter_super
	ldr	r4, [r4, #624]
	cmp	r4, #0
	beq	.L13444
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L13451
.L13444:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13451:
	movw	r0, #:lower16:.LC793
	ldr	r1, .L13452
	movt	r0, #:upper16:.LC793
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L13448
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L13448
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L13448:
	.syntax divided
@ 1345 "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L13453:
	.align	2
.L13452:
	.word	.LANCHOR3-912
	.fnend
	.size	ffs_fs_kill_sb, .-ffs_fs_kill_sb
	.align	2
	.global	usb_string_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_id, %function
usb_string_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	mov	r2, r0
	cmp	r3, #253
	bhi	.L13456
	add	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2, #48]
	bx	lr
.L13456:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_id, .-usb_string_id
	.align	2
	.global	usb_string_ids_tab
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_tab, %function
usb_string_ids_tab:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #4]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #0
	mov	r2, r3
	beq	.L13458
	cmp	r3, #253
	bgt	.L13459
	add	r1, r1, #8
.L13460:
	ldr	ip, [r1, #4]
	add	r3, r3, #1
	add	r1, r1, #8
	uxtb	r2, r3
	cmp	ip, #0
	strb	r2, [r1, #-16]
	beq	.L13458
	cmp	r3, #254
	bne	.L13460
.L13459:
	mvn	r3, #18
	mov	r0, r3
	bx	lr
.L13458:
	mov	r3, #0
	strb	r2, [r0, #48]
	mov	r0, r3
	bx	lr
	.fnend
	.size	usb_string_ids_tab, .-usb_string_ids_tab
	.align	2
	.global	usb_string_ids_n
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_n, %function
usb_string_ids_n:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #254
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	bhi	.L13473
	add	r1, r3, r1
	cmp	r1, #254
	bhi	.L13473
	strb	r1, [r0, #48]
	add	r0, r3, #1
	bx	lr
.L13473:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_ids_n, .-usb_string_ids_n
	.align	2
	.global	usb_composite_probe
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_probe, %function
usb_composite_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L13479
	ldr	r3, [r0, #12]
	cmp	r1, #0
	cmpne	r3, #0
	beq	.L13479
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	lr, [r0]
	cmp	lr, #0
	beq	.L13487
.L13476:
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LANCHOR0
	movw	r4, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR1
	mov	ip, r1
	movw	r1, #:lower16:composite_bind
	str	lr, [r2, #1112]
	movt	r1, #:upper16:composite_bind
	cmp	r3, #0
	mov	r3, r0
	streq	lr, [r0, #4]
	ldr	lr, [r3]
	str	r3, [r4, #2252]
	ldr	r0, .L13488
	str	ip, [r4, #3936]
	str	lr, [r2, #1140]
	ldr	r3, [r3, #20]
	str	r3, [r2, #1116]
	bl	usb_gadget_probe_driver
	cmp	r0, #0
	movne	r3, #0
	strne	r3, [r4, #2252]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13487:
	movw	r3, #:lower16:.LC795
	movt	r3, #:upper16:.LC795
	mov	lr, r3
	str	r3, [r0]
	b	.L13476
.L13479:
	mvn	r0, #21
	bx	lr
.L13489:
	.align	2
.L13488:
	.word	.LANCHOR0+1112
	.fnend
	.size	usb_composite_probe, .-usb_composite_probe
	.section	.devinit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_probe, %function
android_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r9, #:lower16:__stack_chk_guard
	ldr	r2, [r0, #300]
	movt	r9, #:upper16:__stack_chk_guard
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r9]
	mov	r6, r0
	cmp	r2, #0
	str	r3, [sp, #28]
	beq	.L13491
	mov	r2, #208
	mov	r1, #52
	add	r0, r0, #8
	bl	devm_kzalloc
	subs	r8, r0, #0
	bne	.L13492
	movw	r0, #:lower16:.LC796
	ldr	r1, .L13544
	mvn	r5, #11
	movt	r0, #:upper16:.LC796
	bl	printk
	b	.L13490
.L13492:
	movw	r1, #:lower16:.LC797
	mov	r3, #1
	ldr	r0, [r6, #300]
	movt	r1, #:upper16:.LC797
	add	r2, r8, #4
	bl	of_property_read_u32_array
	movw	r1, #:lower16:.LC798
	mov	r2, #0
	ldr	r0, [r6, #300]
	movt	r1, #:upper16:.LC798
	mov	r4, r2
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC799
	movne	r0, #1
	movt	r1, #:upper16:.LC799
	mov	r2, r4
	strb	r0, [r8, #9]
	ldr	r0, [r6, #300]
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC800
	movne	r0, #1
	mov	r3, r4
	mov	r2, r4
	movt	r1, #:upper16:.LC800
	strb	r0, [r8, #11]
	ldr	r0, [r6, #300]
	str	r4, [sp]
	bl	of_property_read_string_helper
	cmp	r0, #3
	mov	r5, r0
	movwle	r7, #:lower16:.LC800
	movle	r10, r4
	movtle	r7, #:upper16:.LC800
	ble	.L13494
	movw	r0, #:lower16:.LC801
	ldr	r1, .L13544
	mvn	r5, #21
	movt	r0, #:upper16:.LC801
	bl	printk
	b	.L13490
.L13497:
	mov	r1, r7
	str	r4, [sp]
	mov	r3, #1
	add	r2, sp, #12
	ldr	r0, [r6, #300]
	str	r10, [sp, #12]
	bl	of_property_read_string_helper
	ldr	r1, [sp, #12]
	cmp	r1, #0
	beq	.L13496
	add	r0, r8, #12
	mov	r2, #10
	mla	r0, r2, r4, r0
	bl	strlcpy
.L13496:
	add	r4, r4, #1
.L13494:
	cmp	r4, r5
	blt	.L13497
	str	r5, [r8, #44]
	b	.L13498
.L13491:
	ldr	r8, [r0, #92]
.L13498:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3584]
	mov	r7, r4
	cmp	r0, #0
	bne	.L13499
	movw	r1, #:lower16:.LC802
	ldr	r2, .L13544+4
	movt	r1, #:upper16:.LC802
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r4, #3584]
	movhi	r5, r0
	bhi	.L13490
.L13499:
	movw	r3, #:lower16:kmalloc_caches
	ldr	r10, .L13544+8
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L13523
	mov	r2, #432
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L13500
	ldr	r2, .L13544
	movw	r0, #:lower16:.LC803
	mvn	r5, #11
	movt	r0, #:upper16:.LC803
	mov	r1, r2
	bl	printk
	b	.L13501
.L13523:
	mov	r4, #16
.L13500:
	mov	r2, #65024
	ldr	r5, [r6]
	mov	r1, #1
	movt	r2, 65535
	ldr	lr, .L13544+12
	movw	r3, #:lower16:android_work
	mov	ip, #0
	movt	r3, #:upper16:android_work
	add	r0, r4, #412
	str	r2, [r4, #140]
	add	r2, r4, #144
	stm	r4, {r5, lr}
	str	r1, [r4, #20]
	movw	r1, #:lower16:.LC804
	str	r2, [r4, #144]
	movt	r1, #:upper16:.LC804
	str	r2, [r4, #148]
	ldr	r2, .L13544+4
	str	r3, [r4, #152]
	str	r0, [r4, #412]
	str	r0, [r4, #416]
	add	r0, r4, #24
	str	ip, [r4, #420]
	add	fp, r2, #8
	bl	__mutex_init
	ldr	r1, [r7, #2248]
	add	r3, r4, #424
	cmp	r8, #0
	ldr	r2, [r7, #3580]
	str	r8, [r4, #48]
	moveq	ip, r8
	str	r10, [r4, #424]
	mov	r0, r6
	str	r3, [r7, #2248]
	str	r1, [r4, #428]
	str	r3, [r1]
	ldrbne	ip, [r8, #8]	@ zero_extendqisi2
	add	r2, r2, #1
	movw	r3, #:lower16:.LANCHOR0
	mov	r1, #512
	movt	r3, #:upper16:.LANCHOR0
	str	r2, [r7, #3580]
	mov	r2, #0
	mov	r5, r3
	strb	ip, [r3, #1196]
	bl	platform_get_resource
	cmp	r0, #0
	beq	.L13503
	ldm	r0, {r1, r2}
	add	r6, r6, #8
	mov	r0, r6
	add	r2, r2, #1
	sub	r2, r2, r1
	bl	devm_ioremap
	cmp	r0, #0
	str	r0, [r7, #3488]
	bne	.L13503
	movw	r1, #:lower16:.LC805
	mov	r0, r6
	movt	r1, #:upper16:.LC805
	mvn	r5, #11
	bl	dev_err
	b	.L13504
.L13503:
	add	r6, sp, #17
	movw	r2, #:lower16:.LC806
	ldrb	r3, [r5, #1196]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC806
	mov	r1, #11
	mov	r0, r6
	bl	snprintf
	mov	r3, #0
	str	r6, [sp]
	ldr	r0, [r7, #3584]
	mov	r2, r3
	mov	r1, r3
	bl	device_create
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #12]
	bls	.L13505
	cmp	r0, #0
	beq	.L13507
	b	.L13509
.L13505:
	mov	r1, r4
	ldr	r6, .L13544+16
	bl	dev_set_drvdata
.L13508:
	ldr	r1, [r6, #4]!
	ldr	r0, [r4, #12]
	cmp	r1, #0
	beq	.L13507
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L13508
	ldr	r3, [r4, #12]
	ldr	r0, [r7, #3584]
	ldr	r1, [r3, #296]
	bl	device_destroy
.L13509:
	ldr	r2, .L13544
	movw	r0, #:lower16:.LC807
	movt	r0, #:upper16:.LC807
	mov	r1, r2
	bl	printk
	b	.L13504
.L13507:
	ldr	r2, [r4, #12]
	cmn	r2, #4096
	bls	.L13512
	movw	r0, #:lower16:.LC808
	ldr	r1, .L13544+20
	movt	r0, #:upper16:.LC808
	bl	printk
	ldr	r5, [r4, #12]
	cmp	r5, #0
	beq	.L13513
	b	.L13514
.L13512:
	mov	r0, r2
	ldr	r1, .L13544+24
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L13513
	movw	r0, #:lower16:.LC809
	ldr	r1, .L13544+20
	movt	r0, #:upper16:.LC809
	bl	printk
.L13514:
	movw	r0, #:lower16:.LC810
	ldr	r1, .L13544
	movt	r0, #:upper16:.LC810
	bl	printk
	b	.L13490
.L13513:
	movw	r1, #:lower16:android_bind
	ldr	r0, .L13544+28
	movt	r1, #:upper16:android_bind
	bl	usb_composite_probe
	subs	r5, r0, #0
	beq	.L13515
	ldr	r2, .L13544
	movw	r0, #:lower16:.LC811
	movt	r0, #:upper16:.LC811
	mov	r1, r2
	bl	printk
	b	.L13516
.L13515:
	cmp	r8, #0
	beq	.L13517
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L13517
	mvn	r2, #0
	mov	r1, #1
	add	r0, r4, #64
	bl	pm_qos_add_request
.L13517:
	movw	r1, #:lower16:.LC812
	mov	r2, #5
	movt	r1, #:upper16:.LC812
	add	r0, r4, #56
	bl	strlcpy
	ldr	r0, .L13544+32
	bl	misc_register
	subs	r5, r0, #0
	beq	.L13518
	movw	r0, #:lower16:.LC813
	mov	r1, r5
	movt	r0, #:upper16:.LC813
	bl	printk
	movw	r0, #:lower16:.LC814
	ldr	r1, .L13544
	movt	r0, #:upper16:.LC814
	bl	printk
	b	.L13516
.L13518:
	movw	r1, #:lower16:.LC815
	sub	r2, fp, #8
	ldr	r0, .L13544+36
	movt	r1, #:upper16:.LC815
	bl	__init_waitqueue_head
	b	.L13490
.L13516:
	ldr	r6, .L13544+16
.L13519:
	ldr	r1, [r6, #4]!
	ldr	r0, [r4, #12]
	cmp	r1, #0
	beq	.L13543
	bl	device_remove_file
	b	.L13519
.L13543:
	ldr	r1, [r0, #296]
	ldr	r0, [r7, #3584]
	bl	device_destroy
.L13504:
	ldr	r3, [r7, #3580]
	mov	lr, #256
	mov	ip, #512
	ldr	r1, [r4, #424]
	mov	r0, r4
	ldr	r2, [r4, #428]
	sub	r3, r3, #1
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [r4, #424]
	str	ip, [r4, #428]
	str	r3, [r7, #3580]
	bl	kfree
.L13501:
	ldr	r3, [r7, #2244]
	cmp	r3, r10
	bne	.L13490
	ldr	r0, [r7, #3584]
	bl	class_destroy
	mov	r3, #0
	str	r3, [r7, #3584]
.L13490:
	ldr	r2, [sp, #28]
	mov	r0, r5
	ldr	r3, [r9]
	cmp	r2, r3
	beq	.L13521
	bl	__stack_chk_fail
.L13521:
	add	sp, sp, #36
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L13545:
	.align	2
.L13544:
	.word	.LANCHOR3-896
	.word	.LANCHOR6-4088
	.word	.LANCHOR1+2244
	.word	.LANCHOR5-1320
	.word	.LANCHOR0+1380
	.word	.LANCHOR3-880
	.word	.LANCHOR5-1216
	.word	.LANCHOR0+1460
	.word	.LANCHOR5-1200
	.word	.LANCHOR1+2224
	.fnend
	.size	android_probe, .-android_probe
	.text
	.align	2
	.global	usb_composite_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_unregister, %function
usb_composite_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2252]
	cmp	r3, r0
	beq	.L13548
	bx	lr
.L13548:
	ldr	r0, .L13549
	b	usb_gadget_unregister_driver
.L13550:
	.align	2
.L13549:
	.word	.LANCHOR0+1112
	.fnend
	.size	usb_composite_unregister, .-usb_composite_unregister
	.align	2
	.global	usb_composite_setup_continue
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_setup_continue, %function
usb_composite_setup_continue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #60
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #56]
	mov	r8, r0
	cmp	r3, #0
	bne	.L13552
	cmp	r4, #0
	bne	.L13557
.L13554:
	mov	r1, r8
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L13552:
	sub	r5, r3, #1
	cmp	r5, #0
	str	r5, [r4, #56]
	bne	.L13554
	str	r5, [r7, #4]
	ldr	r3, [r4]
	mov	r2, #32
	mov	r1, r7
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r7, #44]
	b	.L13554
.L13557:
	movw	r2, #:lower16:.LC690
	movw	r0, #:lower16:.LC487
	ldr	r3, .L13558
	movt	r2, #:upper16:.LC690
	movt	r0, #:upper16:.LC487
	movw	r1, #1845
	bl	warn_slowpath_fmt
	b	.L13554
.L13559:
	.align	2
.L13558:
	.word	.LANCHOR3-1532
	.fnend
	.size	usb_composite_setup_continue, .-usb_composite_setup_continue
	.align	2
	.global	usb_diag_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_open, %function
usb_diag_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR0
	mov	r6, r0
	ldr	r0, .L13574
	strd	r8, [sp, #16]
	mov	r7, r1
	str	r10, [sp, #24]
	mov	r8, r2
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r9, r0
	cmp	r5, r4
	beq	.L13561
	sub	r4, r4, #4
	b	.L13563
.L13572:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L13561
.L13563:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13572
	mov	r1, r9
	ldr	r0, .L13574
	bl	_raw_spin_unlock_irqrestore
.L13565:
	ldr	r0, .L13574
	str	r6, [r4]
	str	r8, [r4, #12]
	str	r7, [r4, #16]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #4]
	add	r3, r4, #4
	mov	r1, r0
	ldr	r0, .L13574
	str	r3, [r5, #4]
	str	r5, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r2]
	bl	_raw_spin_unlock_irqrestore
.L13560:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13561:
	ldr	r0, .L13574
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13573
	mov	r2, #24
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L13565
	mvn	r4, #11
	b	.L13560
.L13573:
	mov	r4, #16
	b	.L13565
.L13575:
	.align	2
.L13574:
	.word	.LANCHOR1+3380
	.fnend
	.size	usb_diag_open, .-usb_diag_open
	.align	2
	.global	usb_diag_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_close, %function
usb_diag_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r0, .L13584
	str	r6, [sp, #8]
	movw	r5, #:lower16:.LANCHOR1
	str	lr, [sp, #12]
	movt	r5, #:upper16:.LANCHOR1
	bl	_raw_spin_lock_irqsave
	ldmib	r4, {r1, r3}
	mov	r2, #0
	mov	r6, r0
	ldr	r0, .L13584+4
	mov	ip, #256
	str	r2, [r4, #12]
	str	r2, [r4, #16]
	str	r3, [r1, #4]
	str	r1, [r3]
	ldr	r3, [r5, #3468]
	mov	r1, #512
	str	ip, [r4, #4]
	str	r1, [r4, #8]
	cmp	r3, r0
	beq	.L13578
	sub	r3, r3, #140
	mov	ip, r2
.L13577:
	ldr	r2, [r3, #124]
	cmp	r2, r4
	beq	.L13583
	ldr	r3, [r3, #140]
	cmp	r3, r0
	sub	r3, r3, #140
	bne	.L13577
.L13578:
	mov	r0, r4
	bl	kfree
	ldrd	r4, [sp]
	mov	r1, r6
	ldr	r0, .L13584
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L13583:
	ldr	r2, [r3, #140]
	str	ip, [r3, #124]
	cmp	r2, r0
	sub	r3, r2, #140
	bne	.L13577
	b	.L13578
.L13585:
	.align	2
.L13584:
	.word	.LANCHOR1+3380
	.word	.LANCHOR1+3468
	.fnend
	.size	usb_diag_close, .-usb_diag_close
	.align	2
	.global	usb_diag_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_alloc_req, %function
usb_diag_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L13601
	add	r3, r4, #108
	mov	r5, r4
	mov	r0, r3
	mov	r8, r2
	str	r3, [sp, #4]
	mov	r7, r1
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #100]!
	str	r0, [sp]
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L13588
	mov	r10, r2
	mov	r9, #256
	mov	r6, #512
	b	.L13589
.L13602:
	mov	r10, r2
.L13589:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r9, [r3]
	str	r6, [r3, #4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r10
	mov	r3, r10
	ldr	r2, [r10]
	bne	.L13602
.L13588:
	mov	r6, r4
	ldr	r2, [r6, #92]!
	cmp	r2, r6
	ldr	r0, [r2]
	beq	.L13590
	mov	fp, r0
	mov	r10, #256
	mov	r9, #512
	b	.L13591
.L13603:
	mov	fp, r0
.L13591:
	ldr	r3, [r2, #4]
	sub	r1, r2, #36
	str	r3, [r0, #4]
	str	r0, [r3]
	str	r10, [r2]
	str	r9, [r2, #4]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, fp
	mov	r2, fp
	ldr	r0, [fp]
	bne	.L13603
.L13590:
	cmp	r7, #0
	ble	.L13592
	movw	r9, #:lower16:diag_write_complete
	mov	r10, #0
	movt	r9, #:upper16:diag_write_complete
	b	.L13594
.L13617:
	str	r9, [r0, #28]
	ldr	r2, [r4, #104]
	cmp	r7, r10
	str	r3, [r4, #104]
	str	r5, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	beq	.L13592
.L13594:
	ldr	r0, [r4, #88]
	mov	r1, #32
	add	r10, r10, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L13617
.L13593:
	ldr	r3, [r4, #100]
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L13597
	mov	r9, r2
	mov	r8, #256
	mov	r7, #512
	b	.L13598
.L13604:
	mov	r9, r2
.L13598:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r9
	mov	r3, r9
	ldr	r2, [r9]
	bne	.L13604
.L13597:
	ldr	r3, [r4, #92]
	cmp	r3, r6
	ldr	r2, [r3]
	beq	.L13599
	mov	r8, r2
	mov	r7, #256
	mov	r5, #512
	b	.L13600
.L13605:
	mov	r8, r2
.L13600:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r7, [r3]
	str	r5, [r3, #4]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r8
	mov	r3, r8
	ldr	r2, [r8]
	bne	.L13605
.L13599:
	ldr	r1, [sp]
	ldr	r0, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
.L13586:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13592:
	cmp	r8, #0
	ble	.L13595
	movw	r7, #:lower16:diag_read_complete
	mov	r9, #0
	movt	r7, #:upper16:diag_read_complete
	b	.L13596
.L13618:
	str	r7, [r0, #28]
	ldr	r2, [r4, #96]
	cmp	r8, r9
	str	r3, [r4, #96]
	str	r6, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	beq	.L13595
.L13596:
	ldr	r0, [r4, #84]
	mov	r1, #32
	add	r9, r9, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L13618
	b	.L13593
.L13595:
	ldr	r1, [sp]
	ldr	r0, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L13586
.L13601:
	mvn	r0, #18
	b	.L13586
	.fnend
	.size	usb_diag_alloc_req, .-usb_diag_alloc_req
	.align	2
	.global	usb_diag_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_read, %function
usb_diag_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L13623
	add	r7, r5, #108
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L13629
	ldr	r4, [r5, #92]
	add	r8, r5, #92
	cmp	r8, r4
	beq	.L13630
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r1, r0
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r4, #36
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r4, #-32]
	str	r6, [r4, #-4]
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L13631
.L13619:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13631:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #96]
	mov	r1, r0
	str	r4, [r5, #96]
	mov	r0, r7
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, .L13632
	ldr	r0, .L13632+4
	bl	___ratelimit
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L13619
	ldr	r3, [r5, #116]
	movw	r1, #:lower16:.LC817
	movt	r1, #:upper16:.LC817
	ldr	r2, .L13632
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #4
	b	.L13619
.L13623:
	mvn	r0, #18
	b	.L13619
.L13629:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L13619
.L13630:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #116]
	movw	r1, #:lower16:.LC816
	movt	r1, #:upper16:.LC816
	ldr	r2, .L13632
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L13619
.L13633:
	.align	2
.L13632:
	.word	.LANCHOR3-852
	.word	.LANCHOR5-1164
	.fnend
	.size	usb_diag_read, .-usb_diag_read
	.align	2
	.global	usb_diag_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_write, %function
usb_diag_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L13640
	add	r7, r4, #108
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L13645
	ldr	r5, [r4, #100]
	add	r8, r4, #100
	cmp	r8, r5
	beq	.L13646
	ldrd	r2, [r5]
	mov	lr, #256
	mov	ip, #512
	mov	r1, r0
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r5, #36
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L13647
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #136]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #128]
	str	r3, [r4, #136]
.L13634:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13640:
	mvn	r0, #18
	b	.L13634
.L13645:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L13634
.L13647:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #104]
	mov	r6, r0
	str	r5, [r4, #104]
	ldr	r0, .L13648
	str	r8, [r5]
	ldr	r1, .L13648+4
	str	r3, [r5, #4]
	str	r5, [r3]
	bl	___ratelimit
	cmp	r0, #0
	beq	.L13639
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC817
	movt	r1, #:upper16:.LC817
	ldr	r2, .L13648+4
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L13639:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L13634
.L13646:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC816
	movt	r1, #:upper16:.LC816
	ldr	r2, .L13648+4
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L13634
.L13649:
	.align	2
.L13648:
	.word	.LANCHOR5-1140
	.word	.LANCHOR3-836
	.fnend
	.size	usb_diag_write, .-usb_diag_write
	.align	2
	.global	diag_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_add, %function
diag_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r5]
	cmp	r5, r4
	beq	.L13651
	mov	r8, r1
	mov	r9, r2
	sub	r4, r4, #4
	b	.L13653
.L13681:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L13651
.L13653:
	mov	r0, r8
	ldr	r1, [r4]
	bl	strcmp
	subs	r7, r0, #0
	bne	.L13681
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13682
	mov	r2, #148
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L13683
.L13659:
	movw	r2, #:lower16:.LANCHOR1
	ldr	r0, .L13684
	add	r3, r5, #140
	movt	r2, #:upper16:.LANCHOR1
	ldr	ip, .L13684+4
	ldr	r1, [r2, #3472]
	str	r3, [r2, #3472]
	movw	r2, #:lower16:diag_function_set_alt
	movt	r2, #:upper16:diag_function_set_alt
	add	lr, ip, #40
	strd	r0, [r5, #140]
	movw	r0, #:lower16:diag_function_bind
	str	r3, [r1]
	movw	r3, #:lower16:diag_function_unbind
	movw	r1, #:lower16:diag_function_disable
	str	r9, [r5, #120]
	movt	r3, #:upper16:diag_function_unbind
	movt	r1, #:upper16:diag_function_disable
	str	r4, [r5, #124]
	ldr	r8, [r6, #24]
	movt	r0, #:upper16:diag_function_bind
	str	r8, [r5, #116]
	ldr	r8, [r4]
	mov	r4, #0
	str	lr, [r5, #8]
	add	lr, r5, #92
	str	ip, [r5, #16]
	add	ip, r5, #100
	str	r8, [r5]
	str	r6, [r5, #20]
	str	r0, [r5, #32]
	str	r3, [r5, #36]
	add	r3, r5, #72
	str	r2, [r5, #40]
	add	r2, r6, #36
	str	r1, [r5, #48]
	str	lr, [r5, #92]
	str	lr, [r5, #96]
	str	ip, [r5, #100]
	str	ip, [r5, #104]
	str	r4, [r5, #108]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r5, #72]
	str	r1, [r5, #76]
	str	r3, [r1]
	ldr	r3, [r5, #32]
	cmp	r3, r4
	beq	.L13655
	mov	r1, r5
	mov	r0, r6
	blx	r3
	subs	r7, r0, #0
	bge	.L13655
	ldrd	r2, [r5, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r4, [r5, #20]
	strd	r0, [r5, #72]
.L13655:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13656
	ldr	r2, [r5, #16]
	cmp	r2, #0
	beq	.L13656
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L13656:
	tst	r3, #2
	bne	.L13657
	ldr	r2, [r5, #8]
	cmp	r2, #0
	beq	.L13657
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L13657:
	tst	r3, #1
	bne	.L13658
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L13658
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L13658:
	cmp	r7, #0
	beq	.L13650
	ldr	r3, [r6, #24]
	movw	r1, #:lower16:.LC818
	movt	r1, #:upper16:.LC818
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	ldrd	r2, [r5, #140]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r5
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5, #140]
	str	r1, [r5, #144]
	bl	kfree
.L13650:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13651:
	ldr	r3, [r6, #24]
	movw	r1, #:lower16:.LC819
	mvn	r7, #18
	movt	r1, #:upper16:.LC819
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L13650
.L13682:
	mov	r5, #16
	b	.L13659
.L13683:
	mvn	r7, #11
	b	.L13650
.L13685:
	.align	2
.L13684:
	.word	.LANCHOR1+3468
	.word	.LANCHOR0+3196
	.fnend
	.size	diag_function_add, .-diag_function_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind_config, %function
diag_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r2, .L13708
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:__stack_chk_guard
	mov	r8, r1
	strd	r10, [sp, #24]
	movt	r9, #:upper16:__stack_chk_guard
	str	lr, [sp, #32]
	ldr	r3, [r3, #2244]
	.pad #44
	sub	sp, sp, #44
	ldr	r0, [r9]
	ldr	r1, [r1, #24]
	cmp	r3, r2
	sub	r5, r3, #424
	str	r0, [sp, #36]
	bne	.L13689
	b	.L13687
.L13705:
	ldr	r3, [r5, #424]
	cmp	r3, r2
	sub	r5, r3, #424
	beq	.L13687
.L13689:
	ldr	r3, [r3, #-416]
	cmp	r1, r3
	bne	.L13705
.L13687:
	mov	r2, #32
	ldr	r1, .L13708+4
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	movw	r6, #:lower16:.LC313
	bl	strim
	movw	r10, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r6, #:upper16:.LC313
	str	r0, [sp]
	movt	r10, #:upper16:usb_diag_update_pid_and_serial_num
	mov	r4, #0
	mvn	r7, #0
	b	.L13690
.L13693:
	mov	r1, r6
	mov	r0, sp
	bl	strsep
	cmp	r4, #0
	mov	fp, r0
	movne	r2, #0
	bne	.L13691
	ldr	r2, [r5, #48]
	cmp	r2, #0
	beq	.L13696
	ldr	r2, [r2]
	cmp	r2, #0
	moveq	r2, r10
.L13691:
	cmp	fp, #0
	beq	.L13692
	mov	r1, fp
	mov	r0, r8
	bl	diag_function_add
	subs	r7, r0, #0
	bne	.L13706
.L13692:
	ldr	r0, [sp]
	add	r4, r4, #1
.L13690:
	cmp	r0, #0
	bne	.L13693
	ldr	r2, [sp, #36]
	mov	r0, r7
	ldr	r3, [r9]
	cmp	r2, r3
	bne	.L13707
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13696:
	movw	r2, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r2, #:upper16:usb_diag_update_pid_and_serial_num
	b	.L13691
.L13706:
	movw	r0, #:lower16:.LC820
	mov	r2, fp
	ldr	r1, .L13708+8
	movt	r0, #:upper16:.LC820
	bl	printk
	b	.L13692
.L13707:
	bl	__stack_chk_fail
.L13709:
	.align	2
.L13708:
	.word	.LANCHOR1+2244
	.word	.LANCHOR1+3492
	.word	.LANCHOR3-820
	.fnend
	.size	diag_function_bind_config, .-diag_function_bind_config
	.align	2
	.global	send_sps_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_sps_req, %function
send_sps_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r3, [r0, #8]
	ldr	r2, [r6, #84]
	ldr	r3, [r3, #8]
	ldr	r7, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L13719
	movw	r0, #:lower16:.LC348
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC348
	bl	strcmp
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	moveq	r2, #32768
	ldr	r3, [r3, #4020]
	orreq	r3, r3, #1312
	bne	.L13720
.L13714:
	str	r2, [r5, #4]
	mov	r1, r5
	mov	r0, r4
	str	r3, [r5, #52]
	mov	r2, #32
	str	r5, [r6, #96]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L13721
.L13710:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13720:
	bic	r3, r3, #65536
	mov	r2, #0
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	b	.L13714
.L13719:
	movw	r0, #:lower16:.LC821
	movt	r0, #:upper16:.LC821
	bl	printk
	mvn	r0, #11
	b	.L13710
.L13721:
	movw	r0, #:lower16:.LC822
	movt	r0, #:upper16:.LC822
	bl	printk
	mvn	r0, #4
	b	.L13710
	.fnend
	.size	send_sps_req, .-send_sps_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_connect_work, %function
usb_qdss_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC348
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC348
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r7, [r4, #-48]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r7]
	ldr	r3, [r3, #84]
	ldr	r3, [r3]
	ldr	r1, [r3, #28]
	bl	strcmp
	cmp	r0, #0
	beq	.L13737
.L13723:
	ldr	r0, [r4, #-72]
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r6, [r0]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx
	uxtb	r8, r0
	ldr	r1, .L13741
	mov	r0, r8
	bl	usb_bam_connect
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4032]
	beq	.L13726
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4032]
	beq	.L13738
.L13726:
	ldr	r0, [r6, #28]
	bl	usb_bam_set_qdss_core
	ldr	r3, .L13741+4
	mov	r1, #0
	mov	r0, r8
	ldr	r2, [r5, #4032]
	stm	sp, {r1, r2}
	add	r1, r3, #4
	sub	r2, r3, #4
	bl	get_bam2bam_connection_info
	movw	r0, #:lower16:.LC348
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC348
	bl	strcmp
	cmp	r0, #0
	beq	.L13739
.L13728:
	cmp	r9, #0
	bne	.L13727
	ldr	r5, [r4, #-32]
	cmp	r5, #0
	beq	.L13730
	sub	r3, r4, #44
	mov	r2, r9
	ldr	r0, [r4, #-28]
	mov	r1, r9
	blx	r5
.L13730:
	ldr	r0, [r4, #-48]
	bl	send_sps_req
	cmp	r0, #0
	bne	.L13740
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L13737:
	mov	r0, r7
	bl	msm_ep_config
	cmp	r0, #0
	bne	.L13724
	ldr	r7, [r4, #-48]
	b	.L13723
.L13739:
	ldr	r2, [r5, #4032]
	mov	r0, r7
	ldrb	r3, [r5, #4020]	@ zero_extendqisi2
	ldmib	r2, {r1, r2}
	bl	msm_data_fifo_config
	b	.L13728
.L13724:
	movw	r0, #:lower16:.LC823
	movt	r0, #:upper16:.LC823
	bl	printk
	movw	r0, #:lower16:.LC824
	movt	r0, #:upper16:.LC824
.L13736:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L13738:
	movw	r0, #:lower16:.LC825
	movt	r0, #:upper16:.LC825
	bl	printk
.L13727:
	movw	r0, #:lower16:.LC826
	movt	r0, #:upper16:.LC826
	b	.L13736
.L13740:
	movw	r0, #:lower16:.LC827
	movt	r0, #:upper16:.LC827
	b	.L13736
.L13742:
	.align	2
.L13741:
	.word	.LANCHOR1+4020
	.word	.LANCHOR1+4024
	.fnend
	.size	usb_qdss_connect_work, .-usb_qdss_connect_work
	.align	2
	.global	init_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	init_data, %function
init_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC348
	str	lr, [sp, #4]
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC348
	ldr	r3, [r3, #84]
	ldr	r3, [r3]
	ldr	r1, [r3, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	beq	.L13750
.L13743:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13750:
	mov	r0, r4
	bl	msm_ep_config
	subs	r4, r0, #0
	beq	.L13743
	movw	r0, #:lower16:.LC823
	movt	r0, #:upper16:.LC823
	bl	printk
	b	.L13743
	.fnend
	.size	init_data, .-init_data
	.align	2
	.global	uninit_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	uninit_data, %function
uninit_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC500
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC500
	str	lr, [sp, #12]
	ldr	r3, [r4]
	ldr	r3, [r3, #84]
	ldr	r5, [r3]
	bl	printk
	movw	r0, #:lower16:.LC348
	movt	r0, #:upper16:.LC348
	ldr	r1, [r5, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	beq	.L13758
.L13751:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13758:
	mov	r0, r4
	bl	msm_ep_unconfig
	subs	r4, r0, #0
	beq	.L13751
	movw	r0, #:lower16:.LC501
	movt	r0, #:upper16:.LC501
	bl	printk
	b	.L13751
	.fnend
	.size	uninit_data, .-uninit_data
	.align	2
	.global	usb_qdss_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_free_req, %function
usb_qdss_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L13768
	mov	r6, r5
	ldr	r3, [r6, #148]!
	cmp	r3, r6
	ldr	r2, [r3]
	beq	.L13761
	mov	r4, r2
	mov	r8, #256
	mov	r7, #512
	b	.L13762
.L13765:
	mov	r4, r2
.L13762:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	mov	r3, r4
	ldr	r2, [r4]
	bne	.L13765
.L13761:
	mov	r6, r5
	ldr	r3, [r6, #140]!
	cmp	r3, r6
	ldr	r2, [r3]
	beq	.L13759
	mov	r4, r2
	mov	r8, #256
	mov	r7, #512
	b	.L13764
.L13766:
	mov	r4, r2
.L13764:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	mov	r3, r4
	ldr	r2, [r4]
	bne	.L13766
.L13759:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13768:
	movw	r0, #:lower16:.LC828
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC828
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
	.fnend
	.size	usb_qdss_free_req, .-usb_qdss_free_req
	.align	2
	.global	usb_qdss_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_alloc_req, %function
usb_qdss_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r2, #0
	cmpgt	r1, #0
	strd	r6, [sp, #8]
	movle	r5, #1
	movgt	r5, #0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	moveq	r5, #1
	cmp	r5, #0
	bne	.L13780
	movw	r6, #:lower16:qdss_ctrl_write_complete
	mov	r8, r0
	mov	r10, r1
	mov	r7, r2
	movt	r6, #:upper16:qdss_ctrl_write_complete
	add	r9, r4, #148
.L13770:
	ldr	r0, [r4, #104]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L13781
	str	r6, [r0, #28]
	ldr	r2, [r4, #152]
	cmp	r10, r5
	str	r3, [r4, #152]
	str	r9, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	bgt	.L13770
	movw	r6, #:lower16:qdss_ctrl_read_complete
	mov	r5, #0
	movt	r6, #:upper16:qdss_ctrl_read_complete
	add	r9, r4, #140
.L13775:
	ldr	r0, [r4, #100]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r2, r0, #36
	beq	.L13782
	str	r6, [r0, #28]
	ldr	r3, [r4, #144]
	cmp	r7, r5
	str	r2, [r4, #144]
	str	r9, [r0, #36]
	str	r3, [r0, #40]
	str	r2, [r3]
	bgt	.L13775
	mov	r0, #0
.L13769:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13781:
	movw	r0, #:lower16:.LC830
	movt	r0, #:upper16:.LC830
	bl	printk
.L13773:
	mov	r0, r8
	bl	usb_qdss_free_req
	mvn	r0, #11
	b	.L13769
.L13782:
	movw	r0, #:lower16:.LC831
	movt	r0, #:upper16:.LC831
	bl	printk
	b	.L13773
.L13780:
	movw	r0, #:lower16:.LC829
	movt	r0, #:upper16:.LC829
	bl	printk
	mvn	r0, #18
	b	.L13769
	.fnend
	.size	usb_qdss_alloc_req, .-usb_qdss_alloc_req
	.align	2
	.global	usb_qdss_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_read, %function
usb_qdss_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L13787
	add	r7, r5, #188
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L13792
	ldr	r4, [r5, #140]
	add	r8, r5, #140
	cmp	r8, r4
	beq	.L13793
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r4, #36
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r4, #-32]
	str	r6, [r4, #-4]
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L13794
.L13783:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13787:
	mvn	r0, #18
	b	.L13783
.L13792:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L13783
.L13794:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #144]
	mov	r1, r0
	str	r4, [r5, #144]
	mov	r0, r7
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC833
	movt	r0, #:upper16:.LC833
	bl	printk
	mvn	r0, #4
	b	.L13783
.L13793:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC832
	movt	r0, #:upper16:.LC832
	bl	printk
	mvn	r0, #10
	b	.L13783
	.fnend
	.size	usb_qdss_ctrl_read, .-usb_qdss_ctrl_read
	.align	2
	.global	usb_qdss_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_write, %function
usb_qdss_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	cmp	r5, #0
	beq	.L13799
	add	r7, r5, #188
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L13804
	ldr	r4, [r5, #148]
	add	r8, r5, #148
	cmp	r8, r4
	beq	.L13805
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r4, #36
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r4, #-32]
	str	r6, [r4, #-4]
	ldr	r0, [r5, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L13806
.L13795:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13799:
	mvn	r0, #18
	b	.L13795
.L13804:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L13795
.L13806:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #152]
	mov	r1, r0
	str	r4, [r5, #152]
	mov	r0, r7
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC833
	movt	r0, #:upper16:.LC833
	bl	printk
	mvn	r0, #4
	b	.L13795
.L13805:
	movw	r0, #:lower16:.LC834
	str	r1, [sp, #4]
	movt	r0, #:upper16:.LC834
	bl	printk
	ldr	r1, [sp, #4]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #10
	b	.L13795
	.fnend
	.size	usb_qdss_ctrl_write, .-usb_qdss_ctrl_write
	.align	2
	.global	usb_qdss_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_open, %function
usb_qdss_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r2, #0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L13821
	movw	r7, #:lower16:.LANCHOR0
	mov	r6, r0
	ldr	r0, .L13827
	movt	r7, #:upper16:.LANCHOR0
	mov	r10, r1
	mov	r5, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #268]!
	mov	r8, r0
	cmp	r4, r5
	sub	r4, r4, #4
	bne	.L13812
	b	.L13810
.L13822:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L13810
.L13812:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13822
	sub	fp, r4, #112
	str	fp, [r4, #20]
.L13815:
	mov	r3, #1
	mov	r1, r8
	ldr	r0, .L13827
	str	r6, [r4]
	str	r9, [r4, #12]
	str	r10, [r4, #16]
	str	r3, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #92]
	cmp	r3, #1
	beq	.L13823
.L13807:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13810:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L13824
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	fp, r0, #0
	beq	.L13825
.L13813:
	mov	r1, r8
	ldr	r0, .L13827
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #10
	movw	r0, #:lower16:.LC79
	mov	r3, r2
	stm	sp, {r2, r6}
	movt	r1, 2
	movt	r0, #:upper16:.LC79
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [fp, #196]
	beq	.L13826
	ldr	r0, .L13827
	add	r4, fp, #112
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #272]
	add	r2, fp, #116
	str	r5, [fp, #116]
	mov	r8, r0
	str	r2, [r7, #272]
	str	r3, [fp, #120]
	str	r2, [r3]
	b	.L13815
.L13824:
	mov	fp, #16
	b	.L13813
.L13823:
	add	r2, fp, #156
	ldr	r1, [fp, #196]
	mov	r0, #4
	bl	queue_work_on
	b	.L13807
.L13826:
	mov	r0, fp
	mvn	r4, #11
	bl	kfree
	b	.L13807
.L13825:
	mov	r1, r8
	ldr	r0, .L13827
	mvn	r4, #11
	bl	_raw_spin_unlock_irqrestore
	b	.L13807
.L13821:
	movw	r0, #:lower16:.LC835
	mov	r4, r9
	movt	r0, #:upper16:.LC835
	bl	printk
	b	.L13807
.L13828:
	.align	2
.L13827:
	.word	.LANCHOR1+3360
	.fnend
	.size	usb_qdss_open, .-usb_qdss_open
	.align	2
	.global	usb_qdss_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_close, %function
usb_qdss_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	ldr	r0, .L13833
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r5, #20]
	ldr	r3, [r4, #84]
	ldr	r6, [r3]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, #0
	mov	r1, r7
	ldr	r0, .L13833
	str	r3, [r4, #96]
	str	r3, [r5, #24]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC348
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC348
	bl	strcmp
	cmp	r0, #0
	beq	.L13832
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13832:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	msm_dwc3_restart_usb_session
.L13834:
	.align	2
.L13833:
	.word	.LANCHOR1+3360
	.fnend
	.size	usb_qdss_close, .-usb_qdss_close
	.align	2
	.global	rmnet_smd_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind_config, %function
rmnet_smd_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L13847
	mov	r2, #456
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13864
.L13836:
	movw	r2, #:lower16:.LC646
	mov	r5, #0
	movt	r2, #:upper16:.LC646
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	mov	r1, #10
	str	r5, [sp]
	movw	r0, #:lower16:.LC79
	str	r2, [sp, #4]
	mov	r3, r5
	movt	r1, 2
	movt	r0, #:upper16:.LC79
	str	r4, [r8, #3332]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #388]
	beq	.L13849
	add	r1, r4, #396
	mov	r2, #65024
	str	r5, [r4, #164]
	movw	r0, #:lower16:rmnet_smd_connect_work
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	str	r5, [r4, #168]
	add	ip, r4, #412
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	str	r5, [r4, #172]
	movt	r2, 65535
	movt	r0, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #396]
	str	r1, [r4, #400]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	movw	r9, #:lower16:rmnet_smd_setup
	str	r5, [r4, #308]
	movt	r1, #:upper16:rmnet_control_rx_tlet
	add	r7, r4, #124
	str	r5, [r4, #372]
	movt	r9, #:upper16:rmnet_smd_setup
	str	r2, [r4, #392]
	str	r0, [r4, #404]
	add	r0, r4, #284
	str	r2, [r4, #408]
	mov	r2, r4
	str	ip, [r4, #412]
	str	ip, [r4, #416]
	str	r3, [r4, #420]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	add	r0, r4, #264
	movt	r1, #:upper16:rmnet_control_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	add	r0, r4, #348
	movt	r1, #:upper16:rmnet_data_rx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #328
	movt	r1, #:upper16:rmnet_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC649
	ldr	r2, .L13868
	add	r0, r4, #312
	movt	r1, #:upper16:.LC649
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC650
	ldr	r2, .L13868
	add	r0, r4, #376
	movt	r1, #:upper16:.LC650
	bl	__init_waitqueue_head
	ldr	r3, .L13868+4
	movw	r0, #:lower16:rmnet_smd_ch_probe
	movw	r2, #:lower16:.LC651
	movt	r0, #:upper16:rmnet_smd_ch_probe
	movt	r2, #:upper16:.LC651
	movw	ip, #:lower16:rmnet_smd_bind
	movw	r1, #:lower16:.LC591
	movt	ip, #:upper16:rmnet_smd_bind
	movt	r1, #:upper16:.LC591
	strd	r2, [r4]
	add	lr, r3, #8
	add	r3, r3, #28
	str	r0, [r4, #176]
	movw	r0, #:lower16:rmnet_smd_unbind
	movw	r2, #:lower16:rmnet_smd_set_alt
	movt	r0, #:upper16:rmnet_smd_unbind
	str	r3, [r4, #8]
	movw	r3, #:lower16:rmnet_smd_disable
	movt	r2, #:upper16:rmnet_smd_set_alt
	movt	r3, #:upper16:rmnet_smd_disable
	str	lr, [r4, #16]
	add	lr, r4, #116
	str	r6, [r4, #20]
	str	r0, [r4, #36]
	add	r0, r4, #108
	str	ip, [r4, #32]
	add	ip, r4, #132
	str	r2, [r4, #40]
	add	r2, r4, #148
	str	r3, [r4, #48]
	add	r3, r4, #140
	str	r9, [r4, #52]
	str	r0, [r4, #108]
	str	r0, [r4, #112]
	add	r0, r4, #156
	str	lr, [r4, #116]
	str	lr, [r4, #120]
	str	r7, [r4, #124]
	str	r7, [r4, #128]
	str	ip, [r4, #132]
	str	ip, [r4, #136]
	str	r3, [r4, #140]
	str	r3, [r4, #144]
	add	r3, r4, #72
	str	r2, [r4, #148]
	str	r2, [r4, #152]
	add	r2, r6, #36
	str	r0, [r4, #156]
	str	r0, [r4, #160]
	str	r1, [r4, #196]
	str	r5, [r4, #204]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r7, [r4, #32]
	cmp	r7, r5
	beq	.L13839
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L13865
.L13839:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13840
.L13867:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L13840
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L13840:
	tst	r3, #2
	bne	.L13841
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L13841
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L13841:
	tst	r3, #1
	bne	.L13842
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L13842
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L13842:
	cmp	r7, #0
	beq	.L13866
.L13843:
	ldr	r0, [r4, #388]
	bl	destroy_workqueue
.L13838:
	mov	r0, r4
	bl	kfree
.L13835:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L13866:
	movw	r0, #:lower16:.LC652
	mov	r1, r7
	movt	r0, #:upper16:.LC652
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r8, #3364]
	beq	.L13835
	cmn	r0, #4096
	bhi	.L13835
	ldr	ip, .L13868+8
	movw	r0, #:lower16:.LC164
	mov	r3, r4
	movt	r0, #:upper16:.LC164
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L13846
	cmn	r0, #4096
	bls	.L13835
.L13846:
	ldr	r0, [r8, #3364]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r8, #3364]
	b	.L13835
.L13865:
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r4, #20]
	strd	r0, [r4, #72]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13840
	b	.L13867
.L13847:
	mov	r4, #16
	b	.L13836
.L13849:
	mvn	r7, #11
	b	.L13838
.L13864:
	mvn	r7, #11
	b	.L13835
.L13869:
	.align	2
.L13868:
	.word	.LANCHOR1+4056
	.word	.LANCHOR0+2728
	.word	.LANCHOR3-2340
	.fnend
	.size	rmnet_smd_bind_config, .-rmnet_smd_bind_config
	.align	2
	.global	rmnet_sdio_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_add, %function
rmnet_sdio_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L13879
	mov	r2, #376
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13893
.L13871:
	movw	r2, #:lower16:.LC646
	mov	r5, #0
	movt	r2, #:upper16:.LC646
	mov	r1, #10
	movw	r0, #:lower16:.LC79
	mov	r3, r5
	str	r5, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC79
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #200]
	beq	.L13881
	movw	r0, #:lower16:rmnet_sdio_disconnect_work
	add	r8, r4, #208
	str	r5, [r4, #188]
	add	lr, r4, #224
	movt	r0, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #192]
	mov	r7, #65024
	movw	ip, #:lower16:rmnet_sdio_set_modem_cbits_w
	str	r5, [r4, #196]
	movw	r2, #:lower16:rmnet_sdio_control_rx_work
	movw	r3, #:lower16:rmnet_sdio_data_rx_work
	str	r8, [r4, #208]
	movw	r1, #:lower16:rmnet_open_sdio_work
	movt	r7, 65535
	str	r8, [r4, #212]
	movt	ip, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #240
	movt	r2, #:upper16:rmnet_sdio_control_rx_work
	movt	r3, #:upper16:rmnet_sdio_data_rx_work
	str	r7, [r4, #204]
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r0, [r4, #216]
	add	r0, r4, #340
	str	lr, [r4, #224]
	movw	r10, #:lower16:rmnet_sdio_suspend
	add	r9, r4, #108
	str	lr, [r4, #228]
	add	lr, r4, #256
	movt	r10, #:upper16:rmnet_sdio_suspend
	str	r7, [r4, #220]
	str	r2, [r4, #232]
	mov	r2, r5
	str	r7, [r4, #236]
	str	r8, [r4, #240]
	str	r8, [r4, #244]
	movw	r8, #:lower16:rmnet_sdio_unbind
	str	r3, [r4, #248]
	mov	r3, r5
	movt	r8, #:upper16:rmnet_sdio_unbind
	str	r7, [r4, #252]
	str	lr, [r4, #256]
	str	lr, [r4, #260]
	str	r1, [r4, #264]
	mov	r1, r5
	str	r7, [r4, #336]
	str	r0, [r4, #340]
	str	r0, [r4, #344]
	add	r0, r4, #268
	str	ip, [r4, #348]
	bl	init_timer_key
	movw	ip, #:lower16:.LC647
	ldr	r3, .L13897
	movw	r0, #:lower16:rmnet_sdio_bind
	movt	ip, #:upper16:.LC647
	movt	r0, #:upper16:rmnet_sdio_bind
	movw	lr, #:lower16:rmnet_sdio_setup
	movw	r2, #:lower16:delayed_work_timer_fn
	str	ip, [r4]
	movw	ip, #:lower16:rmnet_sdio_set_alt
	movt	lr, #:upper16:rmnet_sdio_setup
	movt	ip, #:upper16:rmnet_sdio_set_alt
	str	r3, [r4, #4]
	movw	r1, #:lower16:rmnet_close_sdio_work
	str	r0, [r4, #32]
	movw	r0, #:lower16:rmnet_sdio_disable
	movt	r2, #:upper16:delayed_work_timer_fn
	movt	r0, #:upper16:rmnet_sdio_disable
	movt	r1, #:upper16:rmnet_close_sdio_work
	str	r8, [r4, #36]
	str	ip, [r4, #40]
	add	ip, r3, #8
	add	r3, r3, #28
	str	lr, [r4, #52]
	add	lr, r4, #120
	add	r8, r4, #252
	str	r3, [r4, #8]
	add	r3, r4, #132
	str	ip, [r4, #16]
	add	ip, r4, #160
	str	r0, [r4, #48]
	add	r0, r4, #308
	str	r10, [r4, #56]
	str	lr, [r4, #120]
	str	lr, [r4, #124]
	add	lr, r4, #144
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	add	r3, r4, #172
	str	r9, [r4, #108]
	str	r9, [r4, #112]
	str	lr, [r4, #144]
	str	lr, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	ip, [r4, #160]
	str	ip, [r4, #164]
	str	r3, [r4, #172]
	str	r3, [r4, #176]
	add	r3, r4, #72
	str	r5, [r4, #180]
	str	r5, [r4, #184]
	str	r2, [r4, #284]
	add	r2, r6, #36
	str	r8, [r4, #288]
	str	r7, [r4, #304]
	str	r0, [r4, #308]
	str	r0, [r4, #312]
	str	r1, [r4, #316]
	str	r6, [r4, #20]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r7, [r4, #32]
	cmp	r7, r5
	beq	.L13874
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L13894
.L13874:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13875
.L13896:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L13875
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L13875:
	tst	r3, #2
	bne	.L13876
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L13876
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L13876:
	tst	r3, #1
	bne	.L13877
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L13877
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L13877:
	cmp	r7, #0
	beq	.L13895
.L13878:
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
.L13873:
	mov	r0, r4
	bl	kfree
.L13870:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13895:
	movw	r0, #:lower16:.LC648
	mov	r1, r7
	movt	r0, #:upper16:.LC648
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #352]
	bhi	.L13870
	ldr	ip, .L13897+4
	movw	r0, #:lower16:.LC164
	mov	r3, r4
	mov	r1, #292
	movt	r0, #:upper16:.LC164
	str	ip, [sp]
	bl	debugfs_create_file
	b	.L13870
.L13894:
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r4, #20]
	strd	r0, [r4, #72]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13875
	b	.L13896
.L13879:
	mov	r4, #16
	b	.L13871
.L13881:
	mvn	r7, #11
	b	.L13873
.L13893:
	mvn	r7, #11
	b	.L13870
.L13898:
	.align	2
.L13897:
	.word	.LANCHOR0+2680
	.word	.LANCHOR3-2448
	.fnend
	.size	rmnet_sdio_function_add, .-rmnet_sdio_function_add
	.align	2
	.global	frmnet_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_free_req, %function
frmnet_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	frmnet_free_req, .-frmnet_free_req
	.align	2
	.global	audio_source_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_bind_config, %function
audio_source_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mvn	r2, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r5, r1
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r0, r2
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	add	ip, sp, #8
	str	r2, [r1]
	str	r2, [r1, #4]
	mov	r2, r3
	mov	r1, r3
	str	ip, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L13927
.L13901:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L13927:
	ldr	r3, [r7, #24]
	add	r6, sp, #12
	movw	r1, #:lower16:.LC678
	ldr	lr, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC678
	ldr	ip, [r3]
	mov	r3, #1
	mov	r0, lr
	add	ip, ip, #32
	str	ip, [lr, #500]
	stm	sp, {r4, r6}
	movw	r6, #:lower16:.LANCHOR0
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r6, #:upper16:.LANCHOR0
	bne	.L13909
	ldr	r3, [sp, #12]
	movt	r6, #:upper16:.LANCHOR0
	movw	r1, #:lower16:.LC679
	add	r9, r6, #2944
	movt	r1, #:upper16:.LC679
	mov	r2, #80
	mov	r8, r4
	str	r4, [r3, #16]
	add	r0, r3, #88
	str	r9, [r3, #276]
	str	r3, [r6, #3032]
	bl	strlcpy
	ldr	r0, [sp, #12]
	mov	r1, r4
	add	r2, r6, #3104
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC680
	mov	r2, #16
	movt	r1, #:upper16:.LC680
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC681
	mov	r2, #80
	movt	r1, #:upper16:.LC681
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	bne	.L13909
	ldr	r3, [r6, #2984]
	cmp	r3, #0
	beq	.L13911
	ldr	r3, [r6, #2992]
	cmp	r3, #0
	beq	.L13911
	ldr	r1, [r7, #40]
	add	r3, r9, #72
	add	r2, r7, #36
	str	r7, [r6, #2964]
	str	r3, [r7, #40]
	str	r2, [r6, #3016]
	str	r1, [r6, #3020]
	str	r3, [r1]
	ldr	r3, [r6, #2976]
	cmp	r3, #0
	beq	.L13904
	mov	r1, r9
	mov	r0, r7
	blx	r3
	subs	r4, r0, #0
	blt	.L13928
.L13904:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13905
	ldr	r2, [r6, #2960]
	cmp	r2, #0
	beq	.L13905
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L13905:
	tst	r3, #2
	bne	.L13906
	ldr	r2, [r6, #2952]
	cmp	r2, #0
	beq	.L13906
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L13906:
	tst	r3, #1
	bne	.L13907
	ldr	r3, [r6, #2956]
	cmp	r3, #0
	beq	.L13907
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L13907:
	cmp	r4, #0
	beq	.L13929
.L13903:
.L13908:
.L13909:
	ldr	r0, [r6, #3028]
	bl	snd_card_free
	b	.L13901
.L13929:
	ldrd	r2, [sp, #8]
	ldr	r1, [r3]
	ldr	r1, [r1]
	str	r1, [r5]
	ldr	r3, [r3, #12]
	str	r3, [r5, #4]
	str	r2, [r6, #3028]
	b	.L13901
.L13928:
	ldr	r2, [r6, #3016]
	mov	r0, #256
	mov	r1, #512
	ldr	r3, [r6, #3020]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r8, [r6, #2964]
	str	r0, [r6, #3016]
	str	r1, [r6, #3020]
	b	.L13904
.L13911:
	mvn	r4, #21
	b	.L13909
	.fnend
	.size	audio_source_bind_config, .-audio_source_bind_config
	.align	2
	.global	gs_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_alloc_req, %function
gs_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L13930
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L13936
.L13930:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13936:
	ldr	r2, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L13930
	.fnend
	.size	gs_alloc_req, .-gs_alloc_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_io, %function
gs_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	adds	r2, r0, #44
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #32
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	str	r2, [sp]
	ldr	r5, [r3, #92]
	beq	.L13975
	ldr	r8, [r0, #44]
	rsb	r8, r8, #8
	cmp	r8, #0
	ble	.L13940
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:gs_read_complete
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:gs_read_complete
	mov	fp, #0
.L13939:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	mov	r2, #4096
	beq	.L13947
	str	r2, [r7, #4]
	ldr	r3, [r10, #48]
	mov	ip, #16
	mov	r1, #32
	subs	r0, r3, #0
	streq	ip, [r7]
	beq	.L13949
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r7]
	bne	.L13949
.L13943:
	ldr	r3, [r5, #8]
	mov	r1, r7
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L13947:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	beq	.L13950
.L13945:
	ldr	r3, [r4, #4]
.L13940:
	adds	r2, r4, #88
	add	r7, r4, #76
	ldr	r8, [r3, #88]
	str	r2, [sp, #4]
	beq	.L13977
	ldr	r9, [r4, #88]
	rsb	r9, r9, #8
	cmp	r9, #0
	movwgt	r10, #:lower16:gs_write_complete
	movgt	fp, #0
	movtgt	r10, #:upper16:gs_write_complete
	bgt	.L13953
	b	.L13954
.L13957:
	str	r10, [r0, #28]
	ldr	r2, [r4, #80]
	cmp	r9, fp
	str	r3, [r4, #80]
	str	r7, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	ldr	r3, [r4, #88]
	add	r3, r3, #1
	str	r3, [r4, #88]
	ble	.L13954
.L13953:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r8
	add	fp, fp, #1
	bl	gs_alloc_req
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L13957
.L13955:
	ldr	r3, [r4, #76]
	cmp	r7, r3
	beq	.L14004
.L13954:
	mov	r8, #0
	mov	r0, r4
	str	r8, [r4, #56]
	bl	gs_start_rx
	ldr	r3, [r4, #4]
	mov	r2, r0
	cmp	r3, r8
	beq	.L13963
	ldr	r0, [r4, #8]
	cmp	r0, r8
	beq	.L13963
	cmp	r2, #0
	moveq	r10, #256
	moveq	r9, #512
	beq	.L13965
	bl	tty_wakeup
	mov	r0, r8
.L13937:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13949:
	str	r9, [r7, #28]
	ldr	r3, [r4, #36]
	add	r2, r7, #36
	add	fp, fp, #1
	str	r2, [r4, #36]
	cmp	r8, fp
	str	r6, [r7, #36]
	str	r3, [r7, #40]
	str	r2, [r3]
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bgt	.L13939
	b	.L13945
.L13975:
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:gs_read_complete
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:gs_read_complete
	adds	r8, r0, #44
	b	.L13938
.L14005:
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r7]
	beq	.L13943
.L13944:
	str	r9, [r7, #28]
	ldr	r3, [r4, #36]
	add	r8, r8, #1
	add	r2, r7, #36
	cmp	r8, #8
	str	r2, [r4, #36]
	str	r6, [r7, #36]
	str	r3, [r7, #40]
	str	r2, [r3]
	beq	.L13945
.L13938:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	mov	r2, #4096
	beq	.L13947
	str	r2, [r7, #4]
	ldr	r3, [r10, #48]
	mov	r1, #32
	mov	ip, #16
	subs	r0, r3, #0
	bne	.L14005
	str	ip, [r7]
	b	.L13944
.L13977:
	movw	r9, #:lower16:gs_write_complete
	adds	r10, r4, #88
	movt	r9, #:upper16:gs_write_complete
	b	.L13952
.L14006:
	str	r9, [r0, #28]
	ldr	r2, [r4, #80]
	cmp	r10, #8
	str	r3, [r4, #80]
	str	r7, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	beq	.L13954
.L13952:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r8
	add	r10, r10, #1
	bl	gs_alloc_req
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L14006
	b	.L13955
.L14004:
	ldr	r10, [sp]
	mov	r9, #256
	mov	r8, #512
.L13958:
	cmp	r10, #0
	bne	.L13959
	mov	r9, #256
	mov	r8, #512
	b	.L13961
.L14007:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
.L13961:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	mov	r7, r3
	bne	.L14007
.L13950:
	mvn	r0, #11
	b	.L13937
.L13966:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	mov	r8, r3
	beq	.L13967
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r8, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	sub	r3, r3, #1
	str	r3, [r4, #44]
.L13965:
	ldr	r3, [sp]
	cmp	r3, #0
	bne	.L13966
	mov	r9, #256
	mov	r8, #512
	b	.L13968
.L14008:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
.L13968:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	mov	r10, r3
	bne	.L14008
.L13967:
	ldr	r3, [r4, #4]
	mov	r9, #256
	mov	r8, #512
	ldr	r6, [r3, #88]
.L13970:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	bne	.L13971
	mov	r9, #256
	mov	r8, #512
	b	.L13973
.L14009:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
.L13973:
	ldr	r3, [r4, #76]
	cmp	r7, r3
	mov	r5, r3
	bne	.L14009
.L13972:
	mvn	r0, #4
	b	.L13937
.L13959:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	mov	r7, r3
	beq	.L13950
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	sub	r3, r3, #1
	str	r3, [r4, #44]
	b	.L13958
.L13971:
	ldr	r3, [r4, #76]
	cmp	r7, r3
	mov	r5, r3
	beq	.L13972
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #88]
	sub	r3, r3, #1
	str	r3, [r4, #88]
	b	.L13970
.L13963:
	movw	r0, #:lower16:.LC836
	ldr	r1, .L14010
	movt	r0, #:upper16:.LC836
	bl	printk
	mvn	r0, #4
	b	.L13937
.L14011:
	.align	2
.L14010:
	.word	.LANCHOR3-792
	.fnend
	.size	gs_start_io, .-gs_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_open, %function
gs_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L14033
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	add	r3, r6, #24
	rsb	r5, r5, r5, lsl #3
	lsl	r5, r5, #2
	add	r6, r6, r5
	add	r5, r5, r3
.L14019:
	mov	r0, r6
	bl	mutex_lock
	ldr	r4, [r5]
	subs	r0, r4, #0
	beq	.L14030
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L14015
	add	r3, r3, #1
	mov	r0, r4
	mov	r5, #0
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
.L14012:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14030:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L14012
.L14015:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r3, #0
	bne	.L14016
	mov	r3, #1
	strb	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L14031
.L14018:
	str	r4, [r7, #280]
	ldr	r6, [r4, #4]
	mov	r5, #0
	mov	r3, #1
	str	r7, [r4, #8]
	str	r3, [r4, #12]
	cmp	r6, r5
	strb	r5, [r4, #16]
	beq	.L14025
	mov	r0, r4
	bl	gs_start_io
	ldr	r3, [r6, #116]
	cmp	r3, #0
	beq	.L14025
	mov	r0, r6
	blx	r3
.L14023:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	b	.L14012
.L14016:
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, #1
	bl	msleep
	b	.L14019
.L14025:
	mov	r5, #0
	b	.L14023
.L14031:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #52]
	cmp	r0, #0
	beq	.L14032
	mov	r2, #8192
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r6, r0
	str	r0, [r4, #96]
	beq	.L14022
.L14021:
	mov	r3, #8192
	mov	r0, r4
	str	r3, [r4, #92]
	str	r6, [r4, #100]
	str	r6, [r4, #104]
	bl	_raw_spin_lock_irq
	b	.L14018
.L14032:
	mov	r3, #16
	mov	r6, r3
	str	r3, [r4, #96]
	b	.L14021
.L14022:
	mov	r0, r4
	mvn	r5, #11
	bl	_raw_spin_lock_irq
	strb	r6, [r4, #16]
	b	.L14023
.L14034:
	.align	2
.L14033:
	.word	.LANCHOR1+3708
	.fnend
	.size	gs_open, .-gs_open
	.align	2
	.global	gs_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_free_req, %function
gs_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gs_free_req, .-gs_free_req
	.align	2
	.global	gserial_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_setup, %function
gserial_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:__stack_chk_guard
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r1, #1
	strd	r10, [sp, #24]
	cmp	r8, #7
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	str	r3, [sp, #20]
	ldr	r3, [r3]
	str	r0, [sp, #28]
	str	r3, [sp, #92]
	bhi	.L14053
	mov	r10, r1
	mov	r1, #0
	mov	r0, r10
	movw	r9, #:lower16:.LANCHOR1
	bl	__alloc_tty_driver
	movt	r9, #:upper16:.LANCHOR1
	cmp	r0, #0
	str	r0, [r9, #3704]
	beq	.L14054
	movw	r2, #:lower16:.LC505
	movw	r3, #:lower16:tty_std_termios
	ldr	r1, .L14076
	movt	r2, #:upper16:.LC505
	movt	r3, #:upper16:tty_std_termios
	ldrd	r6, [r3]
	mov	lr, #3
	str	r2, [r0, #72]
	ldrd	r4, [r3, #32]
	movw	r2, #:lower16:.LC506
	movt	r2, #:upper16:.LC506
	movt	lr, 1
	str	r2, [r0, #76]
	strd	r4, [sp, #8]
	ldrd	r4, [r3, #8]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r6, [r0, #100]
	ldrd	r6, [r3, #16]
	ldrd	r2, [r3, #24]
	strd	r4, [r0, #108]
	ldrd	r4, [sp, #8]
	strd	r6, [r0, #116]
	movw	r6, #3261
	str	lr, [r0, #144]
	strd	r2, [r0, #124]
	mov	r3, #9600
	str	r6, [r0, #108]
	strd	r4, [r0, #132]
	mov	r5, #0
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	bl	tty_set_operations
	movw	r2, #:lower16:.LC507
	mov	r1, #10
	str	r5, [sp]
	movt	r2, #:upper16:.LC507
	movw	r0, #:lower16:.LC79
	mov	r3, r5
	movt	r1, 2
	str	r2, [sp, #4]
	movt	r0, #:upper16:.LC79
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r9, #3336]
	beq	.L14055
	ldr	r3, .L14076+4
	movw	r2, #:lower16:.LC508
	movw	r1, #:lower16:.LC509
	movt	r2, #:upper16:.LC508
	movt	r1, #:upper16:.LC509
	movw	fp, #:lower16:kmalloc_caches
	movt	fp, #:upper16:kmalloc_caches
	str	r2, [sp, #8]
	str	r1, [sp, #16]
	add	r8, r3, #328
	mov	r6, r3
	str	r3, [sp, #24]
	mov	r1, r2
	str	r9, [sp, #32]
	str	r3, [sp, #36]
	b	.L14042
.L14072:
	mov	r2, #144
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14070
.L14040:
	mov	r9, #0
	mov	r0, r4
	ldr	r1, [sp, #16]
	mov	r2, r8
	add	r7, r5, #1
	str	r9, [r0], #20
	add	r6, r6, #28
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC510
	mov	r2, r8
	add	r0, r4, #108
	movt	r1, #:upper16:.LC510
	bl	__init_waitqueue_head
	mov	r1, #65024
	add	lr, r4, #32
	strb	r5, [r4, #17]
	movt	r1, 65535
	movw	r2, #:lower16:gs_rx_push
	add	r0, r4, #64
	add	ip, r4, #48
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	movt	r2, #:upper16:gs_rx_push
	mov	lr, #8
	strb	r9, [r4, #126]
	cmp	r10, r7
	mov	r9, #9600
	str	r1, [r4, #60]
	add	r1, r4, #76
	str	ip, [r4, #48]
	str	ip, [r4, #52]
	str	r0, [r4, #64]
	str	r0, [r4, #68]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r1, [r4, #80]
	str	r9, [r4, #120]
	strh	lr, [r4, #124]	@ movhi
	str	r4, [r6, #-4]
	beq	.L14071
	ldr	r1, [sp, #8]
	mov	r5, r7
.L14042:
	mov	r0, r6
	mov	r2, r8
	bl	__mutex_init
	ldr	r0, [fp, #8]
	cmp	r0, #0
	bne	.L14072
	mov	r4, #16
	b	.L14040
.L14071:
	ldr	r9, [sp, #32]
	ldr	r0, [r9, #3704]
	str	r10, [r9, #3700]
	bl	tty_register_driver
	subs	r6, r0, #0
	bne	.L14073
	ldr	r3, [sp, #28]
	movw	r8, #:lower16:.LC512
	mov	r4, r6
	ldr	r10, .L14076+8
	movt	r8, #:upper16:.LC512
	add	r5, r3, #32
.L14045:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r9, #3704]
	bl	tty_register_device
	cmn	r0, #4096
	bhi	.L14074
.L14044:
	add	r4, r4, #1
	cmp	r4, r7
	bne	.L14045
	ldr	r10, .L14076+12
	movw	r8, #:lower16:.LC513
	mov	r4, #0
	ldr	r5, [sp, #36]
	movt	r8, #:upper16:.LC513
.L14048:
	mov	r2, r8
	mov	r3, r4
	ldr	fp, [r5, #24]
	mov	r1, #48
	add	r0, sp, #44
	bl	snprintf
	add	r0, sp, #44
	mov	r1, #0
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r9, #3932]
	beq	.L14047
	cmn	r0, #4096
	bhi	.L14047
	movw	r0, #:lower16:.LC514
	mov	r3, fp
	str	r10, [sp]
	mov	r1, #292
	movt	r0, #:upper16:.LC514
	bl	debugfs_create_file
	ldr	ip, .L14076+16
	movw	r0, #:lower16:.LC515
	mov	r3, fp
	ldr	r2, [r9, #3932]
	movt	r0, #:upper16:.LC515
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
.L14047:
	add	r4, r4, #1
	add	r5, r5, #28
	cmp	r4, r7
	bne	.L14048
.L14037:
	ldr	r3, [sp, #20]
	mov	r0, r6
	ldr	r2, [sp, #92]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L14075
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14055:
	ldr	r3, .L14076+4
	mvn	r6, #11
	str	r3, [sp, #24]
.L14039:
	rsb	r5, r8, r8, lsl #3
	ldr	r4, .L14076+20
	add	r5, r3, r5, lsl #2
.L14049:
	ldr	r0, [r5, #24]
	sub	r5, r5, #28
	bl	kfree
	cmp	r4, r5
	bne	.L14049
.L14050:
	ldr	r0, [r9, #3336]
	cmp	r0, #0
	beq	.L14051
	bl	destroy_workqueue
.L14051:
	ldr	r0, [r9, #3704]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r9, #3704]
	b	.L14037
.L14074:
	mov	r3, r0
	mov	r2, r4
	mov	r1, r10
	mov	r0, r8
	bl	printk
	b	.L14044
.L14053:
	mvn	r6, #21
	b	.L14037
.L14070:
.L14041:
	cmp	r5, #0
	mvn	r6, #11
	ldr	r9, [sp, #32]
	sub	r8, r5, #1
	beq	.L14050
	ldr	r3, [sp, #24]
	b	.L14039
.L14054:
	mvn	r6, #11
	b	.L14037
.L14075:
	bl	__stack_chk_fail
.L14073:
	movw	r0, #:lower16:.LC511
	mov	r2, r6
	ldr	r1, .L14076+8
	movt	r0, #:upper16:.LC511
	mov	r8, r5
	bl	printk
	ldr	r3, [sp, #24]
	b	.L14039
.L14077:
	.align	2
.L14076:
	.word	.LANCHOR3-3384
	.word	.LANCHOR1+3708
	.word	.LANCHOR3-3260
	.word	.LANCHOR3-3244
	.word	.LANCHOR3-3136
	.word	.LANCHOR1+3680
	.fnend
	.size	gserial_setup, .-gserial_setup
	.align	2
	.global	gserial_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup, %function
gserial_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3704]
	cmp	r3, #0
	beq	.L14078
	b	gserial_cleanup.part.78
.L14078:
	bx	lr
	.fnend
	.size	gserial_cleanup, .-gserial_cleanup
	.align	2
	.global	gserial_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_connect, %function
gserial_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #3704]
	cmp	r2, #0
	beq	.L14088
	ldr	r2, [r3, #3700]
	cmp	r1, r2
	bcs	.L14088
	ldr	r2, [r0, #88]
	rsb	r1, r1, r1, lsl #3
	mov	r4, r0
	add	r3, r3, r1, lsl #2
	ldr	ip, [r2, #8]
	mov	r0, r2
	ldr	r6, [r3, #3732]
	ldr	r1, [r2, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r5, r0, #0
	blt	.L14080
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bge	.L14094
.L14082:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3]
.L14080:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14094:
	ldr	r3, [r4, #92]
	mov	r0, r6
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	str	r6, [r4, #84]
	ldr	r1, [r6, #120]
	mov	r7, r0
	str	r4, [r6, #4]
	str	r1, [r4, #96]
	ldrh	r1, [r6, #124]
	strh	r1, [r4, #100]	@ movhi
	ldrb	r2, [r6, #126]	@ zero_extendqisi2
	strb	r2, [r4, #102]
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L14095
	ldr	r3, [r4, #120]
	cmp	r3, #0
	beq	.L14085
.L14093:
	mov	r0, r4
	blx	r3
.L14085:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L14080
.L14095:
	mov	r0, r6
	bl	gs_start_io
	ldr	r3, [r4, #116]
	cmp	r3, #0
	bne	.L14093
	b	.L14085
.L14088:
	mvn	r5, #5
	b	.L14080
	.fnend
	.size	gserial_connect, .-gserial_connect
	.align	2
	.global	gserial_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_disconnect, %function
gserial_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #84]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L14096
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r6, #96]
	mov	r2, #0
	str	r0, [r4, #120]
	ldrh	r0, [r6, #100]
	strh	r0, [r4, #124]	@ movhi
	ldrb	r1, [r6, #102]	@ zero_extendqisi2
	str	r2, [r4, #4]
	strb	r1, [r4, #126]
	str	r2, [r6, #84]
	ldr	r3, [r4, #12]
	cmp	r3, r2
	bne	.L14098
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L14099
.L14098:
	mov	r2, #1
	add	r0, r4, #108
	mov	r3, #0
	mov	r1, r2
	bl	__wake_up
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14099
	bl	tty_hangup
.L14099:
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #92]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #92]
	str	r5, [r3]
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #88]
	mov	r0, r4
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, r5
	bne	.L14101
	ldrb	r5, [r4, #16]	@ zero_extendqisi2
	cmp	r5, #0
	beq	.L14115
.L14101:
	ldr	r3, [r4, #32]
	add	r8, r4, #32
	ldr	r5, [r6, #92]
	cmp	r8, r3
	beq	.L14102
	mov	r10, #256
	mov	r9, #512
.L14103:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #32]
	cmp	r8, r3
	bne	.L14103
	ldr	r5, [r6, #92]
.L14102:
	ldr	r3, [r4, #48]
	add	r8, r4, #48
	cmp	r8, r3
	beq	.L14104
	mov	r10, #256
	mov	r9, #512
.L14105:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #48]
	cmp	r8, r3
	bne	.L14105
.L14104:
	ldr	r3, [r4, #76]
	add	r8, r4, #76
	ldr	r6, [r6, #88]
	cmp	r8, r3
	beq	.L14106
	mov	r10, #256
	mov	r9, #512
.L14107:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #76]
	cmp	r8, r3
	bne	.L14107
.L14106:
	mov	r3, #0
	mov	r1, r7
	mov	r0, r4
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L14096:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14115:
	ldr	r0, [r4, #96]
	bl	kfree
	str	r5, [r4, #96]
	b	.L14101
	.fnend
	.size	gserial_disconnect, .-gserial_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disable, %function
acm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	gserial_disconnect
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #152]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_disable, .-acm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_set_alt, %function
acm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #144]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L14141
	ldrb	r3, [r0, #145]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L14123
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14124
	bl	gserial_disconnect
	ldr	r2, [r4, #88]
.L14124:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14125
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L14125
.L14126:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14130
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L14130
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	mov	r0, r4
	bl	gserial_connect
.L14118:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14125:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14130
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14130
	ldr	r2, [r4, #88]
	b	.L14126
.L14141:
	ldr	r2, [r0, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14120
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
.L14120:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L14123
	ldr	r3, [r4, #152]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #152]
	str	r4, [r3]
	b	.L14118
.L14130:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L14118
.L14123:
	mvn	r5, #21
	b	.L14118
	.fnend
	.size	acm_set_alt, .-acm_set_alt
	.align	2
	.global	gsdio_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_req, %function
gsdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gsdio_free_req, .-gsdio_free_req
	.align	2
	.global	gsdio_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_req, %function
gsdio_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L14148
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L14149
.L14144:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14148:
	movw	r0, #:lower16:.LC837
	ldr	r1, .L14150
	movt	r0, #:upper16:.LC837
	bl	printk
	b	.L14144
.L14149:
	movw	r0, #:lower16:.LC838
	ldr	r1, .L14150
	movt	r0, #:upper16:.LC838
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L14144
.L14151:
	.align	2
.L14150:
	.word	.LANCHOR3-780
	.fnend
	.size	gsdio_alloc_req, .-gsdio_alloc_req
	.align	2
	.global	gsdio_free_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_requests, %function
gsdio_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1]
	cmp	r1, r3
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, #512
	str	r8, [sp, #16]
	mov	r8, #256
	str	lr, [sp, #20]
.L14154:
	ldr	ip, [r3]
	mov	r4, r3
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r5]
	cmp	r5, r3
	bne	.L14154
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_free_requests, .-gsdio_free_requests
	.set	gsmd_free_requests,gsdio_free_requests
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify, %function
gsmd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r1, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #72]
	cmp	r1, #3
	ldrls	pc, [pc, r1, asl #2]
	b	.L14160
.L14163:
	.word	.L14162
	.word	.L14164
	.word	.L14165
	.word	.L14166
.L14166:
	ldr	r0, [r5]
	bl	smd_tiocmget
	ands	r1, r0, #128
	movne	r1, #8
	movne	r3, #9
	moveq	r3, #1
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	ldr	r0, [r4, #68]
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	cmp	r0, #0
	beq	.L14160
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L14160
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3
.L14165:
	add	r1, r5, #8
	mov	r0, #0
	add	r7, r4, #4
	bl	_clear_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L14237
	ldr	r6, [r3, #88]
	mov	r1, r0
	mov	r0, r7
	ldr	r5, [r3, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L14181
	mov	r0, r6
	blx	r3
.L14181:
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L14182
	mov	r0, r5
	blx	r3
.L14182:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r4, #68]
	cmp	r0, #0
	beq	.L14183
	ldr	r3, [r4, #12]
	add	r8, r4, #12
	cmp	r3, r8
	beq	.L14184
	mov	r10, #256
	mov	r9, #512
.L14185:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r8, r3
	bne	.L14185
.L14184:
	ldr	r3, [r4, #20]
	add	r8, r4, #20
	cmp	r3, r8
	beq	.L14186
	mov	r10, #256
	mov	r9, #512
.L14187:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r8, r3
	bne	.L14187
.L14186:
	ldr	r3, [r4, #44]
	add	r8, r4, #44
	cmp	r3, r8
	beq	.L14188
	mov	r10, #256
	mov	r9, #512
.L14189:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	cmp	r8, r3
	bne	.L14189
.L14188:
	ldr	r0, [r4, #68]
	mov	r3, #0
	str	r3, [r4, #8]
	str	r3, [r4, #164]
.L14183:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L14190
	ldr	r1, [r4, #164]
	blx	r3
.L14190:
	mov	r0, r7
.L14236:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock
.L14164:
	add	r1, r5, #8
	add	r5, r4, #4
	mov	r0, #0
	str	r5, [sp, #4]
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #68]
	cmp	r3, #0
	moveq	r0, r5
	beq	.L14236
	ldr	r3, [r4, #72]
	movw	r9, #:lower16:kmalloc_caches
	movw	r10, #:lower16:gsmd_read_complete
	ldr	r1, [r4, #160]
	movt	r9, #:upper16:kmalloc_caches
	movt	r10, #:upper16:gsmd_read_complete
	add	r7, r4, #12
	mov	r6, #8
	ldr	r0, [r3]
	mvn	r2, r1
	bl	smd_tiocmset_from_cb
	ldr	r3, [r4, #68]
	ldr	fp, [r3, #92]
.L14195:
	ldr	r3, [fp, #8]
	mov	r1, #32
	mov	r0, fp
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r3, #2048
	mov	r1, #32
	mov	r2, r3
	mov	ip, #16
	beq	.L14238
	str	r3, [r5, #4]
	ldr	r3, [r9, #44]
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L14173
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L14239
.L14173:
	str	r10, [r5, #28]
	ldr	r2, [r4, #12]
	add	r3, r5, #36
	subs	r6, r6, #1
	str	r3, [r2, #4]
	str	r2, [r5, #36]
	str	r7, [r5, #40]
	str	r3, [r4, #12]
	bne	.L14195
.L14174:
	ldr	r3, [r4, #68]
	movw	r9, #:lower16:kmalloc_caches
	movw	r10, #:lower16:gsmd_write_complete
	movt	r9, #:upper16:kmalloc_caches
	movt	r10, #:upper16:gsmd_write_complete
	add	fp, r4, #44
	mov	r6, #8
	ldr	r8, [r3, #88]
.L14196:
	ldr	r2, [r8, #8]
	mov	r1, #32
	mov	r0, r8
	ldr	r2, [r2, #8]
	blx	r2
	subs	r5, r0, #0
	mov	ip, #2048
	mov	r1, #32
	mov	r2, ip
	mov	lr, #16
	beq	.L14240
	str	ip, [r5, #4]
	ldr	ip, [r9, #44]
	subs	r0, ip, #0
	streq	lr, [r5]
	beq	.L14179
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L14241
.L14179:
	str	r10, [r5, #28]
	ldr	r1, [r4, #44]
	add	r2, r5, #36
	subs	r6, r6, #1
	str	r2, [r1, #4]
	str	r1, [r5, #36]
	str	fp, [r5, #40]
	str	r2, [r4, #44]
	bne	.L14196
.L14234:
	ldr	r0, [sp, #4]
	bl	_raw_spin_unlock
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L14162:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	bne	.L14242
.L14167:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	bne	.L14243
.L14160:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14242:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3344]
	bl	queue_work_on
	b	.L14167
.L14243:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #28
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3344]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L14237:
	mov	r1, r0
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L14238:
	movw	r0, #:lower16:.LC837
	ldr	r1, .L14244
	movt	r0, #:upper16:.LC837
	bl	printk
.L14171:
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L14174
	movw	r0, #:lower16:.LC839
	ldr	r1, .L14244+4
	movt	r0, #:upper16:.LC839
	bl	printk
.L14175:
	ldr	r0, [sp, #4]
	b	.L14236
.L14241:
	movw	r0, #:lower16:.LC838
	ldr	r1, .L14244
	movt	r0, #:upper16:.LC838
	bl	printk
	ldr	r2, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r2, #12]
	blx	r3
.L14177:
	ldr	r3, [r4, #44]
	cmp	fp, r3
	bne	.L14234
	ldr	r3, [r4, #68]
	mov	r1, r7
	ldr	r0, [r3, #92]
	bl	gsmd_free_requests
	movw	r0, #:lower16:.LC840
	ldr	r1, .L14244+4
	movt	r0, #:upper16:.LC840
	bl	printk
	b	.L14175
.L14240:
	movw	r0, #:lower16:.LC837
	ldr	r1, .L14244
	movt	r0, #:upper16:.LC837
	bl	printk
	b	.L14177
.L14239:
	movw	r0, #:lower16:.LC838
	ldr	r1, .L14244
	movt	r0, #:upper16:.LC838
	bl	printk
	ldr	r3, [fp, #8]
	mov	r1, r5
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L14171
.L14245:
	.align	2
.L14244:
	.word	.LANCHOR3-764
	.word	.LANCHOR3-748
	.fnend
	.size	gsmd_notify, .-gsmd_notify
	.align	2
	.global	gsdio_alloc_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_requests, %function
gsdio_alloc_requests:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r2, #0
	str	r10, [sp, #24]
	ldr	r10, [sp, #32]
	str	lr, [sp, #28]
	ble	.L14247
	mov	r8, r3
	mov	r5, r1
	mov	r7, r0
	mov	r6, #0
.L14252:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	add	r6, r6, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r1, #32
	mov	r0, r8
	beq	.L14256
	str	r8, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	add	r1, r4, #36
	str	r0, [r4]
	beq	.L14257
	str	r10, [r4, #28]
	ldr	r3, [r5]
	cmp	r9, r6
	str	r1, [r3, #4]
	str	r3, [r4, #36]
	str	r5, [r4, #40]
	str	r1, [r5]
	bne	.L14252
.L14247:
	mov	r0, #0
.L14246:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14256:
	movw	r0, #:lower16:.LC837
	ldr	r1, .L14258
	movt	r0, #:upper16:.LC837
	bl	printk
.L14249:
	ldr	r3, [r5]
	cmp	r5, r3
	bne	.L14247
	mvn	r0, #11
	b	.L14246
.L14257:
	movw	r0, #:lower16:.LC838
	ldr	r1, .L14258
	movt	r0, #:upper16:.LC838
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L14249
.L14259:
	.align	2
.L14258:
	.word	.LANCHOR3-780
	.fnend
	.size	gsdio_alloc_requests, .-gsdio_alloc_requests
	.align	2
	.global	gsdio_start_rx
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_rx, %function
gsdio_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L14275
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L14263
	ldr	r2, [r5, #108]
	cmp	r2, #0
	beq	.L14263
	add	r8, r5, #12
	mov	fp, #256
	ldr	r7, [r3, #92]
	mov	r10, #512
	b	.L14265
.L14267:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #2048
	str	r3, [r4, #-32]
	str	fp, [r4]
	str	r10, [r4, #4]
	ldr	r3, [r5, #44]
	sub	r3, r3, #1
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r7, #8]
	mov	r2, #32
	sub	r1, r4, #36
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r9, #0
	bne	.L14276
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L14263
.L14265:
	ldr	r4, [r5, #12]
	mov	r0, r6
	cmp	r8, r4
	bne	.L14267
.L14263:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L14276:
	movw	r0, #:lower16:.LC13
	ldr	r3, [r5]
	mov	r2, r5
	movt	r0, #:upper16:.LC13
	ldr	r1, .L14277
	bl	printk
	ldr	r3, [r5, #16]
	str	r4, [r5, #16]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	ldr	r3, [r5, #44]
	add	r3, r3, #1
	str	r3, [r5, #44]
	b	.L14263
.L14275:
	ldr	r1, .L14277
	movw	r0, #:lower16:.LC12
	movt	r0, #:upper16:.LC12
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14278:
	.align	2
.L14277:
	.word	.LANCHOR3-732
	.fnend
	.size	gsdio_start_rx, .-gsdio_start_rx
	.align	2
	.global	gsdio_rx_push
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_rx_push, %function
gsdio_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #24
	sub	r7, r0, #28
	strd	r8, [sp, #16]
	mov	r0, r6
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L14300
	ldr	r5, [r4, #-8]
	sub	r8, r4, #8
	ldr	r9, [r3, #92]
	cmp	r8, r5
	beq	.L14281
	ldr	r3, [r5, #8]
	cmn	r3, #108
	beq	.L14281
	cmp	r3, #0
	bne	.L14301
.L14283:
	ldr	r3, [r4, #80]
	sub	r10, r5, #36
	cmp	r3, #0
	beq	.L14302
	ldrd	r2, [r5]
	mov	r0, #256
	mov	r1, #512
	cmp	r7, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	strd	r0, [r5]
	ldr	r3, [r4, #20]
	sub	r3, r3, #1
	str	r3, [r4, #20]
	beq	.L14303
	cmp	r10, #0
	beq	.L14304
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L14286
	ldr	r3, [r5, #12]
	cmp	r3, #0
	bne	.L14288
	str	r3, [r4, #-20]
.L14286:
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L14305
	ldr	r3, [r4, #-8]
	str	r5, [r3, #4]
	stm	r5, {r3, r8}
	ldr	r3, [r4, #20]
	str	r5, [r4, #-8]
	add	r3, r3, #1
	str	r3, [r4, #20]
.L14281:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsdio_start_rx
.L14305:
	str	r3, [r4, #-20]
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
.L14300:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L14301:
	movw	r0, #:lower16:.LC139
	mov	r2, r7
	ldr	r1, .L14306
	str	r3, [sp]
	movt	r0, #:upper16:.LC139
	ldr	r3, [r4, #-28]
	bl	printk
	b	.L14283
.L14303:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L14306+4
	movt	r0, #:upper16:.LC12
	bl	printk
	b	.L14286
.L14302:
	movw	r0, #:lower16:.LC841
	ldr	r1, .L14306
	movt	r0, #:upper16:.LC841
	bl	printk
	ldm	r5, {r1, r2}
	mov	r3, r4
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-16]!
	str	r5, [r2, #4]
	strd	r2, [r5]
	ldrd	r2, [r4, #16]
	str	r5, [r4, #-16]
	add	r2, r2, #1
	sub	r3, r3, #1
	strd	r2, [r4, #16]
	b	.L14281
.L14304:
	movw	r0, #:lower16:.LC842
	ldr	r1, .L14306+4
	ldr	r2, [r4, #-28]
	movt	r0, #:upper16:.LC842
	bl	printk
	b	.L14286
.L14288:
	mov	r0, r7
	bl	gsdio_write.part.79
	b	.L14286
.L14307:
	.align	2
.L14306:
	.word	.LANCHOR3-716
	.word	.LANCHOR2+3656
	.fnend
	.size	gsdio_rx_push, .-gsdio_rx_push
	.align	2
	.global	gsdio_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write, %function
gsdio_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L14317
	cmp	r1, #0
	beq	.L14318
	ldr	r2, [r3, #108]
	cmp	r2, #0
	beq	.L14310
	ldr	r2, [r1, #48]
	cmp	r2, #0
	bne	.L14312
	str	r2, [r3, #8]
.L14310:
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L14317:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L14319
	movt	r0, #:upper16:.LC12
	bl	printk
	b	.L14310
.L14318:
	movw	r0, #:lower16:.LC842
	ldr	r1, .L14319
	ldr	r2, [r3]
	movt	r0, #:upper16:.LC842
	bl	printk
	b	.L14310
.L14312:
	bl	gsdio_write.part.79
	b	.L14310
.L14320:
	.align	2
.L14319:
	.word	.LANCHOR2+3656
	.fnend
	.size	gsdio_write, .-gsdio_write
	.align	2
	.global	gsdio_read_pending
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_pending, %function
gsdio_read_pending:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L14325
	ldr	r3, [r0, #120]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L14321
.L14324:
	b	.L14324
.L14321:
	bx	lr
.L14325:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L14326
	movt	r0, #:upper16:.LC12
	b	printk
.L14327:
	.align	2
.L14326:
	.word	.LANCHOR2+544
	.fnend
	.size	gsdio_read_pending, .-gsdio_read_pending
	.align	2
	.global	gsdio_start_io
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_io, %function
gsdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #4
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r0, r3
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #96]
	str	r0, [sp, #4]
	cmp	r3, #0
	beq	.L14346
	ldr	r9, [r3, #92]
	movw	r7, #:lower16:kmalloc_caches
	movw	r8, #:lower16:gsdio_read_complete
	movt	r7, #:upper16:kmalloc_caches
	movt	r8, #:upper16:gsdio_read_complete
	add	r10, r5, #12
	mov	r6, #8
.L14341:
	ldr	r3, [r9, #8]
	mov	r1, #32
	mov	r0, r9
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r3, #2048
	mov	r1, #32
	mov	r2, r3
	mov	ip, #16
	beq	.L14347
	str	r3, [r4, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	streq	ip, [r4]
	beq	.L14334
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L14348
.L14334:
	str	r8, [r4, #28]
	ldr	r2, [r5, #12]
	add	r3, r4, #36
	subs	r6, r6, #1
	str	r3, [r2, #4]
	str	r2, [r4, #36]
	str	r10, [r4, #40]
	str	r3, [r5, #12]
	bne	.L14341
.L14335:
	ldr	r2, [r5, #96]
	mov	r3, #8
	movw	r7, #:lower16:kmalloc_caches
	movw	r8, #:lower16:gsdio_write_complete
	mov	r6, r3
	str	r3, [r5, #44]
	movt	r7, #:upper16:kmalloc_caches
	movt	r8, #:upper16:gsdio_write_complete
	add	r9, r5, #52
	ldr	fp, [r2, #88]
.L14342:
	ldr	r3, [fp, #8]
	mov	r1, #32
	mov	r0, fp
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r3, #2048
	mov	r1, #32
	mov	r2, r3
	mov	ip, #16
	beq	.L14349
	str	r3, [r4, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	streq	ip, [r4]
	beq	.L14339
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L14350
.L14339:
	str	r8, [r4, #28]
	ldr	r2, [r5, #52]
	add	r3, r4, #36
	subs	r6, r6, #1
	str	r3, [r2, #4]
	str	r2, [r4, #36]
	str	r9, [r4, #40]
	str	r3, [r5, #52]
	bne	.L14342
.L14340:
	mov	r3, #8
	ldrd	r0, [sp]
	str	r3, [r5, #76]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	gsdio_start_rx
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r5, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3340]
	bl	queue_work_on
	mov	r0, #0
.L14328:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14346:
	mov	r1, r0
	ldr	r0, [sp]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L14328
.L14350:
	movw	r0, #:lower16:.LC838
	ldr	r1, .L14351
	movt	r0, #:upper16:.LC838
	bl	printk
	ldr	r2, [fp, #8]
	mov	r1, r4
	mov	r0, fp
	ldr	r3, [r2, #12]
	blx	r3
.L14337:
	ldr	r3, [r5, #52]
	cmp	r9, r3
	bne	.L14340
	ldr	r3, [r5, #96]
	mov	r1, r10
	ldr	r0, [r3, #92]
	bl	gsdio_free_requests
	mov	r3, #0
	ldrd	r0, [sp]
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC844
	ldr	r1, .L14351+4
	movt	r0, #:upper16:.LC844
	bl	printk
	mvn	r0, #11
	b	.L14328
.L14349:
	movw	r0, #:lower16:.LC837
	ldr	r1, .L14351
	movt	r0, #:upper16:.LC837
	bl	printk
	b	.L14337
.L14348:
	movw	r0, #:lower16:.LC838
	ldr	r1, .L14351
	movt	r0, #:upper16:.LC838
	bl	printk
	ldr	r3, [r9, #8]
	mov	r1, r4
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
.L14332:
	ldr	r3, [r5, #12]
	cmp	r10, r3
	bne	.L14335
	ldrd	r0, [sp]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC843
	ldr	r1, .L14351+4
	movt	r0, #:upper16:.LC843
	bl	printk
	mvn	r0, #11
	b	.L14328
.L14347:
	movw	r0, #:lower16:.LC837
	ldr	r1, .L14351
	movt	r0, #:upper16:.LC837
	bl	printk
	b	.L14332
.L14352:
	.align	2
.L14351:
	.word	.LANCHOR3-780
	.word	.LANCHOR3-700
	.fnend
	.size	gsdio_start_io, .-gsdio_start_io
	.align	2
	.global	gsdio_port_free
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_free, %function
gsdio_port_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r0
	mov	r3, #108
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	mul	r3, r3, r2
	movt	r0, #:upper16:.LANCHOR1
	add	r1, r0, r3
	ldr	r4, [r1, #28]
	cmp	r4, #0
	beq	.L14356
	add	r0, r1, #32
	bl	platform_driver_unregister
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L14356:
	movw	r0, #:lower16:.LC99
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC99
	add	sp, sp, #8
	ldr	r1, .L14357
	b	printk
.L14358:
	.align	2
.L14357:
	.word	.LANCHOR3-684
	.fnend
	.size	gsdio_port_free, .-gsdio_port_free
	.align	2
	.global	gsdio_ctrl_modem_status
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_modem_status, %function
gsdio_ctrl_modem_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ands	r3, r0, #128
	moveq	r2, #1
	streq	r3, [r1, #176]
	beq	.L14361
	mov	ip, #8
	mov	r2, #9
	mov	r3, ip
	str	ip, [r1, #176]
.L14361:
	tst	r0, #64
	movne	r3, r2
	strne	r2, [r1, #176]
	tst	r0, #256
	ldr	r0, [r1, #96]
	orrne	r3, r3, #2
	strne	r3, [r1, #176]
	cmp	r0, #0
	beq	.L14359
	ldr	r2, [r0, #136]
	cmp	r2, #0
	beq	.L14359
	mov	r1, r3
	bx	r2
.L14359:
	bx	lr
	.fnend
	.size	gsdio_ctrl_modem_status, .-gsdio_ctrl_modem_status
	.align	2
	.global	gsdio_ch_notify
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_notify, %function
gsdio_ch_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #2
	beq	.L14380
	cmp	r1, #1
	beq	.L14381
	bx	lr
.L14381:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r0, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3340]
	b	queue_work_on
.L14380:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r0, #28
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3340]
	b	queue_work_on
	.fnend
	.size	gsdio_ch_notify, .-gsdio_ch_notify
	.align	2
	.global	gsdio_port_alloc
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_alloc, %function
gsdio_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r6, r2
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r3, #8]
	.pad #4
	sub	sp, sp, #4
	cmp	r0, #0
	beq	.L14385
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14387
.L14383:
	mov	r5, #0
	str	r7, [r4]
	movw	r0, #:lower16:gsdio_rx_push
	add	r9, r4, #12
	movt	r0, #:upper16:gsdio_rx_push
	str	r5, [r4, #4]
	ldr	r2, [r8]	@ unaligned
	mov	r1, #65024
	movw	r3, #:lower16:gsdio_tx_pull
	movw	ip, #:lower16:gsdio_open_work
	movt	r1, 65535
	movt	ip, #:upper16:gsdio_open_work
	movt	r3, #:upper16:gsdio_tx_pull
	str	r2, [r4, #100]
	ldrh	lr, [r8, #4]	@ unaligned
	movw	r2, #:lower16:gsdio_ctrl_wq
	movt	r2, #:upper16:gsdio_ctrl_wq
	strh	lr, [r4, #104]	@ movhi
	add	lr, r4, #32
	ldrb	fp, [r8, #6]	@ zero_extendqisi2
	add	r8, r4, #20
	str	r9, [r4, #12]
	str	r9, [r4, #16]
	add	r9, r4, #52
	str	r8, [r4, #20]
	str	r8, [r4, #24]
	add	r8, r4, #64
	str	r1, [r4, #28]
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	add	lr, r4, #84
	str	r0, [r4, #40]
	add	r0, r4, #128
	str	r9, [r4, #52]
	str	r9, [r4, #56]
	str	r1, [r4, #60]
	str	r8, [r4, #64]
	str	r8, [r4, #68]
	str	r3, [r4, #72]
	mov	r3, r5
	str	r1, [r4, #80]
	str	lr, [r4, #84]
	str	lr, [r4, #88]
	str	r2, [r4, #92]
	mov	r2, r5
	strb	fp, [r4, #106]
	str	r1, [r4, #124]
	mov	r1, r5
	str	r0, [r4, #128]
	str	r0, [r4, #132]
	add	r0, r4, #140
	str	ip, [r4, #136]
	bl	init_timer_key
	mov	r2, #108
	movw	r0, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR1
	movw	lr, #:lower16:delayed_work_timer_fn
	mul	r2, r2, r7
	movw	ip, #:lower16:gsdio_ch_probe
	movw	r1, #:lower16:gsdio_ch_remove
	movt	lr, #:upper16:delayed_work_timer_fn
	movt	ip, #:upper16:gsdio_ch_probe
	movt	r1, #:upper16:gsdio_ch_remove
	add	r7, r4, #124
	add	r3, r0, r2
	str	lr, [r4, #156]
	str	r7, [r4, #160]
	add	r0, r3, #32
	str	r4, [r3, #28]
	str	r6, [r4, #120]
	str	ip, [r3, #32]
	str	r1, [r3, #36]
	ldr	r2, [r6]
	str	r2, [r3, #52]
	str	r5, [r3, #60]
	bl	platform_driver_register
	mov	r0, r5
.L14382:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14385:
	mov	r4, #16
	b	.L14383
.L14387:
	movw	r0, #:lower16:.LC845
	ldr	r1, .L14388
	movt	r0, #:upper16:.LC845
	bl	printk
	mvn	r0, #11
	b	.L14382
.L14389:
	.align	2
.L14388:
	.word	.LANCHOR3-668
	.fnend
	.size	gsdio_port_alloc, .-gsdio_port_alloc
	.align	2
	.global	gsdio_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_connect, %function
gsdio_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L14402
	cmp	r0, #0
	mov	r4, r0
	beq	.L14403
	mov	r2, #108
	mla	r1, r2, r1, r3
	ldr	r5, [r1, #28]
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsdio_ctrl_notify_modem
	mov	r1, r0
	str	r4, [r5, #96]
	movt	r3, #:upper16:gsdio_ctrl_notify_modem
	mov	r0, r6
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L14404
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L14405
	ldr	r3, [r4, #92]
	str	r5, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	bne	.L14406
.L14390:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14406:
	mov	r0, r5
	bl	gsdio_start_io
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L14390
	mov	r0, r4
	ldr	r1, [r5, #176]
	blx	r3
	b	.L14390
.L14405:
	movw	r0, #:lower16:.LC846
	mov	r2, r6
	ldr	r1, .L14407
	movt	r0, #:upper16:.LC846
	bl	printk
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	str	r3, [r5, #96]
	ldr	r2, [r4, #88]
	str	r3, [r2]
	b	.L14390
.L14404:
	movw	r0, #:lower16:.LC846
	mov	r2, r6
	ldr	r1, .L14407
	movt	r0, #:upper16:.LC846
	bl	printk
	mov	r3, #0
	str	r3, [r5, #96]
	b	.L14390
.L14403:
	movw	r0, #:lower16:.LC100
	ldr	r1, .L14407
	mvn	r6, #21
	movt	r0, #:upper16:.LC100
	bl	printk
	b	.L14390
.L14402:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldr	r1, .L14407
	movt	r0, #:upper16:.LC99
	mvn	r6, #21
	bl	printk
	b	.L14390
.L14408:
	.align	2
.L14407:
	.word	.LANCHOR3-648
	.fnend
	.size	gsdio_connect, .-gsdio_connect
	.align	2
	.global	gsdio_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_disconnect, %function
gsdio_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L14423
	cmp	r0, #0
	beq	.L14424
	mov	ip, #108
	mov	r2, r1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r5, #0
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, #4
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r1, [r3, #3340]
	mla	r3, ip, r2, r3
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r3, #28]
	add	r2, r4, #80
	add	r9, r4, r0
	str	r5, [r4, #180]
	bl	queue_work_on
	mov	r0, r9
	add	r7, r4, #12
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #96]
	mov	r0, r9
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #92]
	str	r5, [r3]
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #88]
	mov	r0, r9
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	str	r0, [sp, #4]
	ldr	r5, [r6, #92]
	cmp	r7, r3
	beq	.L14412
	mov	fp, #256
	mov	r8, #512
.L14413:
	ldm	r3, {r0, r2}
	mov	r10, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	fp, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L14413
	ldr	r5, [r6, #92]
.L14412:
	ldr	r3, [r4, #20]
	add	r7, r4, #20
	cmp	r7, r3
	beq	.L14414
	mov	fp, #256
	mov	r8, #512
.L14415:
	ldm	r3, {r0, r2}
	mov	r10, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	fp, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r7, r3
	bne	.L14415
.L14414:
	ldr	r3, [r4, #52]
	add	r7, r4, #52
	ldr	r5, [r6, #88]
	cmp	r7, r3
	beq	.L14416
	mov	r8, #256
	mov	r6, #512
.L14417:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r6, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #52]
	cmp	r7, r3
	bne	.L14417
.L14416:
	ldr	r1, [sp, #4]
	mov	r3, #0
	mov	r0, r9
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L14423:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldr	r1, .L14425
	movt	r0, #:upper16:.LC99
	b	printk
.L14424:
	movw	r0, #:lower16:.LC100
	ldr	r1, .L14425
	movt	r0, #:upper16:.LC100
	b	printk
.L14426:
	.align	2
.L14425:
	.word	.LANCHOR3-632
	.fnend
	.size	gsdio_disconnect, .-gsdio_disconnect
	.align	2
	.global	gsdio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_setup, %function
gsdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r3, #1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	str	r1, [sp, #8]
	bhi	.L14443
	movw	r2, #:lower16:.LC507
	mov	r7, #0
	movt	r2, #:upper16:.LC507
	mov	r1, #10
	movw	r0, #:lower16:.LC79
	mov	r3, r7
	str	r7, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC79
	mov	r2, #1
	movw	r10, #:lower16:.LANCHOR1
	bl	__alloc_workqueue_key
	movt	r10, #:upper16:.LANCHOR1
	cmp	r0, r7
	str	r0, [r10, #3340]
	beq	.L14444
	movw	r3, #:lower16:kmalloc_caches
	movw	r2, #:lower16:.LC849
	ldr	r9, .L14449
	movw	r1, #:lower16:gsdio_rx_push
	movt	r3, #:upper16:kmalloc_caches
	movt	r2, #:upper16:.LC849
	movt	r1, #:upper16:gsdio_rx_push
	mov	r8, #65024
	add	r5, r10, #4
	str	r3, [sp, #12]
	movt	r8, 65535
	str	r2, [sp, #16]
	str	r1, [sp, #20]
	b	.L14434
.L14447:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14445
.L14431:
	ldr	r0, [sp, #20]
	add	fp, r4, #20
	movw	r2, #:lower16:gsdio_tx_pull
	movw	r3, #:lower16:gsdio_ctrl_wq
	movw	ip, #:lower16:gsdio_open_work
	str	r7, [r4]
	movt	ip, #:upper16:gsdio_open_work
	mov	lr, #9600
	str	r6, [r4, #4]
	str	fp, [r4, #20]
	movt	r2, #:upper16:gsdio_tx_pull
	movt	r3, #:upper16:gsdio_ctrl_wq
	str	fp, [r4, #24]
	add	fp, r4, #52
	mov	r1, #8
	str	r0, [r4, #40]
	add	r0, r4, #12
	add	r7, r7, #1
	str	r0, [r4, #12]
	str	r0, [r4, #16]
	add	r0, r4, #32
	str	fp, [r4, #52]
	str	fp, [r4, #56]
	add	fp, r4, #84
	str	r0, [r4, #32]
	str	r0, [r4, #36]
	add	r0, r4, #64
	str	r8, [r4, #28]
	str	r8, [r4, #60]
	str	r0, [r4, #64]
	str	r0, [r4, #68]
	add	r0, r4, #128
	str	r2, [r4, #72]
	mov	r2, r6
	str	r8, [r4, #80]
	str	fp, [r4, #84]
	str	fp, [r4, #88]
	str	r3, [r4, #92]
	mov	r3, r6
	str	lr, [r4, #100]
	strh	r1, [r4, #104]	@ movhi
	mov	r1, r6
	strb	r6, [r4, #106]
	str	r8, [r4, #124]
	str	r0, [r4, #128]
	str	r0, [r4, #132]
	add	r0, r4, #140
	str	ip, [r4, #136]
	bl	init_timer_key
	movw	r1, #:lower16:delayed_work_timer_fn
	add	r3, r4, #124
	movt	r1, #:upper16:delayed_work_timer_fn
	movw	r2, #:lower16:gsdio_ch_probe
	movt	r2, #:upper16:gsdio_ch_probe
	add	r0, r5, #28
	str	r1, [r4, #156]
	add	r5, r5, #108
	str	r3, [r4, #160]
	movw	r3, #:lower16:gsdio_ch_remove
	str	r4, [r5, #-84]
	movt	r3, #:upper16:gsdio_ch_remove
	str	r9, [r4, #120]
	ldr	r1, [r9], #12
	str	r2, [r5, #-80]
	str	r3, [r5, #-76]
	str	r1, [r5, #-60]
	str	r6, [r5, #-52]
	bl	platform_driver_register
	ldr	r2, [sp, #8]
	ldr	r3, [r10]
	cmp	r7, r2
	add	r3, r3, #1
	str	r3, [r10]
	beq	.L14446
.L14434:
	ldr	r3, .L14449+4
	mov	r0, r5
	mov	r6, #0
	ldr	r1, [sp, #16]
	sub	r2, r3, #8
	bl	__mutex_init
	ldr	r3, [sp, #12]
	mov	r2, #192
	movw	r1, #32976
	ldr	r3, [r3, #8]
	cmp	r3, r6
	mov	r0, r3
	bne	.L14447
	mov	r4, #16
	b	.L14431
.L14446:
	movw	r0, #:lower16:.LC851
	mov	r1, r6
	movt	r0, #:upper16:.LC851
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L14440
	ldr	ip, .L14449+8
	movw	r0, #:lower16:.LC164
	mov	r3, r6
	movt	r0, #:upper16:.LC164
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	mov	r0, r6
.L14427:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14440:
	mov	r0, r6
	b	.L14427
.L14445:
	movw	r0, #:lower16:.LC845
	ldr	r1, .L14449+12
	movt	r0, #:upper16:.LC845
	bl	printk
	movw	r0, #:lower16:.LC850
	ldr	r1, .L14449+16
	movt	r0, #:upper16:.LC850
	bl	printk
	ldr	r3, [r10]
	cmp	r3, r6
	beq	.L14433
	ldr	r4, [r10, #28]
	cmp	r4, #0
	beq	.L14435
	ldr	r0, .L14449+20
	bl	platform_driver_unregister
	mov	r0, r4
	bl	kfree
.L14436:
	ldr	r3, [r10]
	cmp	r3, #1
	bls	.L14433
	ldr	r4, [r10, #136]
	cmp	r4, #0
	beq	.L14448
	ldr	r0, .L14449+24
	bl	platform_driver_unregister
	mov	r0, r4
	bl	kfree
.L14433:
	ldr	r0, [r10, #3340]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L14427
.L14444:
	movw	r0, #:lower16:.LC848
	ldr	r1, .L14449+16
	movt	r0, #:upper16:.LC848
	bl	printk
	mvn	r0, #11
	b	.L14427
.L14443:
	movw	r0, #:lower16:.LC847
	mov	r2, r1
	ldr	r1, .L14449+16
	movt	r0, #:upper16:.LC847
	mov	r3, #2
	bl	printk
	mvn	r0, #21
	b	.L14427
.L14448:
	movw	r0, #:lower16:.LC99
	mov	r2, #1
	ldr	r1, .L14449+28
	movt	r0, #:upper16:.LC99
	bl	printk
	b	.L14433
.L14435:
	movw	r0, #:lower16:.LC99
	mov	r2, r4
	ldr	r1, .L14449+28
	movt	r0, #:upper16:.LC99
	bl	printk
	b	.L14436
.L14450:
	.align	2
.L14449:
	.word	.LANCHOR5-1116
	.word	.LANCHOR6-4080
	.word	.LANCHOR3-600
	.word	.LANCHOR3-668
	.word	.LANCHOR3-612
	.word	.LANCHOR1+32
	.word	.LANCHOR1+140
	.word	.LANCHOR3-684
	.fnend
	.size	gsdio_setup, .-gsdio_setup
	.align	2
	.global	gsmd_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect, %function
gsmd_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	ldr	r3, [r6, #220]
	str	lr, [sp, #20]
	cmp	r1, r3
	bcs	.L14458
	cmp	r0, #0
	mov	r4, r0
	beq	.L14459
	mov	r2, #108
	mov	r7, #0
	mla	r1, r2, r1, r6
	ldr	r5, [r1, #248]
	add	r8, r5, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsmd_notify_modem
	mov	r1, r0
	str	r4, [r5, #68]
	movt	r3, #:upper16:gsmd_notify_modem
	mov	r0, r8
	str	r3, [r4, #140]
	str	r7, [r5, #168]
	str	r7, [r5, #172]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L14460
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L14461
	ldr	r3, [r4, #92]
	ldr	r4, [r6, #3344]
	str	r5, [r3]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r1, r4
	mov	r0, #4
	add	r2, r5, #76
	bl	queue_delayed_work_on
.L14451:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14458:
	movw	r0, #:lower16:.LC852
	mov	r2, r1
	ldr	r1, .L14462
	movt	r0, #:upper16:.LC852
	mvn	r8, #21
	bl	printk
	b	.L14451
.L14461:
	movw	r0, #:lower16:.LC582
	ldr	r1, .L14462
	movt	r0, #:upper16:.LC582
	ldr	r2, [r4, #92]
	bl	printk
	str	r7, [r5, #68]
	ldr	r3, [r4, #88]
	str	r7, [r3]
	b	.L14451
.L14460:
	movw	r0, #:lower16:.LC581
	ldr	r1, .L14462
	movt	r0, #:upper16:.LC581
	ldr	r2, [r4, #88]
	bl	printk
	str	r7, [r5, #68]
	b	.L14451
.L14459:
	movw	r0, #:lower16:.LC100
	ldr	r1, .L14462
	mvn	r8, #21
	movt	r0, #:upper16:.LC100
	bl	printk
	b	.L14451
.L14463:
	.align	2
.L14462:
	.word	.LANCHOR3-492
	.fnend
	.size	gsmd_connect, .-gsmd_connect
	.align	2
	.global	gsmd_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect, %function
gsmd_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r3, [r9, #220]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r1, r3
	bcs	.L14482
	cmp	r0, #0
	beq	.L14483
	mov	r3, #108
	mov	r6, r0
	mov	r5, #0
	mla	r1, r3, r1, r9
	ldr	r4, [r1, #248]
	add	r8, r4, #4
	add	r7, r4, #12
	mov	r0, r8
	str	r8, [sp, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #68]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #92]
	str	r5, [r3]
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #88]
	mov	r0, r8
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	str	r0, [sp]
	ldr	r5, [r6, #92]
	cmp	r7, r3
	beq	.L14467
	mov	fp, #256
	mov	r8, #512
.L14468:
	ldm	r3, {r0, r2}
	mov	r10, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	fp, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L14468
	ldr	r5, [r6, #92]
.L14467:
	ldr	r3, [r4, #20]
	add	r7, r4, #20
	cmp	r7, r3
	beq	.L14469
	mov	fp, #256
	mov	r8, #512
.L14470:
	ldm	r3, {r0, r2}
	mov	r10, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	fp, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r7, r3
	bne	.L14470
.L14469:
	ldr	r3, [r4, #44]
	add	r7, r4, #44
	ldr	r5, [r6, #88]
	cmp	r7, r3
	beq	.L14471
	mov	r8, #256
	mov	r6, #512
.L14472:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r6, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	cmp	r7, r3
	bne	.L14472
.L14471:
	mov	r5, #0
	ldr	r1, [sp]
	ldr	r0, [sp, #4]
	str	r5, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #72]
	mov	r0, r5
	add	r1, r1, #8
	bl	_test_and_clear_bit
	cmp	r0, r5
	bne	.L14484
.L14473:
	ldr	r3, [r4, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L14464
	ldr	r1, [r9, #3344]
	add	r2, r4, #128
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L14464:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14484:
	ldr	r3, [r4, #72]
	str	r5, [r4, #160]
	mov	r1, r5
	mvn	r2, #0
	ldr	r0, [r3]
	bl	smd_tiocmset
	b	.L14473
.L14483:
	ldr	r1, .L14485
	movw	r0, #:lower16:.LC100
	movt	r0, #:upper16:.LC100
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14482:
	mov	r2, r1
	ldr	r1, .L14485
	movw	r0, #:lower16:.LC99
	movt	r0, #:upper16:.LC99
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14486:
	.align	2
.L14485:
	.word	.LANCHOR3-476
	.fnend
	.size	gsmd_disconnect, .-gsmd_disconnect
	.align	2
	.global	gsmd_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_setup, %function
gsmd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	str	r1, [sp, #8]
	bhi	.L14501
	movw	r2, #:lower16:.LC854
	mov	r7, #0
	movt	r2, #:upper16:.LC854
	mov	r1, #10
	movw	r0, #:lower16:.LC79
	mov	r3, r7
	str	r7, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC79
	mov	r2, #1
	movw	r10, #:lower16:.LANCHOR1
	bl	__alloc_workqueue_key
	movt	r10, #:upper16:.LANCHOR1
	cmp	r0, r7
	str	r0, [r10, #3344]
	beq	.L14502
	movw	r3, #:lower16:kmalloc_caches
	movw	r2, #:lower16:.LC856
	ldr	r9, .L14508
	movw	r1, #:lower16:gsmd_rx_push
	movt	r3, #:upper16:kmalloc_caches
	movt	r2, #:upper16:.LC856
	movt	r1, #:upper16:gsmd_rx_push
	mov	r8, #65024
	add	r5, r10, #224
	str	r3, [sp, #12]
	movt	r8, 65535
	str	r2, [sp, #16]
	str	r1, [sp, #20]
	b	.L14494
.L14505:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14503
.L14491:
	add	lr, r4, #32
	add	r0, r4, #12
	str	r7, [r4]
	movw	r1, #:lower16:gsmd_tx_pull
	movw	ip, #:lower16:gsmd_connect_work
	str	r6, [r4, #4]
	movt	ip, #:upper16:gsmd_connect_work
	add	r3, r4, #44
	str	r0, [r4, #12]
	str	lr, [r4, #32]
	add	r2, r4, #56
	movt	r1, #:upper16:gsmd_tx_pull
	str	lr, [r4, #36]
	ldr	lr, [sp, #20]
	add	fp, r4, #20
	str	r0, [r4, #16]
	add	r0, r4, #80
	add	r7, r7, #1
	str	fp, [r4, #20]
	str	fp, [r4, #24]
	str	r8, [r4, #28]
	str	lr, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	mov	r3, r6
	str	r8, [r4, #52]
	str	r2, [r4, #56]
	str	r2, [r4, #60]
	mov	r2, r6
	str	r1, [r4, #64]
	mov	r1, r6
	str	r9, [r4, #72]
	add	r9, r9, #12
	str	r8, [r4, #76]
	str	r0, [r4, #80]
	str	r0, [r4, #84]
	add	r0, r4, #92
	str	ip, [r4, #88]
	bl	init_timer_key
	movw	r0, #:lower16:delayed_work_timer_fn
	movw	r1, #:lower16:gsmd_disconnect_work
	str	r8, [r4, #128]
	movw	r2, #:lower16:gsmd_ch_probe
	movw	r3, #:lower16:gsmd_ch_remove
	add	lr, r4, #132
	movt	r0, #:upper16:delayed_work_timer_fn
	movt	r1, #:upper16:gsmd_disconnect_work
	movt	r2, #:upper16:gsmd_ch_probe
	movt	r3, #:upper16:gsmd_ch_remove
	add	ip, r4, #76
	str	r0, [r4, #108]
	add	r0, r5, #28
	add	r5, r5, #108
	str	ip, [r4, #112]
	str	lr, [r4, #132]
	str	lr, [r4, #136]
	str	r1, [r4, #140]
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #4]
	str	r3, [r5, #-60]
	str	r6, [r5, #-52]
	bl	platform_driver_register
	ldr	r3, [sp, #8]
	cmp	r7, r3
	beq	.L14504
.L14494:
	ldr	r3, .L14508+4
	mov	r0, r5
	mov	r6, #0
	ldr	r1, [sp, #16]
	sub	r2, r3, #8
	bl	__mutex_init
	ldr	r0, [sp, #12]
	mov	r2, #176
	movw	r1, #32976
	ldr	r3, [r10, #220]
	ldr	ip, [r0, #8]
	add	r3, r3, #1
	str	r3, [r10, #220]
	cmp	ip, r6
	mov	r0, ip
	bne	.L14505
	mov	r4, #16
	b	.L14491
.L14504:
	movw	r0, #:lower16:.LC858
	mov	r1, r6
	movt	r0, #:upper16:.LC858
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L14498
	ldr	ip, .L14508+8
	movw	r0, #:lower16:.LC164
	mov	r3, r6
	movt	r0, #:upper16:.LC164
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	mov	r0, r6
.L14487:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14498:
	mov	r0, r6
	b	.L14487
.L14503:
	ldr	r3, [r10, #220]
	movw	r0, #:lower16:.LC857
	mov	r2, r7
	movt	r0, #:upper16:.LC857
	ldr	r1, .L14508+12
	sub	r3, r3, #1
	str	r3, [r10, #220]
	bl	printk
	ldr	r3, [r10, #220]
	cmp	r3, r6
	beq	.L14493
	ldr	r0, [r10, #248]
	cmp	r0, #0
	beq	.L14506
.L14495:
	cmp	r3, #1
	bls	.L14493
	ldr	r0, [r10, #356]
	cmp	r0, #0
	beq	.L14507
.L14493:
	ldr	r0, [r10, #3344]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L14487
.L14506:
	bl	kfree
	ldr	r3, [r10, #220]
	b	.L14495
.L14507:
	bl	kfree
	b	.L14493
.L14502:
	movw	r0, #:lower16:.LC855
	ldr	r1, .L14508+12
	movt	r0, #:upper16:.LC855
	bl	printk
	mvn	r0, #11
	b	.L14487
.L14501:
	mov	r3, r0
	movw	r0, #:lower16:.LC853
	ldr	r1, .L14508+12
	movt	r0, #:upper16:.LC853
	ldr	r2, [sp, #8]
	bl	printk
	mvn	r0, #21
	b	.L14487
.L14509:
	.align	2
.L14508:
	.word	.LANCHOR5-1092
	.word	.LANCHOR6-4080
	.word	.LANCHOR3-448
	.word	.LANCHOR3-460
	.fnend
	.size	gsmd_setup, .-gsmd_setup
	.align	2
	.global	gsmd_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_cleanup, %function
gsmd_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_cleanup, .-gsmd_cleanup
	.align	2
	.global	gbam_data_recv_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_recv_cb, %function
gbam_data_recv_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L14511
	add	r5, r0, #8
	mov	r4, r0
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L14515
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1256]
	cmp	r2, r3
	bls	.L14514
	ldr	r3, [r4, #244]
	ldr	r0, .L14521
	add	r3, r3, #1
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L14520
.L14515:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any
.L14511:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14514:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r5
	strd	r2, [r6]
	str	r6, [r3]
	ldr	r3, [r4, #44]
	str	r6, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost
.L14520:
	movw	r0, #:lower16:.LC421
	ldr	r1, .L14521
	ldr	r2, [r4, #244]
	movt	r0, #:upper16:.LC421
	bl	printk
	b	.L14515
.L14522:
	.align	2
.L14521:
	.word	.LANCHOR2+3668
	.fnend
	.size	gbam_data_recv_cb, .-gbam_data_recv_cb
	.align	2
	.global	gbam_data_write_done
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_done, %function
gbam_data_write_done:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, r1
	add	r5, r4, #4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #240]
	mov	r1, r0
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #240]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #80
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r6, [sp, #8]
	mov	r0, #4
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #3480]
	b	queue_work_on
	.fnend
	.size	gbam_data_write_done, .-gbam_data_write_done
	.align	2
	.global	gbam_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect, %function
gbam_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r1
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L14554
	sub	r3, r2, #6
	cmp	r3, #1
	bhi	.L14531
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldr	r3, [r3, #-4088]
	cmp	r1, r3
	bge	.L14555
.L14531:
	cmp	r4, #0
	beq	.L14537
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r3, r5, fp, lsl #2
	ldr	r6, [r3, #3616]
	str	r4, [r6, #16]
.L14532:
	add	r8, r6, #4
	mov	r7, #0
	mov	r0, r8
	add	r9, r6, #8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r9
	str	r1, [sp, #4]
	bl	_raw_spin_lock
	mov	r0, r9
	str	r7, [r6, #12]
	str	r7, [r5, #3476]
	bl	_raw_spin_unlock
	ldr	r1, [sp, #4]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	bic	r2, r10, #2
	cmp	r2, #5
	str	r7, [r3]
	ldr	r3, [r4, #88]
	str	r7, [r3]
	beq	.L14556
	cmp	r10, #6
	cmpeq	fp, #0
	beq	.L14557
.L14528:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14554:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #440]
	cmp	r1, r3
	bge	.L14558
	cmp	r0, #0
	beq	.L14537
	mov	r3, #84
	mla	r3, r3, fp, r5
	ldr	r6, [r3, #444]
	mov	r0, r6
	str	r4, [r6, #16]
	bl	gbam_free_buffers
	b	.L14532
.L14556:
	ldr	r1, [r5, #3480]
	add	r2, r6, #300
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L14557:
	mov	r0, r7
	bl	usb_bam_client_ready
	cmp	r0, #0
	beq	.L14528
	movw	r0, #:lower16:.LC861
	ldr	r1, .L14559
	movt	r0, #:upper16:.LC861
	b	.L14553
.L14555:
	mov	r2, r1
	ldr	r1, .L14559
	movw	r0, #:lower16:.LC442
	movt	r0, #:upper16:.LC442
.L14552:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14537:
	ldr	r1, .L14559
	movw	r0, #:lower16:.LC860
	movt	r0, #:upper16:.LC860
.L14553:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14558:
	movw	r0, #:lower16:.LC859
	mov	r2, r1
	ldr	r1, .L14559
	movt	r0, #:upper16:.LC859
	b	.L14552
.L14560:
	.align	2
.L14559:
	.word	.LANCHOR3-340
	.fnend
	.size	gbam_disconnect, .-gbam_disconnect
	.align	2
	.global	gbam_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect, %function
gbam_connect:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #5
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	r2, [sp, #48]	@ zero_extendqisi2
	str	r3, [sp]
	str	r2, [sp, #4]
	beq	.L14585
	sub	r3, r5, #6
	cmp	r3, #1
	bhi	.L14565
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldr	r3, [r3, #-4088]
	cmp	r1, r3
	bge	.L14584
.L14565:
	cmp	r4, #0
	beq	.L14572
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	add	r1, r6, r1, lsl #2
	ldr	fp, [r1, #3616]
.L14566:
	ldr	r3, [r4, #84]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L14586
	ldr	r3, [r4, #84]
	str	fp, [r3]
	ldr	r3, [r4, #88]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L14587
	ldr	r1, [r4, #88]
	add	r7, fp, #4
	add	r8, fp, #8
	mov	r0, r7
	str	fp, [r1]
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r8
	bl	_raw_spin_lock
	cmp	r5, #5
	str	r4, [fp, #12]
	beq	.L14588
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #6
	bne	.L14571
	ldr	r3, [sp]
	str	r4, [fp, #16]
	strb	r3, [fp, #128]
	ldr	r3, [sp, #4]
	strb	r3, [fp, #129]
.L14570:
	add	r2, fp, #284
	mov	r0, #4
	ldr	r1, [r6, #3480]
	str	r5, [fp, #132]
	bl	queue_work_on
.L14561:
	mov	r0, r10
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14571:
	cmp	r5, #7
	bne	.L14570
	ldr	r3, [sp]
	add	r0, fp, #120
	add	r1, fp, #124
	str	r4, [fp, #16]
	strb	r3, [fp, #136]
	ldr	r3, [sp, #4]
	strd	r0, [fp, #140]
	strb	r3, [fp, #137]
	b	.L14570
.L14585:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #440]
	cmp	r1, r3
	bge	.L14584
	cmp	r0, #0
	beq	.L14572
	mov	r2, #84
	mla	r1, r2, r1, r6
	ldr	fp, [r1, #444]
	b	.L14566
.L14588:
	mov	r0, r8
	str	r10, [fp, #240]
	str	r10, [fp, #244]
	str	r10, [fp, #248]
	str	r10, [fp, #260]
	str	r10, [fp, #264]
	str	r10, [fp, #268]
	str	r10, [fp, #272]
	str	r10, [fp, #276]
	str	r10, [fp, #280]
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L14570
.L14584:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldr	r1, .L14589
	movt	r0, #:upper16:.LC99
	mvn	r10, #18
	bl	printk
	b	.L14561
.L14587:
	movw	r0, #:lower16:.LC582
	ldr	r1, .L14589
	ldr	r2, [r4, #88]
	movt	r0, #:upper16:.LC582
	bl	printk
	ldr	r2, [r4, #84]
	mov	r1, #0
	str	r1, [r2]
	b	.L14561
.L14586:
	movw	r0, #:lower16:.LC581
	ldr	r1, .L14589
	ldr	r2, [r4, #84]
	movt	r0, #:upper16:.LC581
	bl	printk
	b	.L14561
.L14572:
	movw	r0, #:lower16:.LC860
	ldr	r1, .L14589
	mvn	r10, #18
	movt	r0, #:upper16:.LC860
	bl	printk
	b	.L14561
.L14590:
	.align	2
.L14589:
	.word	.LANCHOR3-324
	.fnend
	.size	gbam_connect, .-gbam_connect
	.align	2
	.global	gbam_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_setup, %function
gbam_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	orrs	r2, r0, r1
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #12]
	beq	.L14592
	cmp	r1, #3
	cmpls	r0, #1
	mov	r3, r1
	movhi	r3, #1
	movls	r3, #0
	bhi	.L14592
	movw	ip, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC863
	str	r3, [sp]
	mov	r5, ip
	movt	r0, #:upper16:.LC863
	mov	r2, #1
	mov	r1, #10
	bl	__alloc_workqueue_key
	mov	ip, r5
	cmp	r0, #0
	movt	ip, #:upper16:.LANCHOR1
	str	r0, [ip, #3480]
	str	ip, [sp, #8]
	beq	.L14595
	cmp	r4, #0
	beq	.L14597
	movw	r8, #:lower16:kmalloc_caches
	ldr	r3, [ip, #440]
	movt	r8, #:upper16:kmalloc_caches
	ldr	r0, [r8, #36]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [ip, #440]
	beq	.L14612
	mov	r2, #348
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L14629
.L14598:
	movw	r10, #:lower16:gbam_data_write_tobam
	add	fp, r2, #28
	ldr	r1, .L14630
	movt	r10, #:upper16:gbam_data_write_tobam
	mov	ip, #65024
	str	fp, [r2, #28]
	movw	r7, #:lower16:gbam_connect_work
	movw	r6, #:lower16:gbam_disconnect_work
	str	fp, [r2, #32]
	add	fp, r2, #52
	movw	r0, #:lower16:gbam_write_data_tohost_w
	mov	r3, #0
	movt	ip, 65535
	str	r10, [r2, #92]
	add	r10, r2, #36
	add	r9, r2, #288
	add	r8, r2, #304
	movt	r0, #:upper16:gbam_write_data_tohost_w
	str	r3, [r2]
	str	fp, [r2, #52]
	movt	r7, #:upper16:gbam_connect_work
	movt	r6, #:upper16:gbam_disconnect_work
	str	r10, [r2, #36]
	movw	r5, #:lower16:gbam_data_ch_probe
	movw	r4, #:lower16:gbam_data_ch_remove
	str	r10, [r2, #40]
	add	r10, r2, #60
	movw	lr, #:lower16:.LC210
	str	fp, [r2, #56]
	add	fp, r2, #84
	movt	r5, #:upper16:gbam_data_ch_probe
	str	r3, [r2, #4]
	movt	r4, #:upper16:gbam_data_ch_remove
	movt	lr, #:upper16:.LC210
	str	r10, [r2, #60]
	str	r10, [r2, #64]
	mov	r10, #8
	str	r3, [r2, #8]
	str	fp, [r2, #84]
	str	fp, [r2, #88]
	add	fp, r2, #100
	str	r3, [r2, #44]
	str	r3, [r2, #48]
	str	r3, [r2, #68]
	str	r3, [r2, #72]
	str	r2, [r2, #76]
	str	ip, [r2, #80]
	str	ip, [r2, #96]
	str	fp, [r2, #100]
	str	fp, [r2, #104]
	str	r0, [r2, #108]
	mov	r0, r1
	str	ip, [r2, #284]
	str	r9, [r2, #288]
	str	r9, [r2, #292]
	str	r7, [r2, #296]
	str	ip, [r2, #300]
	str	r8, [r2, #304]
	str	r8, [r2, #308]
	str	r6, [r2, #312]
	str	r10, [r2, #24]
	str	r2, [r1, #-4]
	ldr	r2, [sp, #8]
	str	r5, [r2, #448]
	str	r4, [r1, #4]
	str	lr, [r1, #20]
	str	r3, [r1, #28]
	bl	platform_driver_register
.L14597:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L14601
	ldr	r7, .L14630+4
	movw	r8, #:lower16:kmalloc_caches
	movw	r6, #:lower16:.LANCHOR6
	mov	r4, #65024
	movw	r10, #:lower16:gbam2bam_connect_work
	movw	r9, #:lower16:gbam2bam_disconnect_work
	movt	r8, #:upper16:kmalloc_caches
	movt	r6, #:upper16:.LANCHOR6
	movt	r4, 65535
	movt	r10, #:upper16:gbam2bam_connect_work
	movt	r9, #:upper16:gbam2bam_disconnect_work
	mov	r5, #0
.L14604:
	ldr	ip, [r6, #-4088]
	mov	r2, #348
	movw	r1, #32976
	ldr	lr, [r8, #36]
	mov	r3, #16
	add	ip, ip, #1
	subs	r0, lr, #0
	str	ip, [r6, #-4088]
	beq	.L14602
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L14603
.L14602:
	ldr	r0, [sp, #12]
	str	r5, [r3]
	add	r5, r5, #1
	movw	r1, #:lower16:gbam2bam_suspend_work
	movw	r2, #:lower16:gbam2bam_resume_work
	str	r3, [r3, #76]
	add	fp, r3, #288
	add	lr, r3, #304
	str	r4, [r3, #284]
	add	ip, r3, #320
	movt	r1, #:upper16:gbam2bam_suspend_work
	cmp	r5, r0
	mov	r0, #0
	movt	r2, #:upper16:gbam2bam_resume_work
	str	r0, [r3, #4]
	str	r0, [r3, #8]
	add	r0, r3, #336
	str	fp, [r3, #288]
	str	fp, [r3, #292]
	str	r10, [r3, #296]
	str	r4, [r3, #300]
	str	lr, [r3, #304]
	str	lr, [r3, #308]
	str	r9, [r3, #312]
	str	r4, [r3, #316]
	str	ip, [r3, #320]
	str	ip, [r3, #324]
	str	r1, [r3, #328]
	str	r4, [r3, #332]
	str	r0, [r3, #336]
	str	r0, [r3, #340]
	str	r2, [r3, #344]
	str	r3, [r7], #4
	bne	.L14604
.L14601:
	movw	r0, #:lower16:.LC865
	mov	r1, #0
	movt	r0, #:upper16:.LC865
	bl	debugfs_create_dir
	ldr	r3, [sp, #8]
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r3, #3388]
	beq	.L14607
	cmn	r0, #4096
	bhi	.L14607
	ldr	ip, .L14630+8
	movw	r0, #:lower16:.LC164
	mov	r3, #0
	movt	r0, #:upper16:.LC164
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L14608
	cmn	r0, #4096
	bhi	.L14608
.L14607:
	mov	r0, #0
.L14591:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14612:
	mov	r2, #16
	b	.L14598
.L14608:
	ldr	r4, [sp, #8]
	ldr	r0, [r4, #3388]
	bl	debugfs_remove
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #3388]
	b	.L14591
.L14629:
	ldr	ip, [sp, #8]
	movw	r0, #:lower16:.LC857
	movw	r6, #:lower16:.LANCHOR6
	movt	r0, #:upper16:.LC857
	ldr	r1, .L14630+12
	movt	r6, #:upper16:.LANCHOR6
	ldr	r3, [ip, #440]
	sub	r3, r3, #1
	str	r3, [ip, #440]
	bl	printk
.L14605:
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #440]
	cmp	r3, #0
	ble	.L14600
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #444]
	cmp	r0, #0
	beq	.L14600
	bl	kfree
	ldr	r0, .L14630
	bl	platform_driver_unregister
.L14600:
	ldr	r3, [r6, #-4088]
	cmp	r3, #0
	ble	.L14610
	ldr	r5, .L14630+4
	mov	r4, #0
.L14611:
	ldr	r0, [r5, r4, lsl #2]
	add	r4, r4, #1
	bl	kfree
	ldr	r3, [r6, #-4088]
	cmp	r4, r3
	blt	.L14611
.L14610:
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #3480]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L14591
.L14603:
	ldr	r3, [r6, #-4088]
	movw	r0, #:lower16:.LC857
	mov	r2, r5
	ldr	r1, .L14630+12
	movt	r0, #:upper16:.LC857
	sub	r3, r3, #1
	str	r3, [r6, #-4088]
	bl	printk
	b	.L14605
.L14592:
	movw	r0, #:lower16:.LC862
	ldr	r1, .L14630+12
	mov	r2, r4
	movt	r0, #:upper16:.LC862
	ldr	r3, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L14591
.L14595:
	movw	r0, #:lower16:.LC864
	ldr	r1, .L14630+12
	movt	r0, #:upper16:.LC864
	bl	printk
	mvn	r0, #11
	b	.L14591
.L14631:
	.align	2
.L14630:
	.word	.LANCHOR1+448
	.word	.LANCHOR1+3616
	.word	.LANCHOR3-296
	.word	.LANCHOR3-308
	.fnend
	.size	gbam_setup, .-gbam_setup
	.align	2
	.global	gbam_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_cleanup, %function
gbam_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3388]
	b	debugfs_remove_recursive
	.fnend
	.size	gbam_cleanup, .-gbam_cleanup
	.align	2
	.global	gbam_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_suspend, %function
gbam_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	cmp	r2, #1
	bls	.L14635
	bx	lr
.L14635:
	movw	r2, #:lower16:.LANCHOR1
	mov	r0, #4
	movt	r2, #:upper16:.LANCHOR1
	add	r3, r2, r1, lsl #2
	ldr	r1, [r2, #3480]
	ldr	r2, [r3, #3616]
	add	r2, r2, #316
	b	queue_work_on
	.fnend
	.size	gbam_suspend, .-gbam_suspend
	.align	2
	.global	gbam_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_resume, %function
gbam_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	cmp	r2, #1
	bls	.L14638
	bx	lr
.L14638:
	movw	r2, #:lower16:.LANCHOR1
	mov	r0, #4
	movt	r2, #:upper16:.LANCHOR1
	add	r3, r2, r1, lsl #2
	ldr	r1, [r2, #3480]
	ldr	r2, [r3, #3616]
	add	r2, r2, #332
	b	queue_work_on
	.fnend
	.size	gbam_resume, .-gbam_resume
	.align	2
	.global	gsmd_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_connect, %function
gsmd_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	uxtb	r3, r1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	cmp	r3, #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bhi	.L14640
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r4, #:upper16:.LANCHOR1
	mla	r3, r2, r3, r4
	ldr	r3, [r3, #528]
	cmp	r3, #0
	beq	.L14640
	cmp	r0, #0
	mov	r5, r0
	beq	.L14649
	mla	r1, r2, r1, r4
	ldr	r6, [r1, #528]
	add	r7, r6, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r5, [r6, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r5, #96]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r6, #112
	mov	r3, #0
	ldr	r1, [r4, #3432]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
.L14639:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14640:
	movw	r0, #:lower16:.LC866
	mov	r2, r1
	ldr	r1, .L14650
	movt	r0, #:upper16:.LC866
	bl	printk
	mvn	r0, #18
	b	.L14639
.L14649:
	movw	r0, #:lower16:.LC860
	ldr	r1, .L14650
	movt	r0, #:upper16:.LC860
	bl	printk
	mvn	r0, #18
	b	.L14639
.L14651:
	.align	2
.L14650:
	.word	.LANCHOR3-188
	.fnend
	.size	gsmd_ctrl_connect, .-gsmd_ctrl_connect
	.align	2
	.global	gsmd_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_disconnect, %function
gsmd_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bhi	.L14653
	movw	r8, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r8, #:upper16:.LANCHOR1
	mla	r3, r3, r1, r8
	ldr	r4, [r3, #528]
	cmp	r4, #0
	beq	.L14653
	cmp	r0, #0
	beq	.L14668
	add	r9, r4, #108
	mov	r6, r0
	mov	r0, r9
	add	r5, r4, #40
	bl	_raw_spin_lock_irqsave
	mov	r2, #0
	mov	r10, r0
	str	r2, [r4, #104]
	str	r2, [r6, #96]
	str	r2, [r6, #100]
	ldr	r3, [r4, #40]
	str	r2, [r4, #88]
	cmp	r5, r3
	beq	.L14656
	mov	r7, #256
	mov	r6, #512
.L14657:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r7, [r3]
	str	r6, [r3, #4]
	ldr	r0, [fp, #-8]!
	bl	kfree
	mov	r0, fp
	bl	kfree
	ldr	r3, [r4, #40]
	cmp	r3, r5
	bne	.L14657
.L14656:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #8
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L14669
.L14658:
	ldr	r1, [r8, #3432]
	add	r2, r4, #164
	mov	r3, #0
	mov	r0, #4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_delayed_work_on
.L14669:
	ldr	r0, [r4]
	ldr	r1, [r4, #88]
	orr	r2, r1, #4
	mvn	r2, r2
	bl	smd_tiocmset
	b	.L14658
.L14668:
	ldr	r1, .L14670
	movw	r0, #:lower16:.LC860
	movt	r0, #:upper16:.LC860
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14653:
	mov	r2, r1
	ldr	r1, .L14670
	movw	r0, #:lower16:.LC866
	movt	r0, #:upper16:.LC866
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14671:
	.align	2
.L14670:
	.word	.LANCHOR3-168
	.fnend
	.size	gsmd_ctrl_disconnect, .-gsmd_ctrl_disconnect
	.align	2
	.global	gsmd_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_setup, %function
gsmd_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r0, #1
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	str	r2, [sp, #20]
	bhi	.L14694
	sub	r3, r1, #1
	cmp	r3, #2
	bhi	.L14695
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r3, [sp, #16]
	ldrb	r3, [r3, #3444]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14696
.L14676:
	ldr	r2, [sp, #12]
	add	r1, r4, r4, lsl #1
	add	r3, r3, #1
	ldr	r0, [sp, #16]
	mov	r9, r1
	str	r1, [sp, #24]
	add	r2, r1, r2
	cmp	r1, r2
	strb	r3, [r0, #3444]
	bcs	.L14678
	mov	r3, #84
	ldr	r2, .L14699
	movw	fp, #:lower16:kmalloc_caches
	movt	fp, #:upper16:kmalloc_caches
	mov	r10, #0
	mul	r3, r3, r1
	add	r6, r2, r3
	str	r3, [sp, #28]
	b	.L14682
.L14698:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14697
.L14679:
	movw	ip, #:lower16:grmnet_ctrl_smd_connect_w
	add	r0, r4, #116
	str	r9, [r4, #100]
	movt	ip, #:upper16:grmnet_ctrl_smd_connect_w
	mov	r3, r5
	str	r5, [r4, #108]
	mov	r2, r5
	mov	r1, r5
	str	r7, [r4, #112]
	str	r0, [r4, #116]
	ldr	r10, [sp, #8]
	add	r6, r6, #84
	str	r0, [r4, #120]
	add	r0, r4, #128
	str	ip, [r4, #124]
	bl	init_timer_key
	movw	ip, #:lower16:grmnet_ctrl_smd_disconnect_w
	add	r0, r4, #168
	str	r8, [r4, #144]
	movt	ip, #:upper16:grmnet_ctrl_smd_disconnect_w
	add	r3, r4, #112
	mov	r2, r5
	mov	r1, r5
	str	r3, [r4, #148]
	mov	r3, r5
	str	r7, [r4, #164]
	str	r0, [r4, #168]
	str	r0, [r4, #172]
	add	r0, r4, #180
	str	ip, [r4, #176]
	bl	init_timer_key
	movw	r3, #:lower16:.LANCHOR3
	add	r2, r4, #164
	str	r4, [r4, #84]
	movt	r3, #:upper16:.LANCHOR3
	movw	r1, #:lower16:.LC870
	str	r8, [r4, #196]
	add	r3, r3, r9, lsl #2
	movt	r1, #:upper16:.LC870
	str	r2, [r4, #200]
	add	r0, r4, #12
	ldr	r2, .L14699+4
	ldr	r3, [r3, #-128]
	add	r9, r9, #1
	str	r3, [r4, #4]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC871
	ldr	r2, .L14699+4
	add	r0, r4, #24
	movt	r1, #:upper16:.LC871
	bl	__init_waitqueue_head
	movw	r0, #:lower16:grmnet_ctrl_smd_read_w
	movw	r1, #:lower16:grmnet_ctrl_smd_write_w
	str	r7, [r4, #52]
	movt	r0, #:upper16:grmnet_ctrl_smd_read_w
	movw	r2, #:lower16:grmnet_ctrl_smd_ch_probe
	movw	r3, #:lower16:grmnet_ctrl_smd_ch_remove
	add	lr, r4, #40
	add	ip, r4, #56
	movt	r3, #:upper16:grmnet_ctrl_smd_ch_remove
	str	r0, [r4, #64]
	movt	r1, #:upper16:grmnet_ctrl_smd_write_w
	add	r0, r4, #72
	str	r7, [r4, #68]
	movt	r2, #:upper16:grmnet_ctrl_smd_ch_probe
	ldr	r7, [sp, #12]
	str	lr, [r4, #40]
	str	lr, [r4, #44]
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	cmp	r7, r10
	str	r0, [r4, #72]
	str	r0, [r4, #76]
	str	r1, [r4, #80]
	str	r4, [r6, #-84]
	strd	r2, [r6, #-80]
	ldr	r3, [r4, #4]
	str	r3, [r6, #-60]
	str	r5, [r6, #-52]
	beq	.L14678
.L14682:
	ldr	r3, [fp, #32]
	mov	r5, #0
	add	r0, r10, #1
	mov	r7, #65024
	movw	r8, #:lower16:delayed_work_timer_fn
	str	r0, [sp, #8]
	movt	r7, 65535
	movt	r8, #:upper16:delayed_work_timer_fn
	mov	r2, #216
	movw	r1, #32976
	cmp	r3, r5
	mov	r0, r3
	bne	.L14698
	mov	r4, #16
	b	.L14679
.L14678:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L14672
	ldr	r2, [sp, #24]
	mov	r0, #0
	strb	r2, [r3]
.L14672:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14696:
	movw	r0, #:lower16:.LC868
	str	r3, [sp]
	mov	r2, #1
	movt	r0, #:upper16:.LC868
	mov	r1, #10
	bl	__alloc_workqueue_key
	ldr	r3, [sp, #16]
	cmp	r0, #0
	str	r0, [r3, #3432]
	beq	.L14677
	ldrb	r3, [r3, #3444]	@ zero_extendqisi2
	b	.L14676
.L14697:
	movw	r0, #:lower16:.LC857
	mov	r2, r9
	ldr	r1, .L14699+8
	movt	r0, #:upper16:.LC857
	bl	printk
	cmp	r10, r5
	beq	.L14681
	ldr	r3, [sp, #28]
	add	r5, r3, #4
	ldr	r3, .L14699
	add	r5, r3, r5
.L14684:
	ldr	r3, [r5, #-4]
	add	r4, r4, #1
	subs	r0, r3, #0
	beq	.L14683
	bl	kfree
	mov	r0, r5
	bl	platform_driver_unregister
.L14683:
	cmp	r10, r4
	add	r5, r5, #84
	bne	.L14684
.L14681:
	ldr	r2, [sp, #16]
	ldrb	r3, [r2, #3444]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r2, #3444]
	mvnne	r0, #11
	bne	.L14672
	ldr	r0, [r2, #3432]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L14672
.L14677:
	movw	r0, #:lower16:.LC869
	ldr	r1, .L14699+8
	movt	r0, #:upper16:.LC869
	bl	printk
	mvn	r0, #11
	b	.L14672
.L14695:
	movw	r0, #:lower16:.LC636
	ldr	r1, .L14699+8
	movt	r0, #:upper16:.LC636
	ldr	r2, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L14672
.L14694:
	movw	r0, #:lower16:.LC867
	mov	r2, r4
	ldr	r1, .L14699+8
	movt	r0, #:upper16:.LC867
	bl	printk
	mvn	r0, #21
	b	.L14672
.L14700:
	.align	2
.L14699:
	.word	.LANCHOR1+528
	.word	.LANCHOR6-4084
	.word	.LANCHOR3-144
	.fnend
	.size	gsmd_ctrl_setup, .-gsmd_ctrl_setup
	.align	2
	.global	gqti_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_connect, %function
gqti_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L14708
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #1032]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	str	r5, [r4]
	movt	r2, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5, #96]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #1
	add	r0, r4, #32
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #8]
	mov	r1, #3
	bl	__wake_up
	cmp	r4, #0
	beq	.L14706
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L14701
	ldr	r4, [r0, #108]
	cmp	r4, #0
	beq	.L14706
	blx	r4
	mov	r0, #0
.L14701:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14706:
	mov	r0, r4
	b	.L14701
.L14708:
	movw	r0, #:lower16:.LC860
	ldr	r1, .L14709
	movt	r0, #:upper16:.LC860
	bl	printk
	mvn	r0, #18
	b	.L14701
.L14710:
	.align	2
.L14709:
	.word	.LANCHOR3-104
	.fnend
	.size	gqti_ctrl_connect, .-gqti_ctrl_connect
	.align	2
	.global	gqti_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_disconnect, %function
gqti_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	subs	r7, r0, #0
	movt	r3, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r3, #1032]
	beq	.L14734
	cmp	r5, #0
	beq	.L14713
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L14713
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L14713
	blx	r3
.L14713:
	mov	r4, #0
	mov	r6, r5
	add	r9, r5, #52
	mov	r0, r9
	str	r4, [r5, #8]
	str	r4, [r5, #12]
	bl	_raw_spin_lock_irqsave
	str	r4, [r6], #44
	mov	r10, r0
	str	r4, [r7, #96]
	str	r4, [r7, #100]
	ldr	r3, [r5, #44]
	cmp	r6, r3
	beq	.L14714
	mov	r8, #256
	mov	r7, #512
.L14715:
	ldm	r3, {r1, r2}
	mov	r4, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r5, #44]
	cmp	r3, r6
	bne	.L14715
.L14714:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r5, #4]	@ zero_extendqisi2
	mov	r4, r0
	cmp	r3, #0
	beq	.L14735
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14717
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L14736
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L14718:
	ldr	r2, [r5, #48]
	add	ip, r3, #8
	mov	r1, r4
	mov	r0, r9
	str	ip, [r5, #48]
	str	r6, [r3, #8]
	str	r2, [r3, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r0, r5, #32
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L14717:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L14718
.L14736:
	mvn	r3, #11
	b	.L14718
.L14735:
	movw	r0, #:lower16:.LC566
	mov	r2, r5
	ldr	r1, .L14737
	movt	r0, #:upper16:.LC566
	bl	printk
	ldrd	r6, [sp, #8]
	mov	r1, r4
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L14734:
	movw	r0, #:lower16:.LC860
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC860
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L14737+4
	b	printk
.L14738:
	.align	2
.L14737:
	.word	.LANCHOR3-2792
	.word	.LANCHOR3-84
	.fnend
	.size	gqti_ctrl_disconnect, .-gqti_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect, %function
ghsic_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	clz	r3, r0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR1
	lsr	r3, r3, #5
	strd	r6, [sp, #8]
	ldr	r2, [ip, #1036]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	cmp	r1, r2
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L14746
	mov	r2, #104
	mla	r1, r2, r1, ip
	ldr	r4, [r1, #1040]
	cmp	r4, #0
	beq	.L14747
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #48]
	mov	r1, r0
	cmp	r3, #0
	beq	.L14748
.L14743:
	cmp	r3, #1
	bne	.L14744
	ldr	r0, [r6, #92]
	movw	r2, #:lower16:ghsic_send_cpkt_tomodem
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r2, #:upper16:ghsic_send_cpkt_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r0, [r4, #52]
	strd	r2, [r6, #96]
.L14744:
	mov	r5, #0
	mov	r0, r7
	str	r6, [r4, #8]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #16
	mov	r0, #4
	ldr	r1, [r4, #12]
	bl	queue_work_on
	mov	r0, r5
.L14739:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14748:
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r3, [r6, #140]
	ldr	r3, [r4, #48]
	b	.L14743
.L14746:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldr	r1, .L14749
	movt	r0, #:upper16:.LC99
	bl	printk
	mvn	r0, #18
	b	.L14739
.L14747:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L14749
	movt	r0, #:upper16:.LC12
	bl	printk
	mvn	r0, #18
	b	.L14739
.L14750:
	.align	2
.L14749:
	.word	.LANCHOR3-60
	.fnend
	.size	ghsic_ctrl_connect, .-ghsic_ctrl_connect
	.align	2
	.global	ghsic_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_disconnect, %function
ghsic_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #1036]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #1040]
	cmp	r1, r2
	bhi	.L14757
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L14758
	ldr	r8, [r4, #48]
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	cmp	r8, #0
	beq	.L14759
	bl	_raw_spin_lock_irqsave
	str	r5, [r6, #96]
	str	r5, [r6, #100]
.L14755:
	mov	r3, #0
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	str	r3, [r4, #52]
	str	r3, [r4, #88]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #32
	mov	r0, #4
	ldr	r1, [r4, #12]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L14759:
	bl	_raw_spin_lock_irqsave
	str	r8, [r6, #140]
	b	.L14755
.L14757:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC99
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L14760
	b	printk
.L14758:
	movw	r0, #:lower16:.LC860
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC860
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L14760
	b	printk
.L14761:
	.align	2
.L14760:
	.word	.LANCHOR3-40
	.fnend
	.size	ghsic_ctrl_disconnect, .-ghsic_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_set_port_name, %function
ghsic_ctrl_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR6
	movt	r4, #:upper16:.LANCHOR6
	str	r6, [sp, #8]
	ldr	r2, [r4, #-4084]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L14768
	ldr	r5, .L14769
	mov	r3, r0
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #-4084]
	mov	r3, #104
	movw	r1, #:lower16:.LC873
	movt	r1, #:upper16:.LC873
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #-4084]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #-4084]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14768:
	movw	r0, #:lower16:.LC872
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC872
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L14769+4
	b	printk
.L14770:
	.align	2
.L14769:
	.word	.LANCHOR1+1040
	.word	.LANCHOR3-16
	.fnend
	.size	ghsic_ctrl_set_port_name, .-ghsic_ctrl_set_port_name
	.align	2
	.global	ghsic_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_setup, %function
ghsic_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	str	r3, [sp, #8]
	ldr	r3, [r3, #1036]
	str	r1, [sp, #16]
	add	r1, r3, r0
	cmp	r1, #4
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #12]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L14788
	ldr	r2, [sp, #36]
	cmp	r2, r1
	bcs	.L14771
	movw	r1, #:lower16:kmalloc_caches
	mov	r3, #104
	movt	r1, #:upper16:kmalloc_caches
	mov	r0, #10
	mul	r3, r3, r2
	movw	ip, #:lower16:.LC79
	mov	fp, #65024
	str	r1, [sp, #20]
	ldr	r1, .L14791
	movt	r0, 2
	movt	ip, #:upper16:.LC79
	movt	fp, 65535
	add	r5, r3, #84
	mov	r6, r2
	str	r0, [sp, #24]
	str	ip, [sp, #28]
	str	fp, [sp, #32]
	add	r5, r1, r5
	str	r3, [sp, #44]
	mov	r3, r2
	b	.L14778
.L14790:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14775
.L14774:
	mov	r3, r7
	mov	r2, #1
	ldr	r1, [sp, #24]
	ldr	r0, [sp, #28]
	str	r7, [sp]
	movw	r8, #:lower16:ghsic_ctrl_status
	str	r5, [sp, #4]
	add	r10, r4, #20
	bl	__alloc_workqueue_key
	mov	r9, r0
	movw	r2, #:lower16:ghsic_ctrl_probe
	cmp	r9, #0
	movw	r3, #:lower16:ghsic_ctrl_remove
	movw	lr, #:lower16:ghsic_ctrl_connect_w
	movw	ip, #:lower16:gctrl_disconnect_w
	str	r9, [r4, #12]
	sub	r0, r5, #80
	movt	r2, #:upper16:ghsic_ctrl_probe
	movt	r3, #:upper16:ghsic_ctrl_remove
	movw	r1, #:lower16:ghsic_ctrl_receive
	movt	lr, #:upper16:ghsic_ctrl_connect_w
	movt	ip, #:upper16:gctrl_disconnect_w
	add	r9, r4, #36
	beq	.L14789
	ldr	fp, [sp, #16]
	movt	r1, #:upper16:ghsic_ctrl_receive
	movt	r8, #:upper16:ghsic_ctrl_status
	str	r7, [r4, #4]
	ldr	r7, [sp, #32]
	str	r6, [r4]
	add	r6, r6, #1
	cmp	fp, #0
	str	r7, [r4, #16]
	streq	r8, [r4, #76]
	str	r10, [r4, #20]
	str	r10, [r4, #24]
	str	lr, [r4, #28]
	str	r7, [r4, #32]
	str	r9, [r4, #36]
	str	r9, [r4, #40]
	str	ip, [r4, #44]
	str	fp, [r4, #48]
	str	r4, [r4, #56]
	str	r5, [r4, #64]
	str	r1, [r4, #72]
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	mov	r3, #0
	str	r5, [r5, #-60]
	add	r5, r5, #104
	str	r3, [r5, #-156]
	bl	platform_driver_register
	ldr	r3, [sp, #12]
	cmp	r3, r6
	bls	.L14771
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #1036]
.L14778:
	ldr	r0, [sp, #8]
	mov	r7, #0
	add	r3, r3, #1
	ldr	r2, [sp, #20]
	movw	r1, #32976
	str	r3, [r0, #1036]
	ldr	ip, [r2, #28]
	mov	r2, #108
	cmp	ip, r7
	mov	r0, ip
	bne	.L14790
	mov	r4, #16
	b	.L14774
.L14789:
	movw	r0, #:lower16:.LC874
	mov	r2, r5
	ldr	r1, .L14791+4
	movt	r0, #:upper16:.LC874
	bl	printk
.L14775:
	ldr	r4, [sp, #8]
	movw	r0, #:lower16:.LC857
	mov	r2, r6
	movt	r0, #:upper16:.LC857
	ldr	r1, .L14791+8
	ldr	r3, [r4, #1036]
	sub	r3, r3, #1
	str	r3, [r4, #1036]
	bl	printk
	ldr	r2, [sp, #36]
	ldr	r3, [r4, #1036]
	cmp	r2, r3
	bcs	.L14780
	ldr	r7, [sp, #8]
	mov	r5, r2
	ldr	r3, [sp, #44]
	add	r4, r3, #4
	ldr	r3, .L14791
	add	r4, r3, r4
.L14781:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #12]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #104
	bl	platform_driver_unregister
	ldr	r3, [r7, #1036]
	cmp	r5, r3
	bcc	.L14781
.L14780:
	mvn	r3, #11
	ldr	r2, [sp, #40]
	str	r3, [sp, #36]
	ldr	r3, [sp, #8]
	str	r2, [r3, #1036]
.L14771:
	ldr	r0, [sp, #36]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14788:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L14791+8
	movw	r0, #:lower16:.LC636
	movt	r0, #:upper16:.LC636
	str	r3, [sp, #36]
	bl	printk
	b	.L14771
.L14792:
	.align	2
.L14791:
	.word	.LANCHOR1+1040
	.word	.LANCHOR3+32
	.word	.LANCHOR3+12
	.fnend
	.size	ghsic_ctrl_setup, .-ghsic_ctrl_setup
	.align	2
	.global	ghsic_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect, %function
ghsic_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	ip, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [ip, #1456]
	mov	lr, #104
	mla	ip, lr, r1, ip
	cmp	r1, r2
	ldr	r4, [ip, #1460]
	bhi	.L14805
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L14806
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.45
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14796
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L14796:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14797
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L14797:
	mov	r5, #0
	add	r8, r4, #48
	mov	r0, r8
	add	r7, r4, #164
	str	r5, [r4, #4]
	add	r6, r4, #80
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #184]
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #104
	mov	r0, #4
	ldr	r1, [r4, #84]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on
.L14805:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC99
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L14807
	b	printk
.L14806:
	movw	r0, #:lower16:.LC12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC12
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L14807
	b	printk
.L14808:
	.align	2
.L14807:
	.word	.LANCHOR3+52
	.fnend
	.size	ghsic_data_disconnect, .-ghsic_data_disconnect
	.align	2
	.global	ghsic_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect, %function
ghsic_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #1456]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #1460]
	cmp	r1, r2
	bhi	.L14818
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L14819
	ldr	r3, [r4, #16]
	add	r7, r4, #48
	add	r6, r4, #80
	mov	r0, r7
	cmp	r3, #0
	beq	.L14820
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldr	r2, [r3, #-1060]
	ldr	r3, [r3, #-1056]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L14814:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L14821
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L14822
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r7
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r6
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #88
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
.L14809:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14820:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldr	r2, [r3, #-1068]
	ldr	r3, [r3, #-1064]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	b	.L14814
.L14821:
	movw	r0, #:lower16:.LC581
	ldr	r1, .L14823
	ldr	r2, [r4, #8]
	movt	r0, #:upper16:.LC581
	bl	printk
	b	.L14809
.L14822:
	movw	r0, #:lower16:.LC582
	ldr	r1, .L14823
	ldr	r2, [r4, #12]
	movt	r0, #:upper16:.LC582
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L14809
.L14819:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L14823
	mvn	r5, #18
	movt	r0, #:upper16:.LC12
	bl	printk
	b	.L14809
.L14818:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldr	r1, .L14823
	movt	r0, #:upper16:.LC99
	mvn	r5, #18
	bl	printk
	b	.L14809
.L14824:
	.align	2
.L14823:
	.word	.LANCHOR3+76
	.fnend
	.size	ghsic_data_connect, .-ghsic_data_connect
	.align	2
	.global	ghsic_data_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_set_port_name, %function
ghsic_data_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR6
	movt	r4, #:upper16:.LANCHOR6
	str	r6, [sp, #8]
	ldr	r2, [r4, #-4080]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L14831
	ldr	r5, .L14832
	mov	r3, r0
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #-4080]
	mov	r3, #104
	movw	r1, #:lower16:.LC875
	movt	r1, #:upper16:.LC875
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #-4080]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #-4080]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14831:
	movw	r0, #:lower16:.LC872
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC872
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L14832+4
	b	printk
.L14833:
	.align	2
.L14832:
	.word	.LANCHOR1+1460
	.word	.LANCHOR3+96
	.fnend
	.size	ghsic_data_set_port_name, .-ghsic_data_set_port_name
	.align	2
	.global	ghsic_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_setup, %function
ghsic_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	str	r3, [sp, #16]
	ldr	r3, [r3, #1456]
	str	r1, [sp, #28]
	add	r1, r3, r0
	cmp	r1, #4
	str	r3, [sp, #44]
	str	r3, [sp, #48]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #24]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L14850
	ldr	r7, [sp, #44]
	cmp	r7, r1
	bcs	.L14834
	movw	r1, #:lower16:kmalloc_caches
	mov	r3, #104
	movt	r1, #:upper16:kmalloc_caches
	mov	r0, #10
	mul	lr, r3, r7
	movw	ip, #:lower16:.LC79
	mov	r8, #65024
	str	r1, [sp, #32]
	ldr	r1, .L14854
	movt	r0, 2
	movt	ip, #:upper16:.LC79
	movt	r8, 65535
	add	r2, lr, #84
	mov	r3, r7
	str	r0, [sp, #36]
	mov	r5, r8
	str	ip, [sp, #40]
	add	fp, r1, r2
	str	lr, [sp, #52]
	mov	r4, fp
	mov	fp, r7
	b	.L14840
.L14853:
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L14851
.L14837:
	mov	r3, r7
	mov	r2, #1
	ldr	r1, [sp, #36]
	ldr	r0, [sp, #40]
	str	r7, [sp]
	movw	r10, #:lower16:ghsic_data_connect_w
	str	r4, [sp, #4]
	movw	r9, #:lower16:ghsic_data_disconnect_w
	movw	r8, #:lower16:ghsic_data_write_tohost
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	ip, #:lower16:ghsic_data_write_tomdm
	movw	lr, #:lower16:ghsic_data_receive
	movw	r1, #:lower16:ghsic_data_unthrottle_tx
	str	r3, [sp, #12]
	movw	r2, #:lower16:ghsic_data_probe
	movt	r10, #:upper16:ghsic_data_connect_w
	str	r3, [r6, #84]
	movw	r3, #:lower16:ghsic_data_remove
	movt	r9, #:upper16:ghsic_data_disconnect_w
	movt	r3, #:upper16:ghsic_data_remove
	movt	r8, #:upper16:ghsic_data_write_tohost
	sub	r0, r4, #80
	movt	ip, #:upper16:ghsic_data_write_tomdm
	str	r3, [sp, #20]
	ldr	r3, [sp, #12]
	movt	lr, #:upper16:ghsic_data_receive
	movt	r1, #:upper16:ghsic_data_unthrottle_tx
	movt	r2, #:upper16:ghsic_data_probe
	cmp	r3, #0
	beq	.L14852
	add	r3, r6, #24
	str	fp, [r6]
	add	fp, fp, #1
	str	r3, [r6, #24]
	str	r3, [r6, #28]
	add	r3, r6, #32
	str	r7, [r6, #40]
	str	r3, [r6, #32]
	str	r3, [r6, #36]
	add	r3, r6, #56
	str	r7, [r6, #72]
	str	r3, [r6, #56]
	str	r3, [r6, #60]
	add	r3, r6, #64
	str	r7, [r6, #80]
	str	r7, [r6, #48]
	str	r3, [r6, #64]
	str	r3, [r6, #68]
	add	r3, r6, #92
	str	r7, [r6, #44]
	str	r7, [r6, #76]
	str	r3, [r6, #92]
	str	r3, [r6, #96]
	add	r3, r6, #108
	str	r5, [r6, #88]
	str	r10, [r6, #100]
	str	r3, [r6, #108]
	str	r3, [r6, #112]
	add	r3, r6, #124
	str	r5, [r6, #104]
	str	r9, [r6, #116]
	str	r3, [r6, #124]
	str	r3, [r6, #128]
	add	r3, r6, #140
	str	r5, [r6, #120]
	str	ip, [r6, #132]
	str	r3, [r6, #140]
	str	r3, [r6, #144]
	ldr	r3, [sp, #28]
	str	r5, [r6, #136]
	str	r8, [r6, #148]
	str	r3, [r6, #16]
	ldr	r3, [sp, #20]
	str	r6, [r6, #152]
	str	r4, [r6, #160]
	str	lr, [r6, #168]
	str	r1, [r6, #176]
	str	r6, [r4, #-84]
	str	r2, [r4, #-80]
	str	r3, [r4, #-76]
	str	r4, [r4, #-60]
	add	r4, r4, #104
	str	r7, [r4, #-156]
	bl	platform_driver_register
	ldr	r3, [sp, #24]
	cmp	r3, fp
	bls	.L14834
	ldr	r3, [sp, #16]
	ldr	r3, [r3, #1456]
.L14840:
	ldr	r0, [sp, #16]
	mov	r7, #0
	add	r3, r3, #1
	ldr	r2, [sp, #32]
	movw	r1, #32976
	str	r3, [r0, #1456]
	ldr	ip, [r2, #32]
	mov	r2, #220
	cmp	ip, r7
	mov	r0, ip
	bne	.L14853
	mov	r6, #16
	b	.L14837
.L14851:
	mov	r7, fp
.L14838:
	ldr	r4, [sp, #16]
	movw	r0, #:lower16:.LC857
	mov	r2, r7
	movt	r0, #:upper16:.LC857
	ldr	r1, .L14854+4
	ldr	r3, [r4, #1456]
	sub	r3, r3, #1
	str	r3, [r4, #1456]
	bl	printk
	ldr	r2, [sp, #44]
	ldr	r3, [r4, #1456]
	cmp	r2, r3
	bcs	.L14842
	ldr	r7, [sp, #16]
	mov	r5, r2
	ldr	r3, [sp, #52]
	add	r4, r3, #4
	ldr	r3, .L14854
	add	r4, r3, r4
.L14843:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #84]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #104
	bl	platform_driver_unregister
	ldr	r3, [r7, #1456]
	cmp	r5, r3
	bcc	.L14843
.L14842:
	mvn	r3, #11
	ldr	r2, [sp, #48]
	str	r3, [sp, #44]
	ldr	r3, [sp, #16]
	str	r2, [r3, #1456]
.L14834:
	ldr	r0, [sp, #44]
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14852:
	movw	r0, #:lower16:.LC874
	mov	r2, r4
	ldr	r1, .L14854+8
	movt	r0, #:upper16:.LC874
	mov	r7, fp
	bl	printk
	mov	r0, r6
	bl	kfree
	b	.L14838
.L14850:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L14854+4
	movw	r0, #:lower16:.LC636
	movt	r0, #:upper16:.LC636
	str	r3, [sp, #44]
	bl	printk
	b	.L14834
.L14855:
	.align	2
.L14854:
	.word	.LANCHOR1+1460
	.word	.LANCHOR3+124
	.word	.LANCHOR3+144
	.fnend
	.size	ghsic_data_setup, .-ghsic_data_setup
	.align	2
	.global	ghsuart_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect, %function
ghsuart_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	clz	r5, r0
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	lsr	r5, r5, #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #1876]
	cmp	r1, r2
	orrhi	r5, r5, #1
	cmp	r5, #0
	bne	.L14864
	mov	r2, #84
	mla	r1, r2, r1, r3
	ldr	r4, [r1, #1880]
	cmp	r4, #0
	beq	.L14865
	add	r7, r4, #8
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r6, #92]
	movw	r2, #:lower16:ghsuart_send_cpkt_tomodem
	movw	r3, #:lower16:ghsuart_send_cbits_tomodem
	movt	r2, #:upper16:ghsuart_send_cpkt_tomodem
	movt	r3, #:upper16:ghsuart_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #68]
	strd	r2, [r6, #96]
	str	r6, [r4, #12]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #1, #1
	cmp	r0, #0
	beq	.L14856
	add	r2, r4, #36
	mov	r0, #4
	ldr	r1, [r4, #32]
	bl	queue_work_on
	mov	r0, r5
.L14856:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14864:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldr	r1, .L14866
	movt	r0, #:upper16:.LC99
	bl	printk
	mvn	r0, #18
	b	.L14856
.L14865:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L14866
	movt	r0, #:upper16:.LC12
	bl	printk
	mvn	r0, #18
	b	.L14856
.L14867:
	.align	2
.L14866:
	.word	.LANCHOR3+168
	.fnend
	.size	ghsuart_ctrl_connect, .-ghsuart_ctrl_connect
	.align	2
	.global	ghsuart_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect, %function
ghsuart_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #1876]
	cmp	r1, r2
	bhi	.L14873
	mov	r2, #84
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	cmp	r0, #0
	strd	r6, [sp, #8]
	mla	r1, r2, r1, r3
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #1880]
	clz	r4, r5
	lsr	r4, r4, #5
	moveq	r4, #1
	cmp	r4, #0
	bne	.L14874
	add	r7, r5, #8
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #96]
	mov	r0, r7
	str	r4, [r6, #100]
	str	r4, [r5, #12]
	str	r4, [r5, #68]
	str	r4, [r5, #92]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r5, #52
	mov	r0, #4
	ldr	r1, [r5, #32]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L14873:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldr	r1, .L14875
	movt	r0, #:upper16:.LC99
	b	printk
.L14874:
	movw	r0, #:lower16:.LC860
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC860
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L14875
	b	printk
.L14876:
	.align	2
.L14875:
	.word	.LANCHOR3+192
	.fnend
	.size	ghsuart_ctrl_disconnect, .-ghsuart_ctrl_disconnect
	.align	2
	.global	ghsuart_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_setup, %function
ghsuart_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r3, [r8, #1876]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	add	r1, r3, r0
	cmp	r1, #2
	str	r3, [sp, #20]
	str	r3, [sp, #24]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #8]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L14893
	mov	r3, r1
	ldr	r1, [sp, #20]
	cmp	r1, r3
	bcs	.L14877
	ldr	r3, .L14897
	mov	r2, #84
	movw	r0, #:lower16:.LC79
	movt	r0, #:upper16:.LC79
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:.LC876
	mov	fp, #10
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:.LC876
	str	r0, [sp, #16]
	mla	r2, r2, r1, r3
	movt	fp, 2
	mov	r3, r1
	mov	r7, r1
	add	r2, r2, #4
	mov	r5, r2
	str	r2, [sp, #28]
	b	.L14883
.L14896:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14894
.L14880:
	mov	r3, r6
	mov	r2, #1
	ldr	r0, [sp, #16]
	mov	r1, fp
	stm	sp, {r6, r9}
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	r1, #:lower16:.LC498
	ldr	r2, .L14897+4
	cmp	r3, #0
	add	r0, r4, #20
	movt	r1, #:upper16:.LC498
	str	r3, [r4, #32]
	beq	.L14895
	ldr	r3, [sp, #12]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r6, [r4, #8]
	str	r6, [r4, #16]
	bl	__init_waitqueue_head
	mov	r3, #65024
	add	r2, r4, #40
	movt	r3, 65535
	movw	lr, #:lower16:ghsuart_ctrl_connect_w
	movt	lr, #:upper16:ghsuart_ctrl_connect_w
	movw	r0, #:lower16:ghsuart_ctrl_disconnect_w
	str	r3, [r4, #36]
	movw	r1, #:lower16:ghsuart_ctrl_receive
	add	ip, r4, #56
	str	r2, [r4, #40]
	movt	r0, #:upper16:ghsuart_ctrl_disconnect_w
	movt	r1, #:upper16:ghsuart_ctrl_receive
	str	r2, [r4, #44]
	movw	r2, #:lower16:ghsuart_ctrl_probe
	str	lr, [r4, #48]
	movt	r2, #:upper16:ghsuart_ctrl_probe
	mov	lr, #42
	str	r3, [r4, #52]
	movw	r3, #:lower16:ghsuart_ctrl_remove
	movt	r3, #:upper16:ghsuart_ctrl_remove
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	str	r0, [r4, #64]
	mov	r0, r5
	add	r5, r5, #84
	str	r4, [r4, #72]
	str	lr, [r4, #76]
	str	r1, [r4, #84]
	str	r4, [r5, #-88]
	strd	r2, [r5, #-84]
	str	r9, [r5, #-64]
	str	r6, [r5, #-56]
	bl	platform_driver_register
	cmp	r0, #0
	blt	.L14890
	ldr	r3, [sp, #8]
	add	r7, r7, #1
	cmp	r3, r7
	bls	.L14877
	ldr	r3, [r8, #1876]
.L14883:
	ldr	ip, [r10, #28]
	mov	r6, #0
	add	r3, r3, #1
	mov	r2, #108
	movw	r1, #32976
	str	r3, [r8, #1876]
	cmp	ip, r6
	mov	r0, ip
	bne	.L14896
	mov	r4, #16
	b	.L14880
.L14890:
	mov	r4, r0
.L14881:
	ldr	r3, [r8, #1876]
	movw	r0, #:lower16:.LC857
	mov	r2, r7
	movt	r0, #:upper16:.LC857
	ldr	r1, .L14897+8
	sub	r3, r3, #1
	str	r3, [r8, #1876]
	bl	printk
	ldr	r2, [sp, #20]
	ldr	r3, [r8, #1876]
	cmp	r2, r3
	bcs	.L14885
	ldr	r5, [sp, #28]
	mov	r6, r2
.L14884:
	ldr	r7, [r5, #-4]
	add	r6, r6, #1
	ldr	r0, [r7, #32]
	bl	destroy_workqueue
	mov	r0, r5
	add	r5, r5, #84
	bl	platform_driver_unregister
	mov	r0, r7
	bl	kfree
	ldr	r3, [r8, #1876]
	cmp	r6, r3
	bcc	.L14884
.L14885:
	ldr	r3, [sp, #24]
	str	r4, [sp, #20]
	str	r3, [r8, #1876]
.L14877:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14894:
	mvn	r4, #11
	b	.L14881
.L14895:
	movw	r2, #:lower16:.LC876
	movw	r0, #:lower16:.LC874
	ldr	r1, .L14897+12
	movt	r2, #:upper16:.LC876
	movt	r0, #:upper16:.LC874
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L14881
.L14893:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L14897+8
	movw	r0, #:lower16:.LC636
	movt	r0, #:upper16:.LC636
	str	r3, [sp, #20]
	bl	printk
	b	.L14877
.L14898:
	.align	2
.L14897:
	.word	.LANCHOR1+1880
	.word	.LANCHOR1+4020
	.word	.LANCHOR3+216
	.word	.LANCHOR3+236
	.fnend
	.size	ghsuart_ctrl_setup, .-ghsuart_ctrl_setup
	.align	2
	.global	event_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	event_string, %function
event_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #8
	bhi	.L14901
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r0, lsl #2
	ldr	r0, [r3, #260]
	bx	lr
.L14901:
	movw	r0, #:lower16:.LC109
	movt	r0, #:upper16:.LC109
	bx	lr
	.fnend
	.size	event_string, .-event_string
	.align	2
	.global	ghsuart_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect, %function
ghsuart_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, #84
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r3, #2048]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #2052]
	cmp	r1, r2
	bhi	.L14915
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L14916
	mov	r6, r0
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.46
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14905
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L14905:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14906
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L14906:
	ldr	r5, [r4, #16]
	mov	r3, #0
	str	r3, [r4, #4]
	cmp	r5, r3
	beq	.L14917
.L14907:
	add	r8, r4, #72
	mov	r5, #0
	mov	r0, r8
	add	r7, r4, #184
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #192]
	add	r6, r4, #104
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #128
	mov	r0, #4
	ldr	r1, [r4, #108]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on
.L14917:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r6, #140]
	mov	r0, r7
	str	r5, [r4, #24]
	str	r5, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	b	.L14907
.L14916:
	movw	r0, #:lower16:.LC12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC12
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L14918
	b	printk
.L14915:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC99
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L14918
	b	printk
.L14919:
	.align	2
.L14918:
	.word	.LANCHOR3+296
	.fnend
	.size	ghsuart_data_disconnect, .-ghsuart_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disable, %function
frmnet_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #144
	strd	r8, [sp, #16]
	add	r9, r0, #132
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #136]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #136]
	mov	r3, #0
	mov	r0, r9
	str	r3, [r2]
	str	r3, [r5, #120]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #144]
	mov	r10, r0
	cmp	r6, r3
	beq	.L14921
	mov	r8, #256
	mov	r7, #512
.L14922:
	ldm	r3, {r1, r2}
	mov	r4, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r5, #144]
	cmp	r3, r6
	bne	.L14922
.L14921:
	mov	r3, #0
	mov	r1, r10
	mov	r0, r9
	movw	r4, #:lower16:.LANCHOR1
	str	r3, [r5, #152]
	movt	r4, #:upper16:.LANCHOR1
	bl	_raw_spin_unlock_irqrestore
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	add	r2, r3, r0
	add	r2, r4, r2, lsl #3
	ldr	r7, [r2, #2536]
	ldr	ip, [r2, #2540]
	sub	r1, ip, #1
	cmp	r1, #9
	movwhi	lr, #:lower16:.LC109
	movthi	lr, #:upper16:.LC109
	bhi	.L14923
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r1, lsl #2
	ldr	lr, [r2, #836]
.L14923:
	sub	r2, r7, #1
	cmp	r2, #9
	movwhi	r6, #:lower16:.LC109
	movthi	r6, #:upper16:.LC109
	bhi	.L14924
	movw	r1, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR2
	add	r1, r1, r2, lsl #2
	ldr	r6, [r1, #836]
.L14924:
	add	r1, r3, r0
	sub	ip, ip, #3
	add	r1, r4, r1, lsl #3
	ldr	r2, [r1, #2548]
	cmp	ip, #7
	ldrls	pc, [pc, ip, asl #2]
	b	.L14925
.L14927:
	.word	.L14926
	.word	.L14928
	.word	.L14925
	.word	.L14925
	.word	.L14925
	.word	.L14929
	.word	.L14930
	.word	.L14931
.L14930:
	ldr	r3, [r4, #1876]
	cmp	r2, r3
	bhi	.L14949
	mov	r1, #84
	cmp	r5, #0
	mla	r2, r1, r2, r4
	ldr	r9, [r2, #1880]
	clz	r8, r9
	lsr	r8, r8, #5
	moveq	r8, #1
	cmp	r8, #0
	bne	.L14950
	add	r10, r9, #8
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r5, #96]
	mov	r0, r10
	str	r8, [r5, #100]
	str	r8, [r9, #12]
	str	r8, [r9, #68]
	str	r8, [r9, #92]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r9, #52
	mov	r0, #4
	ldr	r1, [r9, #32]
	bl	queue_work_on
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L14931:
	add	r3, r3, r0
	add	r4, r4, r3, lsl #3
	sub	r2, r7, #5
	ldr	r1, [r4, #2544]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L14938
.L14940:
	.word	.L14939
	.word	.L14939
	.word	.L14939
	.word	.L14941
	.word	.L14942
	.word	.L14920
.L14942:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	ghsuart_data_disconnect
.L14941:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	ghsic_data_disconnect
.L14939:
	uxtb	r1, r1
	mov	r2, r7
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_disconnect
.L14920:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14929:
	ldr	r1, [r4, #1036]
	mov	r3, #104
	mla	r3, r3, r2, r4
	cmp	r2, r1
	ldr	r8, [r3, #1040]
	bhi	.L14951
	clz	r3, r8
	cmp	r5, #0
	lsr	r3, r3, #5
	moveq	r9, #1
	movne	r9, r3
	cmp	r9, #0
	bne	.L14952
	ldr	fp, [r8, #48]
	add	r10, r8, #4
	mov	r0, r10
	cmp	fp, #0
	beq	.L14953
	bl	_raw_spin_lock_irqsave
	str	r9, [r5, #96]
	str	r9, [r5, #100]
.L14935:
	mov	r3, #0
	mov	r1, r0
	mov	r0, r10
	str	r3, [r8, #8]
	str	r3, [r8, #52]
	str	r3, [r8, #88]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r8, #32
	mov	r0, #4
	ldr	r1, [r8, #12]
	bl	queue_work_on
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14931
.L14928:
	mov	r0, r5
	bl	gqti_ctrl_disconnect
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14931
.L14926:
	mov	r0, r5
	uxtb	r1, r2
	bl	gsmd_ctrl_disconnect
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14931
.L14953:
	bl	_raw_spin_lock_irqsave
	str	fp, [r5, #140]
	b	.L14935
.L14925:
	movw	r0, #:lower16:.LC422
	mov	r2, lr
.L14948:
	ldr	r1, .L14954
	movt	r0, #:upper16:.LC422
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14938:
	movw	r0, #:lower16:.LC422
	mov	r2, r6
	b	.L14948
.L14949:
	movw	r0, #:lower16:.LC99
	ldr	r1, .L14954+4
	movt	r0, #:upper16:.LC99
	bl	printk
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14931
.L14952:
	movw	r0, #:lower16:.LC860
	ldr	r1, .L14954+8
	movt	r0, #:upper16:.LC860
	bl	printk
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14931
.L14950:
	movw	r0, #:lower16:.LC860
	ldr	r1, .L14954+4
	movt	r0, #:upper16:.LC860
	bl	printk
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14931
.L14951:
	movw	r0, #:lower16:.LC99
	ldr	r1, .L14954+8
	movt	r0, #:upper16:.LC99
	bl	printk
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14931
.L14955:
	.align	2
.L14954:
	.word	.LANCHOR3+320
	.word	.LANCHOR3+192
	.word	.LANCHOR3-40
	.fnend
	.size	frmnet_disable, .-frmnet_disable
	.align	2
	.global	ghsuart_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect, %function
ghsuart_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #84
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #2048]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #2052]
	cmp	r1, r2
	bhi	.L14965
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L14966
	ldr	r3, [r4, #16]
	add	r7, r4, #72
	add	r6, r4, #104
	mov	r0, r7
	cmp	r3, #0
	beq	.L14967
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldr	r2, [r3, #-1044]
	ldr	r3, [r3, #-1040]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L14961:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L14968
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L14969
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #208]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #204]
	mov	r0, r6
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #112
	mov	r0, #4
	ldr	r1, [r4, #108]
	bl	queue_work_on
.L14956:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14967:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	add	r8, r4, #20
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR5
	mov	r0, r8
	movt	r3, #:upper16:.LANCHOR5
	ldr	r2, [r3, #-1052]
	ldr	r3, [r3, #-1048]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:ghsuart_send_controlbits_tomodem
	mov	r1, r0
	movt	r3, #:upper16:ghsuart_send_controlbits_tomodem
	mov	r0, r8
	str	r3, [r5, #140]
	str	r5, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	b	.L14961
.L14968:
	movw	r0, #:lower16:.LC581
	ldr	r1, .L14970
	ldr	r2, [r4, #8]
	movt	r0, #:upper16:.LC581
	bl	printk
	b	.L14956
.L14969:
	movw	r0, #:lower16:.LC582
	ldr	r1, .L14970
	ldr	r2, [r4, #12]
	movt	r0, #:upper16:.LC582
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L14956
.L14966:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L14970
	mvn	r5, #18
	movt	r0, #:upper16:.LC12
	bl	printk
	b	.L14956
.L14965:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldr	r1, .L14970
	movt	r0, #:upper16:.LC99
	mvn	r5, #18
	bl	printk
	b	.L14956
.L14971:
	.align	2
.L14970:
	.word	.LANCHOR3+344
	.fnend
	.size	ghsuart_data_connect, .-ghsuart_data_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_set_alt, %function
frmnet_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #128]
	ldr	r2, [r0, #136]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14973
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
.L14973:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L15066
	ldr	r3, [r4, #136]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L15067
	ldr	r3, [r4, #136]
	str	r4, [r3]
	ldr	r2, [r4, #84]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14977
	ldr	r3, [r4, #88]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L14977
.L14978:
	mov	r3, #1
	mov	r8, r4
	str	r3, [r4, #120]
	ldr	r5, [r8, #144]!
	cmp	r8, r5
	beq	.L14972
	add	r7, r4, #132
	mvn	r9, #94
	mov	r10, #256
.L15024:
	mov	r0, r7
	ldr	fp, [r4, #140]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	cmp	fp, #0
	clz	r3, r3
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r3, #0
	bne	.L15065
	ldr	r2, [fp]
	cmp	r2, #0
	beq	.L15065
	ldr	r2, [r4, #152]
	add	r2, r2, #1
	cmp	r2, #1
	str	r2, [r4, #152]
	beq	.L15021
.L15065:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L15020:
	ldr	r5, [r5]
	cmp	r8, r5
	bne	.L15024
.L14972:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15021:
	ldr	ip, [fp]
	mov	r1, r0
	mov	r0, r7
	strb	r9, [ip]
	strb	r2, [ip, #1]
	strb	r3, [ip, #2]
	strb	r3, [ip, #3]
	ldrh	r2, [r4, #112]
	strh	r2, [ip, #4]	@ unaligned
	strb	r3, [ip, #6]
	strb	r3, [ip, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #136]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L15020
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #144]
	mov	fp, r0
	cmp	r8, r3
	beq	.L15022
	ldr	r2, [r4, #152]
	cmp	r2, #0
	beq	.L15022
	sub	r2, r2, #1
	mov	ip, #512
	str	r2, [r4, #152]
	ldrd	r0, [r3]
	mov	r2, r3
	str	r1, [r0, #4]
	str	r0, [r1]
	stm	r3, {r10, ip}
	ldr	r0, [r2, #-8]!
	str	r2, [sp, #8]
	str	r2, [sp, #12]
	bl	kfree
	ldr	r2, [sp, #8]
	mov	r0, r2
	bl	kfree
.L15022:
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L15020
.L14977:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14980
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14980
	ldrb	r1, [r4, #116]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR1
	ldr	r2, [r4, #128]
	movt	r5, #:upper16:.LANCHOR1
	lsl	r3, r1, #1
	ldr	fp, [r2]
	add	r2, r3, r1
	add	r2, r5, r2, lsl #3
	ldr	r7, [r2, #2536]
	ldr	r8, [r2, #2540]
	sub	r0, r8, #1
	cmp	r0, #9
	movwhi	ip, #:lower16:.LC109
	movthi	ip, #:upper16:.LC109
	bls	.L15068
.L14981:
	sub	r0, r7, #1
	cmp	r0, #9
	movwhi	r9, #:lower16:.LC109
	movthi	r9, #:upper16:.LC109
	bls	.L15069
.L14982:
	add	r0, r3, r1
	sub	lr, r8, #3
	add	r0, r5, r0, lsl #3
	ldr	r2, [r0, #2548]
	cmp	lr, #7
	ldrls	pc, [pc, lr, asl #2]
	b	.L14983
.L14985:
	.word	.L14984
	.word	.L14986
	.word	.L14983
	.word	.L14983
	.word	.L14983
	.word	.L14987
	.word	.L14988
	.word	.L14989
.L14984:
	uxtb	r1, r2
	cmp	r1, #5
	bhi	.L14990
	mov	r3, #84
	mla	r1, r3, r1, r5
	ldr	r1, [r1, #528]
	cmp	r1, #0
	beq	.L14990
	cmp	r4, #0
	beq	.L15070
	mla	r3, r3, r2, r5
	ldr	r10, [r3, #528]
	add	r2, r10, #108
	mov	r0, r2
	str	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	movw	ip, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	movt	ip, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	str	r4, [r10, #104]
	mov	r1, r0
	str	ip, [r4, #96]
	mov	r0, r2
	str	r3, [r4, #100]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	ldr	r1, [r5, #3432]
	add	r2, r10, #112
	mov	r0, #4
	bl	queue_delayed_work_on
	ldrb	r1, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r1, #1
.L14989:
	add	r3, r3, r1
	add	r5, r5, r3, lsl #3
	sub	r2, r7, #5
	ldr	r5, [r5, #2544]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L15006
.L15008:
	.word	.L15007
	.word	.L15009
	.word	.L15010
	.word	.L15011
	.word	.L15012
	.word	.L15027
.L15069:
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r0, lsl #2
	ldr	r9, [r2, #836]
	b	.L14982
.L15068:
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r0, lsl #2
	ldr	ip, [r2, #836]
	b	.L14981
.L14988:
	ldr	r1, [r5, #1876]
	clz	r3, r4
	lsr	r3, r3, #5
	cmp	r2, r1
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L15071
	mov	r1, #84
	mla	r2, r1, r2, r5
	ldr	r10, [r2, #1880]
	cmp	r10, #0
	beq	.L15072
	add	r2, r10, #8
	mov	r0, r2
	strd	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	movw	lr, #:lower16:ghsuart_send_cpkt_tomodem
	movw	ip, #:lower16:ghsuart_send_cbits_tomodem
	ldr	r2, [sp, #8]
	movt	lr, #:upper16:ghsuart_send_cpkt_tomodem
	movt	ip, #:upper16:ghsuart_send_cbits_tomodem
	mov	r1, r0
	str	r3, [r10, #68]
	ldr	r3, [sp, #12]
	str	lr, [r4, #96]
	mov	r0, r2
	str	ip, [r4, #100]
	str	r4, [r10, #12]
	str	r3, [r10, #96]
	str	r3, [r10, #100]
	str	r3, [r10, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r10, #88]
	tst	r3, #2
	bne	.L15005
.L15064:
	ldrb	r1, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r1, #1
	b	.L14989
.L14987:
	ldr	r1, [r5, #1036]
	clz	r3, r4
	lsr	r3, r3, #5
	cmp	r2, r1
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L15073
	mov	r3, #104
	mla	r2, r3, r2, r5
	ldr	r10, [r2, #1040]
	cmp	r10, #0
	beq	.L15074
	add	r2, r10, #4
	mov	r0, r2
	str	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #48]
	mov	r1, r0
	ldr	r2, [sp, #8]
	cmp	r3, #0
	bne	.L15000
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r3, [r4, #140]
	ldr	r3, [r10, #48]
.L15000:
	cmp	r3, #1
	beq	.L15075
.L15001:
	mov	r3, #0
	mov	r0, r2
	str	r4, [r10, #8]
	str	r3, [r10, #96]
	str	r3, [r10, #100]
	str	r3, [r10, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r10, #12]
	add	r2, r10, #16
	mov	r0, #4
	bl	queue_work_on
	ldrb	r1, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r1, #1
	b	.L14989
.L14986:
	cmp	r4, #0
	beq	.L15076
	ldr	r10, [r5, #1032]
	add	r2, r10, #52
	mov	r0, r2
	str	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	movw	ip, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	movt	ip, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	str	r4, [r10]
	mov	r1, r0
	str	ip, [r4, #96]
	mov	r0, r2
	str	r3, [r4, #100]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #1
	add	r0, r10, #32
	mov	r2, r1
	mov	r3, #0
	str	r1, [r10, #8]
	mov	r1, #3
	bl	__wake_up
	cmp	r10, #0
	beq	.L15064
	ldr	r0, [r10]
	cmp	r0, #0
	beq	.L15064
	ldr	r3, [r0, #108]
	cmp	r3, #0
	beq	.L15064
	blx	r3
	b	.L15064
.L15027:
	mov	r6, #0
	b	.L14978
.L15012:
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_data_connect
	subs	r6, r0, #0
	beq	.L14978
	movw	r0, #:lower16:.LC884
	mov	r2, r6
	ldr	r1, .L15079
	movt	r0, #:upper16:.LC884
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_ctrl_disconnect
	b	.L14978
.L15011:
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_data_connect
	subs	r6, r0, #0
	beq	.L14978
	movw	r0, #:lower16:.LC883
	mov	r2, r6
	ldr	r1, .L15079
	movt	r0, #:upper16:.LC883
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	b	.L14978
.L15010:
	mov	r3, r5
	mov	r2, #0
	ldr	r0, [fp, #28]
	mov	r1, #2
	uxtb	r9, r5
	bl	usb_bam_get_connection_idx
	mov	r7, r0
	mov	r3, r5
	ldr	r0, [fp, #28]
	mov	r2, #1
	mov	r1, #2
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r7
	bmi	.L15077
	uxtb	r0, r0
	uxtb	r3, r7
	mov	r2, #7
	mov	r1, r9
	str	r0, [sp]
	mov	r0, r4
	bl	gbam_connect
	subs	r5, r0, #0
	beq	.L14978
	movw	r0, #:lower16:.LC882
	mov	r2, r5
	ldr	r1, .L15079
	movt	r0, #:upper16:.LC882
	bl	printk
	cmp	r8, #4
	beq	.L15078
	mov	r1, r9
	mov	r0, r4
	mov	r6, r5
	bl	gsmd_ctrl_disconnect
	b	.L14978
.L15009:
	mov	r2, #0
	mov	r3, r5
	ldr	r0, [fp, #28]
	mov	r1, r2
	uxtb	r8, r5
	bl	usb_bam_get_connection_idx
	mov	r6, r0
	mov	r3, r5
	ldr	r0, [fp, #28]
	mov	r2, #1
	mov	r1, #0
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r6
	bmi	.L15013
	uxtb	r3, r6
	uxtb	r2, r0
.L15014:
	str	r2, [sp]
	mov	r1, r8
	mov	r0, r4
	mov	r2, r7
	bl	gbam_connect
	subs	r6, r0, #0
	beq	.L14978
	movw	r0, #:lower16:.LC882
	mov	r2, r6
	ldr	r1, .L15079
	movt	r0, #:upper16:.LC882
	bl	printk
	mov	r1, r8
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L14978
.L15007:
	mov	r2, #0
	uxtb	r8, r5
	mov	r3, r2
	b	.L15014
.L15066:
	ldr	r2, [r4, #136]
	mov	r0, #0
	movw	r1, #:lower16:.LC759
	movt	r1, #:upper16:.LC759
	mov	r3, r6
	str	r0, [r2, #28]
	ldr	r2, [r4, #136]
	ldr	r0, [r5]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L14972
.L15005:
	ldr	r1, [r10, #32]
	add	r2, r10, #36
	mov	r0, #4
	bl	queue_work_on
	ldrb	r1, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r1, #1
	b	.L14989
.L15075:
	ldr	ip, [r4, #92]
	movw	r0, #:lower16:ghsic_send_cpkt_tomodem
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r0, #:upper16:ghsic_send_cpkt_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	ip, [r10, #52]
	str	r0, [r4, #96]
	str	r3, [r4, #100]
	b	.L15001
.L14980:
	ldr	r2, [r4, #84]
	mov	r3, #0
	mvn	r6, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #88]
	str	r3, [r2, #28]
	b	.L14972
.L15067:
	ldr	r2, [r4, #136]
	movw	r0, #:lower16:.LC767
	mov	r3, r6
	ldr	r1, .L15079+4
	movt	r0, #:upper16:.LC767
	ldr	r2, [r2, #4]
	bl	printk
	b	.L14972
.L15006:
	movw	r0, #:lower16:.LC422
	mov	r2, r9
	ldr	r1, .L15079
	movt	r0, #:upper16:.LC422
	mvn	r6, #18
	bl	printk
	b	.L14978
.L15071:
	movw	r0, #:lower16:.LC99
	ldr	r1, .L15079+8
	movt	r0, #:upper16:.LC99
	bl	printk
.L15003:
	movw	r0, #:lower16:.LC880
	mvn	r2, #18
	ldr	r1, .L15079
	movt	r0, #:upper16:.LC880
	mov	r6, r2
	bl	printk
	b	.L14978
.L14983:
	movw	r0, #:lower16:.LC422
	mov	r2, ip
	ldr	r1, .L15079
	movt	r0, #:upper16:.LC422
	mvn	r6, #18
	bl	printk
	b	.L14978
.L14990:
	movw	r0, #:lower16:.LC866
	ldr	r1, .L15079+12
	movt	r0, #:upper16:.LC866
	bl	printk
.L14993:
	movw	r0, #:lower16:.LC877
	mvn	r2, #18
	ldr	r1, .L15079
	movt	r0, #:upper16:.LC877
	mov	r6, r2
	bl	printk
	b	.L14978
.L15072:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L15079+8
	movt	r0, #:upper16:.LC12
	bl	printk
	b	.L15003
.L15074:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L15079+16
	movt	r0, #:upper16:.LC12
	bl	printk
.L14998:
	movw	r0, #:lower16:.LC879
	mvn	r2, #18
	ldr	r1, .L15079
	movt	r0, #:upper16:.LC879
	mov	r6, r2
	bl	printk
	b	.L14978
.L15073:
	movw	r0, #:lower16:.LC99
	ldr	r1, .L15079+16
	movt	r0, #:upper16:.LC99
	bl	printk
	b	.L14998
.L15076:
	movw	r0, #:lower16:.LC860
	ldr	r1, .L15079+20
	mvn	r6, #18
	movt	r0, #:upper16:.LC860
	bl	printk
	movw	r0, #:lower16:.LC878
	mov	r2, r6
	ldr	r1, .L15079
	movt	r0, #:upper16:.LC878
	bl	printk
	b	.L14978
.L15070:
	movw	r0, #:lower16:.LC860
	ldr	r1, .L15079+12
	movt	r0, #:upper16:.LC860
	bl	printk
	b	.L14993
.L15013:
	movw	r0, #:lower16:.LC881
	ldr	r1, .L15079
	mov	r6, #0
	movt	r0, #:upper16:.LC881
	bl	printk
	mov	r1, r8
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L14978
.L15077:
	movw	r0, #:lower16:.LC881
	ldr	r1, .L15079
	mov	r6, #0
	movt	r0, #:upper16:.LC881
	bl	printk
	mov	r1, r9
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L14978
.L15078:
	mov	r0, r4
	mov	r6, r5
	bl	gqti_ctrl_disconnect
	b	.L14978
.L15080:
	.align	2
.L15079:
	.word	.LANCHOR3+384
	.word	.LANCHOR3+368
	.word	.LANCHOR3+168
	.word	.LANCHOR3-188
	.word	.LANCHOR3-60
	.word	.LANCHOR3-104
	.fnend
	.size	frmnet_set_alt, .-frmnet_set_alt
	.align	2
	.global	ghsuart_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_setup, %function
ghsuart_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r3, [r9, #2048]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #16]
	add	r1, r3, r0
	cmp	r1, #4
	str	r3, [sp, #28]
	str	r3, [sp, #32]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #12]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L15099
	ldr	r3, [sp, #28]
	cmp	r3, r1
	bge	.L15081
	ldr	r1, [sp, #16]
	mov	fp, #10
	mov	r2, #84
	ldr	r3, .L15102
	movw	r0, #:lower16:.LC79
	movw	r10, #:lower16:kmalloc_caches
	movt	r0, #:upper16:.LC79
	movt	r10, #:upper16:kmalloc_caches
	cmp	r1, #0
	str	r0, [sp, #24]
	movne	r1, fp
	moveq	r1, #11
	movt	fp, 2
	str	r1, [sp, #20]
	ldr	r1, [sp, #28]
	mla	r2, r2, r1, r3
	mov	r7, r1
	mov	r3, r1
	add	r2, r2, #4
	mov	r6, r2
	str	r2, [sp, #36]
	b	.L15087
.L15101:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15085
.L15084:
	ldr	r3, .L15102+4
	mov	r2, #1
	mov	r1, fp
	ldr	r0, [sp, #24]
	ldr	r8, [r3, r7, lsl #2]
	mov	r3, r5
	stm	sp, {r5, r8}
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	r1, #:lower16:.LC498
	ldr	r2, .L15102+8
	cmp	r3, #0
	add	r0, r4, #32
	movt	r1, #:upper16:.LC498
	str	r3, [r4, #108]
	beq	.L15100
	str	r7, [r4]
	add	r7, r7, #1
	str	r5, [r4, #20]
	str	r5, [r4, #28]
	str	r5, [r4, #104]
	str	r5, [r4, #72]
	bl	__init_waitqueue_head
	movw	r0, #:lower16:ghsuart_data_disconnect_w
	mov	r3, #65024
	ldr	r1, [sp, #16]
	movt	r0, #:upper16:ghsuart_data_disconnect_w
	movw	r2, #:lower16:ghsuart_data_connect_w
	movt	r3, 65535
	movt	r2, #:upper16:ghsuart_data_connect_w
	movw	lr, #:lower16:ghsuart_data_write_tomdm
	movw	ip, #:lower16:ghsuart_data_write_tohost
	str	r0, [r4, #140]
	add	r0, r4, #116
	movt	lr, #:upper16:ghsuart_data_write_tomdm
	str	r1, [r4, #16]
	movw	r1, #:lower16:ghsuart_data_probe
	movt	ip, #:upper16:ghsuart_data_write_tohost
	str	r3, [r4, #112]
	movt	r1, #:upper16:ghsuart_data_probe
	strd	r2, [r4, #124]
	movw	r2, #:lower16:ghsuart_data_remove
	str	r0, [r4, #116]
	movt	r2, #:upper16:ghsuart_data_remove
	str	r0, [r4, #120]
	add	r0, r4, #132
	str	r3, [r4, #144]
	str	r3, [r4, #160]
	add	r3, r4, #48
	str	r3, [r4, #48]
	str	r3, [r4, #52]
	add	r3, r4, #80
	str	r0, [r4, #132]
	str	r0, [r4, #136]
	add	r0, r4, #148
	str	lr, [r4, #156]
	add	lr, r4, #164
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	ldr	r3, [sp, #20]
	str	r5, [r4, #64]
	str	r0, [r4, #148]
	str	r0, [r4, #152]
	add	r0, r4, #56
	str	r5, [r4, #68]
	str	r0, [r4, #56]
	str	r0, [r4, #60]
	add	r0, r4, #88
	str	r5, [r4, #96]
	str	r0, [r4, #88]
	str	r0, [r4, #92]
	mov	r0, r6
	str	r5, [r4, #100]
	str	lr, [r4, #164]
	str	lr, [r4, #168]
	str	ip, [r4, #172]
	str	r4, [r4, #176]
	str	r3, [r4, #180]
	str	r4, [r6, #-4]
	stm	r6, {r1, r2}
	add	r6, r6, #84
	str	r8, [r6, #-64]
	str	r5, [r6, #-56]
	bl	platform_driver_register
	ldr	r3, [sp, #12]
	cmp	r3, r7
	ble	.L15081
	ldr	r3, [r9, #2048]
.L15087:
	ldr	ip, [r10, #32]
	mov	r5, #0
	add	r3, r3, #1
	mov	r2, #216
	movw	r1, #32976
	str	r3, [r9, #2048]
	cmp	ip, r5
	mov	r0, ip
	bne	.L15101
	mov	r4, #16
	b	.L15084
.L15100:
	movw	r0, #:lower16:.LC874
	mov	r2, r8
	ldr	r1, .L15102+12
	movt	r0, #:upper16:.LC874
	bl	printk
	mov	r0, r4
	bl	kfree
.L15085:
	ldr	r3, [r9, #2048]
	movw	r0, #:lower16:.LC857
	mov	r2, r7
	movt	r0, #:upper16:.LC857
	ldr	r1, .L15102+16
	sub	r3, r3, #1
	str	r3, [r9, #2048]
	bl	printk
	ldr	r2, [sp, #28]
	ldr	r3, [r9, #2048]
	cmp	r2, r3
	bcs	.L15090
	ldr	r4, [sp, #36]
	mov	r5, r2
.L15088:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #108]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #84
	bl	platform_driver_unregister
	ldr	r3, [r9, #2048]
	cmp	r5, r3
	bcc	.L15088
.L15090:
	ldr	r3, [sp, #32]
	str	r3, [r9, #2048]
	mvn	r3, #11
	str	r3, [sp, #28]
.L15081:
	ldr	r0, [sp, #28]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15099:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L15102+16
	movw	r0, #:lower16:.LC636
	movt	r0, #:upper16:.LC636
	str	r3, [sp, #28]
	bl	printk
	b	.L15081
.L15103:
	.align	2
.L15102:
	.word	.LANCHOR1+2052
	.word	.LANCHOR3+424
	.word	.LANCHOR1+4020
	.word	.LANCHOR3+432
	.word	.LANCHOR3+404
	.fnend
	.size	ghsuart_data_setup, .-ghsuart_data_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_bind_config, %function
rmnet_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:__stack_chk_guard
	mov	r5, r1
	movt	r3, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LANCHOR6
	movt	r10, #:upper16:.LANCHOR6
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r9, [r10, #-4076]
	.pad #148
	sub	sp, sp, #148
	str	r3, [sp, #16]
	ldr	r3, [r3]
	cmp	r9, #0
	str	r3, [sp, #140]
	beq	.L15252
.L15105:
	ldr	r3, [r10, #-4072]
	cmp	r3, #0
	ble	.L15163
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r3, [sp, #4]
	ldr	r3, [r3, #3384]
	cmp	r3, #0
	beq	.L15253
	movw	r3, #:lower16:.LC891
	movw	r2, #:lower16:frmnet_bind
	ldr	r8, .L15267
	movt	r3, #:upper16:.LC891
	movt	r2, #:upper16:frmnet_bind
	movw	r9, #:lower16:.LANCHOR5
	mov	r6, #0
	movt	r9, #:upper16:.LANCHOR5
	str	r3, [sp, #8]
	str	r2, [sp, #12]
	b	.L15168
.L15181:
	ldr	r3, [sp, #4]
	add	r8, r8, #24
	ldr	r2, [r3, #3384]
	mov	r3, r6
	cmp	r6, r2
	bcs	.L15178
.L15168:
	ldrb	r3, [r9, #-1036]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15170
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15254
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r9, #-1036]
.L15170:
	ldr	r4, [r8, #20]
	add	r7, r4, #132
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r5, #24]
	mov	fp, r0
	mov	r2, r6
	ldr	r1, [sp, #8]
	mov	r0, #32
	str	ip, [r4, #128]
	bl	kasprintf
	str	r0, [r4]
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L15255
	ldr	r2, .L15267+4
	movw	r3, #:lower16:frmnet_unbind
	movw	r0, #:lower16:frmnet_disable
	ldr	ip, [sp, #12]
	movw	r1, #:lower16:frmnet_setup
	movt	r3, #:upper16:frmnet_unbind
	movt	r0, #:upper16:frmnet_disable
	movt	r1, #:upper16:frmnet_setup
	str	r2, [r4, #4]
	movw	r2, #:lower16:frmnet_set_alt
	movt	r2, #:upper16:frmnet_set_alt
	str	r3, [r4, #36]
	movw	r3, #:lower16:frmnet_resume
	str	ip, [r4, #32]
	movw	ip, #:lower16:frmnet_suspend
	movt	r3, #:upper16:frmnet_resume
	movt	ip, #:upper16:frmnet_suspend
	str	r5, [r4, #20]
	str	r2, [r4, #40]
	movw	r2, #:lower16:frmnet_send_cpkt_response
	strd	r0, [r4, #48]
	movw	r0, #:lower16:frmnet_disconnect
	movw	r1, #:lower16:frmnet_connect
	movt	r1, #:upper16:frmnet_connect
	movt	r2, #:upper16:frmnet_send_cpkt_response
	str	ip, [r4, #56]
	movt	r0, #:upper16:frmnet_disconnect
	str	r3, [r4, #60]
	add	r3, r4, #72
	str	r2, [r4, #92]
	add	r2, r5, #36
	strd	r0, [r4, #104]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L15184
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L15173
	ldrd	r2, [r4, #72]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #72]
	str	r1, [r4, #76]
.L15173:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15174
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15174
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15174:
	tst	r3, #2
	bne	.L15175
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15175
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15175:
	tst	r3, #1
	bne	.L15176
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L15176
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15176:
	cmp	r0, #0
	bne	.L15256
	ldr	r3, [r10, #-4072]
	add	r6, r6, #1
	cmp	r3, r6
	bgt	.L15181
.L15163:
.L15139:
	mov	r7, #0
.L15104:
	ldr	r3, [sp, #16]
	mov	r0, r7
	ldr	r2, [sp, #140]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L15257
	add	sp, sp, #148
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15184:
	mov	r0, r3
	b	.L15173
.L15252:
	mov	r3, #1
	ldr	r1, .L15267+8
	mov	r2, #50
	add	r0, sp, #40
	movw	r6, #:lower16:.LANCHOR1
	str	r3, [r10, #-4076]
	movt	r6, #:upper16:.LANCHOR1
	movw	r4, #:lower16:.LC313
	bl	strlcpy
	add	r0, sp, #40
	movt	r4, #:upper16:.LC313
	bl	strim
	str	r0, [sp, #32]
	mov	r2, #50
	ldr	r1, .L15267+12
	add	r0, sp, #90
	bl	strlcpy
	add	r0, sp, #90
	bl	strim
	str	r6, [sp, #4]
	str	r9, [sp, #12]
	str	r0, [sp, #36]
	b	.L15107
.L15140:
	mov	r1, r4
	add	r0, sp, #32
	bl	strsep
	mov	r6, r0
	mov	r1, r4
	add	r0, sp, #32
	bl	strsep
	cmp	r6, #0
	cmpne	r0, #0
	mov	r8, r0
	bne	.L15258
.L15107:
	ldr	r3, [sp, #32]
	cmp	r3, #0
	bne	.L15140
	ldr	r3, [sp, #4]
	ldr	r0, [r3, #3400]
	ldr	r1, [r3, #3404]
	orrs	r3, r0, r1
	beq	.L15145
	bl	gbam_setup
	subs	r7, r0, #0
	bne	.L15144
.L15145:
	ldr	r3, [sp, #4]
	ldr	r1, [r3, #3392]
	cmp	r1, #0
	bne	.L15259
.L15143:
	ldr	r3, [sp, #4]
	ldr	r0, [r3, #3412]
	cmp	r0, #0
	bne	.L15260
.L15149:
	ldr	r3, [sp, #4]
	ldr	r0, [r3, #3408]
	cmp	r0, #0
	bne	.L15261
.L15153:
	ldr	r3, [sp, #4]
	ldr	r0, [r3, #3420]
	cmp	r0, #0
	bne	.L15262
.L15157:
	ldr	r3, [sp, #4]
	ldr	r0, [r3, #3416]
	cmp	r0, #0
	beq	.L15105
	mov	r1, #1
	bl	ghsuart_ctrl_setup
	subs	r7, r0, #0
	blt	.L15144
	ldr	r2, [sp, #4]
	ldr	r3, [r2, #3384]
	cmp	r3, #0
	beq	.L15105
	ldr	r2, [r2, #2540]
	cmp	r2, #9
	bne	.L15165
	ldr	r2, [sp, #4]
	str	r7, [r2, #2548]
	add	r7, r7, #1
.L15165:
	cmp	r3, #1
	bls	.L15105
	ldr	r2, [sp, #4]
	ldr	r2, [r2, #2564]
	cmp	r2, #9
	bne	.L15166
	ldr	r2, [sp, #4]
	str	r7, [r2, #2572]
	add	r7, r7, #1
.L15166:
	cmp	r3, #2
	beq	.L15105
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #2588]
	cmp	r3, #9
	bne	.L15105
	ldr	r3, [sp, #4]
	str	r7, [r3, #2596]
	b	.L15105
.L15259:
	add	r2, sp, #31
	mov	r0, #0
	bl	gsmd_ctrl_setup
	subs	r7, r0, #0
	beq	.L15263
.L15144:
	movw	r0, #:lower16:.LC895
	ldr	r1, .L15267+16
	movt	r0, #:upper16:.LC895
	bl	printk
	b	.L15104
.L15258:
	ldr	r3, [sp, #36]
	cmp	r3, #0
	beq	.L15108
	mov	r1, r4
	add	r0, sp, #36
	bl	strsep
	str	r0, [sp, #12]
.L15108:
	ldr	r3, [sp, #4]
	ldr	r7, [r3, #3384]
	cmp	r7, #2
	bhi	.L15264
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15183
	mov	r2, #160
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L15112
	ldr	r2, [sp, #4]
	ldr	r7, [r2, #3384]
	mov	ip, r2
.L15111:
	lsl	r2, r7, #1
	mov	r0, #0
	strb	r7, [r3, #116]
	mov	r1, r2
	add	r2, r3, #144
	str	r0, [r3, #132]
	mov	r0, r6
	str	r1, [sp, #8]
	add	r1, r1, r7
	add	fp, ip, r1, lsl #3
	str	r2, [r3, #144]
	str	r2, [r3, #148]
	str	r7, [fp, #2552]
	str	r3, [fp, #2556]
	bl	str_to_xport
	mov	r3, r0
	mov	r0, r8
	str	r3, [fp, #2540]
	str	r3, [sp, #20]
	bl	str_to_xport
	ldr	r3, [sp, #20]
	str	r0, [fp, #2536]
	sub	r2, r3, #3
	cmp	r2, #7
	ldrls	pc, [pc, r2, asl #2]
	b	.L15113
.L15115:
	.word	.L15114
	.word	.L15116
	.word	.L15113
	.word	.L15113
	.word	.L15113
	.word	.L15117
	.word	.L15118
	.word	.L15119
.L15183:
	mov	r3, #16
	ldr	ip, [sp, #4]
	b	.L15111
.L15117:
	ldr	r2, [r10, #-4084]
	cmp	r2, #3
	bhi	.L15265
	ldr	r3, .L15267+20
	mov	r0, #104
	ldr	r1, [sp, #12]
	mla	r2, r0, r2, r3
	cmp	r1, #0
	moveq	r1, r6
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r3, .L15267+20
	mov	ip, #104
	movw	r1, #:lower16:.LC873
	ldr	r0, [r10, #-4084]
	movt	r1, #:upper16:.LC873
	mov	r2, #20
	mla	r0, ip, r0, r3
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r10, #-4084]
	add	r3, r3, #1
	str	r3, [r10, #-4084]
.L15121:
	ldr	ip, [sp, #4]
	ldr	r3, [sp, #8]
	ldr	r2, [ip, #3408]
	add	r3, r3, r7
	add	r3, ip, r3, lsl #3
	ldr	r0, [r3, #2536]
	add	r1, r2, #1
	str	r2, [r3, #2548]
	str	r1, [ip, #3408]
.L15119:
	sub	r3, r0, #5
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L15125
.L15127:
	.word	.L15126
	.word	.L15128
	.word	.L15128
	.word	.L15129
	.word	.L15130
	.word	.L15131
.L15129:
	ldr	r2, [r10, #-4080]
	cmp	r2, #3
	bhi	.L15266
	ldr	r6, .L15267+24
	mov	r0, #104
	ldr	r3, [sp, #12]
	mla	r2, r0, r2, r6
	cmp	r3, #0
	movne	r1, r3
	moveq	r1, r8
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r10, #-4080]
	mov	r3, #104
	movw	r1, #:lower16:.LC875
	movt	r1, #:upper16:.LC875
	mov	r2, #20
	mla	r0, r3, r0, r6
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r10, #-4080]
	add	r3, r3, #1
	str	r3, [r10, #-4080]
.L15133:
	ldmib	sp, {r0, r3}
	ldr	r2, [r0, #3412]
	add	r3, r3, r7
	add	r3, r0, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #2544]
	str	r1, [r0, #3412]
.L15131:
	ldr	r1, [sp, #4]
	ldr	r3, [r10, #-4072]
	ldr	r2, [r1, #3384]
	add	r3, r3, #1
	str	r3, [r10, #-4072]
	add	r2, r2, #1
	str	r2, [r1, #3384]
	b	.L15107
.L15130:
	ldmib	sp, {r0, r3}
	ldr	r2, [r0, #3420]
	add	r3, r3, r7
	add	r3, r0, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #2544]
	str	r1, [r0, #3420]
	b	.L15131
.L15128:
	ldmib	sp, {r0, r3}
	ldr	r2, [r0, #3404]
	add	r3, r3, r7
	add	r3, r0, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #2544]
	str	r1, [r0, #3404]
	b	.L15131
.L15126:
	ldmib	sp, {r0, r3}
	ldr	r2, [r0, #3400]
	add	r3, r3, r7
	add	r3, r0, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #2544]
	str	r1, [r0, #3400]
	b	.L15131
.L15118:
	ldr	ip, [sp, #4]
	ldr	r3, [sp, #8]
	ldr	r2, [ip, #3416]
	add	r3, r3, r7
	add	r3, ip, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #2548]
	str	r1, [ip, #3416]
	b	.L15119
.L15116:
	ldr	ip, [sp, #4]
	ldr	r3, [sp, #8]
	ldr	r2, [ip, #3396]
	add	r3, r3, r7
	add	r3, ip, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #2548]
	str	r1, [ip, #3396]
	b	.L15119
.L15114:
	ldr	ip, [sp, #4]
	ldr	r3, [sp, #8]
	ldr	r2, [ip, #3392]
	add	r3, r3, r7
	add	r3, ip, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #2548]
	str	r1, [ip, #3392]
	b	.L15119
.L15260:
	mov	r1, #1
	bl	ghsic_data_setup
	subs	r7, r0, #0
	blt	.L15144
	ldr	r2, [sp, #4]
	ldr	r3, [r2, #3384]
	cmp	r3, #0
	beq	.L15149
	ldr	r2, [r2, #2536]
	cmp	r2, #8
	bne	.L15150
	ldr	r2, [sp, #4]
	str	r7, [r2, #2544]
	add	r7, r7, #1
.L15150:
	cmp	r3, #1
	bls	.L15149
	ldr	r2, [sp, #4]
	ldr	r2, [r2, #2560]
	cmp	r2, #8
	bne	.L15151
	ldr	r2, [sp, #4]
	str	r7, [r2, #2568]
	add	r7, r7, #1
.L15151:
	cmp	r3, #2
	beq	.L15149
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #2584]
	cmp	r3, #8
	ldreq	r3, [sp, #4]
	streq	r7, [r3, #2592]
	b	.L15149
.L15261:
	mov	r1, #1
	bl	ghsic_ctrl_setup
	subs	r7, r0, #0
	blt	.L15144
	ldr	r2, [sp, #4]
	ldr	r3, [r2, #3384]
	cmp	r3, #0
	beq	.L15153
	ldr	r2, [r2, #2540]
	cmp	r2, #8
	bne	.L15154
	ldr	r2, [sp, #4]
	str	r7, [r2, #2548]
	add	r7, r7, #1
.L15154:
	cmp	r3, #1
	bls	.L15153
	ldr	r2, [sp, #4]
	ldr	r2, [r2, #2564]
	cmp	r2, #8
	bne	.L15155
	ldr	r2, [sp, #4]
	str	r7, [r2, #2572]
	add	r7, r7, #1
.L15155:
	cmp	r3, #2
	beq	.L15153
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #2588]
	cmp	r3, #8
	ldreq	r3, [sp, #4]
	streq	r7, [r3, #2596]
	b	.L15153
.L15262:
	mov	r1, #1
	bl	ghsuart_data_setup
	subs	r7, r0, #0
	blt	.L15144
	ldr	r2, [sp, #4]
	ldr	r3, [r2, #3384]
	cmp	r3, #0
	beq	.L15157
	ldr	r2, [r2, #2536]
	cmp	r2, #9
	bne	.L15158
	ldr	r2, [sp, #4]
	str	r7, [r2, #2544]
	add	r7, r7, #1
.L15158:
	cmp	r3, #1
	bls	.L15157
	ldr	r2, [sp, #4]
	ldr	r2, [r2, #2560]
	cmp	r2, #9
	bne	.L15159
	ldr	r2, [sp, #4]
	str	r7, [r2, #2568]
	add	r7, r7, #1
.L15159:
	cmp	r3, #2
	beq	.L15157
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #2584]
	cmp	r3, #9
	ldreq	r3, [sp, #4]
	streq	r7, [r3, #2592]
	b	.L15157
.L15263:
	ldr	r2, [sp, #4]
	ldr	r3, [r2, #3384]
	cmp	r3, #0
	beq	.L15143
	ldr	r1, [r2, #2556]
	ldrb	r2, [sp, #31]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L15146
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r2, r0
	strb	r0, [r1, #116]
.L15146:
	cmp	r3, #1
	bls	.L15143
	ldr	r1, [sp, #4]
	ldr	r1, [r1, #2580]
	cmp	r1, #0
	beq	.L15147
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r2, r0
	strb	r0, [r1, #116]
.L15147:
	cmp	r3, #2
	beq	.L15143
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #2604]
	cmp	r3, #0
	beq	.L15143
	ldrb	r1, [r3, #116]	@ zero_extendqisi2
	add	r2, r2, r1
	strb	r2, [r3, #116]
	b	.L15143
.L15256:
	mov	r7, r0
	movw	r0, #:lower16:.LC893
	ldr	r1, .L15267+28
	mov	r2, r7
	movt	r0, #:upper16:.LC893
	bl	printk
	ldr	r0, [r4]
	bl	kfree
.L15169:
	movw	r0, #:lower16:.LC894
	mov	r2, r6
	ldr	r1, .L15267+16
	movt	r0, #:upper16:.LC894
	bl	printk
	b	.L15104
.L15255:
	movw	r0, #:lower16:.LC892
	ldr	r1, .L15267+28
	mvn	r7, #11
	movt	r0, #:upper16:.LC892
	bl	printk
	b	.L15169
.L15253:
	mov	r2, r3
	mov	r6, r3
.L15178:
	movw	r0, #:lower16:.LC889
	ldr	r1, .L15267+28
	mvn	r7, #18
	movt	r0, #:upper16:.LC889
	bl	printk
	b	.L15169
.L15254:
	movw	r0, #:lower16:.LC890
	mvn	r2, #18
	ldr	r1, .L15267+28
	movt	r0, #:upper16:.LC890
	mov	r7, r2
	bl	printk
	b	.L15169
.L15113:
	movw	r0, #:lower16:.LC887
	mov	r2, r3
	ldr	r1, .L15267+32
	movt	r0, #:upper16:.LC887
	bl	printk
.L15124:
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #3384]
	cmp	r3, #0
	ldrne	r4, .L15267
	ldrne	r5, [sp, #4]
	beq	.L15137
.L15138:
	ldr	r0, [r4, #20]
	add	r9, r9, #1
	add	r4, r4, #24
	bl	kfree
	ldr	r3, [r5, #3384]
	cmp	r9, r3
	bcc	.L15138
.L15137:
	ldr	r2, [sp, #4]
	mov	r3, #0
	mvn	r7, #18
	str	r3, [r2, #3384]
	str	r3, [r2, #3392]
	str	r3, [r2, #3396]
	str	r3, [r2, #3400]
	str	r3, [r2, #3408]
	str	r3, [r2, #3412]
	str	r3, [r2, #3416]
	str	r3, [r2, #3420]
.L15110:
	movw	r0, #:lower16:.LC888
	mov	r3, r8
	ldr	r1, .L15267+16
	mov	r2, r6
	movt	r0, #:upper16:.LC888
	bl	printk
	b	.L15104
.L15125:
	mov	r2, r0
	movw	r0, #:lower16:.LC887
	ldr	r1, .L15267+32
	movt	r0, #:upper16:.LC887
	bl	printk
	b	.L15124
.L15264:
	movw	r0, #:lower16:.LC885
	mov	r2, #3
	ldr	r1, .L15267+32
	movt	r0, #:upper16:.LC885
	mvn	r7, #21
	bl	printk
	b	.L15110
.L15265:
	movw	r0, #:lower16:.LC872
	ldr	r1, .L15267+36
	movt	r0, #:upper16:.LC872
	bl	printk
	b	.L15121
.L15266:
	movw	r0, #:lower16:.LC872
	ldr	r1, .L15267+40
	movt	r0, #:upper16:.LC872
	bl	printk
	b	.L15133
.L15112:
	movw	r0, #:lower16:.LC886
	ldr	r1, .L15267+32
	mvn	r7, #11
	movt	r0, #:upper16:.LC886
	bl	printk
	b	.L15110
.L15257:
	bl	__stack_chk_fail
.L15268:
	.align	2
.L15267:
	.word	.LANCHOR1+2536
	.word	.LANCHOR5-1020
	.word	.LANCHOR1+3228
	.word	.LANCHOR1+3176
	.word	.LANCHOR3+476
	.word	.LANCHOR1+1040
	.word	.LANCHOR1+1460
	.word	.LANCHOR3+504
	.word	.LANCHOR3+456
	.word	.LANCHOR3-16
	.word	.LANCHOR3+96
	.fnend
	.size	rmnet_function_bind_config, .-rmnet_function_bind_config
	.align	2
	.global	notify_control_line_state
	.syntax unified
	.arm
	.fpu softvfp
	.type	notify_control_line_state, %function
notify_control_line_state:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, lr
	mov	r1, lr
	mov	r3, #0
	str	lr, [ip, #2220]
	ldr	lr, [sp], #4
	str	r0, [ip, #3428]
	add	r0, ip, #2224
	b	__wake_up
	.fnend
	.size	notify_control_line_state, .-notify_control_line_state
	.align	2
	.global	modem_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_register, %function
modem_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L15275
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC744
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC744
	str	r2, [r3, #4040]
	bl	printk
	mov	r0, #0
.L15271:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15275:
	movw	r0, #:lower16:.LC743
	movt	r0, #:upper16:.LC743
	bl	printk
	mvn	r0, #0
	b	.L15271
	.fnend
	.size	modem_register, .-modem_register
	.align	2
	.global	modem_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_unregister, %function
modem_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #1
	str	lr, [sp, #4]
	movt	ip, #:upper16:.LANCHOR1
	mov	lr, #0
	add	r0, ip, #2224
	mov	r3, lr
	mov	r1, r2
	str	r2, [ip, #2220]
	str	lr, [ip, #4040]
	bl	__wake_up
	movw	r0, #:lower16:.LC523
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC523
	add	sp, sp, #8
	b	printk
	.fnend
	.size	modem_unregister, .-modem_unregister
	.align	2
	.global	acm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind_config, %function
acm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r3, #1880]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15279
	ldr	r2, [r0, #24]
	ldrb	ip, [r2, #48]	@ zero_extendqisi2
	cmp	ip, #253
	bhi	.L15282
	add	ip, ip, #1
	uxtb	ip, ip
	strb	ip, [r2, #48]
	ldr	r2, [r0, #24]
	strb	ip, [r3, #1880]
	strb	ip, [r3, #1920]
	ldrb	ip, [r2, #48]	@ zero_extendqisi2
	cmp	ip, #253
	bhi	.L15282
	add	ip, ip, #1
	uxtb	ip, ip
	strb	ip, [r2, #48]
	ldr	r2, [r0, #24]
	strb	ip, [r3, #1888]
	strb	ip, [r3, #1932]
	ldrb	ip, [r2, #48]	@ zero_extendqisi2
	cmp	ip, #253
	bhi	.L15282
	add	ip, ip, #1
	uxtb	ip, ip
	strb	ip, [r2, #48]
	strb	ip, [r3, #1896]
	strb	ip, [r3, #1943]
.L15279:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r1
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15289
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15305
.L15283:
	movw	ip, #:lower16:acm_connect
	movw	r0, #:lower16:acm_disconnect
	strb	r6, [r4, #146]
	movw	r3, #:lower16:acm_send_break
	movt	ip, #:upper16:acm_connect
	movt	r0, #:upper16:acm_disconnect
	movt	r3, #:upper16:acm_send_break
	mov	r7, #0
	movw	r1, #:lower16:.LC578
	str	ip, [r4, #116]
	str	r0, [r4, #120]
	mov	r2, r6
	movt	r1, #:upper16:.LC578
	str	r3, [r4, #124]
	mov	r0, #208
	str	r7, [r4, #148]
	bl	kasprintf
	cmp	r0, r7
	str	r0, [r4]
	beq	.L15306
	movw	r0, #:lower16:acm_bind
	ldr	ip, .L15307
	movw	r3, #:lower16:acm_unbind
	movt	r0, #:upper16:acm_bind
	movw	r2, #:lower16:acm_set_alt
	movw	r1, #:lower16:acm_setup
	movt	r3, #:upper16:acm_unbind
	movt	r2, #:upper16:acm_set_alt
	movt	r1, #:upper16:acm_setup
	str	r0, [r4, #32]
	movw	r0, #:lower16:acm_disable
	movt	r0, #:upper16:acm_disable
	str	ip, [r4, #4]
	str	r5, [r4, #20]
	str	r3, [r4, #36]
	add	r3, r4, #72
	str	r2, [r4, #40]
	add	r2, r5, #36
	str	r0, [r4, #48]
	str	r1, [r4, #52]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r6, [r4, #32]
	cmp	r6, #0
	beq	.L15285
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L15285
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4, #20]
	strd	r0, [r4, #72]
.L15285:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15286
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15286
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15286:
	tst	r3, #2
	bne	.L15287
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15287
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15287:
	tst	r3, #1
	bne	.L15288
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L15288
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15288:
	cmp	r6, #0
	beq	.L15278
	mov	r0, r4
	bl	kfree
.L15278:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15289:
	mov	r4, #16
	b	.L15283
.L15282:
	mvn	r6, #18
	b	.L15278
.L15306:
	mov	r0, r4
	mvn	r6, #11
	bl	kfree
	b	.L15278
.L15305:
	mvn	r6, #11
	b	.L15278
.L15308:
	.align	2
.L15307:
	.word	.LANCHOR0+1944
	.fnend
	.size	acm_bind_config, .-acm_bind_config
	.align	2
	.global	adb_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_put, %function
adb_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r4, r2
	str	r6, [sp, #8]
	add	r6, r0, #88
	mov	r0, r6
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #4]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #4]
	str	r5, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	adb_req_put, .-adb_req_put
	.align	2
	.global	adb_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_get, %function
adb_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r4, r0, #88
	mov	r5, r1
	mov	r0, r4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5]
	mov	r1, r0
	cmp	r5, r3
	beq	.L15313
	ldr	ip, [r3]
	mov	lr, #256
	mov	r0, #512
	ldr	r2, [r3, #4]
	sub	r5, r3, #36
	str	r2, [ip, #4]
	str	ip, [r2]
	str	lr, [r3]
	str	r0, [r3, #4]
.L15312:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15313:
	mov	r5, #0
	b	.L15312
	.fnend
	.size	adb_req_get, .-adb_req_get
	.align	2
	.global	f_midi_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind_config, %function
f_midi_bind_config:
	.fnstart
	@ args = 16, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [sp, #60]
	cmp	r9, #0
	beq	.L15316
	mvn	ip, #0
	str	ip, [r9]
	str	ip, [r9, #4]
.L15316:
	ldr	ip, [sp, #48]
	cmp	ip, #16
	cmpls	r3, #16
	bhi	.L15330
	movw	r10, #:lower16:kmalloc_caches
	mov	r8, r0
	str	r1, [sp, #4]
	movt	r10, #:upper16:kmalloc_caches
	mov	r7, r3
	ldr	r0, [r10, #36]
	mov	fp, r2
	cmp	r0, #0
	beq	.L15331
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L15357
.L15318:
	cmp	r7, #0
	addne	r6, r5, #228
	movne	r4, #0
	beq	.L15358
.L15321:
	ldr	ip, [r10, #24]
	mov	r2, #12
	movw	r1, #32976
	mov	r3, #16
	subs	r0, ip, #0
	beq	.L15319
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L15334
.L15319:
	mov	r2, #0
	str	r5, [r3]
	strb	r4, [r3, #8]
	add	r4, r4, #1
	cmp	r4, r7
	str	r2, [r3, #4]
	str	r3, [r6, #4]!
	bne	.L15321
.L15322:
	ldr	r3, [r8, #24]
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r5
	movt	r1, #:upper16:f_midi_in_tasklet
	add	r0, r5, #300
	ldr	r3, [r3]
	str	r3, [r5, #84]
	bl	tasklet_init
	mov	r1, #208
	mov	r0, fp
	bl	kstrdup
	ldr	r3, [sp, #48]
	str	r7, [r5, #320]
	str	r3, [r5, #324]
	ldr	r3, [sp, #4]
	str	r0, [r5, #332]
	mov	r0, r5
	str	r3, [r5, #328]
	ldr	r3, [sp, #52]
	str	r3, [r5, #336]
	ldr	r3, [sp, #56]
	str	r3, [r5, #340]
	bl	f_midi_register_card
	subs	r7, r0, #0
	bge	.L15359
.L15320:
	cmp	r4, #0
	beq	.L15328
	add	r4, r5, r4, lsl #2
	add	r6, r5, #232
	add	r4, r4, #232
.L15329:
	ldr	r0, [r4, #-4]!
	bl	kfree
	cmp	r6, r4
	bne	.L15329
.L15328:
	mov	r0, r5
	bl	kfree
.L15315:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15359:
	ldr	ip, .L15362
	movw	r1, #:lower16:.LC661
	movw	r3, #:lower16:f_midi_bind
	movt	r1, #:upper16:.LC661
	movw	r2, #:lower16:f_midi_unbind
	movw	r0, #:lower16:f_midi_set_alt
	movt	r3, #:upper16:f_midi_bind
	movt	r2, #:upper16:f_midi_unbind
	movt	r0, #:upper16:f_midi_set_alt
	stm	r5, {r1, ip}
	movw	r1, #:lower16:f_midi_disable
	movt	r1, #:upper16:f_midi_disable
	str	r8, [r5, #20]
	str	r3, [r5, #32]
	add	r3, r5, #72
	str	r2, [r5, #36]
	add	r2, r8, #36
	str	r0, [r5, #40]
	str	r1, [r5, #48]
	ldr	r1, [r8, #40]
	str	r3, [r8, #40]
	str	r2, [r5, #72]
	str	r1, [r5, #76]
	str	r3, [r1]
	ldr	r7, [r5, #32]
	cmp	r7, #0
	beq	.L15324
	mov	r1, r5
	mov	r0, r8
	blx	r7
	subs	r7, r0, #0
	blt	.L15360
.L15324:
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15325
.L15361:
	ldr	r2, [r5, #16]
	cmp	r2, #0
	beq	.L15325
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r8, #45]
.L15325:
	tst	r3, #2
	bne	.L15326
	ldr	r2, [r5, #8]
	cmp	r2, #0
	beq	.L15326
	ldrb	r2, [r8, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r8, #45]
.L15326:
	tst	r3, #1
	bne	.L15327
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L15327
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r8, #45]
.L15327:
	cmp	r7, #0
	bne	.L15320
	cmp	r9, #0
	beq	.L15315
	ldr	r3, [r5, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r9]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r9, #4]
	ldr	r3, [r5, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r9]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r9, #4]
	b	.L15315
.L15331:
	mov	r5, #16
	b	.L15318
.L15334:
	mvn	r7, #11
	b	.L15320
.L15360:
	ldrd	r2, [r5, #72]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5, #20]
	strd	r0, [r5, #72]
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15325
	b	.L15361
.L15358:
	mov	r4, r7
	b	.L15322
.L15330:
	mvn	r7, #21
	b	.L15315
.L15357:
	mvn	r7, #11
	b	.L15315
.L15363:
	.align	2
.L15362:
	.word	.LANCHOR0+2828
	.fnend
	.size	f_midi_bind_config, .-f_midi_bind_config
	.align	2
	.global	rndis_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config, %function
rndis_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:__stack_chk_guard
	subs	r9, r1, #0
	movt	r8, #:upper16:__stack_chk_guard
	str	r10, [sp, #24]
	ldr	r3, [r8]
	str	lr, [sp, #28]
	.pad #32
	sub	sp, sp, #32
	str	r3, [sp, #28]
	beq	.L15380
	movw	r7, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r7, #:upper16:.LANCHOR1
	ldrb	r4, [r7, #4044]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L15402
.L15366:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #2880]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15370
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15372
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #2876]
	strb	r3, [r6, #2880]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15372
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #2888]
	strb	r3, [r6, #2920]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15372
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r6, #2867]
	strb	r3, [r6, #2896]
.L15370:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15381
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15403
.L15373:
	ldr	r3, [r9]	@ unaligned
	movw	r2, #:lower16:rndis_add_header
	movw	r1, #:lower16:rndis_rm_hdr
	ldr	r0, [r6, #2924]
	movw	lr, #:lower16:rndis_unbind
	movt	r2, #:upper16:rndis_add_header
	ldr	ip, [r6, #2928]
	movt	r1, #:upper16:rndis_rm_hdr
	movt	lr, #:upper16:rndis_unbind
	str	r3, [r4, #150]	@ unaligned
	ldrh	r6, [r9, #4]	@ unaligned
	movw	r3, #:lower16:.LC664
	ldr	r9, .L15409
	movt	r3, #:upper16:.LC664
	str	r0, [r4, #116]
	movw	r0, #:lower16:rndis_bind
	movt	r0, #:upper16:rndis_bind
	str	ip, [r4, #120]
	movw	ip, #:lower16:rndis_set_alt
	movt	ip, #:upper16:rndis_set_alt
	stm	r4, {r3, r9}
	movw	r3, #:lower16:rndis_setup
	mov	r9, #0
	movt	r3, #:upper16:rndis_setup
	str	r5, [r4, #20]
	str	r0, [r4, #32]
	movw	r0, #:lower16:rndis_disable
	movt	r0, #:upper16:rndis_disable
	str	lr, [r4, #36]
	str	ip, [r4, #40]
	mov	ip, #44
	str	r0, [r4, #48]
	str	r3, [r4, #52]
	add	r3, r4, #72
	strh	r9, [r4, #98]	@ movhi
	str	ip, [r4, #100]
	str	r2, [r4, #128]
	add	r2, r5, #36
	str	r1, [r4, #132]
	strh	r6, [r4, #154]	@ unaligned
	str	r9, [r4, #156]
	str	r9, [r4, #160]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r6, [r4, #32]
	cmp	r6, r9
	beq	.L15375
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	blt	.L15404
.L15375:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15376
.L15407:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15376
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15376:
	tst	r3, #2
	bne	.L15377
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15377
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15377:
	tst	r3, #1
	bne	.L15378
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L15378
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15378:
	cmp	r6, #0
	bne	.L15405
.L15364:
	ldr	r2, [sp, #28]
	mov	r0, r6
	ldr	r3, [r8]
	cmp	r2, r3
	bne	.L15406
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15405:
	mov	r0, r4
	bl	kfree
.L15374:
	ldrb	r3, [r7, #4044]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15364
	mov	r4, #0
	movw	r1, #:lower16:.LC543
	mov	r2, r4
	movt	r1, #:upper16:.LC543
	add	r0, sp, #8
	strb	r4, [r7, #4044]
	bl	sprintf
	add	r0, sp, #8
	mov	r1, r4
	bl	remove_proc_entry
	b	.L15364
.L15404:
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4, #20]
	strd	r0, [r4, #72]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15376
	b	.L15407
.L15402:
	ldr	r6, .L15409+4
	movw	r1, #:lower16:.LC543
	mov	r2, r4
	movt	r1, #:upper16:.LC543
	add	r0, sp, #8
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L15409+8
	mov	r2, r4
	mov	r1, #432
	str	r6, [sp]
	movw	r10, #3636
	bl	proc_create_data
	cmp	r0, #0
	beq	.L15408
	add	r6, r6, #52
	mov	r3, #1
	strh	r4, [r7, r10]	@ movhi
	str	r4, [r7, #3640]
	str	r3, [r7, #3652]
	str	r6, [r7, #3688]
	str	r6, [r7, #3692]
	strb	r3, [r7, #4044]
	b	.L15366
.L15381:
	mov	r4, #16
	b	.L15373
.L15403:
	mvn	r6, #11
	b	.L15374
.L15372:
	mvn	r6, #18
	b	.L15364
.L15380:
	mvn	r6, #21
	b	.L15364
.L15408:
	mvn	r6, #4
	b	.L15364
.L15406:
	bl	__stack_chk_fail
.L15410:
	.align	2
.L15409:
	.word	.LANCHOR0+2932
	.word	.LANCHOR1+3636
	.word	.LANCHOR3-1780
	.fnend
	.size	rndis_bind_config, .-rndis_bind_config
	.align	2
	.global	rndis_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config_vendor, %function
rndis_bind_config_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r6, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	subs	r8, r1, #0
	ldr	r1, [r6]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #28]
	beq	.L15427
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, r0
	movt	r5, #:upper16:.LANCHOR1
	mov	fp, r2
	ldrb	r7, [r5, #4044]	@ zero_extendqisi2
	mov	r10, r3
	cmp	r7, #0
	beq	.L15449
.L15413:
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	ldrb	r3, [r9, #2880]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15417
	ldr	r2, [r4, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15419
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r4, #24]
	strb	r3, [r9, #2876]
	strb	r3, [r9, #2880]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15419
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r4, #24]
	strb	r3, [r9, #2888]
	strb	r3, [r9, #2920]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15419
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r9, #2867]
	strb	r3, [r9, #2896]
.L15417:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15428
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L15450
.L15420:
	ldr	r1, [r8]	@ unaligned
	movw	r3, #:lower16:rndis_add_header
	movw	r2, #:lower16:rndis_rm_hdr
	ldr	r0, [r9, #2924]
	movt	r3, #:upper16:rndis_add_header
	movt	r2, #:upper16:rndis_rm_hdr
	ldr	lr, [r9, #2928]
	mov	r9, #0
	str	r1, [r7, #150]	@ unaligned
	ldrh	ip, [r8, #4]	@ unaligned
	movw	r8, #:lower16:.LC664
	ldr	r1, .L15456
	movt	r8, #:upper16:.LC664
	str	r0, [r7, #116]
	movw	r0, #:lower16:rndis_bind
	movt	r0, #:upper16:rndis_bind
	str	r8, [r7]
	movw	r8, #:lower16:rndis_unbind
	movt	r8, #:upper16:rndis_unbind
	str	r1, [r7, #4]
	movw	r1, #:lower16:rndis_setup
	str	r0, [r7, #32]
	movw	r0, #:lower16:rndis_disable
	movt	r1, #:upper16:rndis_setup
	movt	r0, #:upper16:rndis_disable
	str	lr, [r7, #120]
	movw	lr, #:lower16:rndis_set_alt
	movt	lr, #:upper16:rndis_set_alt
	str	r4, [r7, #20]
	str	r8, [r7, #36]
	str	r0, [r7, #48]
	mov	r0, #44
	str	lr, [r7, #40]
	str	r1, [r7, #52]
	strh	r9, [r7, #98]	@ movhi
	str	r0, [r7, #100]
	str	r3, [r7, #128]
	add	r3, r7, #72
	str	r2, [r7, #132]
	add	r2, r4, #36
	strh	ip, [r7, #154]	@ unaligned
	str	fp, [r7, #156]
	str	r10, [r7, #160]
	ldr	r1, [r4, #40]
	str	r3, [r4, #40]
	str	r2, [r7, #72]
	str	r1, [r7, #76]
	str	r3, [r1]
	ldr	r8, [r7, #32]
	cmp	r8, r9
	beq	.L15422
	mov	r1, r7
	mov	r0, r4
	blx	r8
	subs	r8, r0, #0
	blt	.L15451
.L15422:
	ldrb	r3, [r4, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15423
.L15454:
	ldr	r2, [r7, #16]
	cmp	r2, #0
	beq	.L15423
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r4, #45]
.L15423:
	tst	r3, #2
	bne	.L15424
	ldr	r2, [r7, #8]
	cmp	r2, #0
	beq	.L15424
	ldrb	r2, [r4, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r4, #45]
.L15424:
	tst	r3, #1
	bne	.L15425
	ldr	r3, [r7, #12]
	cmp	r3, #0
	beq	.L15425
	ldrb	r3, [r4, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #45]
.L15425:
	cmp	r8, #0
	bne	.L15452
.L15411:
	ldr	r2, [sp, #28]
	mov	r0, r8
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L15453
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15452:
	mov	r0, r7
	bl	kfree
.L15421:
	ldrb	r3, [r5, #4044]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15411
	mov	r4, #0
	movw	r1, #:lower16:.LC543
	mov	r2, r4
	movt	r1, #:upper16:.LC543
	add	r0, sp, #8
	strb	r4, [r5, #4044]
	bl	sprintf
	add	r0, sp, #8
	mov	r1, r4
	bl	remove_proc_entry
	b	.L15411
.L15451:
	ldrd	r2, [r7, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r7, #20]
	strd	r0, [r7, #72]
	ldrb	r3, [r4, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15423
	b	.L15454
.L15449:
	ldr	r9, .L15456+4
	movw	r1, #:lower16:.LC543
	mov	r2, r7
	movt	r1, #:upper16:.LC543
	add	r0, sp, #8
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L15456+8
	mov	r2, r7
	mov	r1, #432
	str	r9, [sp]
	bl	proc_create_data
	cmp	r0, #0
	beq	.L15455
	add	r9, r9, #52
	mov	r3, #1
	str	r7, [r5, #3640]
	movw	r2, #3636
	strh	r7, [r5, r2]	@ movhi
	str	r3, [r5, #3652]
	str	r9, [r5, #3688]
	str	r9, [r5, #3692]
	strb	r3, [r5, #4044]
	b	.L15413
.L15428:
	mov	r7, #16
	b	.L15420
.L15450:
	mvn	r8, #11
	b	.L15421
.L15419:
	mvn	r8, #18
	b	.L15411
.L15427:
	mvn	r8, #21
	b	.L15411
.L15455:
	mvn	r8, #4
	b	.L15411
.L15453:
	bl	__stack_chk_fail
.L15457:
	.align	2
.L15456:
	.word	.LANCHOR0+2932
	.word	.LANCHOR1+3636
	.word	.LANCHOR3-1780
	.fnend
	.size	rndis_bind_config_vendor, .-rndis_bind_config_vendor
	.align	2
	.global	rndis_signal_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_connect, %function
rndis_signal_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR1
	mov	r2, #0
	strd	r6, [sp, #8]
	lsl	r6, r0, #4
	ldr	r7, .L15465
	movt	r5, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	sub	r4, r6, r0
	str	r10, [sp, #24]
	lsl	r4, r4, #2
	str	lr, [sp, #28]
	add	r3, r5, r4
	add	r8, r7, r4
	str	r2, [r3, #3652]
	ldr	r3, [r8, #4]
	cmp	r3, r2
	beq	.L15461
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r2
	beq	.L15462
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L15463
	add	r2, r3, #20
.L15460:
	sub	r6, r6, r9
	mov	r1, #20
	str	r2, [r3, #8]
	add	r5, r5, r6, lsl #2
	mov	r6, #0
	str	r1, [r3, #12]
	add	r4, r4, #52
	str	r6, [r3, #16]
	ldr	r0, [r5, #3692]
	add	r4, r7, r4
	str	r3, [r5, #3692]
	mov	r2, #11
	mov	ip, #7
	str	r4, [r3]
	movt	r2, 16385
	str	r0, [r3, #4]
	str	r3, [r0]
	ldr	r3, [r3, #8]
	str	ip, [r3]
	stmib	r3, {r1, r2, r6}
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L15458:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15462:
	mov	r2, #36
	mov	r3, #16
	b	.L15460
.L15461:
	movw	r0, #65012
	movt	r0, 65535
	b	.L15458
.L15463:
	mvn	r0, #11
	b	.L15458
.L15466:
	.align	2
.L15465:
	.word	.LANCHOR1+3636
	.fnend
	.size	rndis_signal_connect, .-rndis_signal_connect
	.align	2
	.global	rndis_signal_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_disconnect, %function
rndis_signal_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR1
	mov	r2, #1
	strd	r6, [sp, #8]
	lsl	r6, r0, #4
	ldr	r7, .L15474
	movt	r5, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	sub	r4, r6, r0
	str	r10, [sp, #24]
	lsl	r4, r4, #2
	str	lr, [sp, #28]
	add	r3, r5, r4
	add	r8, r7, r4
	str	r2, [r3, #3652]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L15470
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15471
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L15472
	add	r2, r3, #20
.L15469:
	sub	r6, r6, r9
	mov	r1, #20
	str	r2, [r3, #8]
	add	r5, r5, r6, lsl #2
	mov	r6, #0
	str	r1, [r3, #12]
	add	r4, r4, #52
	str	r6, [r3, #16]
	ldr	r0, [r5, #3692]
	add	r4, r7, r4
	str	r3, [r5, #3692]
	mov	r2, #12
	mov	ip, #7
	str	r4, [r3]
	movt	r2, 16385
	str	r0, [r3, #4]
	str	r3, [r0]
	ldr	r3, [r3, #8]
	str	ip, [r3]
	stmib	r3, {r1, r2, r6}
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L15467:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15471:
	mov	r2, #36
	mov	r3, #16
	b	.L15469
.L15470:
	movw	r0, #65012
	movt	r0, 65535
	b	.L15467
.L15472:
	mvn	r0, #11
	b	.L15467
.L15475:
	.align	2
.L15474:
	.word	.LANCHOR1+3636
	.fnend
	.size	rndis_signal_disconnect, .-rndis_signal_disconnect
	.align	2
	.global	rndis_uninit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_uninit, %function
rndis_uninit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxgt	lr
	rsb	r0, r0, r0, lsl #4
	ldr	r3, .L15500
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r2, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	lsl	r5, r0, #2
	movt	r2, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	mov	r1, #0
	add	r2, r2, r5
	str	lr, [sp, #28]
	add	r5, r5, r3
	ldr	r3, [r2, #3688]
	mov	r8, r2
	str	r1, [r2, #3640]
	ldr	r4, [r3]
.L15478:
	cmp	r5, r3
	beq	.L15476
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L15484
	b	.L15498
.L15486:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15483
	mov	r4, r3
.L15484:
	cmp	r4, r5
	ldr	r3, [r4]
	bne	.L15486
.L15476:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15498:
	mov	r4, r3
.L15483:
	ldr	r7, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r7, #0
	beq	.L15476
	ldr	r3, [r8, #3688]
	cmp	r3, r5
	ldr	r4, [r3]
	moveq	r3, r5
	beq	.L15478
	mov	r6, r4
	mov	r10, #256
	mov	r9, #512
	b	.L15481
.L15488:
	mov	r6, r4
.L15481:
	cmp	r3, #0
	beq	.L15480
	ldr	r2, [r3, #8]
	cmp	r7, r2
	beq	.L15499
.L15480:
	cmp	r6, r5
	mov	r3, r6
	ldr	r4, [r4]
	bne	.L15488
	ldr	r3, [r8, #3688]
	ldr	r4, [r3]
	b	.L15478
.L15499:
	ldr	r2, [r3, #4]
	mov	r0, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	bl	kfree
	b	.L15480
.L15501:
	.align	2
.L15500:
	.word	.LANCHOR1+3688
	.fnend
	.size	rndis_uninit, .-rndis_uninit
	.align	2
	.global	rndis_set_host_mac
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_host_mac, %function
rndis_set_host_mac:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	str	r1, [r3, #3656]
	bx	lr
	.fnend
	.size	rndis_set_host_mac, .-rndis_set_host_mac
	.align	2
	.global	rndis_msg_parser
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_msg_parser, %function
rndis_msg_parser:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r1, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L15518
	cmp	r0, #0
	ldr	r2, [r5]	@ unaligned
	ldr	r3, [r5, #4]	@ unaligned
	bne	.L15588
	sub	r1, r2, #2
	cmp	r1, #6
	ldrls	pc, [pc, r1, asl #2]
	b	.L15507
.L15509:
	.word	.L15508
	.word	.L15510
	.word	.L15511
	.word	.L15512
	.word	.L15513
	.word	.L15507
	.word	.L15514
.L15513:
	movw	r7, #:lower16:.LANCHOR1
	ldr	r8, .L15595
	mov	r9, #256
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3688]
	add	r6, r8, #52
	ldr	r4, [r3]
.L15515:
	cmp	r3, r6
	beq	.L15541
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L15539
	b	.L15589
.L15542:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15538
	mov	r4, r3
.L15539:
	cmp	r4, r6
	ldr	r3, [r4]
	bne	.L15542
.L15541:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15590
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L15518
	add	r3, r0, #20
.L15536:
	mov	r2, #16
	mov	r4, #0
	str	r3, [r0, #8]
	add	r8, r8, #52
	mov	ip, #-2147483642
	str	r2, [r0, #12]
	mov	r1, #1
	str	r4, [r0, #16]
	ldr	r3, [r7, #3692]
	str	r0, [r7, #3692]
	str	r8, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	ip, [r3]
	stmib	r3, {r2, r4}
	str	r1, [r3, #12]
	ldr	r3, [r7, #3680]
	ldr	r0, [r7, #3684]
	blx	r3
	mov	r0, r4
.L15503:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15508:
	movw	r7, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3664]
	str	r2, [r7, #3640]
	cmp	r3, #0
	beq	.L15588
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L15544
	mov	r2, #72
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L15518
	add	r3, r0, #20
.L15517:
	mov	r4, #0
	mov	r1, #52
	str	r3, [r0, #8]
	ldr	r2, .L15595+4
	mov	ip, #-2147483646
	str	r1, [r0, #12]
	str	r4, [r0, #16]
	ldr	r3, [r7, #3692]
	str	r0, [r7, #3692]
	strd	r2, [r0]
	mov	r2, #1
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	ip, [r3]
	str	r1, [r3, #4]
	ldr	r1, [r5, #8]
	str	r1, [r3, #8]
	str	r4, [r3, #12]
	str	r2, [r3, #16]
	str	r4, [r3, #20]
	str	r2, [r3, #24]
	str	r4, [r3, #28]
	ldrb	r2, [r7, #3672]	@ zero_extendqisi2
	ldr	r1, [r7, #3664]
	str	r2, [r3, #32]
	ldrb	r2, [r7, #3672]	@ zero_extendqisi2
	ldr	r1, [r1, #316]
	str	r4, [r3, #44]
	str	r4, [r3, #48]
	add	r1, r1, #80
	mul	r2, r2, r1
	str	r2, [r3, #36]
	ldrb	r2, [r7, #3673]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r3, [r7, #3680]
	ldr	r0, [r7, #3684]
	blx	r3
	mov	r0, r4
	b	.L15503
.L15510:
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, #0
	movt	r5, #:upper16:.LANCHOR1
	ldr	r0, [r5, #3664]
	str	r4, [r5, #3640]
	cmp	r0, r4
	beq	.L15503
	bl	netif_carrier_off
	ldr	r3, [r5, #3664]
	ldr	r5, [r3, #576]
	cmp	r5, r4
	beq	.L15591
	mov	r0, r4
	add	r1, r5, #80
	bl	_set_bit
	mov	r0, r4
	b	.L15503
.L15511:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3664]
	cmp	r3, #0
	beq	.L15588
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15546
	mov	r2, #156
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L15518
	add	r2, r0, #20
.L15520:
	mov	r3, #136
	mov	r6, #0
	ldr	r1, .L15595+4
	strd	r2, [r0, #8]
	mov	r2, #-2147483644
	str	r6, [r0, #16]
	ldr	r3, [r7, #3692]
	str	r0, [r7, #3692]
	stm	r0, {r1, r3}
	mov	r1, r0
	str	r0, [r3]
	ldr	r4, [r0, #8]
	str	r2, [r4]
	ldr	r3, [r5, #8]
	str	r3, [r4, #8]
	ldr	r0, [r5, #12]
	bl	gen_ndis_query_resp.constprop.128
	cmp	r0, #0
	beq	.L15521
	mov	r0, #187
	mov	r3, #24
	movt	r0, 49152
	str	r3, [r4, #4]
	str	r6, [r4, #16]
	str	r6, [r4, #20]
.L15521:
	str	r0, [r4, #12]
	ldr	r3, [r7, #3680]
	ldr	r0, [r7, #3684]
	blx	r3
	mov	r0, #0
	b	.L15503
.L15589:
	mov	r4, r3
.L15538:
	ldr	r10, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r10, #0
	beq	.L15541
	ldr	r3, [r7, #3688]
	cmp	r3, r6
	ldr	r4, [r3]
	moveq	r3, r6
	beq	.L15515
	mov	r5, r4
	mov	fp, #512
	b	.L15534
.L15550:
	mov	r5, r4
.L15534:
	cmp	r3, #0
	beq	.L15533
	ldr	r2, [r3, #8]
	cmp	r10, r2
	beq	.L15592
.L15533:
	cmp	r5, r6
	mov	r3, r5
	ldr	r4, [r4]
	bne	.L15550
	ldr	r3, [r7, #3688]
	ldr	r4, [r3]
	b	.L15515
.L15592:
	ldr	r2, [r3, #4]
	mov	r0, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	stm	r3, {r9, fp}
	bl	kfree
	b	.L15533
.L15590:
	mov	r3, #36
	mov	r0, #16
	b	.L15536
.L15512:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15548
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L15518
	add	r3, r0, #20
.L15522:
	mov	r2, #16
	mov	r6, #0
	str	r3, [r0, #8]
	movw	r7, #:lower16:.LANCHOR1
	ldr	ip, .L15595+4
	mov	r1, #-2147483643
	movt	r7, #:upper16:.LANCHOR1
	str	r2, [r0, #12]
	str	r6, [r0, #16]
	ldr	r3, [r7, #3692]
	str	r0, [r7, #3692]
	str	ip, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r4, [r0, #8]
	ldr	r3, [r5, #16]
	ldr	ip, [r5, #20]
	stm	r4, {r1, r2}
	ldr	r2, [r5, #8]
	str	r2, [r4, #8]
	ldr	r1, [r0, #8]
	ldr	r2, [r5, #12]
	cmp	r1, r6
	beq	.L15523
	movw	r1, #270
	movt	r1, 1
	cmp	r2, r1
	beq	.L15525
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	bne	.L15593
.L15526:
	mov	r3, #0
	str	r3, [r4, #12]
.L15531:
	ldr	r3, [r7, #3680]
	ldr	r0, [r7, #3684]
	blx	r3
	mov	r0, #0
	b	.L15503
.L15514:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15554
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L15518
	add	r3, r0, #20
.L15543:
	str	r3, [r0, #8]
	mov	r1, #16
	mov	r4, #0
	movw	r3, #:lower16:.LANCHOR1
	ldr	lr, .L15595+4
	mov	ip, #-2147483640
	movt	r3, #:upper16:.LANCHOR1
	str	r1, [r0, #12]
	str	r4, [r0, #16]
	ldr	r2, [r3, #3692]
	str	r0, [r3, #3692]
	str	lr, [r0]
	str	r2, [r0, #4]
	str	r0, [r2]
	ldr	r2, [r0, #8]
	str	ip, [r2]
	str	r1, [r2, #4]
	ldr	r1, [r5, #8]
	str	r1, [r2, #8]
	str	r4, [r2, #12]
	ldr	r2, [r3, #3680]
	ldr	r0, [r3, #3684]
	blx	r2
	mov	r0, r4
	b	.L15503
.L15544:
	mov	r3, #36
	mov	r0, #16
	b	.L15517
.L15546:
	mov	r2, #36
	mov	r0, #16
	b	.L15520
.L15593:
	movw	r0, #:lower16:.LC709
	ldr	r1, .L15595+8
	movt	r0, #:upper16:.LC709
	bl	printk
.L15523:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r4, #12]
	b	.L15531
.L15525:
	add	r1, r5, ip
	ldr	r3, [r7, #3660]
	ldr	r2, [r1, #8]	@ unaligned
	strh	r2, [r3]	@ movhi
	ldr	r3, [r7, #3660]
	ldrh	r5, [r3]
	cmp	r5, #0
	beq	.L15527
	mov	r3, #2
	ldr	r0, [r7, #3664]
	str	r3, [r7, #3640]
	bl	netif_carrier_on
	ldr	r3, [r7, #3664]
	ldr	r2, [r3, #120]
	tst	r2, #1
	beq	.L15526
	ldr	r5, [r3, #576]
	mov	r0, r6
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L15526
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L15526
.L15527:
	mov	r3, #1
	ldr	r0, [r7, #3664]
	str	r3, [r7, #3640]
	bl	netif_carrier_off
	ldr	r3, [r7, #3664]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L15594
	add	r1, r1, #80
	mov	r0, r5
	bl	_set_bit
	b	.L15526
.L15518:
	mvn	r0, #11
	b	.L15503
.L15507:
	movw	r0, #:lower16:.LC710
	ldr	r1, .L15595+12
	movt	r0, #:upper16:.LC710
	bl	printk
.L15588:
	movw	r0, #65012
	movt	r0, 65535
	b	.L15503
.L15548:
	mov	r3, #36
	mov	r0, #16
	b	.L15522
.L15554:
	mov	r3, #36
	mov	r0, #16
	b	.L15543
.L15591:
	movw	r0, #:lower16:.LC95
	movw	r1, #1847
	movt	r0, #:upper16:.LC95
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC96
	movt	r0, #:upper16:.LC96
	bl	printk
	mov	r0, r5
	b	.L15503
.L15594:
	movw	r0, #:lower16:.LC95
	movw	r1, #1847
	movt	r0, #:upper16:.LC95
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC96
	movt	r0, #:upper16:.LC96
	bl	printk
	b	.L15526
.L15596:
	.align	2
.L15595:
	.word	.LANCHOR1+3636
	.word	.LANCHOR1+3688
	.word	.LANCHOR3-1276
	.word	.LANCHOR3-1256
	.fnend
	.size	rndis_msg_parser, .-rndis_msg_parser
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_command_complete, %function
rndis_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L15597
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L15597
	mov	r4, r1
	ldrb	r0, [r5, #164]	@ zero_extendqisi2
	ldr	r1, [r1]
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L15606
.L15601:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L15607
.L15597:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15607:
	ldr	r3, [r3, #20]
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #2928]
	cmp	r3, #2048
	movls	r3, #0
	movhi	r3, #1
	cmp	r2, #1
	strb	r3, [r5, #124]
	movls	r3, #0
	strbls	r3, [r5, #124]
	b	.L15597
.L15606:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC896
	ldr	ip, [r4, #4]
	movt	r1, #:upper16:.LC896
	ldr	r3, [r4, #48]
	add	r0, r0, #32
	str	ip, [sp]
	bl	dev_err
	b	.L15601
	.fnend
	.size	rndis_command_complete, .-rndis_command_complete
	.align	2
	.global	rndis_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_register, %function
rndis_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r0, #0
	beq	.L15610
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r0, [r3, #3637]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L15611
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, .L15616
	mov	ip, #1
	strb	ip, [r3, #3637]
	str	r2, [r3, #3680]
	str	r1, [r3, #3684]
	strh	ip, [lr, #36]	@ movhi
	ldr	pc, [sp], #4
.L15611:
	mvn	r0, #18
	bx	lr
.L15610:
	mvn	r0, #21
	bx	lr
.L15617:
	.align	2
.L15616:
	.word	.LANCHOR1+3636
	.fnend
	.size	rndis_register, .-rndis_register
	.align	2
	.global	rndis_deregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_deregister, %function
rndis_deregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bgt	.L15618
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r0, r3, r0, lsl #2
	mov	r3, #0
	strb	r3, [r0, #3637]
.L15618:
	bx	lr
	.fnend
	.size	rndis_deregister, .-rndis_deregister
	.align	2
	.global	rndis_set_param_dev
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_dev, %function
rndis_set_param_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L15622
	cmp	r0, #0
	bne	.L15623
	movw	r3, #:lower16:.LANCHOR1
	mov	ip, r0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3572]
	str	r0, [r3, #3576]
	str	r2, [r3, #3660]
	str	r1, [r3, #3664]
.L15620:
	mov	r0, ip
	bx	lr
.L15623:
	mvn	ip, #0
	b	.L15620
.L15622:
	mvn	ip, #21
	b	.L15620
	.fnend
	.size	rndis_set_param_dev, .-rndis_set_param_dev
	.align	2
	.global	rndis_set_param_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_vendor, %function
rndis_set_param_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	clz	r3, r2
	cmp	r0, #0
	lsr	r3, r3, #5
	movne	r0, #1
	moveq	r0, r3
	cmp	r0, #0
	bne	.L15626
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r1, [r3, #3668]
	str	r2, [r3, #3676]
	bx	lr
.L15626:
	mvn	r0, #0
	bx	lr
	.fnend
	.size	rndis_set_param_vendor, .-rndis_set_param_vendor
	.align	2
	.global	rndis_set_param_medium
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_medium, %function
rndis_set_param_medium:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bne	.L15629
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r1, [r3, #3644]
	str	r2, [r3, #3648]
	bx	lr
.L15629:
	mvn	r0, #0
	bx	lr
	.fnend
	.size	rndis_set_param_medium, .-rndis_set_param_medium
	.align	2
	.global	rndis_set_max_pkt_xfer
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_max_pkt_xfer, %function
rndis_set_max_pkt_xfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	strb	r1, [r3, #3672]
	bx	lr
	.fnend
	.size	rndis_set_max_pkt_xfer, .-rndis_set_max_pkt_xfer
	.align	2
	.global	rndis_set_pkt_alignment_factor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_pkt_alignment_factor, %function
rndis_set_pkt_alignment_factor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	strb	r1, [r3, #3673]
	bx	lr
	.fnend
	.size	rndis_set_pkt_alignment_factor, .-rndis_set_pkt_alignment_factor
	.align	2
	.global	rndis_add_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_hdr, %function
rndis_add_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L15632
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L15632:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_add_hdr, .-rndis_add_hdr
	.align	2
	.global	rndis_free_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_free_response, %function
rndis_free_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	rsb	r0, r0, r0, lsl #4
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, .L15648
	lsl	r6, r0, #2
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	add	r3, r3, r6
	str	lr, [sp, #28]
	ldr	r3, [r3, #3688]
	add	r6, r6, r2
	cmp	r3, r6
	ldr	r4, [r3]
	beq	.L15638
	mov	r7, r1
	mov	r5, r4
	mov	r9, #256
	mov	r8, #512
	b	.L15641
.L15642:
	mov	r5, r4
.L15641:
	cmp	r3, #0
	beq	.L15640
	ldr	r2, [r3, #8]
	cmp	r2, r7
	beq	.L15647
.L15640:
	cmp	r6, r5
	mov	r3, r5
	ldr	r4, [r4]
	bne	.L15642
.L15638:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15647:
	ldr	r2, [r3, #4]
	mov	r0, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	bl	kfree
	b	.L15640
.L15649:
	.align	2
.L15648:
	.word	.LANCHOR1+3688
	.fnend
	.size	rndis_free_response, .-rndis_free_response
	.align	2
	.global	rndis_get_next_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_get_next_response, %function
rndis_get_next_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L15656
	rsb	r0, r0, r0, lsl #4
	ldr	ip, .L15664
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	lsl	r2, r0, #2
	add	r3, r3, r2
	add	r2, r2, ip
	ldr	ip, [r3, #3688]
	cmp	ip, r2
	ldr	r3, [ip]
	beq	.L15656
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r0, [ip, #16]
	cmp	r0, #0
	bne	.L15653
	b	.L15663
.L15654:
	ldr	lr, [r3, #16]
	cmp	lr, #0
	beq	.L15652
	mov	r3, ip
.L15653:
	cmp	r2, r3
	ldr	ip, [r3]
	bne	.L15654
	mov	r0, #0
	ldr	pc, [sp], #4
.L15663:
	mov	r3, ip
.L15652:
	ldr	r2, [r3, #12]
	mov	r0, #1
	str	r0, [r3, #16]
	str	r2, [r1]
	ldr	r0, [r3, #8]
	ldr	pc, [sp], #4
.L15656:
	mov	r0, #0
	bx	lr
.L15665:
	.align	2
.L15664:
	.word	.LANCHOR1+3688
	.fnend
	.size	rndis_get_next_response, .-rndis_get_next_response
	.align	2
	.global	rndis_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init, %function
rndis_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	ldrb	r5, [r4, #4044]	@ zero_extendqisi2
	movt	r6, #:upper16:__stack_chk_guard
	str	r8, [sp, #16]
	ldr	r3, [r6]
	str	lr, [sp, #20]
	.pad #32
	sub	sp, sp, #32
	cmp	r5, #0
	str	r3, [sp, #28]
	bne	.L15676
	ldr	r7, .L15679
	movw	r1, #:lower16:.LC543
	mov	r2, r5
	movt	r1, #:upper16:.LC543
	add	r0, sp, #8
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L15679+4
	mov	r2, r5
	mov	r1, #432
	str	r7, [sp]
	movw	r8, #3636
	bl	proc_create_data
	cmp	r0, #0
	beq	.L15677
	add	r7, r7, #52
	mov	r3, #1
	strh	r5, [r4, r8]	@ movhi
	mov	r0, r5
	str	r5, [r4, #3640]
	str	r3, [r4, #3652]
	str	r7, [r4, #3688]
	str	r7, [r4, #3692]
	strb	r3, [r4, #4044]
.L15666:
	ldr	r2, [sp, #28]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L15678
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15676:
	mov	r0, #0
	b	.L15666
.L15677:
	mvn	r0, #4
	b	.L15666
.L15678:
	bl	__stack_chk_fail
.L15680:
	.align	2
.L15679:
	.word	.LANCHOR1+3636
	.word	.LANCHOR3-1780
	.fnend
	.size	rndis_init, .-rndis_init
	.align	2
	.global	rndis_exit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_exit, %function
rndis_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	ldrb	r1, [r3, #4044]	@ zero_extendqisi2
	.pad #28
	sub	sp, sp, #28
	ldr	r2, [r4]
	cmp	r1, #0
	str	r2, [sp, #20]
	bne	.L15688
.L15681:
	ldr	r2, [sp, #20]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L15689
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L15688:
	mov	r5, #0
	movw	r1, #:lower16:.LC543
	mov	r2, r5
	movt	r1, #:upper16:.LC543
	mov	r0, sp
	strb	r5, [r3, #4044]
	bl	sprintf
	mov	r0, sp
	mov	r1, r5
	bl	remove_proc_entry
	b	.L15681
.L15689:
	bl	__stack_chk_fail
	.fnend
	.size	rndis_exit, .-rndis_exit
	.align	2
	.global	ecm_ipa_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ipa_init, %function
ecm_ipa_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_ipa_init, .-ecm_ipa_init
	.align	2
	.global	ecm_qc_get_ipa_rx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_rx_cb, %function
ecm_qc_get_ipa_rx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3524]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_rx_cb, .-ecm_qc_get_ipa_rx_cb
	.align	2
	.global	ecm_qc_get_ipa_tx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_tx_cb, %function
ecm_qc_get_ipa_tx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3528]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_tx_cb, .-ecm_qc_get_ipa_tx_cb
	.align	2
	.global	ecm_qc_get_ipa_priv
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_priv, %function
ecm_qc_get_ipa_priv:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3544]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_priv, .-ecm_qc_get_ipa_priv
	.align	2
	.global	ecm_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind_config, %function
ecm_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	movw	r0, #:lower16:.LC326
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC326
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	ldr	r3, [r5, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L15710
	movw	r0, #:lower16:.LC329
	mov	r1, r4
	movt	r0, #:upper16:.LC329
	bl	strcmp
	cmp	r0, #0
	cmpne	r9, #0
	beq	.L15710
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3352]
	cmp	r3, #0
	beq	.L15727
.L15696:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #1344]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15699
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15701
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #1344]
	strb	r3, [r6, #3560]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15701
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r6, #1360]
	strb	r3, [r6, #3592]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15701
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR5
	strb	r3, [r1, #48]
	strb	r3, [r2, #-1009]
	strb	r3, [r6, #1352]
.L15699:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15711
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15728
.L15702:
	mov	r0, r10
	add	r8, r4, #128
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #124]
	beq	.L15729
	ldrb	fp, [r9, #5]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC897
	mov	r1, #14
	ldrb	r10, [r9, #4]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC897
	mov	r0, r8
	ldrb	r7, [r9, #3]	@ zero_extendqisi2
	ldrb	lr, [r9, #2]	@ zero_extendqisi2
	ldrb	ip, [r9, #1]	@ zero_extendqisi2
	ldrb	r3, [r9]	@ zero_extendqisi2
	strd	r10, [sp, #12]
	stm	sp, {ip, lr}
	str	r7, [sp, #8]
	bl	snprintf
.L15704:
	ldr	lr, .L15731
	movw	r3, #:lower16:.LC898
	movw	r0, #:lower16:ecm_qc_bind
	movw	r2, #:lower16:ecm_qc_unbind
	movw	r1, #:lower16:ecm_qc_set_alt
	str	r8, [r6, #1356]
	movt	r3, #:upper16:.LC898
	movt	r0, #:upper16:ecm_qc_bind
	movt	r2, #:upper16:ecm_qc_unbind
	movt	r1, #:upper16:ecm_qc_set_alt
	movw	ip, #:lower16:ecm_qc_get_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:ecm_qc_setup
	movt	ip, #:upper16:ecm_qc_get_alt
	movt	r3, #:upper16:ecm_qc_setup
	str	r5, [r4, #20]
	str	r0, [r4, #32]
	movw	r0, #:lower16:ecm_qc_disable
	str	r2, [r4, #36]
	movw	r2, #:lower16:ecm_qc_suspend
	movt	r0, #:upper16:ecm_qc_disable
	str	r1, [r4, #40]
	movw	r1, #:lower16:ecm_qc_resume
	movt	r2, #:upper16:ecm_qc_suspend
	str	ip, [r4, #44]
	movt	r1, #:upper16:ecm_qc_resume
	mov	ip, #15
	str	r0, [r4, #48]
	str	r3, [r4, #52]
	add	r3, r4, #72
	str	r2, [r4, #56]
	add	r2, r5, #36
	str	r1, [r4, #60]
	strh	ip, [r4, #98]	@ movhi
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r8, [r4, #32]
	cmp	r8, #0
	beq	.L15705
	mov	r1, r4
	mov	r0, r5
	blx	r8
	subs	r8, r0, #0
	bge	.L15705
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #72]
.L15705:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15706
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15706
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15706:
	tst	r3, #2
	bne	.L15707
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15707
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15707:
	tst	r3, #1
	bne	.L15708
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L15708
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15708:
	cmp	r8, #0
	bne	.L15730
.L15694:
	mov	r0, r8
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15711:
	mov	r4, #16
	b	.L15702
.L15729:
	movw	r9, #:lower16:.LANCHOR6
	ldr	r1, .L15731+4
	movt	r9, #:upper16:.LANCHOR6
	ldr	r0, [r9, #-4068]
	bl	get_qc_ether_addr
	ldr	r1, .L15731+8
	ldr	r0, [r9, #-4064]
	bl	get_qc_ether_addr
	ldrb	r3, [r7, #3537]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC897
	mov	r1, #14
	ldrb	r10, [r7, #3536]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC897
	mov	r0, r8
	ldrb	r9, [r7, #3535]	@ zero_extendqisi2
	ldrb	lr, [r7, #3534]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r7, #3533]	@ zero_extendqisi2
	ldrb	r3, [r7, #3532]	@ zero_extendqisi2
	str	r10, [sp, #12]
	stm	sp, {ip, lr}
	str	r9, [sp, #8]
	bl	snprintf
	b	.L15704
.L15727:
	movw	r0, #:lower16:.LC637
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC637
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r7, #3352]
	beq	.L15697
	bl	bam_data_setup.part.103
	subs	r8, r0, #0
	beq	.L15696
.L15698:
	movw	r0, #:lower16:.LC639
	mov	r2, r8
	ldr	r1, .L15731+12
	movt	r0, #:upper16:.LC639
	bl	printk
	movw	r0, #:lower16:.LC640
	ldr	r1, .L15731+16
	movt	r0, #:upper16:.LC640
	bl	printk
	b	.L15694
.L15710:
	mvn	r8, #21
	b	.L15694
.L15701:
	mvn	r8, #18
	b	.L15694
.L15728:
	mvn	r8, #11
	b	.L15694
.L15730:
	movw	r0, #:lower16:.LC899
	ldr	r1, .L15731+16
	movt	r0, #:upper16:.LC899
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #1356]
	bl	kfree
	b	.L15694
.L15697:
	movw	r0, #:lower16:.LC638
	ldr	r1, .L15731+20
	mvn	r8, #11
	movt	r0, #:upper16:.LC638
	bl	printk
	b	.L15698
.L15732:
	.align	2
.L15731:
	.word	.LANCHOR5-996
	.word	.LANCHOR1+3538
	.word	.LANCHOR1+3532
	.word	.LANCHOR3+524
	.word	.LANCHOR3+544
	.word	.LANCHOR2+3704
	.fnend
	.size	ecm_qc_bind_config, .-ecm_qc_bind_config
	.align	2
	.global	fmbim_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_free_req, %function
fmbim_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L15733
	mov	r4, r0
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L15733:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	fmbim_free_req, .-fmbim_free_req
	.align	2
	.global	mbim_configure_params
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_configure_params, %function
mbim_configure_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L15738
	movw	r0, #:lower16:.LC900
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC900
	str	lr, [sp, #4]
	mov	r1, r2
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #0
	ldr	pc, [sp], #4
.L15739:
	.align	2
.L15738:
	.word	.LANCHOR3+564
	.fnend
	.size	mbim_configure_params, .-mbim_configure_params
	.align	2
	.global	mbim_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind_config, %function
mbim_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r7, .L15774
	movw	r0, #:lower16:.LC633
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC633
	mov	r9, r1
	str	r10, [sp, #24]
	movt	r4, #:upper16:.LANCHOR1
	mov	r8, r2
	str	lr, [sp, #28]
	mov	r2, r1
	.pad #8
	sub	sp, sp, #8
	sub	r10, r7, #4
	mov	r1, r10
	bl	printk
	ldr	r6, [r4, #3560]
	cmp	r6, r9
	bls	.L15770
	movw	r0, #:lower16:.LC635
	mov	r2, r6
	movt	r0, #:upper16:.LC635
	add	r1, r7, #16
	bl	printk
	cmp	r6, #1
	bne	.L15771
	ldr	r3, [r4, #3352]
	cmp	r3, #0
	beq	.L15772
.L15745:
	movw	r0, #:lower16:.LC440
	movw	r6, #:lower16:.LANCHOR0
	ldr	r1, .L15774+4
	movt	r0, #:upper16:.LC440
	mov	r2, #1
	movt	r6, #:upper16:.LANCHOR0
	bl	printk
	ldrb	r3, [r6, #2576]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15748
.L15749:
	ldr	r4, [r4, #3564]
	cmp	r4, #0
	beq	.L15773
	ldr	lr, .L15774+8
	movw	r2, #:lower16:.LC642
	movw	r3, #:lower16:mbim_unbind
	movt	r2, #:upper16:.LC642
	movt	r3, #:upper16:mbim_unbind
	mov	r0, r8
	movw	r1, #:lower16:mbim_bind
	ldr	r8, [r5, #24]
	str	r3, [r4, #36]
	movw	r3, #:lower16:mbim_setup
	movt	r1, #:upper16:mbim_bind
	add	r9, lr, #980
	movt	r3, #:upper16:mbim_setup
	movw	ip, #:lower16:mbim_get_alt
	stm	r4, {r2, r9}
	movw	r2, #:lower16:mbim_set_alt
	movt	ip, #:upper16:mbim_get_alt
	movt	r2, #:upper16:mbim_set_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:mbim_disable
	movt	r1, #:upper16:mbim_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:mbim_suspend
	str	r3, [r4, #52]
	movw	r3, #:lower16:mbim_resume
	movt	r2, #:upper16:mbim_suspend
	movt	r3, #:upper16:mbim_resume
	str	ip, [r4, #44]
	str	r1, [r4, #48]
	mov	r1, #16384
	strd	r2, [r4, #56]
	mov	r2, #0
	str	r8, [r4, #84]
	str	r2, [r4, #88]
	str	lr, [r4, #200]
	str	r1, [r4, #224]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #132]
	beq	.L15753
	mov	r3, #6
	str	r3, [r4, #132]
.L15754:
	add	r1, r4, #216
	add	r0, r4, #208
	str	r5, [r4, #20]
	add	r3, r4, #72
	add	r2, r5, #36
	str	r0, [r4, #208]
	strd	r0, [r4, #212]
	str	r1, [r4, #220]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r6, [r4, #32]
	cmp	r6, #0
	beq	.L15755
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L15755
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #72]
.L15755:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15756
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15756
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15756:
	tst	r3, #2
	bne	.L15757
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15757
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15757:
	tst	r3, #1
	bne	.L15758
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L15758
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15758:
	movw	r0, #:lower16:.LC643
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC643
	mov	r2, r6
	bl	printk
.L15740:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15748:
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15751
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #2576]
	strb	r3, [r6, #2608]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15751
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r6, #2584]
	strb	r3, [r6, #2620]
	strb	r3, [r6, #2632]
	b	.L15749
.L15753:
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r6, #52]
	strh	r1, [r6, #56]	@ movhi
	str	r3, [r6, #64]
	strh	r2, [r6, #74]	@ movhi
	b	.L15754
.L15772:
	movw	r0, #:lower16:.LC637
	mov	r2, r6
	str	r3, [sp]
	movt	r0, #:upper16:.LC637
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3352]
	beq	.L15746
	bl	bam_data_setup.part.103
	subs	r6, r0, #0
	beq	.L15745
.L15744:
	movw	r0, #:lower16:.LC639
	mov	r2, r6
	ldr	r1, .L15774+4
	movt	r0, #:upper16:.LC639
	bl	printk
.L15747:
	movw	r0, #:lower16:.LC640
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC640
	bl	printk
	b	.L15740
.L15751:
	mvn	r6, #18
	b	.L15740
.L15773:
	movw	r0, #:lower16:.LC641
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC641
	mvn	r6, #11
	bl	printk
	b	.L15740
.L15770:
	movw	r0, #:lower16:.LC634
	mov	r3, r6
	mov	r2, r9
	mov	r1, r10
	movt	r0, #:upper16:.LC634
	mvn	r6, #18
	bl	printk
	b	.L15740
.L15771:
	movw	r0, #:lower16:.LC636
	mov	r2, r6
	ldr	r1, .L15774+12
	movt	r0, #:upper16:.LC636
	mvn	r6, #21
	bl	printk
	b	.L15744
.L15746:
	movw	r0, #:lower16:.LC638
	ldr	r1, .L15774+12
	mvn	r6, #11
	movt	r0, #:upper16:.LC638
	bl	printk
	movw	r0, #:lower16:.LC639
	mov	r2, r6
	add	r1, r7, #16
	movt	r0, #:upper16:.LC639
	bl	printk
	b	.L15747
.L15775:
	.align	2
.L15774:
	.word	.LANCHOR3-2480
	.word	.LANCHOR3-2464
	.word	.LANCHOR0+1656
	.word	.LANCHOR2+3704
	.fnend
	.size	mbim_bind_config, .-mbim_bind_config
	.align	2
	.global	bam_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect, %function
bam_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #3628]
	str	lr, [sp, #12]
	cmp	r1, r3
	bge	.L15793
	cmp	r0, #0
	beq	.L15794
	add	r1, r4, r1, lsl #2
	ldr	r5, [r1, #3348]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L15779
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L15779
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L15779
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L15779:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L15795
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L15796
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15795:
	add	r2, r5, #184
	ldr	r1, [r4, #3352]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L15794:
	movw	r0, #:lower16:.LC443
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC443
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L15797
	b	printk
.L15793:
	mov	r2, r1
	ldr	r1, .L15797
	movw	r0, #:lower16:.LC442
	movt	r0, #:upper16:.LC442
.L15792:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L15796:
	ldr	r2, .L15797
	movw	r0, #:lower16:.LC444
	movt	r0, #:upper16:.LC444
	mov	r1, r2
	b	.L15792
.L15798:
	.align	2
.L15797:
	.word	.LANCHOR2+3832
	.fnend
	.size	bam_data_disconnect, .-bam_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_disable, %function
mbim_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	movw	r0, #:lower16:.LC901
	add	r3, r5, #204
	strd	r6, [sp, #8]
	ldr	r1, .L15823
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC901
	mov	r4, r3
	strd	r10, [sp, #24]
	mov	r6, r5
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp, #4]
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #88]
	strb	r3, [r5, #164]
	bl	_raw_spin_lock
	ldr	r3, [r6, #208]!
	ldr	r4, [r3]
	cmp	r3, r6
	movne	fp, #256
	movne	r10, #512
	movne	r8, r4
	bne	.L15800
	b	.L15801
.L15820:
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	cmp	r6, r8
	ldr	r4, [r4]
	beq	.L15801
.L15803:
	mov	r3, r8
	mov	r8, r4
.L15800:
	ldr	r2, [r3, #4]
	subs	r9, r3, #8
	str	r2, [r4, #4]
	str	r4, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	bne	.L15820
	cmp	r6, r8
	ldr	r4, [r4]
	bne	.L15803
.L15801:
	mov	r9, r5
	ldr	r3, [r9, #216]!
	ldr	r4, [r3]
	cmp	r3, r9
	movne	r7, #256
	movne	fp, #512
	movne	r8, r4
	bne	.L15804
	b	.L15805
.L15821:
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r8, r9
	ldr	r4, [r4]
	beq	.L15805
.L15807:
	mov	r3, r8
	mov	r8, r4
.L15804:
	ldr	r2, [r3, #4]
	subs	r10, r3, #8
	str	r2, [r4, #4]
	str	r4, [r2]
	stm	r3, {r7, fp}
	bne	.L15821
	cmp	r8, r9
	ldr	r4, [r4]
	bne	.L15807
.L15805:
	ldr	r4, [sp, #4]
	mov	r0, r4
	bl	_raw_spin_unlock
	mov	r0, r4
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15808
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L15822
	mov	r8, #16
	mov	r9, #0
	strd	r8, [r3]
.L15809:
	ldr	r2, [r5, #212]
	add	r1, r3, #8
	ldr	r0, [sp, #4]
	str	r1, [r5, #212]
	str	r6, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r2]
	bl	_raw_spin_unlock
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r5, #108
	bl	__wake_up
	movw	r0, #:lower16:.LC902
	ldrb	r3, [r5, #136]	@ zero_extendqisi2
	mov	r2, r5
	ldr	r1, .L15823+4
	movt	r0, #:upper16:.LC902
	bl	printk
	add	r0, r5, #140
	ldrb	r1, [r5, #136]	@ zero_extendqisi2
	bl	bam_data_disconnect
	ldr	r0, [r5, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15811
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #156]
	mov	r2, #0
	str	r2, [r3]
.L15811:
	ldr	r1, .L15823
	movw	r0, #:lower16:.LC903
	mov	r3, #0
	movt	r0, #:upper16:.LC903
	str	r3, [r5, #168]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L15808:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L15809
.L15822:
	mvn	r3, #11
	b	.L15809
.L15824:
	.align	2
.L15823:
	.word	.LANCHOR3+588
	.word	.LANCHOR3+604
	.fnend
	.size	mbim_disable, .-mbim_disable
	.align	2
	.global	bam_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_connect, %function
bam_data_connect:
	.fnstart
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldrb	r8, [sp, #32]	@ zero_extendqisi2
	ldr	r0, [r6, #3628]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r1, r0
	bge	.L15833
	cmp	r5, #0
	beq	.L15834
	mov	r9, r3
	ldr	r3, [r5, #8]
	mov	r7, r2
	add	r1, r6, r1, lsl #2
	ldr	r4, [r1, #3348]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L15835
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r3, [r5, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L15836
	ldr	r3, [r5, #12]
	cmp	r7, #7
	str	r4, [r3]
	ldr	r3, [sp, #36]
	str	r5, [r4, #4]
	strb	r9, [r4, #52]
	strb	r8, [r4, #53]
	str	r3, [r4, #56]
	str	r7, [r4, #60]
	bne	.L15831
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r9, [r4, #64]
	strb	r8, [r4, #65]
	strd	r2, [r4, #68]
.L15831:
	add	r2, r4, #168
	mov	r0, #4
	ldr	r1, [r6, #3352]
	bl	queue_work_on
.L15825:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15836:
	movw	r0, #:lower16:.LC582
	ldr	r2, [r5, #12]
	movt	r0, #:upper16:.LC582
	ldr	r1, .L15837
	bl	printk
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L15825
.L15835:
	movw	r0, #:lower16:.LC581
	ldr	r1, .L15837
	ldr	r2, [r5, #8]
	movt	r0, #:upper16:.LC581
	bl	printk
	b	.L15825
.L15834:
	movw	r0, #:lower16:.LC443
	ldr	r1, .L15837
	mvn	r10, #18
	movt	r0, #:upper16:.LC443
	bl	printk
	b	.L15825
.L15833:
	movw	r0, #:lower16:.LC99
	mov	r2, r1
	ldr	r1, .L15837
	movt	r0, #:upper16:.LC99
	mvn	r10, #18
	bl	printk
	b	.L15825
.L15838:
	.align	2
.L15837:
	.word	.LANCHOR3+624
	.fnend
	.size	bam_data_connect, .-bam_data_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_set_alt, %function
mbim_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r5, [r0, #196]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r0, #84]
	cmp	r5, r1
	beq	.L15862
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L15841
	movw	r0, #:lower16:.LC907
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC907
	bl	printk
	cmp	r6, #1
	bhi	.L15841
	ldr	r3, [r4, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L15863
.L15847:
	cmp	r6, #1
	beq	.L15864
.L15848:
	add	r5, r4, #204
	strb	r6, [r4, #198]
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #3
	mov	r0, r5
	strb	r3, [r4, #164]
	bl	_raw_spin_unlock
.L15846:
	mov	r5, #1
	movw	r0, #:lower16:.LC919
	ldr	r1, .L15871
	mov	r7, #0
	movt	r0, #:upper16:.LC919
	str	r5, [r4, #88]
	bl	printk
	mov	r2, r5
	mov	r3, r7
	mov	r1, #3
	add	r0, r4, #108
	bl	__wake_up
	mov	r2, r5
	add	r0, r4, #120
	mov	r3, r7
	mov	r1, #3
	bl	__wake_up
.L15839:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15864:
	movw	r0, #:lower16:.LC909
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC909
	bl	printk
	ldr	r3, [r4, #148]
	ldr	r5, [r3, #28]
	cmp	r5, #0
	beq	.L15865
	movw	r0, #:lower16:.LC918
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC918
	bl	printk
	b	.L15848
.L15865:
	movw	r0, #:lower16:.LC910
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC910
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #148]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L15866
	ldr	r3, [r4, #148]
	movw	r0, #:lower16:.LC912
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC912
	ldr	r2, [r3, #28]
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #152]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L15867
	ldr	r3, [r4, #152]
	movw	r0, #:lower16:.LC914
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC914
	ldr	r2, [r3, #28]
	bl	printk
	ldr	lr, [r4, #84]
	movw	r0, #:lower16:.LC915
	mov	r2, r4
	ldr	ip, [r4, #132]
	movt	r0, #:upper16:.LC915
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r1, .L15871+4
	ldr	r8, [lr]
	cmp	ip, #7
	moveq	r5, #2
	movne	r5, #0
	bl	printk
	mov	r2, r7
	mov	r1, r5
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx
	mov	r7, r0
	mov	r1, r5
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r2, r6
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx
	uxtb	ip, r0
	ldr	r2, [r4, #132]
	uxtb	r3, r7
	str	r6, [sp, #4]
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	add	r0, r4, #140
	str	ip, [sp]
	bl	bam_data_connect
	subs	r2, r0, #0
	bne	.L15868
	movw	r0, #:lower16:.LC917
	ldr	r1, .L15871+4
	movt	r0, #:upper16:.LC917
	bl	printk
	b	.L15848
.L15841:
	movw	r0, #:lower16:.LC920
	ldr	r1, .L15871
	mvn	r7, #21
	movt	r0, #:upper16:.LC920
	bl	printk
	b	.L15839
.L15867:
	ldr	r2, [r4, #152]
	movw	r0, #:lower16:.LC913
	mov	r3, r7
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC913
	str	r5, [r2, #28]
	ldr	r2, [r4, #152]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15839
.L15866:
	ldr	r2, [r4, #148]
	movw	r0, #:lower16:.LC911
	mov	r3, r7
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC911
	str	r5, [r2, #28]
	ldr	r2, [r4, #148]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15839
.L15868:
	movw	r0, #:lower16:.LC916
	ldr	r1, .L15871+4
	movt	r0, #:upper16:.LC916
	bl	printk
	b	.L15848
.L15863:
	movw	r0, #:lower16:.LC908
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC908
	bl	printk
	ldr	r3, .L15871+8
	mov	r2, #16384
	mov	r1, #0
	str	r1, [r4, #88]
	str	r3, [r4, #200]
	str	r2, [r4, #224]
	b	.L15847
.L15862:
	movw	r0, #:lower16:.LC904
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC904
	bl	printk
	cmp	r6, #0
	bne	.L15841
	ldr	r3, [r4, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L15869
.L15842:
	mov	r1, r4
	ldr	r2, [r4, #156]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L15870
	ldr	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	ldreq	r3, [r4, #156]
	streq	r4, [r3]
	beq	.L15846
	ldr	r2, [r4, #156]
	movw	r0, #:lower16:.LC767
	mov	r3, r7
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC767
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15839
.L15869:
	movw	r0, #:lower16:.LC905
	mov	r2, r5
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC905
	bl	printk
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15842
.L15870:
	ldr	r2, [r4, #156]
	mov	ip, #0
	movw	r0, #:lower16:.LC906
	mov	r3, r7
	ldr	r1, .L15871
	movt	r0, #:upper16:.LC906
	str	ip, [r2, #28]
	ldr	r2, [r4, #156]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15839
.L15872:
	.align	2
.L15871:
	.word	.LANCHOR3+644
	.word	.LANCHOR3+660
	.word	.LANCHOR0+1656
	.fnend
	.size	mbim_set_alt, .-mbim_set_alt
	.align	2
	.global	bam_data_destroy
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_destroy, %function
bam_data_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	add	r5, r4, r0, lsl #2
	str	lr, [sp, #12]
	ldr	r0, [r5, #3348]
	bl	kfree
	ldr	r0, [r4, #3352]
	mov	r3, #0
	str	r3, [r5, #3348]
	cmp	r0, r3
	beq	.L15874
	bl	destroy_workqueue
.L15874:
	mov	r3, #0
	ldr	r6, [sp, #8]
	mov	r0, r3
	str	r3, [r4, #3352]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	bam_data_destroy, .-bam_data_destroy
	.align	2
	.global	bam_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup, %function
bam_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #1
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r2, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bne	.L15889
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3352]
	cmp	r3, #0
	movne	r0, #0
	beq	.L15890
.L15879:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15890:
	movw	r0, #:lower16:.LC637
	mov	r1, #10
	str	r3, [sp]
	movt	r0, #:upper16:.LC637
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3352]
	beq	.L15882
	movw	r2, #:lower16:kmalloc_caches
	ldr	r3, [r4, #3628]
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r4, #3628]
	beq	.L15887
	mov	r2, #232
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L15891
.L15883:
	movw	r0, #:lower16:bam2bam_data_connect_work
	movw	lr, #:lower16:bam2bam_data_disconnect_work
	str	r2, [r2, #16]
	add	r5, r2, #172
	movt	r0, #:upper16:bam2bam_data_connect_work
	movt	lr, #:upper16:bam2bam_data_disconnect_work
	mov	r3, #65024
	movw	ip, #:lower16:bam2bam_data_suspend_work
	movw	r1, #:lower16:bam2bam_data_resume_work
	str	r5, [r2, #172]
	movt	r3, 65535
	add	r6, r2, #188
	movt	ip, #:upper16:bam2bam_data_suspend_work
	movt	r1, #:upper16:bam2bam_data_resume_work
	str	r3, [r2, #168]
	str	r5, [r2, #176]
	add	r5, r2, #204
	str	r0, [r2, #180]
	mov	r0, #0
	str	lr, [r2, #196]
	add	lr, r2, #220
	str	r0, [r2]
	str	r3, [r2, #184]
	str	r6, [r2, #188]
	str	r6, [r2, #192]
	str	r3, [r2, #200]
	str	r5, [r2, #204]
	str	r5, [r2, #208]
	str	ip, [r2, #212]
	str	r3, [r2, #216]
	str	lr, [r2, #220]
	str	lr, [r2, #224]
	str	r1, [r2, #228]
	str	r2, [r4, #3348]
	b	.L15879
.L15887:
	mov	r2, #16
	b	.L15883
.L15891:
	ldr	r3, [r4, #3628]
	movw	r0, #:lower16:.LC424
	mov	r5, r2
	movt	r0, #:upper16:.LC424
	ldr	r1, .L15892
	mov	r7, r2
	ldr	r6, .L15892+4
	sub	r3, r3, #1
	str	r3, [r4, #3628]
	bl	printk
.L15884:
	ldr	r3, [r4, #3628]
	cmp	r5, r3
	blt	.L15885
	ldr	r0, [r4, #3352]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L15879
.L15889:
	movw	r0, #:lower16:.LC636
	ldr	r1, .L15892
	movt	r0, #:upper16:.LC636
	bl	printk
	mvn	r0, #21
	b	.L15879
.L15882:
	movw	r0, #:lower16:.LC638
	ldr	r1, .L15892
	movt	r0, #:upper16:.LC638
	bl	printk
	mvn	r0, #11
	b	.L15879
.L15885:
	ldr	r0, [r6, r5, lsl #2]
	bl	kfree
	str	r7, [r6, r5, lsl #2]
	add	r5, r5, #1
	b	.L15884
.L15893:
	.align	2
.L15892:
	.word	.LANCHOR2+3704
	.word	.LANCHOR1+3348
	.fnend
	.size	bam_data_setup, .-bam_data_setup
	.align	2
	.global	bam_data_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_suspend, %function
bam_data_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r2, r3, r0, lsl #2
	ldr	r1, [r3, #3352]
	mov	r0, #4
	ldr	r2, [r2, #3348]
	add	r2, r2, #200
	b	queue_work_on
	.fnend
	.size	bam_data_suspend, .-bam_data_suspend
	.align	2
	.global	bam_data_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_resume, %function
bam_data_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r2, r3, r0, lsl #2
	ldr	r1, [r3, #3352]
	mov	r0, #4
	ldr	r2, [r2, #3348]
	add	r2, r2, #216
	b	queue_work_on
	.fnend
	.size	bam_data_resume, .-bam_data_resume
	.align	2
	.global	ecm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind_config, %function
ecm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	movw	r0, #:lower16:.LC326
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC326
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r5, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r4]
	ldr	r7, [r3, #28]
	mov	r1, r7
	bl	strcmp
	cmp	r0, #0
	beq	.L15907
	movw	r0, #:lower16:.LC329
	mov	r1, r7
	movt	r0, #:upper16:.LC329
	bl	strcmp
	cmp	r0, #0
	cmpne	r6, #0
	beq	.L15907
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	ldrb	r3, [r7, #1616]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15898
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15900
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR5
	strb	r3, [r4, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r2, #-4040]
	strb	r3, [r7, #1616]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15900
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r2, #-4008]
	strb	r3, [r7, #1632]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15900
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r2, #-985]
	strb	r3, [r7, #1624]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15900
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r2, #-4049]
	strb	r3, [r7, #1640]
.L15898:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15908
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15924
.L15901:
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	add	r8, r4, #150
	movw	r2, #:lower16:.LC897
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC897
	mov	r1, #14
	ldrb	fp, [r6, #5]	@ zero_extendqisi2
	mov	r0, r8
	ldrb	r10, [r6, #4]	@ zero_extendqisi2
	ldrb	r9, [r6, #3]	@ zero_extendqisi2
	ldrb	r3, [r6]	@ zero_extendqisi2
	stm	sp, {ip, lr}
	ldr	r6, .L15925
	str	r9, [sp, #8]
	strd	r10, [sp, #12]
	bl	snprintf
	movw	r1, #:lower16:.LC898
	movw	lr, #:lower16:ecm_bind
	str	r8, [r7, #1628]
	movt	r1, #:upper16:.LC898
	movt	lr, #:upper16:ecm_bind
	movw	r3, #:lower16:ecm_unbind
	movw	r2, #:lower16:ecm_set_alt
	stm	r4, {r1, r6}
	movw	ip, #:lower16:ecm_get_alt
	movw	r0, #:lower16:ecm_disable
	movw	r1, #:lower16:ecm_setup
	movt	r3, #:upper16:ecm_unbind
	str	r5, [r4, #20]
	str	lr, [r4, #32]
	movt	r2, #:upper16:ecm_set_alt
	movt	r1, #:upper16:ecm_setup
	movt	ip, #:upper16:ecm_get_alt
	movt	r0, #:upper16:ecm_disable
	str	r3, [r4, #36]
	mov	lr, #15
	str	r2, [r4, #40]
	add	r3, r4, #72
	str	ip, [r4, #44]
	add	r2, r5, #36
	str	r0, [r4, #48]
	str	r1, [r4, #52]
	strh	lr, [r4, #98]	@ movhi
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r6, [r4, #32]
	cmp	r6, #0
	beq	.L15902
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L15902
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #72]
.L15902:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15903
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15903
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15903:
	tst	r3, #2
	bne	.L15904
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15904
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15904:
	tst	r3, #1
	bne	.L15905
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L15905
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15905:
	cmp	r6, #0
	beq	.L15896
	mov	r3, #0
	mov	r0, r4
	str	r3, [r7, #1628]
	bl	kfree
.L15896:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15908:
	mov	r4, #16
	b	.L15901
.L15907:
	mvn	r6, #21
	b	.L15896
.L15900:
	mvn	r6, #18
	b	.L15896
.L15924:
	mvn	r6, #11
	b	.L15896
.L15926:
	.align	2
.L15925:
	.word	.LANCHOR5-972
	.fnend
	.size	ecm_bind_config, .-ecm_bind_config
	.align	2
	.global	rndis_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config, %function
rndis_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	movt	r7, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	subs	r9, r1, #0
	ldr	r3, [r7]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #32
	sub	sp, sp, #32
	str	r3, [sp, #28]
	beq	.L15947
	movw	r5, #:lower16:.LANCHOR1
	mov	r6, r0
	movt	r5, #:upper16:.LANCHOR1
	ldrb	r4, [r5, #4044]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L15966
	ldr	r3, [r5, #3352]
	cmp	r3, #0
	beq	.L15967
.L15933:
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldrb	r2, [r3, #-964]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15937
	ldr	r1, [r6, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15939
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r2, [r3, #-1972]
	strb	r2, [r3, #-964]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15939
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r2, [r3, #-1952]
	strb	r2, [r3, #-956]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15939
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-1981]
	strb	r2, [r3, #-948]
.L15937:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15948
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15968
.L15940:
	ldr	r0, [r9]	@ unaligned
	movw	r1, #:lower16:.LC664
	movw	lr, #:lower16:rndis_qc_bind
	ldr	ip, .L15974
	movt	r1, #:upper16:.LC664
	movt	lr, #:upper16:rndis_qc_bind
	movw	r3, #:lower16:rndis_qc_add_header
	movw	r2, #:lower16:rndis_qc_rm_hdr
	movt	r3, #:upper16:rndis_qc_add_header
	movt	r2, #:upper16:rndis_qc_rm_hdr
	str	r0, [r4, #122]	@ unaligned
	movw	r0, #:lower16:rndis_qc_unbind
	ldrh	r8, [r9, #4]	@ unaligned
	movt	r0, #:upper16:rndis_qc_unbind
	stm	r4, {r1, ip}
	movw	r1, #:lower16:rndis_qc_set_alt
	movt	r1, #:upper16:rndis_qc_set_alt
	movw	ip, #:lower16:rndis_qc_setup
	str	r6, [r4, #20]
	movt	ip, #:upper16:rndis_qc_setup
	str	lr, [r4, #32]
	movw	lr, #:lower16:rndis_qc_disable
	str	r0, [r4, #36]
	movw	r0, #:lower16:rndis_qc_suspend
	mov	r9, #0
	movt	r0, #:upper16:rndis_qc_suspend
	str	r1, [r4, #40]
	movw	r1, #:lower16:rndis_qc_resume
	str	ip, [r4, #52]
	movt	r1, #:upper16:rndis_qc_resume
	movt	lr, #:upper16:rndis_qc_disable
	mov	ip, #1
	str	r0, [r4, #56]
	mov	r0, #44
	str	lr, [r4, #48]
	str	r1, [r4, #60]
	strh	r9, [r4, #98]	@ movhi
	str	r0, [r4, #100]
	str	r3, [r4, #104]
	add	r3, r4, #72
	str	r2, [r4, #108]
	add	r2, r6, #36
	strh	r8, [r4, #126]	@ unaligned
	str	r9, [r4, #128]
	strb	ip, [r4, #132]
	str	r9, [r4, #140]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r8, [r4, #32]
	cmp	r8, r9
	beq	.L15942
	mov	r1, r4
	mov	r0, r6
	blx	r8
	subs	r8, r0, #0
	blt	.L15969
.L15942:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15943
.L15973:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15943
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L15943:
	tst	r3, #2
	bne	.L15944
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15944
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L15944:
	tst	r3, #1
	bne	.L15945
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L15945
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L15945:
	cmp	r8, #0
	streq	r4, [r5, #2528]
	beq	.L15927
.L15941:
	mov	r0, r4
	mov	r4, #0
	bl	kfree
	ldrb	r3, [r5, #4044]	@ zero_extendqisi2
	str	r4, [r5, #2528]
	cmp	r3, r4
	bne	.L15970
.L15927:
	ldr	r2, [sp, #28]
	mov	r0, r8
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L15971
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15966:
	ldr	r8, .L15974+4
	movw	r1, #:lower16:.LC543
	mov	r2, r4
	movt	r1, #:upper16:.LC543
	add	r0, sp, #8
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L15974+8
	mov	r2, r4
	mov	r1, #432
	str	r8, [sp]
	movw	r10, #3636
	bl	proc_create_data
	cmp	r0, #0
	beq	.L15972
	mov	r3, #1
	add	r8, r8, #52
	strh	r4, [r5, r10]	@ movhi
	str	r4, [r5, #3640]
	str	r3, [r5, #3652]
	str	r8, [r5, #3688]
	strb	r3, [r5, #4044]
	ldr	r3, [r5, #3352]
	str	r8, [r5, #3692]
	cmp	r3, #0
	bne	.L15933
.L15967:
	movw	r0, #:lower16:.LC637
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC637
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #3352]
	beq	.L15934
	bl	bam_data_setup.part.103
	subs	r8, r0, #0
	beq	.L15933
.L15935:
	movw	r0, #:lower16:.LC639
	mov	r2, r8
	ldr	r1, .L15974+12
	movt	r0, #:upper16:.LC639
	bl	printk
	movw	r0, #:lower16:.LC640
	ldr	r1, .L15974+16
	movt	r0, #:upper16:.LC640
	bl	printk
	b	.L15927
.L15969:
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4, #20]
	strd	r0, [r4, #72]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15943
	b	.L15973
.L15948:
	mov	r4, #16
	b	.L15940
.L15970:
	movw	r1, #:lower16:.LC543
	mov	r2, r4
	strb	r4, [r5, #4044]
	movt	r1, #:upper16:.LC543
	add	r0, sp, #8
	bl	sprintf
	add	r0, sp, #8
	mov	r1, r4
	bl	remove_proc_entry
	b	.L15927
.L15968:
	mvn	r8, #11
	b	.L15941
.L15939:
	mvn	r8, #18
	b	.L15927
.L15947:
	mvn	r8, #21
	b	.L15927
.L15972:
	mvn	r8, #4
	b	.L15927
.L15971:
	bl	__stack_chk_fail
.L15934:
	movw	r0, #:lower16:.LC638
	ldr	r1, .L15974+20
	mvn	r8, #11
	movt	r0, #:upper16:.LC638
	bl	printk
	b	.L15935
.L15975:
	.align	2
.L15974:
	.word	.LANCHOR5-932
	.word	.LANCHOR1+3636
	.word	.LANCHOR3-1780
	.word	.LANCHOR3+680
	.word	.LANCHOR3+700
	.word	.LANCHOR2+3704
	.fnend
	.size	rndis_qc_bind_config, .-rndis_qc_bind_config
	.align	2
	.global	rndis_qc_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config_vendor, %function
rndis_qc_bind_config_vendor:
	.fnstart
	@ args = 4, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r6, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	subs	r10, r1, #0
	ldr	r1, [r6]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldrb	r8, [sp, #80]	@ zero_extendqisi2
	str	r3, [sp, #12]
	str	r1, [sp, #36]
	beq	.L15997
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	mov	fp, r2
	ldrb	r7, [r4, #4044]	@ zero_extendqisi2
	cmp	r7, #0
	beq	.L16017
	ldr	r3, [r4, #3352]
	cmp	r3, #0
	beq	.L16018
.L15982:
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldrb	r2, [r3, #-964]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15986
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15988
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r2, [r3, #-1972]
	strb	r2, [r3, #-964]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15988
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r2, [r3, #-1952]
	strb	r2, [r3, #-956]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15988
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-1981]
	strb	r2, [r3, #-948]
.L15986:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15998
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L16019
.L15989:
	ldr	r3, [r10]	@ unaligned
	movw	r0, #:lower16:rndis_qc_add_header
	movw	r1, #:lower16:.LC664
	ldr	r2, .L16025
	movt	r0, #:upper16:rndis_qc_add_header
	movt	r1, #:upper16:.LC664
	cmp	r8, #0
	moveq	r8, #15
	str	r3, [r7, #122]	@ unaligned
	ldrh	ip, [r10, #4]	@ unaligned
	movw	r3, #:lower16:rndis_qc_rm_hdr
	stm	r7, {r1, r2}
	movw	r1, #:lower16:rndis_qc_set_alt
	movw	r2, #:lower16:rndis_qc_bind
	movt	r1, #:upper16:rndis_qc_set_alt
	movt	r2, #:upper16:rndis_qc_bind
	str	r5, [r7, #20]
	str	r0, [r7, #104]
	movw	r0, #:lower16:rndis_qc_unbind
	movt	r3, #:upper16:rndis_qc_rm_hdr
	movt	r0, #:upper16:rndis_qc_unbind
	str	r2, [r7, #32]
	movw	r2, #:lower16:rndis_qc_setup
	movt	r2, #:upper16:rndis_qc_setup
	mov	r10, #0
	strd	r0, [r7, #36]
	movw	r1, #:lower16:rndis_qc_suspend
	movw	r0, #:lower16:rndis_qc_disable
	movt	r1, #:upper16:rndis_qc_suspend
	str	r2, [r7, #52]
	movw	r2, #:lower16:rndis_qc_resume
	movt	r2, #:upper16:rndis_qc_resume
	movt	r0, #:upper16:rndis_qc_disable
	str	r1, [r7, #56]
	mov	r1, #44
	str	r0, [r7, #48]
	str	r2, [r7, #60]
	add	r2, r5, #36
	str	r1, [r7, #100]
	ldr	r1, [sp, #12]
	strh	r10, [r7, #98]	@ movhi
	str	r3, [r7, #108]
	add	r3, r7, #72
	strh	ip, [r7, #126]	@ unaligned
	str	fp, [r7, #128]
	strb	r8, [r7, #132]
	str	r1, [r7, #140]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r7, #72]
	str	r1, [r7, #76]
	str	r3, [r1]
	ldr	r9, [r7, #32]
	cmp	r9, r10
	beq	.L15992
	mov	r1, r7
	mov	r0, r5
	blx	r9
	subs	r9, r0, #0
	blt	.L16020
.L15992:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15993
.L16024:
	ldr	r2, [r7, #16]
	cmp	r2, #0
	beq	.L15993
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15993:
	tst	r3, #2
	bne	.L15994
	ldr	r2, [r7, #8]
	cmp	r2, #0
	beq	.L15994
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15994:
	tst	r3, #1
	bne	.L15995
	ldr	r3, [r7, #12]
	cmp	r3, #0
	beq	.L15995
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15995:
	cmp	r9, #0
	streq	r7, [r4, #2528]
	beq	.L15976
.L15990:
	mov	r0, r7
	mov	r5, #0
	bl	kfree
	ldrb	r3, [r4, #4044]	@ zero_extendqisi2
	str	r5, [r4, #2528]
	cmp	r3, r5
	bne	.L16021
.L15976:
	ldr	r2, [sp, #36]
	mov	r0, r9
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L16022
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16017:
	ldr	r9, .L16025+4
	movw	r1, #:lower16:.LC543
	mov	r2, r7
	movt	r1, #:upper16:.LC543
	add	r0, sp, #16
	bl	sprintf
	add	r0, sp, #16
	ldr	r3, .L16025+8
	mov	r2, r7
	mov	r1, #432
	str	r9, [sp]
	bl	proc_create_data
	cmp	r0, #0
	beq	.L16023
	mov	r3, #1
	add	r9, r9, #52
	str	r7, [r4, #3640]
	movw	r2, #3636
	str	r3, [r4, #3652]
	strb	r3, [r4, #4044]
	ldr	r3, [r4, #3352]
	strh	r7, [r4, r2]	@ movhi
	str	r9, [r4, #3688]
	str	r9, [r4, #3692]
	cmp	r3, #0
	bne	.L15982
.L16018:
	movw	r0, #:lower16:.LC637
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC637
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3352]
	beq	.L15983
	bl	bam_data_setup.part.103
	subs	r9, r0, #0
	beq	.L15982
.L15984:
	movw	r0, #:lower16:.LC639
	mov	r2, r9
	ldr	r1, .L16025+12
	movt	r0, #:upper16:.LC639
	bl	printk
	movw	r0, #:lower16:.LC640
	ldr	r1, .L16025+16
	movt	r0, #:upper16:.LC640
	bl	printk
	b	.L15976
.L16020:
	ldrd	r2, [r7, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r7, #20]
	strd	r0, [r7, #72]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15993
	b	.L16024
.L15998:
	mov	r7, #16
	b	.L15989
.L16021:
	movw	r1, #:lower16:.LC543
	mov	r2, r5
	strb	r5, [r4, #4044]
	movt	r1, #:upper16:.LC543
	add	r0, sp, #16
	bl	sprintf
	add	r0, sp, #16
	mov	r1, r5
	bl	remove_proc_entry
	b	.L15976
.L16019:
	mvn	r9, #11
	b	.L15990
.L15988:
	mvn	r9, #18
	b	.L15976
.L15997:
	mvn	r9, #21
	b	.L15976
.L16023:
	mvn	r9, #4
	b	.L15976
.L16022:
	bl	__stack_chk_fail
.L15983:
	movw	r0, #:lower16:.LC638
	ldr	r1, .L16025+20
	mvn	r9, #11
	movt	r0, #:upper16:.LC638
	bl	printk
	b	.L15984
.L16026:
	.align	2
.L16025:
	.word	.LANCHOR5-932
	.word	.LANCHOR1+3636
	.word	.LANCHOR3-1780
	.word	.LANCHOR3+680
	.word	.LANCHOR3+700
	.word	.LANCHOR2+3704
	.fnend
	.size	rndis_qc_bind_config_vendor, .-rndis_qc_bind_config_vendor
	.align	2
	.global	gether_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup, %function
gether_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r7, [r4, #4036]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r7, #0
	bne	.L16031
	mov	r2, #1
	mov	r5, r0
	mov	r6, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r8, r0, #0
	mvneq	r5, #11
	bne	.L16037
.L16027:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16031:
	mvn	r5, #15
	b	.L16027
.L16037:
	add	r9, r8, #1216
	movw	r2, #:lower16:eth_work
	str	r7, [r8, #1216]
	add	r3, r9, #20
	movt	r2, #:upper16:eth_work
	str	r8, [r8, #1224]
	mov	r1, #65024
	movw	ip, #:lower16:process_rx_w
	str	r7, [r8, #1232]
	str	r3, [r8, #1236]
	add	lr, r9, #108
	movt	r1, 65535
	str	r3, [r8, #1240]
	add	r3, r9, #28
	movt	ip, #:upper16:process_rx_w
	add	r10, r9, #92
	str	r3, [r8, #1244]
	str	r3, [r8, #1248]
	add	r3, r9, #52
	str	r3, [r8, #1268]
	str	r3, [r8, #1272]
	movw	r3, #:lower16:.LC921
	str	r2, [r8, #1316]
	movw	r2, #:lower16:.LC665
	movt	r3, #:upper16:.LC921
	str	r7, [r8, #1276]
	movt	r2, #:upper16:.LC665
	str	r7, [r8, #1280]
	str	r1, [r8, #1304]
	str	r10, [r8, #1308]
	str	r10, [r8, #1312]
	add	r10, r5, #32
	str	r1, [r8, #1320]
	mov	r1, #16
	str	lr, [r8, #1324]
	str	lr, [r8, #1328]
	str	ip, [r8, #1332]
	bl	snprintf
	ldr	r0, [r4, #4056]
	ldr	r1, [r8, #444]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L16038
.L16029:
	ldr	r3, [r6]	@ unaligned
	add	r7, r9, #125
	movw	r0, #:lower16:.LC668
	movt	r0, #:upper16:.LC668
	str	r3, [r8, #1341]	@ unaligned
	ldrh	r3, [r6, #4]	@ unaligned
	strh	r3, [r7, #4]	@ unaligned
	bl	printk
	ldr	r3, .L16039
	mov	r0, r8
	ldr	r1, .L16039+4
	add	r2, r3, #136
	str	r3, [r8, #288]
	str	r10, [r8, #688]
	str	r2, [r8, #292]
	str	r1, [r8, #736]
	str	r5, [r8, #1228]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L16030
	mov	r0, r8
	bl	free_netdev
	b	.L16027
.L16038:
	movw	r2, #:lower16:.LC666
	movw	r1, #:lower16:.LC667
	movt	r2, #:upper16:.LC666
	movt	r1, #:upper16:.LC667
	mov	r0, r10
	bl	dev_warn
	b	.L16029
.L16030:
	movw	r0, #:lower16:.LC669
	ldr	r2, [r8, #444]
	ldr	r1, [r8, #1224]
	movt	r0, #:upper16:.LC669
	bl	printk
	movw	r0, #:lower16:.LC670
	mov	r2, r7
	ldr	r1, [r8, #1224]
	movt	r0, #:upper16:.LC670
	bl	printk
	mov	r0, r8
	str	r9, [r4, #4036]
	bl	netif_carrier_off
	b	.L16027
.L16040:
	.align	2
.L16039:
	.word	.LANCHOR3-2080
	.word	.LANCHOR0+2836
	.fnend
	.size	gether_setup, .-gether_setup
	.align	2
	.global	gether_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup_name, %function
gether_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	ldr	r8, [r4, #4036]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r8, #0
	bne	.L16045
	mov	r7, r2
	mov	r2, #1
	mov	r5, r0
	mov	r6, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r9, r0, #0
	mvneq	r5, #11
	bne	.L16051
.L16041:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16045:
	mvn	r5, #15
	b	.L16041
.L16051:
	movw	r2, #:lower16:eth_work
	add	r10, r9, #1216
	str	r8, [r9, #1216]
	movt	r2, #:upper16:eth_work
	mov	r3, r7
	str	r9, [r9, #1224]
	add	r7, r10, #92
	mov	r1, #65024
	str	r8, [r9, #1232]
	movw	ip, #:lower16:process_rx_w
	add	lr, r10, #108
	str	r8, [r9, #1276]
	str	r2, [r9, #1316]
	add	r2, r10, #52
	movt	r1, 65535
	movt	ip, #:upper16:process_rx_w
	str	r2, [r9, #1268]
	str	r8, [r9, #1280]
	add	r8, r10, #20
	str	r7, [r9, #1308]
	str	r7, [r9, #1312]
	add	r7, r10, #28
	str	r8, [r9, #1236]
	str	r2, [r9, #1272]
	movw	r2, #:lower16:.LC665
	str	r8, [r9, #1240]
	movt	r2, #:upper16:.LC665
	add	r8, r5, #32
	str	r7, [r9, #1244]
	str	r7, [r9, #1248]
	str	r1, [r9, #1304]
	str	r1, [r9, #1320]
	mov	r1, #16
	str	lr, [r9, #1324]
	str	lr, [r9, #1328]
	str	ip, [r9, #1332]
	bl	snprintf
	ldr	r0, [r4, #4056]
	ldr	r1, [r9, #444]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L16052
.L16043:
	ldr	r3, [r6]	@ unaligned
	add	r7, r10, #125
	movw	r0, #:lower16:.LC668
	movt	r0, #:upper16:.LC668
	str	r3, [r9, #1341]	@ unaligned
	ldrh	r3, [r6, #4]	@ unaligned
	strh	r3, [r7, #4]	@ unaligned
	bl	printk
	ldr	r3, .L16053
	mov	r0, r9
	ldr	r1, .L16053+4
	add	r2, r3, #136
	str	r3, [r9, #288]
	str	r8, [r9, #688]
	str	r2, [r9, #292]
	str	r1, [r9, #736]
	str	r5, [r9, #1228]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L16044
	mov	r0, r9
	bl	free_netdev
	b	.L16041
.L16052:
	movw	r2, #:lower16:.LC666
	movw	r1, #:lower16:.LC667
	movt	r2, #:upper16:.LC666
	movt	r1, #:upper16:.LC667
	mov	r0, r8
	bl	dev_warn
	b	.L16043
.L16044:
	movw	r0, #:lower16:.LC669
	ldr	r2, [r9, #444]
	ldr	r1, [r9, #1224]
	movt	r0, #:upper16:.LC669
	bl	printk
	movw	r0, #:lower16:.LC670
	mov	r2, r7
	ldr	r1, [r9, #1224]
	movt	r0, #:upper16:.LC670
	bl	printk
	mov	r0, r9
	str	r10, [r4, #4036]
	bl	netif_carrier_off
	b	.L16041
.L16054:
	.align	2
.L16053:
	.word	.LANCHOR3-2080
	.word	.LANCHOR0+2836
	.fnend
	.size	gether_setup_name, .-gether_setup_name
	.align	2
	.global	gether_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_cleanup, %function
gether_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #4036]
	cmp	r3, #0
	beq	.L16055
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #4036]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #4036]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #4036]
.L16055:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_cleanup, .-gether_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_bind_config, %function
ecm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #4]
	.pad #36
	sub	sp, sp, #36
	cmp	r5, #0
	beq	.L16102
	movw	r7, #:lower16:.LANCHOR1
	ldr	r3, [r1, #24]
	mov	r4, r1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r6, [r7, #4036]
	ldr	r8, [r3]
	cmp	r6, #0
	bne	.L16077
	mov	r2, #1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r9, r0, #0
	mvneq	r8, #11
	bne	.L16103
.L16064:
	ldr	r2, .L16106
	movw	r0, #:lower16:.LC671
	movt	r0, #:upper16:.LC671
	mov	r1, r2
	bl	printk
.L16061:
	mov	r0, r8
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16077:
	mvn	r8, #15
	b	.L16064
.L16103:
	add	r10, r9, #1216
	movw	r2, #:lower16:eth_work
	str	r6, [r9, #1216]
	add	r3, r10, #20
	movw	ip, #:lower16:process_rx_w
	str	r9, [r9, #1224]
	movt	r2, #:upper16:eth_work
	movt	ip, #:upper16:process_rx_w
	str	r6, [r9, #1232]
	str	r3, [r9, #1236]
	mov	r1, #65024
	add	lr, r10, #108
	str	r3, [r9, #1240]
	add	r3, r10, #28
	movt	r1, 65535
	add	fp, r10, #92
	str	r3, [r9, #1244]
	str	r3, [r9, #1248]
	add	r3, r10, #52
	str	r3, [r9, #1268]
	str	r3, [r9, #1272]
	movw	r3, #:lower16:.LC923
	str	r2, [r9, #1316]
	movw	r2, #:lower16:.LC665
	movt	r3, #:upper16:.LC923
	str	ip, [r9, #1332]
	add	ip, r8, #32
	movt	r2, #:upper16:.LC665
	str	r6, [r9, #1276]
	str	r6, [r9, #1280]
	str	r1, [r9, #1304]
	str	fp, [r9, #1308]
	str	fp, [r9, #1312]
	str	r1, [r9, #1320]
	mov	r1, #16
	str	lr, [r9, #1324]
	str	lr, [r9, #1328]
	str	ip, [sp, #28]
	bl	snprintf
	ldr	r0, [r7, #4056]
	ldr	r1, [r9, #444]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L16104
.L16065:
	ldr	r3, [r5]	@ unaligned
	add	fp, r10, #125
	movw	r0, #:lower16:.LC668
	movt	r0, #:upper16:.LC668
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	str	r3, [r9, #1341]	@ unaligned
	ldrh	r3, [r5, #4]	@ unaligned
	strh	r3, [fp, #4]	@ unaligned
	bl	printk
	ldr	r3, .L16106+4
	add	r2, r8, #32
	mov	r0, r9
	ldr	r1, .L16106+8
	str	r2, [r9, #688]
	add	r2, r3, #136
	str	r3, [r9, #288]
	str	r2, [r9, #292]
	str	r1, [r9, #736]
	str	r8, [r9, #1228]
	bl	register_netdev
	subs	r8, r0, #0
	bge	.L16066
	mov	r0, r9
	bl	free_netdev
	b	.L16064
.L16102:
	ldr	r2, .L16106
	movw	r0, #:lower16:.LC922
	mvn	r8, #21
	movt	r0, #:upper16:.LC922
	mov	r1, r2
	bl	printk
	b	.L16061
.L16104:
	movw	r2, #:lower16:.LC666
	movw	r1, #:lower16:.LC667
	movt	r2, #:upper16:.LC666
	movt	r1, #:upper16:.LC667
	add	r0, r8, #32
	bl	dev_warn
	b	.L16065
.L16066:
	movw	r0, #:lower16:.LC669
	ldr	r2, [r9, #444]
	ldr	r1, [r9, #1224]
	movt	r0, #:upper16:.LC669
	bl	printk
	movw	r0, #:lower16:.LC670
	mov	r2, fp
	ldr	r1, [r9, #1224]
	movt	r0, #:upper16:.LC670
	bl	printk
	mov	r0, r9
	str	r10, [r7, #4036]
	bl	netif_carrier_off
	cmp	r8, #0
	bne	.L16064
	ldr	r7, [r4, #24]
	movw	r0, #:lower16:.LC326
	movt	r0, #:upper16:.LC326
	ldr	r3, [r7]
	ldr	r9, [r3, #28]
	mov	r1, r9
	bl	strcmp
	cmp	r0, #0
	beq	.L16080
	movw	r0, #:lower16:.LC329
	mov	r1, r9
	movt	r0, #:upper16:.LC329
	bl	strcmp
	cmp	r0, #0
	beq	.L16080
	ldrb	r3, [r6, #1616]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16069
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16071
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR5
	strb	r3, [r7, #48]
	ldr	r1, [r4, #24]
	strb	r3, [r2, #-4040]
	strb	r3, [r6, #1616]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16071
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r4, #24]
	strb	r3, [r2, #-4008]
	strb	r3, [r6, #1632]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16071
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r4, #24]
	strb	r3, [r2, #-985]
	strb	r3, [r6, #1624]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16071
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r2, #-4049]
	strb	r3, [r6, #1640]
.L16069:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16081
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L16105
.L16072:
	ldrb	ip, [r5, #5]	@ zero_extendqisi2
	add	r9, r7, #150
	movw	r2, #:lower16:.LC897
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC897
	mov	r1, #14
	mov	r0, r9
	str	ip, [sp, #16]
	ldrb	ip, [r5, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r5, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r5, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	ldr	r5, .L16106+12
	str	ip, [sp]
	bl	snprintf
	movw	r1, #:lower16:.LC898
	movw	lr, #:lower16:ecm_bind
	str	r9, [r6, #1628]
	movt	r1, #:upper16:.LC898
	movt	lr, #:upper16:ecm_bind
	movw	r3, #:lower16:ecm_unbind
	movw	r2, #:lower16:ecm_set_alt
	stm	r7, {r1, r5}
	movw	ip, #:lower16:ecm_get_alt
	movw	r0, #:lower16:ecm_disable
	movw	r1, #:lower16:ecm_setup
	movt	r3, #:upper16:ecm_unbind
	str	r4, [r7, #20]
	str	lr, [r7, #32]
	movt	r2, #:upper16:ecm_set_alt
	movt	r1, #:upper16:ecm_setup
	movt	ip, #:upper16:ecm_get_alt
	movt	r0, #:upper16:ecm_disable
	str	r3, [r7, #36]
	mov	lr, #15
	str	r2, [r7, #40]
	add	r3, r7, #72
	str	ip, [r7, #44]
	add	r2, r4, #36
	str	r0, [r7, #48]
	str	r1, [r7, #52]
	strh	lr, [r7, #98]	@ movhi
	ldr	r1, [r4, #40]
	str	r3, [r4, #40]
	str	r2, [r7, #72]
	str	r1, [r7, #76]
	str	r3, [r1]
	ldr	r3, [r7, #32]
	cmp	r3, #0
	beq	.L16073
	mov	r1, r7
	mov	r0, r4
	blx	r3
	subs	r8, r0, #0
	bge	.L16073
	ldrd	r2, [r7, #72]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r7, #20]
	strd	r0, [r7, #72]
.L16073:
	ldrb	r3, [r4, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16074
	ldr	r2, [r7, #16]
	cmp	r2, #0
	beq	.L16074
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r4, #45]
.L16074:
	tst	r3, #2
	bne	.L16075
	ldr	r2, [r7, #8]
	cmp	r2, #0
	beq	.L16075
	ldrb	r2, [r4, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r4, #45]
.L16075:
	tst	r3, #1
	bne	.L16076
	ldr	r3, [r7, #12]
	cmp	r3, #0
	beq	.L16076
	ldrb	r3, [r4, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #45]
.L16076:
	cmp	r8, #0
	beq	.L16061
	mov	r3, #0
	mov	r0, r7
	str	r3, [r6, #1628]
	bl	kfree
.L16068:
	ldr	r2, .L16106
	movw	r0, #:lower16:.LC924
	movt	r0, #:upper16:.LC924
	mov	r1, r2
	bl	printk
	bl	gether_cleanup
	b	.L16061
.L16081:
	mov	r7, #16
	b	.L16072
.L16080:
	mvn	r8, #21
	b	.L16068
.L16071:
	mvn	r8, #18
	b	.L16068
.L16105:
	mvn	r8, #11
	b	.L16068
.L16107:
	.align	2
.L16106:
	.word	.LANCHOR3+728
	.word	.LANCHOR3-2080
	.word	.LANCHOR0+2836
	.word	.LANCHOR5-972
	.fnend
	.size	ecm_function_bind_config, .-ecm_function_bind_config
	.align	2
	.global	gether_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_connect, %function
gether_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r3, #4036]
	cmp	r6, #0
	mvneq	r0, #21
	beq	.L16108
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #144]
	beq	.L16111
	mov	r2, #44
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #144]
	beq	.L16137
.L16111:
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L16113
	ldr	r3, [r4, #92]
	str	r6, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L16138
.L16114:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r5, #0
	blt	.L16113
.L16136:
	ldr	r0, [r6, #8]
.L16108:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16113:
	ldr	r0, [r4, #144]
	bl	kfree
.L16112:
	mov	r0, r5
	b	.L16108
.L16138:
	ldr	r3, [r6, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L16124
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L16124
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r8, [r3, #516]
	lsl	r8, r8, #1
	b	.L16115
.L16124:
	mov	r8, #2
.L16115:
	add	r7, r6, #16
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r6, #20
	ldr	r1, [r4, #88]
	bl	prealloc
	subs	r5, r0, #0
	blt	.L16116
	mov	r2, r8
	ldr	r1, [r4, #92]
	add	r0, r6, #28
	bl	prealloc
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r5, #0
	beq	.L16139
.L16117:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L16114
.L16116:
	mov	r0, r7
	bl	_raw_spin_unlock
	b	.L16117
.L16137:
	movw	r0, #:lower16:.LC925
	ldr	r1, .L16140
	mvn	r5, #11
	movt	r0, #:upper16:.LC925
	bl	printk
	b	.L16112
.L16139:
	ldrb	r3, [r4, #96]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r6, #124]
	ldr	r3, [r4, #100]
	str	r3, [r6, #68]
	ldr	r3, [r4, #132]
	str	r3, [r6, #84]
	ldr	r3, [r4, #128]
	str	r3, [r6, #80]
	ldr	r3, [r4, #116]
	str	r3, [r6, #72]
	ldr	r3, [r4, #120]
	str	r3, [r6, #76]
	bl	_raw_spin_lock
	str	r4, [r6, #4]
	str	r5, [r6, #40]
	str	r5, [r6, #44]
	str	r5, [r6, #48]
	str	r6, [r4, #84]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #120]
	tst	r3, #1
	beq	.L16118
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L16119
.L16135:
	mov	r0, r4
	blx	r3
.L16119:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r6, #8]
	bl	netif_carrier_on
	ldr	r0, [r6, #8]
	ldr	r3, [r0, #120]
	tst	r3, #1
	beq	.L16108
	mov	r1, #32
	mov	r0, r6
	bl	rx_fill
	ldr	r2, [r6, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #36]
	ldr	r4, [r2, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L16136
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	ldr	r0, [r6, #8]
	b	.L16108
.L16118:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L16135
	b	.L16119
.L16141:
	.align	2
.L16140:
	.word	.LANCHOR3+756
	.fnend
	.size	gether_connect, .-gether_connect
	.align	2
	.global	gether_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_disconnect, %function
gether_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #84]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L16142
	ldr	r3, [r4, #8]
	mov	r5, r0
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L16162
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L16153:
	ldr	r0, [r4, #8]
	add	r6, r4, #16
	add	r8, r4, #20
	bl	netif_carrier_off
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	fp, [r4, #20]
	cmp	r8, fp
	beq	.L16146
	mov	r10, #256
	mov	r9, #512
	b	.L16145
.L16147:
	ldr	r0, [r5, #88]
.L16161:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	fp, [r4, #20]
	cmp	fp, r8
	beq	.L16146
.L16145:
	ldm	fp, {r1, r2}
	mov	r0, r6
	sub	r7, fp, #36
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [fp]
	str	r9, [fp, #4]
	bl	_raw_spin_unlock
	ldrb	r2, [r5, #124]	@ zero_extendqisi2
	mov	r1, r7
	cmp	r2, #0
	beq	.L16147
	ldr	r0, [fp, #-36]
	bl	kfree
	mov	r3, #0
	mov	r1, r7
	str	r3, [fp, #-36]
	ldr	r0, [r5, #88]
	b	.L16161
.L16146:
	mov	r7, #0
	ldr	r0, [r5, #144]
	add	r8, r4, #28
	bl	kfree
	mov	r0, r6
	str	r7, [r5, #144]
	bl	_raw_spin_unlock
	ldr	r3, [r5, #88]
	str	r7, [r3]
	ldr	r3, [r5, #88]
	str	r7, [r3, #28]
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r7, [r4, #28]
	cmp	r7, r8
	beq	.L16149
	mov	r10, #256
	mov	r9, #512
.L16150:
	ldrd	r2, [r7]
	mov	r0, r6
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r7]
	str	r9, [r7, #4]
	bl	_raw_spin_unlock
	ldr	r0, [r5, #92]
	sub	r1, r7, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r7, [r4, #28]
	cmp	r7, r8
	bne	.L16150
.L16149:
	mov	r0, r6
	add	r7, r4, #64
	bl	_raw_spin_unlock
	mov	r0, r7
	add	r6, r4, #52
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, r6
	beq	.L16151
	mov	r8, #0
	b	.L16152
.L16163:
	ldr	r2, [r4, #60]
	sub	r2, r2, #1
	str	r2, [r4, #60]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #52]
	cmp	r3, r6
	beq	.L16151
.L16152:
	subs	r0, r3, #0
	bne	.L16163
.L16151:
	mov	r0, r7
	mov	r6, #0
	bl	_raw_spin_unlock
	ldr	r3, [r5, #92]
	mov	r0, r4
	str	r6, [r3]
	ldr	r3, [r5, #92]
	str	r6, [r3, #28]
	str	r6, [r4, #68]
	str	r6, [r4, #80]
	str	r6, [r4, #84]
	bl	_raw_spin_lock
	mov	r0, r4
	str	r6, [r4, #4]
	str	r6, [r5, #84]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock
.L16162:
	movw	r0, #:lower16:.LC95
	movw	r1, #1847
	movt	r0, #:upper16:.LC95
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC96
	movt	r0, #:upper16:.LC96
	bl	printk
	b	.L16153
.L16142:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	gether_disconnect, .-gether_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_disable, %function
rndis_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #168]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #164]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	ble	.L16166
.L16171:
	mov	r0, r7
	bl	gether_disconnect
	ldr	r0, [r7, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r7, #168]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16166:
	rsb	r3, r3, r3, lsl #4
	movw	r2, #:lower16:.LANCHOR1
	ldr	r0, .L16192
	movt	r2, #:upper16:.LANCHOR1
	lsl	r5, r3, #2
	mov	r1, #0
	add	r2, r2, r5
	add	r5, r5, r0
	ldr	r3, [r2, #3688]
	mov	r9, r2
	str	r1, [r2, #3640]
	ldr	r4, [r3]
.L16167:
	cmp	r5, r3
	beq	.L16171
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L16173
	b	.L16190
.L16179:
	mov	r4, r3
.L16173:
	cmp	r4, r5
	ldr	r3, [r4]
	beq	.L16171
	ldr	r2, [r4, #16]
	cmp	r2, #0
	bne	.L16179
.L16172:
	ldr	r8, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r8, #0
	beq	.L16171
	ldr	r3, [r9, #3688]
	cmp	r3, r5
	ldr	r4, [r3]
	moveq	r3, r5
	beq	.L16167
	mov	r6, r4
	mov	fp, #256
	mov	r10, #512
	b	.L16170
.L16177:
	mov	r6, r4
.L16170:
	cmp	r3, #0
	beq	.L16169
	ldr	r2, [r3, #8]
	cmp	r8, r2
	beq	.L16191
.L16169:
	cmp	r6, r5
	mov	r3, r6
	ldr	r4, [r4]
	bne	.L16177
	ldr	r3, [r9, #3688]
	ldr	r4, [r3]
	b	.L16167
.L16191:
	ldr	r2, [r3, #4]
	mov	r0, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	bl	kfree
	b	.L16169
.L16190:
	mov	r4, r3
	b	.L16172
.L16193:
	.align	2
.L16192:
	.word	.LANCHOR1+3688
	.fnend
	.size	rndis_disable, .-rndis_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_alt, %function
rndis_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L16248
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L16225
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16201
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L16201:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16202
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16202
.L16203:
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #0
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #4036]
	strb	r3, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	cmp	r7, r3
	beq	.L16225
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #144]
	beq	.L16207
	mov	r2, #44
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #144]
	beq	.L16249
.L16207:
	ldr	r3, [r4, #88]
	str	r7, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L16209
	ldr	r3, [r4, #92]
	str	r7, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	beq	.L16250
.L16210:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r6, #0
	blt	.L16209
.L16247:
	ldr	r6, [r7, #8]
.L16208:
.L16218:
	cmn	r6, #4096
	movhi	r0, r6
	bhi	.L16194
	ldrb	r2, [r4, #164]	@ zero_extendqisi2
	clz	r3, r6
	lsr	r3, r3, #5
	cmp	r2, #0
	movne	r3, #1
	cmp	r3, #0
	movne	r0, #0
	bne	.L16194
	add	r4, r4, #98
	mov	r0, r3
	str	r3, [r5, #3572]
	str	r3, [r5, #3576]
	str	r4, [r5, #3660]
	str	r6, [r5, #3664]
.L16194:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16202:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16205
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L16203
.L16205:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L16194
.L16248:
	ldr	r0, [r0, #168]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16196
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #168]
.L16196:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L16251
.L16197:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #168]
	mov	r0, #0
	str	r4, [r3]
	b	.L16194
.L16209:
	ldr	r0, [r4, #144]
	bl	kfree
	b	.L16218
.L16250:
	ldr	r3, [r7, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L16252
.L16223:
	mov	r9, #2
.L16211:
	add	r8, r7, #16
	mov	r0, r8
	bl	_raw_spin_lock
	mov	r2, r9
	add	r0, r7, #20
	ldr	r1, [r4, #88]
	bl	prealloc
	subs	r6, r0, #0
	blt	.L16212
	mov	r2, r9
	ldr	r1, [r4, #92]
	add	r0, r7, #28
	bl	prealloc
	mov	r6, r0
	mov	r0, r8
	bl	_raw_spin_unlock
	cmp	r6, #0
	beq	.L16253
.L16213:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L16210
.L16252:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L16223
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r9, [r3, #516]
	lsl	r9, r9, #1
	b	.L16211
.L16225:
	mvn	r0, #21
	b	.L16194
.L16212:
	mov	r0, r8
	bl	_raw_spin_unlock
	b	.L16213
.L16251:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16225
	ldr	r0, [r4, #168]
	ldr	r1, [r0, #28]
	b	.L16197
.L16253:
	ldrb	r3, [r4, #96]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r7, #124]
	ldr	r3, [r4, #100]
	str	r3, [r7, #68]
	ldr	r3, [r4, #132]
	str	r3, [r7, #84]
	ldr	r3, [r4, #128]
	str	r3, [r7, #80]
	ldr	r3, [r4, #116]
	str	r3, [r7, #72]
	ldr	r3, [r4, #120]
	str	r3, [r7, #76]
	bl	_raw_spin_lock
	str	r4, [r7, #4]
	str	r6, [r7, #40]
	str	r6, [r7, #44]
	str	r6, [r7, #48]
	str	r7, [r4, #84]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #120]
	tst	r3, #1
	beq	.L16214
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L16215
.L16246:
	mov	r0, r4
	blx	r3
.L16215:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r7, #8]
	bl	netif_carrier_on
	ldr	r6, [r7, #8]
	ldr	r3, [r6, #120]
	tst	r3, #1
	beq	.L16218
	mov	r1, #32
	mov	r0, r7
	bl	rx_fill
	ldr	r2, [r7, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r7, #36]
	ldr	r6, [r2, #576]
	add	r1, r6, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L16247
	ldr	r0, [r6, #4]
	bl	__netif_schedule
	b	.L16247
.L16214:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L16246
	b	.L16215
.L16249:
	movw	r0, #:lower16:.LC925
	ldr	r1, .L16254
	mvn	r6, #11
	movt	r0, #:upper16:.LC925
	bl	printk
	b	.L16218
.L16255:
	.align	2
.L16254:
	.word	.LANCHOR3+756
	.fnend
	.size	rndis_set_alt, .-rndis_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_disable, %function
ecm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16257
	bl	gether_disconnect
.L16257:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16256
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L16256:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_disable, .-ecm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_set_alt, %function
ecm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	ip, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	ip, r1
	ldr	r6, [r3, #24]
	beq	.L16291
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L16272
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16273
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L16273:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16274
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16274
.L16275:
	cmp	r5, #1
	beq	.L16292
.L16278:
	ldr	r6, [r4, #168]
	mov	r3, #1
	strb	r3, [r4, #172]
	cmp	r6, #0
	beq	.L16280
	ldr	r3, [r6]
	mov	r5, #0
	mov	r1, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r2, #32
	strb	r5, [r3, #1]
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	str	r1, [r6, #4]
	mov	r1, r6
	strb	ip, [r4, #172]
	strb	r0, [r3]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r5, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	blt	.L16293
.L16280:
	mov	r0, #0
.L16266:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16292:
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC333
	movt	r0, #:upper16:.LC333
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strb	r2, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	bls	.L16278
	b	.L16266
.L16274:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16277
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L16275
.L16277:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L16266
.L16291:
	cmp	r2, #0
	bne	.L16272
	ldr	r0, [r0, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16270
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L16270:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L16294
.L16271:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L16266
.L16293:
	mov	r0, r5
	str	r6, [r4, #168]
	b	.L16266
.L16272:
	mvn	r0, #21
	b	.L16266
.L16294:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16272
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L16271
	.fnend
	.size	ecm_set_alt, .-ecm_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_disable, %function
ncm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16296
	bl	gether_disconnect
.L16296:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16295
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L16295:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_disable, .-ncm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_set_alt, %function
ncm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	str	lr, [sp, #8]
	ldrb	r0, [r0, #148]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r5, [r3, #24]
	beq	.L16329
	ldrb	r3, [r4, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	movne	r3, #1
	moveq	r3, #0
	bne	.L16311
	cmp	r2, #0
	beq	.L16318
	ldr	r2, [r4, #88]
	ldr	r1, [r2]
	cmp	r1, #0
	bne	.L16330
.L16312:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16313
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16313
.L16314:
	ldr	r3, [r5]
	movw	r0, #:lower16:.LC333
	movt	r0, #:upper16:.LC333
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strb	r2, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L16318
	ldrh	r3, [r4, #182]
	str	r2, [r4, #184]
	movw	r0, #:lower16:.LC927
	movt	r0, #:upper16:.LC927
	sub	r3, r3, #14
	str	r3, [r2, #316]
	ldr	r3, [r4, #184]
	ldr	r1, [r3, #316]
	bl	printk
	mov	r0, #0
	b	.L16305
.L16318:
	mov	r0, r2
.L16305:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L16329:
	cmp	r2, #0
	bne	.L16311
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16309
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L16309:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L16331
.L16310:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L16305
.L16313:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16316
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L16314
.L16316:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L16305
.L16311:
	mvn	r0, #21
	b	.L16305
.L16331:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16311
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L16310
.L16330:
	movw	r0, #:lower16:.LC926
	ldr	r1, .L16332
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC926
	bl	printk
	mov	r0, r4
	bl	gether_disconnect
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LANCHOR0
	mov	r2, #15
	movt	r1, #:upper16:.LANCHOR0
	add	r0, r1, #76
	strh	r2, [r4, #98]	@ movhi
	ldr	r2, [r4, #88]
	str	r3, [r4, #100]
	str	r0, [r4, #176]
	mov	r0, #16384
	strb	r3, [r4, #180]
	ldr	r1, [r1, #36]
	str	r3, [r4, #184]
	movw	r3, #9014
	str	r1, [r4, #108]
	str	r0, [r4, #112]
	strh	r3, [r4, #182]	@ movhi
	b	.L16312
.L16333:
	.align	2
.L16332:
	.word	.LANCHOR3+772
	.fnend
	.size	ncm_set_alt, .-ncm_set_alt
	.align	2
	.global	gether_qc_get_macs
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_get_macs, %function
gether_qc_get_macs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR6
	mov	r5, r1
	movt	r4, #:upper16:.LANCHOR6
	mov	r1, r0
	str	r6, [sp, #8]
	ldr	r0, [r4, #-4068]
	str	lr, [sp, #12]
	bl	get_qc_ether_addr
	ldr	r6, [sp, #8]
	mov	r1, r5
	ldr	r0, [r4, #-4064]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	get_qc_ether_addr
	.fnend
	.size	gether_qc_get_macs, .-gether_qc_get_macs
	.align	2
	.global	gether_qc_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup_name, %function
gether_qc_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r2
	mov	r2, #1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	strd	r0, [sp, #8]
	mov	r0, #28
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r5, r0, #0
	beq	.L16354
	mov	r1, #0
	movw	r2, #:lower16:.LC665
	movw	fp, #:lower16:.LANCHOR6
	mov	r3, r4
	str	r1, [r5, #1216]
	movt	r2, #:upper16:.LC665
	movt	fp, #:upper16:.LANCHOR6
	str	r5, [r5, #1224]
	mov	r1, #16
	bl	snprintf
	ldr	r4, [fp, #-4068]
	add	r3, r6, #32
	ldr	r6, [r5, #444]
	str	r3, [sp, #4]
	cmp	r4, #0
	subne	r9, r6, #1
	addne	r10, r6, #5
	bne	.L16340
	b	.L16344
.L16365:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r7, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r7, lsl #4
	strb	r0, [r9, #1]!
	cmp	r10, r9
	beq	.L16343
.L16342:
	mov	r4, r8
.L16340:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r8, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L16365
	bl	hex_to_bin
	mov	r8, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r8, lsl #4
	add	r8, r4, #2
	strb	r0, [r9, #1]!
	cmp	r10, r9
	bne	.L16342
.L16343:
	ldrb	r3, [r6]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L16366
.L16344:
	mov	r1, #6
	mov	r0, r6
	bl	get_random_bytes
	ldrb	r3, [r6]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC666
	movw	r1, #:lower16:.LC667
	movt	r2, #:upper16:.LC666
	movt	r1, #:upper16:.LC667
	ldr	r0, [sp, #4]
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r6]
	bl	dev_warn
.L16339:
	ldr	r4, [fp, #-4064]
	add	r6, r5, #1216
	add	r7, r6, #21
	cmp	r4, #0
	addne	fp, r5, #1232
	addne	r6, r6, #26
	addne	fp, fp, #4
	bne	.L16347
	b	.L16351
.L16367:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r10, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r10, lsl #4
	strb	r0, [fp, #1]!
	cmp	r6, fp
	beq	.L16350
.L16349:
	mov	r4, r9
.L16347:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r9, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L16367
	bl	hex_to_bin
	mov	r9, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r9, lsl #4
	add	r9, r4, #2
	strb	r0, [fp, #1]!
	cmp	r6, fp
	bne	.L16349
.L16350:
	ldrb	r3, [r5, #1237]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L16368
.L16351:
	mov	r1, #6
	mov	r0, r7
	bl	get_random_bytes
	ldrb	r3, [r5, #1237]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC928
	movw	r1, #:lower16:.LC667
	movt	r2, #:upper16:.LC928
	movt	r1, #:upper16:.LC667
	ldr	r0, [sp, #4]
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r5, #1237]
	bl	dev_warn
.L16346:
	ldr	r2, [sp, #12]
	cmp	r2, #0
	beq	.L16352
	ldr	r3, [r7]	@ unaligned
	str	r3, [r2]	@ unaligned
	ldrh	r3, [r7, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
.L16352:
	ldr	r3, .L16369
	mov	r0, r5
	add	r2, r3, #136
	str	r3, [r5, #288]
	str	r2, [r5, #292]
	bl	netif_carrier_off
	ldr	r2, [sp, #4]
	mov	r0, r5
	ldr	r3, .L16369+4
	str	r2, [r5, #688]
	ldr	r2, [sp, #8]
	str	r3, [r5, #736]
	str	r2, [r5, #1228]
	bl	register_netdev
	subs	r4, r0, #0
	bge	.L16353
	mov	r0, r5
	bl	free_netdev
.L16336:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16366:
	ldrb	r1, [r6, #1]	@ zero_extendqisi2
	ldrb	r2, [r6, #2]	@ zero_extendqisi2
	ldrb	r0, [r6, #3]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r6, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r6, #5]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L16344
	b	.L16339
.L16368:
	ldrb	r1, [r5, #1238]	@ zero_extendqisi2
	ldrb	r2, [r5, #1239]	@ zero_extendqisi2
	ldrb	r0, [r5, #1240]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r5, #1241]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r5, #1242]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L16351
	b	.L16346
.L16354:
	mvn	r4, #11
	b	.L16336
.L16353:
	movw	r0, #:lower16:.LC669
	ldr	r2, [r5, #444]
	ldr	r1, [r5, #1224]
	movt	r0, #:upper16:.LC669
	bl	printk
	movw	r0, #:lower16:.LC670
	mov	r2, r7
	ldr	r1, [r5, #1224]
	movt	r0, #:upper16:.LC670
	bl	printk
	b	.L16336
.L16370:
	.align	2
.L16369:
	.word	.LANCHOR3+784
	.word	.LANCHOR5-924
	.fnend
	.size	gether_qc_setup_name, .-gether_qc_setup_name
	.align	2
	.global	gether_qc_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup, %function
gether_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r2, #:lower16:.LC921
	movt	r2, #:upper16:.LC921
	b	gether_qc_setup_name
	.fnend
	.size	gether_qc_setup, .-gether_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_bind_config, %function
rndis_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r7, #:upper16:__stack_chk_guard
	strd	r10, [sp, #24]
	ldr	r3, [r7]
	str	lr, [sp, #32]
	ldr	r4, [r0, #4]
	.pad #60
	sub	sp, sp, #60
	str	r3, [sp, #52]
	cmp	r4, #0
	beq	.L16420
	mov	r6, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC663
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC663
	ldr	r2, .L16430
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC664
	mov	r1, r4
	movt	r2, #:upper16:.LC664
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r10, r0, #0
	bne	.L16421
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16376
	movw	r3, #:lower16:.LANCHOR5
	mvn	r1, #31
	movt	r3, #:upper16:.LANCHOR5
	mov	ip, #1
	sub	r2, r3, #1984
	mov	r0, #480
	sub	r2, r2, #4
	strb	r1, [r3, #-1975]
	mov	r1, #3
	strh	r0, [r2, #4]	@ movhi
	strb	r1, [r3, #-1982]
	strb	ip, [r3, #-1974]
	strb	r1, [r3, #-1973]
.L16376:
	movw	r5, #:lower16:.LANCHOR1
	ldr	r3, [r4, #8]
	movt	r5, #:upper16:.LANCHOR1
	ldrb	r9, [r4, #12]	@ zero_extendqisi2
	ldrb	r8, [r5, #4044]	@ zero_extendqisi2
	str	r3, [sp, #28]
	cmp	r8, #0
	beq	.L16422
	ldr	r3, [r5, #3352]
	cmp	r3, #0
	beq	.L16423
.L16380:
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldrb	r2, [r3, #-964]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L16384
	ldr	r1, [r6, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L16386
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r2, [r3, #-1972]
	strb	r2, [r3, #-964]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L16386
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r2, [r3, #-1952]
	strb	r2, [r3, #-956]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L16386
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-1981]
	strb	r2, [r3, #-948]
.L16384:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16396
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L16424
.L16387:
	ldr	r1, [r4]	@ unaligned
	movw	r3, #:lower16:rndis_qc_add_header
	cmp	r9, #0
	ldr	r2, .L16430+4
	movt	r3, #:upper16:rndis_qc_add_header
	moveq	r9, #15
	mov	fp, #0
	add	r4, r4, #13
	str	r1, [r8, #122]	@ unaligned
	movw	r1, #:lower16:.LC664
	ldrh	r0, [r4, #-9]	@ unaligned
	movt	r1, #:upper16:.LC664
	str	r3, [r8, #104]
	movw	r3, #:lower16:rndis_qc_bind
	stm	r8, {r1, r2}
	movw	r2, #:lower16:rndis_qc_rm_hdr
	movt	r3, #:upper16:rndis_qc_bind
	movt	r2, #:upper16:rndis_qc_rm_hdr
	movw	r1, #:lower16:rndis_qc_unbind
	str	r6, [r8, #20]
	str	r3, [r8, #32]
	movw	r3, #:lower16:rndis_qc_setup
	movt	r1, #:upper16:rndis_qc_unbind
	movt	r3, #:upper16:rndis_qc_setup
	str	r2, [r8, #108]
	movw	r2, #:lower16:rndis_qc_set_alt
	movt	r2, #:upper16:rndis_qc_set_alt
	str	r1, [r8, #36]
	movw	r1, #:lower16:rndis_qc_disable
	str	r3, [r8, #52]
	movw	r3, #:lower16:rndis_qc_resume
	movt	r1, #:upper16:rndis_qc_disable
	str	r2, [r8, #40]
	movw	r2, #:lower16:rndis_qc_suspend
	movt	r3, #:upper16:rndis_qc_resume
	movt	r2, #:upper16:rndis_qc_suspend
	str	r1, [r8, #48]
	strh	fp, [r8, #98]	@ movhi
	strd	r2, [r8, #56]
	mov	r2, #44
	add	r3, r8, #72
	strb	r9, [r8, #132]
	str	r2, [r8, #100]
	ldr	r2, [sp, #28]
	strh	r0, [r8, #126]	@ unaligned
	str	r4, [r8, #140]
	str	r2, [r8, #128]
	ldr	r1, [r6, #40]
	add	r2, r6, #36
	str	r3, [r6, #40]
	str	r2, [r8, #72]
	str	r1, [r8, #76]
	str	r3, [r1]
	ldr	r3, [r8, #32]
	cmp	r3, fp
	beq	.L16390
	mov	r1, r8
	mov	r0, r6
	blx	r3
	subs	r10, r0, #0
	blt	.L16425
.L16390:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16391
.L16429:
	ldr	r2, [r8, #16]
	cmp	r2, #0
	beq	.L16391
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L16391:
	tst	r3, #2
	bne	.L16392
	ldr	r2, [r8, #8]
	cmp	r2, #0
	beq	.L16392
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L16392:
	tst	r3, #1
	bne	.L16393
	ldr	r3, [r8, #12]
	cmp	r3, #0
	beq	.L16393
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L16393:
	cmp	r10, #0
	streq	r8, [r5, #2528]
	beq	.L16372
.L16388:
	mov	r0, r8
	mov	r4, #0
	bl	kfree
	ldrb	r3, [r5, #4044]	@ zero_extendqisi2
	str	r4, [r5, #2528]
	cmp	r3, r4
	bne	.L16426
.L16372:
	ldr	r2, [sp, #52]
	mov	r0, r10
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L16427
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16422:
	ldr	fp, .L16430+8
	movw	r1, #:lower16:.LC543
	mov	r2, r8
	movt	r1, #:upper16:.LC543
	add	r0, sp, #32
	bl	sprintf
	add	r0, sp, #32
	ldr	r3, .L16430+12
	mov	r2, r8
	mov	r1, #432
	str	fp, [sp]
	bl	proc_create_data
	cmp	r0, #0
	beq	.L16428
	mov	r3, #1
	add	fp, fp, #52
	str	r8, [r5, #3640]
	movw	r2, #3636
	str	r3, [r5, #3652]
	strb	r3, [r5, #4044]
	ldr	r3, [r5, #3352]
	strh	r8, [r5, r2]	@ movhi
	str	fp, [r5, #3688]
	str	fp, [r5, #3692]
	cmp	r3, #0
	bne	.L16380
.L16423:
	movw	r0, #:lower16:.LC637
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC637
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #3352]
	beq	.L16381
	bl	bam_data_setup.part.103
	subs	r8, r0, #0
	beq	.L16380
.L16382:
	movw	r0, #:lower16:.LC639
	mov	r2, r8
	ldr	r1, .L16430+16
	movt	r0, #:upper16:.LC639
	mov	r10, r8
	bl	printk
	movw	r0, #:lower16:.LC640
	ldr	r1, .L16430+20
	movt	r0, #:upper16:.LC640
	bl	printk
	b	.L16372
.L16425:
	ldrd	r2, [r8, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	fp, [r8, #20]
	strd	r0, [r8, #72]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16391
	b	.L16429
.L16396:
	mov	r8, #16
	b	.L16387
.L16426:
	movw	r1, #:lower16:.LC543
	mov	r2, r4
	strb	r4, [r5, #4044]
	movt	r1, #:upper16:.LC543
	add	r0, sp, #32
	bl	sprintf
	add	r0, sp, #32
	mov	r1, r4
	bl	remove_proc_entry
	b	.L16372
.L16424:
	mvn	r10, #11
	b	.L16388
.L16386:
	mvn	r10, #18
	b	.L16372
.L16420:
	ldr	r2, .L16430
	movw	r0, #:lower16:.LC662
	mvn	r10, #21
	movt	r0, #:upper16:.LC662
	mov	r1, r2
	bl	printk
	b	.L16372
.L16428:
	mvn	r10, #4
	b	.L16372
.L16421:
	ldr	r2, .L16430
	movw	r0, #:lower16:.LC671
	movt	r0, #:upper16:.LC671
	mov	r1, r2
	bl	printk
	b	.L16372
.L16427:
	bl	__stack_chk_fail
.L16381:
	movw	r0, #:lower16:.LC638
	ldr	r1, .L16430+24
	mvn	r8, #11
	movt	r0, #:upper16:.LC638
	bl	printk
	b	.L16382
.L16431:
	.align	2
.L16430:
	.word	.LANCHOR3+1084
	.word	.LANCHOR5-932
	.word	.LANCHOR1+3636
	.word	.LANCHOR3-1780
	.word	.LANCHOR3+680
	.word	.LANCHOR3+700
	.word	.LANCHOR2+3704
	.fnend
	.size	rndis_qc_function_bind_config, .-rndis_qc_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_bind_config, %function
ecm_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r8, [r0, #4]
	.pad #24
	sub	sp, sp, #24
	cmp	r8, #0
	beq	.L16473
	ldr	r0, .L16479
	mov	r5, r1
	bl	strim
	mov	r1, r0
	mov	r10, r0
	movw	r0, #:lower16:.LC417
	movt	r0, #:upper16:.LC417
	bl	strcmp
	cmp	r0, #0
	bne	.L16474
.L16435:
	ldr	r3, [r5, #24]
	movw	r0, #:lower16:.LC326
	movt	r0, #:upper16:.LC326
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L16450
	movw	r0, #:lower16:.LC329
	mov	r1, r4
	movt	r0, #:upper16:.LC329
	bl	strcmp
	cmp	r0, #0
	beq	.L16450
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #3352]
	cmp	r3, #0
	beq	.L16475
.L16436:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #1344]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16439
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16441
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #1344]
	strb	r3, [r6, #3560]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16441
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r6, #1360]
	strb	r3, [r6, #3592]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16441
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR5
	strb	r3, [r1, #48]
	strb	r3, [r2, #-1009]
	strb	r3, [r6, #1352]
.L16439:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16451
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16476
.L16442:
	mov	r0, r10
	add	r7, r4, #128
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #124]
	beq	.L16477
	ldrb	ip, [r8, #5]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC897
	mov	r1, #14
	ldrb	r3, [r8]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC897
	mov	r0, r7
	str	ip, [sp, #16]
	ldrb	ip, [r8, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r8, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r8, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r8, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
.L16444:
	ldr	lr, .L16479+4
	movw	r3, #:lower16:.LC898
	movw	r0, #:lower16:ecm_qc_bind
	movw	r2, #:lower16:ecm_qc_unbind
	movw	r1, #:lower16:ecm_qc_set_alt
	str	r7, [r6, #1356]
	movt	r3, #:upper16:.LC898
	movt	r0, #:upper16:ecm_qc_bind
	movt	r2, #:upper16:ecm_qc_unbind
	movt	r1, #:upper16:ecm_qc_set_alt
	movw	ip, #:lower16:ecm_qc_get_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:ecm_qc_setup
	movt	ip, #:upper16:ecm_qc_get_alt
	movt	r3, #:upper16:ecm_qc_setup
	str	r5, [r4, #20]
	str	r0, [r4, #32]
	movw	r0, #:lower16:ecm_qc_disable
	str	r2, [r4, #36]
	movw	r2, #:lower16:ecm_qc_suspend
	movt	r0, #:upper16:ecm_qc_disable
	str	r1, [r4, #40]
	movw	r1, #:lower16:ecm_qc_resume
	movt	r2, #:upper16:ecm_qc_suspend
	str	ip, [r4, #44]
	movt	r1, #:upper16:ecm_qc_resume
	mov	ip, #15
	str	r0, [r4, #48]
	str	r3, [r4, #52]
	add	r3, r4, #72
	str	r2, [r4, #56]
	add	r2, r5, #36
	str	r1, [r4, #60]
	strh	ip, [r4, #98]	@ movhi
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L16445
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	bge	.L16445
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #72]
.L16445:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16446
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L16446
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L16446:
	tst	r3, #2
	bne	.L16447
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L16447
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L16447:
	tst	r3, #1
	bne	.L16448
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L16448
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L16448:
	cmp	r7, #0
	bne	.L16478
.L16432:
	mov	r0, r7
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16474:
	ldr	r3, [r5, #24]
	movw	r2, #:lower16:.LC923
	mov	r1, r8
	movt	r2, #:upper16:.LC923
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r7, r0, #0
	beq	.L16435
	ldr	r2, .L16479+8
	movw	r0, #:lower16:.LC671
	movt	r0, #:upper16:.LC671
	mov	r1, r2
	bl	printk
	b	.L16432
.L16451:
	mov	r4, #16
	b	.L16442
.L16477:
	movw	r8, #:lower16:.LANCHOR6
	ldr	r1, .L16479+12
	movt	r8, #:upper16:.LANCHOR6
	ldr	r0, [r8, #-4068]
	bl	get_qc_ether_addr
	ldr	r1, .L16479+16
	ldr	r0, [r8, #-4064]
	bl	get_qc_ether_addr
	ldrb	r3, [r9, #3537]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC897
	mov	r1, #14
	ldrb	r10, [r9, #3536]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC897
	mov	r0, r7
	ldrb	r8, [r9, #3535]	@ zero_extendqisi2
	ldrb	lr, [r9, #3534]	@ zero_extendqisi2
	ldrb	ip, [r9, #3533]	@ zero_extendqisi2
	str	r10, [sp, #12]
	str	r3, [sp, #16]
	ldrb	r3, [r9, #3532]	@ zero_extendqisi2
	stm	sp, {ip, lr}
	str	r8, [sp, #8]
	bl	snprintf
	b	.L16444
.L16475:
	movw	r0, #:lower16:.LC637
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC637
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r9, #3352]
	beq	.L16437
	bl	bam_data_setup.part.103
	subs	r7, r0, #0
	beq	.L16436
.L16438:
	movw	r0, #:lower16:.LC639
	mov	r2, r7
	ldr	r1, .L16479+20
	movt	r0, #:upper16:.LC639
	bl	printk
	movw	r0, #:lower16:.LC640
	ldr	r1, .L16479+24
	movt	r0, #:upper16:.LC640
	bl	printk
	b	.L16432
.L16450:
	mvn	r7, #21
	b	.L16432
.L16441:
	mvn	r7, #18
	b	.L16432
.L16476:
	mvn	r7, #11
	b	.L16432
.L16473:
	ldr	r2, .L16479+8
	movw	r0, #:lower16:.LC922
	mvn	r7, #21
	movt	r0, #:upper16:.LC922
	mov	r1, r2
	bl	printk
	b	.L16432
.L16478:
	movw	r0, #:lower16:.LC899
	ldr	r1, .L16479+24
	movt	r0, #:upper16:.LC899
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #1356]
	bl	kfree
	b	.L16432
.L16437:
	movw	r0, #:lower16:.LC638
	ldr	r1, .L16479+28
	mvn	r7, #11
	movt	r0, #:upper16:.LC638
	bl	printk
	b	.L16438
.L16480:
	.align	2
.L16479:
	.word	.LANCHOR1+3124
	.word	.LANCHOR5-996
	.word	.LANCHOR3+1116
	.word	.LANCHOR1+3538
	.word	.LANCHOR1+3532
	.word	.LANCHOR3+524
	.word	.LANCHOR3+544
	.word	.LANCHOR2+3704
	.fnend
	.size	ecm_qc_function_bind_config, .-ecm_qc_function_bind_config
	.align	2
	.global	gether_qc_cleanup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_cleanup_name, %function
gether_qc_cleanup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r0
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L16481
	.syntax divided
@ 17 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L16481:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_qc_cleanup_name, .-gether_qc_cleanup_name
	.align	2
	.global	gether_qc_connect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_connect_name, %function
gether_qc_connect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L16487
	.syntax divided
@ 17 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r7, r4, #1216
	beq	.L16487
	ldrb	r3, [r5, #96]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r4, #1236]
	ldr	r3, [r5, #100]
	str	r3, [r4, #1232]
	bl	_raw_spin_lock
	str	r5, [r4, #1220]
	str	r7, [r5, #84]
	ldr	r3, [r4, #1224]
	ldr	r3, [r3, #120]
	tst	r3, #1
	beq	.L16488
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L16489
.L16506:
	mov	r0, r5
	blx	r3
.L16489:
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r6, #0
	ldr	r0, [r4, #1224]
	beq	.L16484
	bl	netif_carrier_on
	ldr	r0, [r4, #1224]
	ldr	r3, [r0, #120]
	tst	r3, #1
	beq	.L16484
	ldr	r5, [r0, #576]
	mov	r0, #0
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L16492
.L16507:
	ldr	r0, [r4, #1224]
	b	.L16484
.L16487:
	mvn	r0, #21
.L16484:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16488:
	ldr	r3, [r5, #116]
	cmp	r3, #0
	bne	.L16506
	b	.L16489
.L16492:
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L16507
	.fnend
	.size	gether_qc_connect_name, .-gether_qc_connect_name
	.align	2
	.global	gether_qc_disconnect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_disconnect_name, %function
gether_qc_disconnect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L16508
	.syntax divided
@ 17 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r6, r4, #1216
	beq	.L16508
	ldr	r3, [r4, #1224]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L16518
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L16513:
	ldr	r0, [r4, #1224]
	bl	netif_carrier_off
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #1220]
	str	r3, [r5, #84]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L16508:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16518:
	movw	r0, #:lower16:.LC95
	movw	r1, #1847
	movt	r0, #:upper16:.LC95
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC96
	movt	r0, #:upper16:.LC96
	bl	printk
	b	.L16513
	.fnend
	.size	gether_qc_disconnect_name, .-gether_qc_disconnect_name
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_disable, %function
ecm_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16521
	movw	r5, #:lower16:.LANCHOR1
	add	r3, r0, #156
	movt	r5, #:upper16:.LANCHOR1
	ldr	r2, [r5, #3628]
	cmp	r2, #0
	ble	.L16548
	cmp	r3, #0
	beq	.L16549
	ldr	r6, [r5, #3348]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L16525
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L16525
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L16525
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r6, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r6, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r6, #4]
.L16525:
	ldr	r3, [r6, #60]
	cmp	r3, #7
	beq	.L16550
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L16551
.L16523:
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L16521
	movw	r1, #:lower16:.LC571
	mov	r0, r4
	movt	r1, #:upper16:.LC571
	bl	gether_qc_disconnect_name
.L16521:
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16519
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #144]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #144]
	str	r3, [r2, #28]
.L16519:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16550:
	add	r2, r6, #184
	ldr	r1, [r5, #3352]
	mov	r0, #4
	bl	queue_work_on
	b	.L16523
.L16548:
	movw	r0, #:lower16:.LC442
	mov	r2, #0
	ldr	r1, .L16552
	movt	r0, #:upper16:.LC442
	bl	printk
	b	.L16523
.L16549:
	movw	r0, #:lower16:.LC443
	ldr	r1, .L16552
	movt	r0, #:upper16:.LC443
	bl	printk
	b	.L16523
.L16551:
	ldr	r2, .L16552
	movw	r0, #:lower16:.LC444
	movt	r0, #:upper16:.LC444
	mov	r1, r2
	bl	printk
	b	.L16523
.L16553:
	.align	2
.L16552:
	.word	.LANCHOR2+3832
	.fnend
	.size	ecm_qc_disable, .-ecm_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_set_alt, %function
ecm_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r0, [r0, #120]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L16600
	ldrb	r3, [r4, #121]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L16599
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16561
	add	r0, r4, #156
	bl	bam_data_disconnect.constprop.123
	ldr	r3, [r4, #124]
	cmp	r3, #7
	bne	.L16562
	ldr	r2, [r4, #88]
.L16561:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16563
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16563
.L16564:
	cmp	r5, #1
	bne	.L16598
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC333
	movt	r0, #:upper16:.LC333
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, [r4, #124]
	adds	r0, r0, #0
	mov	r2, #15
	movne	r0, #1
	strb	r0, [r4, #96]
	cmp	r3, #7
	strh	r2, [r4, #98]	@ movhi
	beq	.L16569
	movw	r1, #:lower16:.LC571
	mov	r2, r5
	movt	r1, #:upper16:.LC571
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	bhi	.L16554
	ldr	r2, [r4, #20]
	ldr	r3, [r4, #124]
	ldr	r2, [r2, #24]
	cmp	r3, #7
	movne	r7, #0
	moveq	r7, #2
	ldr	r5, [r2]
.L16571:
	ldr	ip, [r4, #88]
	mov	r3, #0
	mov	r1, r7
	ldr	r0, [r4, #92]
	str	r2, [r4, #156]
	mov	r2, r3
	str	r4, [r4, #160]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	str	ip, [r4, #164]
	str	r0, [r4, #168]
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx
	uxtb	r10, r0
	mov	r1, r7
	ldr	r0, [r5, #28]
	mov	r3, #0
	mov	r2, #1
	add	r7, r4, #156
	bl	usb_bam_get_connection_idx
	ldr	r3, [r6, #3628]
	uxtb	r9, r0
	ldr	r8, [r4, #124]
	cmp	r3, #0
	ble	.L16601
	cmp	r7, #0
	beq	.L16602
	ldr	r3, [r4, #164]
	ldr	r5, [r6, #3348]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L16603
	ldr	r3, [r4, #164]
	str	r5, [r3]
	ldr	r3, [r4, #168]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L16604
	ldr	r3, [r4, #168]
	cmp	r8, #7
	str	r5, [r3]
	str	r7, [r5, #4]
	strb	r10, [r5, #52]
	strb	r9, [r5, #53]
	str	fp, [r5, #56]
	str	r8, [r5, #60]
	bne	.L16577
	add	r2, r5, #44
	add	r3, r5, #48
	strb	r10, [r5, #64]
	strb	r9, [r5, #65]
	strd	r2, [r5, #68]
.L16577:
	add	r2, r5, #168
	ldr	r1, [r6, #3352]
	mov	r0, #4
	bl	queue_work_on
	ldr	r6, [r4, #148]
	mov	r5, #1
	strb	r5, [r4, #152]
	strb	r5, [r4, #153]
	cmp	r6, #0
	beq	.L16582
	ldr	r3, [r6]
	mov	ip, #0
	mov	r2, #8
	mov	r1, #2
	mvn	r0, #94
	strb	ip, [r3, #1]
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	r2, [r6, #4]
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r6
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	ip, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L16598
	str	r6, [r4, #148]
	strb	r5, [r4, #152]
	b	.L16581
.L16598:
	ldr	r6, [r4, #148]
	mov	r3, #1
	strb	r3, [r4, #152]
	cmp	r6, #0
	beq	.L16582
.L16581:
	ldr	r3, [r6]
	mov	r5, #0
	mov	r1, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r2, #32
	strb	r5, [r3, #1]
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	str	r1, [r6, #4]
	mov	r1, r6
	strb	ip, [r4, #152]
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r5, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	movlt	r0, r5
	strlt	r6, [r4, #148]
	blt	.L16554
.L16582:
	mov	r0, #0
.L16554:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16563:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16566
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L16564
.L16566:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L16554
.L16600:
	cmp	r2, #0
	bne	.L16599
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16558
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #144]
.L16558:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L16605
.L16559:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #144]
	mov	r0, #0
	str	r4, [r3]
	b	.L16554
.L16562:
	movw	r1, #:lower16:.LC571
	mov	r0, r4
	movt	r1, #:upper16:.LC571
	bl	gether_qc_disconnect_name
	ldr	r2, [r4, #88]
	b	.L16561
.L16604:
	movw	r0, #:lower16:.LC582
	ldr	r2, [r4, #168]
	movt	r0, #:upper16:.LC582
	ldr	r1, .L16606
	bl	printk
	ldr	r3, [r4, #164]
	mov	r2, #0
	str	r2, [r3]
.L16573:
	movw	r0, #:lower16:.LC929
	mov	r2, fp
	ldr	r1, .L16606+4
	movt	r0, #:upper16:.LC929
	bl	printk
.L16599:
	mvn	r0, #21
	b	.L16554
.L16569:
	ldr	r3, [r4, #20]
	mov	r7, #2
	ldr	r2, [r3, #24]
	ldr	r5, [r2]
	b	.L16571
.L16605:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16599
	ldr	r0, [r4, #144]
	ldr	r1, [r0, #28]
	b	.L16559
.L16601:
	movw	r0, #:lower16:.LC99
	mov	r2, #0
	ldr	r1, .L16606
	movt	r0, #:upper16:.LC99
	mvn	fp, #18
	bl	printk
	b	.L16573
.L16603:
	movw	r0, #:lower16:.LC581
	ldr	r1, .L16606
	ldr	r2, [r4, #164]
	movt	r0, #:upper16:.LC581
	bl	printk
	b	.L16573
.L16602:
	movw	r0, #:lower16:.LC443
	ldr	r1, .L16606
	movt	r0, #:upper16:.LC443
	bl	printk
	movw	r0, #:lower16:.LC929
	mvn	r2, #18
	ldr	r1, .L16606+4
	movt	r0, #:upper16:.LC929
	bl	printk
	mvn	r0, #21
	b	.L16554
.L16607:
	.align	2
.L16606:
	.word	.LANCHOR3+624
	.word	.LANCHOR3+1144
	.fnend
	.size	ecm_qc_set_alt, .-ecm_qc_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_disable, %function
rndis_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC930
	strd	r6, [sp, #8]
	ldr	r1, .L16635
	movt	r0, #:upper16:.LC930
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	printk
	ldr	r2, [r4, #144]
	cmp	r2, #0
	ble	.L16610
.L16615:
	add	r0, r4, #168
	bl	bam_data_disconnect.constprop.123
	movw	r1, #:lower16:.LC537
	mov	r0, r4
	movt	r1, #:upper16:.LC537
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16610:
	mov	r5, #60
	movw	r3, #:lower16:.LANCHOR1
	ldr	r0, .L16635+4
	movt	r3, #:upper16:.LANCHOR1
	mov	r1, #0
	mul	r5, r5, r2
	add	r3, r3, r5
	add	r5, r5, r0
	add	r8, r3, #3680
	add	r8, r8, #8
	str	r1, [r3, #3640]
.L16611:
	ldr	r3, [r8]
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L16615
	ldr	r1, [r3, #16]
	cmp	r1, #0
	beq	.L16616
	mov	r3, r2
	b	.L16617
.L16621:
	mov	r3, r1
.L16617:
	cmp	r3, r5
	ldr	r1, [r3]
	beq	.L16615
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L16621
.L16616:
	ldr	r9, [r3, #8]
	mov	r2, #1
	str	r2, [r3, #16]
	cmp	r9, #0
	beq	.L16615
	ldr	r3, [r8]
	cmp	r3, r5
	beq	.L16611
	ldr	r6, [r3]
	mov	fp, #256
	mov	r10, #512
	mov	r7, r6
	b	.L16614
.L16613:
	cmp	r7, r5
	mov	r3, r7
	ldr	r6, [r6]
	beq	.L16611
	mov	r7, r6
.L16614:
	cmp	r3, #0
	beq	.L16613
	ldr	r2, [r3, #8]
	cmp	r9, r2
	bne	.L16613
	ldr	r2, [r3, #4]
	mov	r0, r3
	str	r2, [r6, #4]
	str	r6, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	bl	kfree
	b	.L16613
.L16636:
	.align	2
.L16635:
	.word	.LANCHOR3+1164
	.word	.LANCHOR1+3688
	.fnend
	.size	rndis_qc_disable, .-rndis_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_set_alt, %function
rndis_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L16667
	ldrb	r3, [r0, #121]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L16643
	ldr	r0, [r0, #88]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16644
	add	r0, r4, #168
	bl	bam_data_disconnect.constprop.123
	movw	r1, #:lower16:.LC537
	mov	r0, r4
	movt	r1, #:upper16:.LC537
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #88]
.L16644:
	ldr	r3, [r0, #28]
	cmp	r3, #0
	beq	.L16645
	ldr	ip, [r4, #92]
	ldr	r3, [ip, #28]
	cmp	r3, #0
	beq	.L16645
.L16646:
	ldr	r2, [r4, #20]
	mov	r6, #0
	movw	r7, #:lower16:.LANCHOR1
	mov	r3, r6
	mov	r1, r6
	strb	r6, [r4, #96]
	movt	r7, #:upper16:.LANCHOR1
	add	r9, r4, #168
	strh	r6, [r4, #98]	@ movhi
	ldr	lr, [r2, #24]
	mov	r2, r6
	ldr	r5, [lr]
	str	lr, [r4, #168]
	str	r4, [r4, #172]
	str	r0, [r4, #176]
	str	ip, [r4, #180]
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx
	uxtb	fp, r0
	mov	r3, r6
	ldr	r0, [r5, #28]
	mov	r1, r6
	mov	r2, #1
	bl	usb_bam_get_connection_idx
	ldr	r3, [r7, #3628]
	uxtb	r10, r0
	cmp	r3, r6
	ble	.L16668
	cmp	r9, #0
	beq	.L16669
	ldr	r3, [r4, #176]
	ldr	r5, [r7, #3348]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L16670
	ldr	r3, [r4, #176]
	str	r5, [r3]
	ldr	r3, [r4, #180]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L16671
	ldr	lr, [r4, #180]
	mov	r3, #6
	mov	ip, #2
	add	r2, r5, #168
	ldr	r1, [r7, #3352]
	mov	r0, #4
	str	r5, [lr]
	str	r9, [r5, #4]
	strb	fp, [r5, #52]
	strb	r10, [r5, #53]
	str	ip, [r5, #56]
	str	r3, [r5, #60]
	bl	queue_work_on
	movw	r0, #:lower16:.LC931
	ldr	r1, .L16675
	movt	r0, #:upper16:.LC931
	bl	printk
	movw	r1, #:lower16:.LC537
	mov	r2, r8
	mov	r0, r4
	movt	r1, #:upper16:.LC537
	bl	gether_qc_connect_name
	cmn	r0, #4096
	bhi	.L16672
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	r2, #0
	movne	r3, #1
	cmp	r3, #0
	beq	.L16673
.L16637:
	mov	r0, r8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16673:
	add	r4, r4, #98
	str	r8, [r7, #3572]
	str	r8, [r7, #3576]
	str	r4, [r7, #3660]
	str	r0, [r7, #3664]
	b	.L16637
.L16645:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16648
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16648
	ldr	r0, [r4, #88]
	ldr	ip, [r4, #92]
	b	.L16646
.L16667:
	ldr	r0, [r0, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16639
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #156]
.L16639:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L16674
.L16640:
	ldr	r3, [r0, #8]
	mov	r8, #0
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	str	r4, [r3]
	b	.L16637
.L16672:
	mov	r8, r0
	b	.L16637
.L16643:
	mvn	r8, #21
	b	.L16637
.L16648:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r8, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L16637
.L16674:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16643
	ldr	r0, [r4, #156]
	ldr	r1, [r0, #28]
	b	.L16640
.L16668:
	movw	r0, #:lower16:.LC99
	mov	r2, r6
	ldr	r1, .L16675+4
	movt	r0, #:upper16:.LC99
	mvn	r8, #18
	bl	printk
.L16650:
	movw	r0, #:lower16:.LC929
	mov	r2, r8
	ldr	r1, .L16675
	movt	r0, #:upper16:.LC929
	mvn	r8, #21
	bl	printk
	b	.L16637
.L16670:
	movw	r0, #:lower16:.LC581
	ldr	r1, .L16675+4
	ldr	r2, [r4, #176]
	movt	r0, #:upper16:.LC581
	bl	printk
	b	.L16650
.L16671:
	movw	r0, #:lower16:.LC582
	ldr	r1, .L16675+4
	movt	r0, #:upper16:.LC582
	ldr	r2, [r4, #180]
	bl	printk
	ldr	r3, [r4, #176]
	str	r6, [r3]
	b	.L16650
.L16669:
	movw	r0, #:lower16:.LC443
	ldr	r1, .L16675+4
	mvn	r8, #21
	movt	r0, #:upper16:.LC443
	bl	printk
	movw	r0, #:lower16:.LC929
	mvn	r2, #18
	ldr	r1, .L16675
	movt	r0, #:upper16:.LC929
	bl	printk
	b	.L16637
.L16676:
	.align	2
.L16675:
	.word	.LANCHOR3+1184
	.word	.LANCHOR3+624
	.fnend
	.size	rndis_qc_set_alt, .-rndis_qc_set_alt
	.align	2
	.global	pcm_buffer_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_buffer_size, %function
pcm_buffer_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #380]
	bx	lr
	.fnend
	.size	pcm_buffer_size, .-pcm_buffer_size
	.align	2
	.global	pcm_period_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_period_size, %function
pcm_period_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #332]
	bx	lr
	.fnend
	.size	pcm_period_size, .-pcm_period_size
	.align	2
	.global	u_audio_clear
	.syntax unified
	.arm
	.fpu softvfp
	.type	u_audio_clear, %function
u_audio_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2240]
	bx	lr
	.fnend
	.size	u_audio_clear, .-u_audio_clear
	.align	2
	.global	gaudio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_setup, %function
gaudio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L16714
	movw	r6, #:lower16:.LANCHOR5
	mov	r2, #0
	movt	r6, #:upper16:.LANCHOR5
	mov	r1, #2
	ldr	r0, [r6, #-900]
	bl	filp_open
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #92]
	bhi	.L16715
	mov	r2, #0
	mov	r1, #1
	ldr	r0, [r6, #-896]
	str	r4, [r4, #88]
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #120]
	bhi	.L16716
	ldr	r2, [r0, #124]
	movw	r7, #:lower16:kmalloc_caches
	mov	r3, #2
	movt	r7, #:upper16:kmalloc_caches
	mov	ip, #3
	ldr	r0, [r7, #40]
	ldr	r1, [r2]
	mov	r2, #8000
	str	r4, [r4, #116]
	cmp	r0, #0
	str	r1, [r4, #124]
	str	ip, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r2, [r4, #140]
	beq	.L16699
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L16717
.L16686:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.115
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	ldr	r1, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.117
	mov	r0, r5
	ldr	r1, [r4, #140]
	bl	_snd_pcm_hw_param_set.constprop.118
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L16700
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r1, #32
	bne	.L16687
.L16688:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L16702
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L16689
.L16690:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree
	mov	r2, #0
	ldr	r0, [r6, #-892]
	mov	r1, r2
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #148]
	bhi	.L16718
	ldr	r2, [r0, #124]
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r7, #40]
	mov	r1, #1
	mov	r3, #8000
	ldr	r2, [r2]
	str	r4, [r4, #144]
	cmp	r0, #0
	str	r2, [r4, #152]
	str	lr, [r4, #156]
	str	ip, [r4, #160]
	str	r1, [r4, #164]
	str	r3, [r4, #168]
	beq	.L16704
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L16719
.L16692:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #156]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.115
	ldr	r1, [r4, #160]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	ldr	r1, [r4, #164]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.117
	mov	r0, r5
	ldr	r1, [r4, #168]
	bl	_snd_pcm_hw_param_set.constprop.118
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L16705
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r1, #32
	bne	.L16694
.L16695:
	str	r3, [r4, #156]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L16707
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L16696
.L16697:
	str	r3, [r4, #160]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #164]
	ldr	r3, [r5, #296]
	str	r3, [r4, #168]
	bl	kfree
.L16684:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3632]
	cmp	r5, #0
	movne	r5, #0
	streq	r4, [r3, #3632]
.L16680:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16699:
	mov	r5, #16
	b	.L16686
.L16704:
	mov	r5, #16
	b	.L16692
.L16702:
	mov	r1, #0
.L16689:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L16690
.L16700:
	mov	r1, #0
.L16687:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L16688
.L16715:
	movw	r0, #:lower16:.LC932
	ldr	r1, .L16720
	movt	r0, #:upper16:.LC932
	ldr	r2, [r6, #-900]
	bl	printk
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #92]
	beq	.L16684
	b	.L16682
.L16705:
	mov	r1, #0
.L16694:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L16695
.L16707:
	mov	r1, #0
.L16696:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L16697
.L16716:
	movw	r0, #:lower16:.LC933
	ldr	r1, .L16720
	mvn	r5, #21
	movt	r0, #:upper16:.LC933
	ldr	r2, [r6, #-896]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #120]
.L16682:
	movw	r0, #:lower16:.LC937
	ldr	r1, .L16720+4
	movt	r0, #:upper16:.LC937
	bl	printk
	b	.L16680
.L16718:
	movw	r0, #:lower16:.LC935
	ldr	r1, .L16720
	mvn	r5, #21
	movt	r0, #:upper16:.LC935
	ldr	r2, [r6, #-892]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #144]
	str	r3, [r4, #148]
	str	r3, [r4, #152]
	b	.L16682
.L16717:
	movw	r0, #:lower16:.LC934
	mvn	r2, #11
	ldr	r1, .L16720
	movt	r0, #:upper16:.LC934
	mov	r5, r2
	bl	printk
	b	.L16682
.L16719:
	movw	r0, #:lower16:.LC936
	mvn	r2, #11
	ldr	r1, .L16720
	movt	r0, #:upper16:.LC936
	mov	r5, r2
	bl	printk
	b	.L16682
.L16714:
	ldr	r2, .L16720
	movw	r0, #:lower16:.LC426
	mvn	r5, #18
	movt	r0, #:upper16:.LC426
	mov	r1, r2
	bl	printk
	b	.L16682
.L16721:
	.align	2
.L16720:
	.word	.LANCHOR3+1208
	.word	.LANCHOR3+1228
	.fnend
	.size	gaudio_setup, .-gaudio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_function_bind_config, %function
audio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L16735
	mov	r2, #276
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16765
.L16723:
	ldr	ip, [r5, #24]
	movw	r3, #:lower16:.LANCHOR5
	movw	r0, #:lower16:.LC938
	movt	r3, #:upper16:.LANCHOR5
	movt	r0, #:upper16:.LC938
	sub	r6, r3, #888
	sub	r9, r3, #880
	sub	r7, r3, #848
	movw	lr, #:lower16:f_audio_get_alt
	ldr	r8, [ip]
	stm	r4, {r0, r6}
	movw	r6, #:lower16:f_audio_disable
	movt	r6, #:upper16:f_audio_disable
	movw	r0, #:lower16:f_audio_setup
	str	r7, [r3, #-876]
	movt	r0, #:upper16:f_audio_setup
	str	r9, [r3, #-848]
	movt	lr, #:upper16:f_audio_get_alt
	movw	r2, #:lower16:f_audio_bind
	movw	r1, #:lower16:f_audio_unbind
	str	r6, [r4, #48]
	add	r6, r4, #204
	movw	ip, #:lower16:f_audio_set_alt
	str	r8, [r4, #84]
	sub	r8, r3, #816
	sub	r10, r3, #728
	movt	r2, #:upper16:f_audio_bind
	movt	r1, #:upper16:f_audio_unbind
	str	r8, [r3, #-868]
	movt	ip, #:upper16:f_audio_set_alt
	str	r7, [r4, #252]
	sub	r7, r3, #872
	str	r8, [r3, #-772]
	add	r8, r4, #252
	str	r9, [r4, #256]
	sub	r9, r3, #772
	str	r0, [r4, #52]
	movw	r0, #:lower16:f_audio_capture_work
	str	r8, [r3, #-880]
	movt	r0, #:upper16:f_audio_capture_work
	str	r9, [r3, #-872]
	str	r8, [r3, #-844]
	sub	r8, r3, #840
	str	r10, [r3, #-836]
	str	r7, [r3, #-816]
	str	r9, [r3, #-812]
	sub	r9, r3, #684
	str	r7, [r3, #-768]
	mov	r7, #0
	str	lr, [r4, #44]
	movw	lr, #:lower16:f_audio_playback_work
	str	r6, [r4, #204]
	movt	lr, #:upper16:f_audio_playback_work
	str	r6, [r4, #208]
	add	r6, r4, #236
	str	r2, [r4, #32]
	sub	r2, r3, #3584
	str	r1, [r4, #36]
	sub	r1, r3, #3616
	str	ip, [r4, #40]
	mov	ip, #65024
	str	r7, [r4, #180]
	movt	ip, 65535
	str	r8, [r3, #-728]
	str	r9, [r3, #-724]
	str	r7, [r4, #212]
	str	r6, [r4, #236]
	str	r6, [r4, #240]
	sub	r6, r2, #8
	str	r10, [r3, #-684]
	movw	r10, #65472
	str	ip, [r4, #188]
	str	r0, [r4, #232]
	add	r0, r4, #224
	str	lr, [r4, #200]
	add	lr, r4, #192
	str	r6, [r3, #-3624]
	str	r0, [r4, #224]
	str	r0, [r4, #228]
	sub	r0, r3, #596
	str	lr, [r4, #192]
	str	lr, [r4, #196]
	sub	lr, r3, #640
	str	ip, [r4, #220]
	sub	ip, r1, #8
	str	lr, [r3, #-3616]
	str	r0, [r3, #-3584]
	str	r0, [r3, #-3580]
	add	r0, r4, #260
	str	ip, [r4, #260]
	str	ip, [r3, #-3588]
	mov	ip, #48
	str	r6, [r4, #264]
	movw	r6, #58272
	str	lr, [r3, #-3612]
	movw	lr, #65520
	str	r0, [r3, #-3620]
	str	r0, [r3, #-3592]
	mov	r0, r4
	str	r9, [r3, #-840]
	str	r10, [r3, #-752]
	str	r8, [r3, #-680]
	str	r1, [r3, #-640]
	str	r1, [r3, #-636]
	str	r2, [r3, #-596]
	str	r2, [r3, #-592]
	str	r6, [r3, #-748]
	str	lr, [r3, #-744]
	str	ip, [r3, #-740]
	str	r10, [r3, #-664]
	str	r6, [r3, #-660]
	str	lr, [r3, #-656]
	str	ip, [r3, #-652]
	bl	gaudio_setup
	subs	r6, r0, #0
	bge	.L16766
.L16725:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #3632]
	cmp	r7, #0
	beq	.L16731
	ldr	r0, [r7, #92]
	cmp	r0, #0
	beq	.L16732
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #728]
	bl	filp_close
.L16732:
	ldr	r0, [r7, #120]
	cmp	r0, #0
	beq	.L16733
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #728]
	bl	filp_close
.L16733:
	ldr	r0, [r7, #148]
	cmp	r0, #0
	beq	.L16734
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #728]
	bl	filp_close
.L16734:
	mov	r3, #0
	str	r3, [r5, #3632]
.L16731:
	mov	r0, r4
	bl	kfree
.L16722:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16766:
	ldr	r3, [r4, #40]
	cmp	r3, r7
	beq	.L16738
	ldr	r3, [r4, #48]
	cmp	r3, r7
	beq	.L16738
	str	r5, [r4, #20]
	ldr	r1, [r5, #40]
	add	r3, r4, #72
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r6, [r4, #32]
	cmp	r6, r7
	beq	.L16727
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L16727
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4, #20]
	strd	r0, [r4, #72]
.L16727:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16728
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L16728
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L16728:
	tst	r3, #2
	bne	.L16729
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L16729
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L16729:
	tst	r3, #1
	bne	.L16730
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L16730
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L16730:
	cmp	r6, #0
	beq	.L16722
	b	.L16726
.L16735:
	mov	r4, #16
	b	.L16723
.L16738:
	mvn	r6, #21
.L16726:
	ldr	r2, .L16767
	movw	r0, #:lower16:.LC939
	mov	r3, r6
	movt	r0, #:upper16:.LC939
	mov	r1, r2
	bl	printk
	b	.L16731
.L16765:
	mvn	r6, #11
	b	.L16722
.L16768:
	.align	2
.L16767:
	.word	.LANCHOR3+1244
	.fnend
	.size	audio_function_bind_config, .-audio_function_bind_config
	.align	2
	.global	gaudio_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_cleanup, %function
gaudio_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #3632]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L16769
	ldr	r0, [r5, #92]
	cmp	r0, #0
	beq	.L16771
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #728]
	bl	filp_close
.L16771:
	ldr	r0, [r5, #120]
	cmp	r0, #0
	beq	.L16772
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #728]
	bl	filp_close
.L16772:
	ldr	r0, [r5, #148]
	cmp	r0, #0
	beq	.L16773
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #728]
	bl	filp_close
.L16773:
	mov	r3, #0
	str	r3, [r4, #3632]
.L16769:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gaudio_cleanup, .-gaudio_cleanup
	.align	2
	.global	control_selector_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	control_selector_init, %function
control_selector_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR5
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	add	lr, r0, #252
	sub	r2, r3, #3584
	sub	r1, r3, #3616
	sub	ip, r2, #8
	sub	r4, r1, #8
	sub	r5, r3, #848
	add	r0, r0, #260
	sub	r6, r3, #816
	str	ip, [r3, #-3624]
	str	lr, [r3, #-880]
	str	lr, [r3, #-844]
	sub	lr, r3, #880
	str	r5, [r0, #-8]
	str	lr, [r0, #-4]
	str	r4, [r0]
	str	ip, [r0, #4]
	sub	ip, r3, #840
	str	r0, [r3, #-3620]
	str	r0, [r3, #-3592]
	sub	r0, r3, #684
	str	r4, [r3, #-3588]
	sub	r4, r3, #728
	str	r5, [r3, #-876]
	sub	r5, r3, #872
	str	r6, [r3, #-868]
	str	lr, [r3, #-848]
	sub	lr, r3, #772
	str	lr, [r3, #-872]
	str	r0, [r3, #-840]
	str	r4, [r3, #-836]
	str	r5, [r3, #-816]
	str	lr, [r3, #-812]
	sub	lr, r3, #640
	str	r6, [r3, #-772]
	movw	r6, #65472
	str	r5, [r3, #-768]
	movw	r5, #58272
	str	ip, [r3, #-728]
	str	r0, [r3, #-724]
	movw	r0, #65520
	str	r4, [r3, #-684]
	mov	r4, #48
	str	ip, [r3, #-680]
	sub	ip, r3, #596
	str	r6, [r3, #-752]
	str	r5, [r3, #-748]
	str	r0, [r3, #-744]
	str	r4, [r3, #-740]
	str	r6, [r3, #-664]
	str	r5, [r3, #-660]
	str	lr, [r3, #-3616]
	str	lr, [r3, #-3612]
	str	ip, [r3, #-3584]
	str	ip, [r3, #-3580]
	str	r0, [r3, #-656]
	mov	r0, #0
	str	r4, [r3, #-652]
	str	r1, [r3, #-640]
	str	r1, [r3, #-636]
	str	r2, [r3, #-596]
	str	r2, [r3, #-592]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	control_selector_init, .-control_selector_init
	.align	2
	.global	audio_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind_config, %function
audio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L16802
	mov	r2, #276
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16832
.L16790:
	ldr	ip, [r5, #24]
	movw	r3, #:lower16:.LANCHOR5
	movw	r0, #:lower16:.LC938
	movt	r3, #:upper16:.LANCHOR5
	movt	r0, #:upper16:.LC938
	sub	r6, r3, #888
	sub	r9, r3, #880
	sub	r7, r3, #848
	movw	lr, #:lower16:f_audio_get_alt
	ldr	r8, [ip]
	stm	r4, {r0, r6}
	movw	r6, #:lower16:f_audio_disable
	movt	r6, #:upper16:f_audio_disable
	movw	r0, #:lower16:f_audio_setup
	str	r7, [r3, #-876]
	movt	r0, #:upper16:f_audio_setup
	str	r9, [r3, #-848]
	movt	lr, #:upper16:f_audio_get_alt
	movw	r2, #:lower16:f_audio_bind
	movw	r1, #:lower16:f_audio_unbind
	str	r6, [r4, #48]
	add	r6, r4, #204
	movw	ip, #:lower16:f_audio_set_alt
	str	r8, [r4, #84]
	sub	r8, r3, #816
	sub	r10, r3, #728
	movt	r2, #:upper16:f_audio_bind
	movt	r1, #:upper16:f_audio_unbind
	str	r8, [r3, #-868]
	movt	ip, #:upper16:f_audio_set_alt
	str	r7, [r4, #252]
	sub	r7, r3, #872
	str	r8, [r3, #-772]
	add	r8, r4, #252
	str	r9, [r4, #256]
	sub	r9, r3, #772
	str	r0, [r4, #52]
	movw	r0, #:lower16:f_audio_capture_work
	str	r8, [r3, #-880]
	movt	r0, #:upper16:f_audio_capture_work
	str	r9, [r3, #-872]
	str	r8, [r3, #-844]
	sub	r8, r3, #840
	str	r10, [r3, #-836]
	str	r7, [r3, #-816]
	str	r9, [r3, #-812]
	sub	r9, r3, #684
	str	r7, [r3, #-768]
	mov	r7, #0
	str	lr, [r4, #44]
	movw	lr, #:lower16:f_audio_playback_work
	str	r6, [r4, #204]
	movt	lr, #:upper16:f_audio_playback_work
	str	r6, [r4, #208]
	add	r6, r4, #236
	str	r2, [r4, #32]
	sub	r2, r3, #3584
	str	r1, [r4, #36]
	sub	r1, r3, #3616
	str	ip, [r4, #40]
	mov	ip, #65024
	str	r7, [r4, #180]
	movt	ip, 65535
	str	r8, [r3, #-728]
	str	r9, [r3, #-724]
	str	r7, [r4, #212]
	str	r6, [r4, #236]
	str	r6, [r4, #240]
	sub	r6, r2, #8
	str	r10, [r3, #-684]
	movw	r10, #65472
	str	ip, [r4, #188]
	str	r0, [r4, #232]
	add	r0, r4, #224
	str	lr, [r4, #200]
	add	lr, r4, #192
	str	r6, [r3, #-3624]
	str	r0, [r4, #224]
	str	r0, [r4, #228]
	sub	r0, r3, #596
	str	lr, [r4, #192]
	str	lr, [r4, #196]
	sub	lr, r3, #640
	str	ip, [r4, #220]
	sub	ip, r1, #8
	str	lr, [r3, #-3616]
	str	r0, [r3, #-3584]
	str	r0, [r3, #-3580]
	add	r0, r4, #260
	str	ip, [r4, #260]
	str	ip, [r3, #-3588]
	mov	ip, #48
	str	r6, [r4, #264]
	movw	r6, #58272
	str	lr, [r3, #-3612]
	movw	lr, #65520
	str	r0, [r3, #-3620]
	str	r0, [r3, #-3592]
	mov	r0, r4
	str	r9, [r3, #-840]
	str	r10, [r3, #-752]
	str	r8, [r3, #-680]
	str	r1, [r3, #-640]
	str	r1, [r3, #-636]
	str	r2, [r3, #-596]
	str	r2, [r3, #-592]
	str	r6, [r3, #-748]
	str	lr, [r3, #-744]
	str	ip, [r3, #-740]
	str	r10, [r3, #-664]
	str	r6, [r3, #-660]
	str	lr, [r3, #-656]
	str	ip, [r3, #-652]
	bl	gaudio_setup
	subs	r6, r0, #0
	bge	.L16833
.L16792:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #3632]
	cmp	r7, #0
	beq	.L16798
	ldr	r0, [r7, #92]
	cmp	r0, #0
	beq	.L16799
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #728]
	bl	filp_close
.L16799:
	ldr	r0, [r7, #120]
	cmp	r0, #0
	beq	.L16800
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #728]
	bl	filp_close
.L16800:
	ldr	r0, [r7, #148]
	cmp	r0, #0
	beq	.L16801
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #728]
	bl	filp_close
.L16801:
	mov	r3, #0
	str	r3, [r5, #3632]
.L16798:
	mov	r0, r4
	bl	kfree
.L16789:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16833:
	ldr	r3, [r4, #40]
	cmp	r3, r7
	beq	.L16805
	ldr	r3, [r4, #48]
	cmp	r3, r7
	beq	.L16805
	str	r5, [r4, #20]
	ldr	r1, [r5, #40]
	add	r3, r4, #72
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r6, [r4, #32]
	cmp	r6, r7
	beq	.L16794
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L16794
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4, #20]
	strd	r0, [r4, #72]
.L16794:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16795
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L16795
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L16795:
	tst	r3, #2
	bne	.L16796
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L16796
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L16796:
	tst	r3, #1
	bne	.L16797
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L16797
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L16797:
	cmp	r6, #0
	beq	.L16789
	b	.L16793
.L16802:
	mov	r4, #16
	b	.L16790
.L16805:
	mvn	r6, #21
.L16793:
	ldr	r2, .L16834
	movw	r0, #:lower16:.LC939
	mov	r3, r6
	movt	r0, #:upper16:.LC939
	mov	r1, r2
	bl	printk
	b	.L16798
.L16832:
	mvn	r6, #11
	b	.L16789
.L16835:
	.align	2
.L16834:
	.word	.LANCHOR3+1244
	.fnend
	.size	audio_bind_config, .-audio_bind_config
	.align	2
	.global	conn_gadget_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_put, %function
conn_gadget_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r4, r2
	str	r6, [sp, #8]
	add	r6, r0, #88
	mov	r0, r6
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #4]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #4]
	str	r5, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_put, .-conn_gadget_req_put
	.align	2
	.global	conn_gadget_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_get, %function
conn_gadget_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r4, r0, #88
	mov	r5, r1
	mov	r0, r4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5]
	mov	r1, r0
	cmp	r5, r3
	beq	.L16840
	ldr	ip, [r3]
	mov	lr, #256
	mov	r0, #512
	ldr	r2, [r3, #4]
	sub	r5, r3, #36
	str	r2, [ip, #4]
	str	ip, [r2]
	str	lr, [r3]
	str	r0, [r3, #4]
.L16839:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16840:
	mov	r5, #0
	b	.L16839
	.fnend
	.size	conn_gadget_req_get, .-conn_gadget_req_get
	.align	2
	.global	conn_gadget_req_move
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_move, %function
conn_gadget_req_move:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	add	r6, r0, #88
	mov	r0, r6
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #36]
	add	r2, r4, #36
	mov	r1, r0
	ldr	r3, [r4, #40]
	mov	r0, r6
	str	r3, [ip, #4]
	str	ip, [r3]
	ldr	r3, [r5, #4]
	str	r2, [r5, #4]
	str	r5, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_move, .-conn_gadget_req_move
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_out, %function
conn_gadget_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r3, #2516]
	ldr	r1, [r1, #44]
	ldr	r3, [r4, #192]
	ldr	r2, [r4, #196]
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	sub	r6, r2, r3
	bne	.L16854
	add	r0, r4, #168
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	__kfifo_in
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	sub	r3, r3, r2
	cmp	r6, r3
	bls	.L16855
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L16856
.L16847:
	add	r0, r4, #144
	mov	r3, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L16855:
	add	r6, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r5, #36]
	add	ip, r5, #36
	add	r3, r4, #128
	ldr	r2, [r5, #40]
	mov	r1, r0
	mov	r0, r6
	str	r2, [lr, #4]
	str	lr, [r2]
	ldr	r2, [r4, #132]
	str	ip, [r4, #132]
	str	r3, [r5, #36]
	str	r2, [r5, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	b	.L16847
.L16856:
	movw	r0, #:lower16:.LC607
	ldr	r1, .L16857
	mov	r2, r5
	movt	r0, #:upper16:.LC607
	bl	printk
.L16853:
	mov	r3, r5
	add	r2, r4, #128
	add	r1, r4, #136
	mov	r0, r4
	bl	conn_gadget_req_move
	b	.L16847
.L16854:
	cmn	r1, #104
	movw	r0, #:lower16:.LC495
	ldr	r1, .L16857
	movne	r3, #1
	movt	r0, #:upper16:.LC495
	strne	r3, [r4, #104]
	ldr	r2, [r5, #44]
	bl	printk
	b	.L16853
.L16858:
	.align	2
.L16857:
	.word	.LANCHOR3+1264
	.fnend
	.size	conn_gadget_complete_out, .-conn_gadget_complete_out
	.align	2
	.global	conn_gadget_empty
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_empty, %function
conn_gadget_empty:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	add	r6, r0, #88
	mov	r0, r6
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	sub	r4, r4, r5
	clz	r4, r4
	lsr	r4, r4, #5
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	conn_gadget_empty, .-conn_gadget_empty
	.align	2
	.global	ncm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind_config, %function
ncm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	movw	r0, #:lower16:.LC326
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC326
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r5, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r4]
	ldr	r6, [r3, #28]
	mov	r1, r6
	bl	strcmp
	cmp	r0, #0
	beq	.L16872
	movw	r0, #:lower16:.LC329
	mov	r1, r6
	movt	r0, #:upper16:.LC329
	bl	strcmp
	cmp	r0, #0
	cmpne	r7, #0
	beq	.L16872
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #1576]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16863
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16865
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR5
	strb	r3, [r4, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r2, #-3468]
	strb	r3, [r6, #1576]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16865
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r2, #-3448]
	strb	r3, [r2, #-3436]
	strb	r3, [r6, #1592]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16865
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r2, #-549]
	strb	r3, [r6, #1584]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16865
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r2, #-3477]
	strb	r3, [r6, #1600]
.L16863:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16873
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16889
.L16866:
	ldrb	r8, [r7, #3]	@ zero_extendqisi2
	add	r9, r4, #150
	movw	r2, #:lower16:.LC897
	ldrb	lr, [r7, #2]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC897
	mov	r1, #14
	ldrb	ip, [r7, #1]	@ zero_extendqisi2
	mov	r0, r9
	ldrb	fp, [r7, #5]	@ zero_extendqisi2
	ldrb	r10, [r7, #4]	@ zero_extendqisi2
	ldrb	r3, [r7]	@ zero_extendqisi2
	stm	sp, {ip, lr}
	str	r8, [sp, #8]
	mov	r8, #0
	strd	r10, [sp, #12]
	bl	snprintf
	ldr	r1, .L16890
	mov	r0, #15
	movw	r3, #:lower16:.LC553
	ldr	r2, .L16890+4
	movt	r3, #:upper16:.LC553
	str	r9, [r6, #1588]
	strh	r0, [r4, #98]	@ movhi
	movw	r0, #:lower16:ncm_bind
	movw	lr, #:lower16:ncm_set_alt
	str	r8, [r4, #100]
	movt	r0, #:upper16:ncm_bind
	movw	ip, #:lower16:ncm_get_alt
	str	r1, [r4, #176]
	movw	r1, #:lower16:ncm_unbind
	movt	lr, #:upper16:ncm_set_alt
	strb	r8, [r4, #180]
	movt	r1, #:upper16:ncm_unbind
	movt	ip, #:upper16:ncm_get_alt
	str	r8, [r4, #188]
	ldr	r7, [r6, #36]
	str	r3, [r4]
	movw	r3, #:lower16:ncm_setup
	str	r2, [r4, #4]
	movw	r2, #:lower16:ncm_disable
	movt	r3, #:upper16:ncm_setup
	movt	r2, #:upper16:ncm_disable
	str	r5, [r4, #20]
	strd	r0, [r4, #32]
	movw	r0, #:lower16:ncm_wrap_ntb
	movw	r1, #:lower16:ncm_unwrap_ntb
	str	lr, [r4, #40]
	movt	r1, #:upper16:ncm_unwrap_ntb
	movt	r0, #:upper16:ncm_wrap_ntb
	str	ip, [r4, #44]
	mov	lr, #16384
	movw	ip, #9014
	strd	r2, [r4, #48]
	mov	r2, #1
	add	r3, r4, #72
	strb	r2, [r4, #104]
	add	r2, r5, #36
	str	r7, [r4, #108]
	str	lr, [r4, #112]
	strd	r0, [r4, #128]
	strh	ip, [r4, #182]	@ movhi
	str	r8, [r4, #184]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r3, [r1]
	ldr	r7, [r4, #32]
	cmp	r7, r8
	beq	.L16867
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	bge	.L16867
	ldrd	r2, [r4, #72]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r8, [r4, #20]
	strd	r0, [r4, #72]
.L16867:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16868
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L16868
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L16868:
	tst	r3, #2
	bne	.L16869
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L16869
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L16869:
	tst	r3, #1
	bne	.L16870
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L16870
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L16870:
	cmp	r7, #0
	beq	.L16861
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #1588]
	bl	kfree
.L16861:
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16873:
	mov	r4, #16
	b	.L16866
.L16872:
	mvn	r7, #21
	b	.L16861
.L16865:
	mvn	r7, #18
	b	.L16861
.L16889:
	mvn	r7, #11
	b	.L16861
.L16891:
	.align	2
.L16890:
	.word	.LANCHOR0+76
	.word	.LANCHOR5-536
	.fnend
	.size	ncm_bind_config, .-ncm_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_bind_config, %function
ncm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #4]
	.pad #16
	sub	sp, sp, #16
	cmp	r4, #0
	beq	.L16893
	mov	r3, #0
	mov	r2, #2
	ldr	r0, .L16904
	movw	lr, #52429
	mov	r5, r1
	str	r2, [r4]	@ unaligned
	movt	lr, 52428
	mov	r2, r3
	strb	r3, [r4, #4]
	strb	r3, [r4, #5]
	b	.L16894
.L16898:
	sub	r3, r2, r3
	add	r2, r2, #1
	add	r3, r3, #1
	cmp	r2, #256
	ldrb	ip, [r4, r3]	@ zero_extendqisi2
	eor	r1, r1, ip
	strb	r1, [r4, r3]
	beq	.L16899
.L16894:
	umull	r1, r3, lr, r2
	ldrb	r1, [r0], #1	@ zero_extendqisi2
	lsr	r3, r3, #2
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	bne	.L16898
.L16899:
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC941
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC941
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L16904+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC942
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC942
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L16904+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r5, #24]
	movw	r2, #:lower16:.LC553
	mov	r1, r4
	movt	r2, #:upper16:.LC553
	ldr	r0, [r3]
	bl	gether_setup_name
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	mov	r6, r0
	movw	r0, #:lower16:.LC943
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC943
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L16904+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	cmp	r6, #0
	bne	.L16903
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	ncm_bind_config
.L16893:
	ldr	r2, .L16904+4
	movw	r0, #:lower16:.LC940
	mvn	r6, #0
	movt	r0, #:upper16:.LC940
	mov	r1, r2
	bl	printk
.L16892:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16903:
	ldr	r2, .L16904+4
	movw	r0, #:lower16:.LC671
	movt	r0, #:upper16:.LC671
	mov	r1, r2
	bl	printk
	b	.L16892
.L16905:
	.align	2
.L16904:
	.word	.LANCHOR1+2256
	.word	.LANCHOR3+1292
	.fnend
	.size	ncm_function_bind_config, .-ncm_function_bind_config
	.align	2
	.global	is_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	is_ncm_ready, %function
is_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC664
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r1, #:upper16:.LC664
	str	lr, [sp, #4]
	bl	strcmp
	cmp	r0, #0
	beq	.L16907
	movw	r1, #:lower16:.LC553
	mov	r0, r4
	movt	r1, #:upper16:.LC553
	bl	strcmp
	cmp	r0, #0
	movne	r0, #0
	bne	.L16908
.L16907:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r0, [r3, #3592]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L16915
.L16908:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L16915:
	movw	r0, #:lower16:.LC944
	mov	r2, r4
	ldr	r1, .L16916
	movt	r0, #:upper16:.LC944
	bl	printk
	mov	r0, #1
	b	.L16908
.L16917:
	.align	2
.L16916:
	.word	.LANCHOR3+1320
	.fnend
	.size	is_ncm_ready, .-is_ncm_ready
	.align	2
	.global	set_ncm_device_descriptor
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_device_descriptor, %function
set_ncm_device_descriptor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, r0
	mov	r2, #2
	mov	r3, #93
	mov	lr, #104
	ldr	r1, .L16920
	strb	r2, [ip, #4]
	movw	r0, #:lower16:.LC945
	strb	r3, [ip, #10]
	movt	r0, #:upper16:.LC945
	mov	r3, r2
	strb	lr, [ip, #11]
	movw	r2, #26717
	ldr	lr, [sp], #4
	b	printk
.L16921:
	.align	2
.L16920:
	.word	.LANCHOR3+1336
	.fnend
	.size	set_ncm_device_descriptor, .-set_ncm_device_descriptor
	.align	2
	.global	set_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_ready, %function
set_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldrb	r2, [r4, #3592]	@ zero_extendqisi2
	str	lr, [sp, #12]
	cmp	r2, r0
	bne	.L16926
.L16923:
	cmp	r5, #0
	bne	.L16922
	movw	r2, #3608
	movw	r3, #3610
	strh	r5, [r4, r2]	@ movhi
	strh	r5, [r4, r3]	@ movhi
.L16922:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16926:
	movw	r0, #:lower16:.LC565
	mov	r3, r5
	ldr	r1, .L16927
	movt	r0, #:upper16:.LC565
	bl	printk
	movw	r3, #:lower16:system_wq
	ldr	r2, [r4, #3556]
	mov	r0, #4
	movt	r3, #:upper16:system_wq
	strb	r5, [r4, #3592]
	ldr	r1, [r3]
	bl	queue_work_on
	b	.L16923
.L16928:
	.align	2
.L16927:
	.word	.LANCHOR3-2808
	.fnend
	.size	set_ncm_ready, .-set_ncm_ready
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_setup, %function
android_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r4, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	stmib	sp, {r0, r3}
	add	r0, r0, #32
	bl	dev_get_drvdata
	ldr	r3, [r4, #2244]
	mov	r6, r0
	ldr	r2, .L17045
	sub	r9, r3, #424
	cmp	r3, r2
	bne	.L16932
	b	.L16930
.L17029:
	ldr	r3, [r9, #424]
	cmp	r3, r2
	sub	r9, r3, #424
	beq	.L16930
.L16932:
	ldr	r3, [r3, #-416]
	cmp	r6, r3
	bne	.L17029
.L16930:
	ldr	r3, [r6, #4]
	movw	r2, #:lower16:composite_setup_complete
	mov	r0, #0
	movt	r2, #:upper16:composite_setup_complete
	mov	r10, r9
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	str	r0, [r3, #4]
	str	r2, [r3, #28]
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #4]
	str	r6, [r3]
	ldr	r8, [r10, #412]!
	cmp	r10, r8
	sub	r8, r8, #120
	beq	.L16933
	mvn	fp, #94
.L16937:
	mov	r5, r8
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L16936
	b	.L16934
.L16935:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L16934
.L16936:
	ldr	r0, [r4]
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [r0, #48]
	cmp	r3, #0
	beq	.L16935
	blx	r3
	subs	fp, r0, #0
	blt	.L16935
.L16934:
	ldr	r8, [r8, #120]
	cmp	r10, r8
	sub	r8, r8, #120
	bne	.L16937
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
	cmp	fp, #0
	blt	.L16939
.L16940:
	add	r5, r6, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r9, #52]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16982
	mov	r3, #1
	mov	r1, r0
	mov	r0, r5
	strb	r3, [r9, #52]
	bl	_raw_spin_unlock_irqrestore
.L16983:
	movw	r3, #:lower16:system_wq
	add	r2, r9, #140
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
.L16929:
	mov	r0, fp
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16982:
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	mov	r1, r0
	mov	r0, r5
	cmp	r3, #9
	beq	.L17030
.L17028:
	bl	_raw_spin_unlock_irqrestore
	b	.L16929
.L16933:
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
.L16939:
	ldrb	r2, [r7]	@ zero_extendqisi2
	ldrh	ip, [r7, #4]	@ unaligned
	ldrh	r1, [r7, #2]	@ unaligned
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	and	r0, r2, #96
	cmp	r0, #64
	uxth	r8, ip
	uxth	r10, r1
	bne	.L16941
	cmp	r3, #240
	beq	.L17031
.L16941:
	ldr	r1, [sp, #8]
	cmp	r2, #64
	ldr	r5, [r1, #2520]
	beq	.L17032
	cmp	r3, #51
	cmpeq	r2, #192
	bne	.L16949
	ldr	r3, [r6, #4]
	mov	r8, #2
	mov	r1, #256
	add	r0, r5, #101
	ldr	r3, [r3]
	strh	r8, [r3]	@ movhi
	bl	__memzero
	add	r0, r5, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	add	r0, r5, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	mov	r3, #0
	str	r3, [r5, #1644]
	str	r3, [r5, #1648]
.L16944:
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	r8, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	bge	.L16940
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC701
	movt	r1, #:upper16:.LC701
	ldr	r2, .L17045+4
	add	r0, r0, #32
	bl	dev_err
.L16949:
	mov	r1, r7
	ldr	r0, [sp, #4]
	bl	composite_setup
	mov	fp, r0
	b	.L16940
.L17030:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L17028
	cmp	r4, #0
	bne	.L17028
	bl	_raw_spin_unlock_irqrestore
	b	.L16983
.L17032:
	cmp	r3, #53
	beq	.L17033
	ldrh	r2, [r7, #6]	@ unaligned
	cmp	r3, #52
	str	r2, [sp, #8]
	beq	.L17034
	mov	r1, r2
	cmp	r3, #58
	cmpeq	r8, #0
	moveq	r2, #1
	movne	r2, #0
	cmp	r1, #0
	movne	r2, #0
	cmp	r2, #0
	movne	r8, #0
	strne	r10, [r5, #1648]
	bne	.L16944
	cmp	r3, #54
	beq	.L17035
	cmp	r3, #55
	beq	.L17036
	cmp	r3, #56
	beq	.L17037
	cmp	r3, #57
	bne	.L16949
	add	r3, r5, #88
	add	r5, r5, #1760
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5, #8]
	add	r5, r5, #8
	mov	r1, r0
	ldr	r3, [sp, #12]
	cmp	r5, fp
	bne	.L16981
	b	.L16978
.L17038:
	ldr	fp, [fp]
	cmp	r5, fp
	beq	.L16978
.L16981:
	ldr	r2, [fp, #16]
	cmp	r10, r2
	bne	.L17038
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L16949
	ldr	r2, [r6, #4]
	movw	r3, #:lower16:acc_complete_send_hid_event
	ldr	r8, [sp, #8]
	movt	r3, #:upper16:acc_complete_send_hid_event
	str	fp, [r2, #32]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L16944
.L17034:
	str	r8, [r5, #1640]
	ldr	r2, [r6]
	movw	r3, #:lower16:acc_complete_set_string
	movt	r3, #:upper16:acc_complete_set_string
	ldr	r8, [sp, #8]
	ldr	r2, [r2, #4]
	str	r5, [r2]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L16944
.L17033:
	mov	r3, #1
	mov	r0, #200
	mov	r8, #0
	str	r3, [r5, #1644]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	add	r2, r5, #1696
	movt	r1, #:upper16:system_wq
	mov	r3, r0
	add	r2, r2, #4
	ldr	r1, [r1]
	mov	r0, #4
	bl	queue_delayed_work_on
	b	.L16944
.L16978:
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	b	.L16949
.L17037:
	add	r3, r5, #88
	add	r5, r5, #1776
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5]
	mov	r1, r0
	ldr	r3, [sp, #12]
	cmp	r5, fp
	bne	.L16976
	b	.L16978
.L17039:
	ldr	fp, [fp]
	cmp	r5, fp
	beq	.L16978
.L16976:
	ldr	r2, [fp, #16]
	cmp	r10, r2
	bne	.L17039
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L16949
	ldr	r3, [fp, #28]
	cmp	r8, r3
	bne	.L16949
	ldr	r1, [sp, #8]
	ldr	r2, [fp, #24]
	add	r3, r1, r8
	cmp	r3, r2
	bgt	.L16949
	ldr	r2, [r6, #4]
	movw	r3, #:lower16:acc_complete_set_hid_report_desc
	mov	r8, r1
	movt	r3, #:upper16:acc_complete_set_hid_report_desc
	str	fp, [r2, #32]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L16944
.L17036:
	add	r8, r5, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1768]
	add	r2, r5, #1760
	mov	r1, r0
	add	r2, r2, #8
	cmp	r2, r3
	bne	.L16966
	b	.L16963
.L17040:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L16963
.L16966:
	ldr	r0, [r3, #16]
	cmp	r10, r0
	bne	.L17040
	cmp	r3, #0
	beq	.L16963
.L16967:
	ldr	lr, [r3]
	add	r2, r5, #1776
	mov	r0, r8
	ldr	ip, [r3, #4]
	add	r2, r2, #8
	str	ip, [lr, #4]
	str	lr, [ip]
	ldr	ip, [r5, #1784]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r2, [r3, #4]
	str	r3, [r5, #1784]
.L17027:
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r5, #1744
	movt	r3, #:upper16:system_wq
	add	r2, r2, #8
	ldr	r1, [r3]
	mov	r0, #4
	mov	r8, #0
	bl	queue_work_on
	b	.L16944
.L17035:
	cmp	r8, #0
	beq	.L16949
	add	fp, r5, #88
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1768]
	add	r2, r5, #1760
	str	r0, [sp, #8]
	add	r2, r2, #8
	cmp	r2, r3
	bne	.L16953
	b	.L16950
.L17041:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L16950
.L16953:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L17041
	cmp	r3, #0
	beq	.L16950
.L16954:
	ldrd	r0, [r3]
	add	r2, r5, #1776
	add	r2, r2, #8
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r1, [r5, #1784]
	str	r3, [r1, #4]
	stm	r3, {r1, r2}
	str	r3, [r5, #1784]
.L16955:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L16989
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L16960
.L16959:
	movw	r1, #32800
	mov	r0, r8
	str	r3, [sp, #12]
	bl	__kmalloc
	ldr	r3, [sp, #12]
	cmp	r0, #0
	str	r0, [r3, #20]
	beq	.L17042
	mov	r2, r5
	str	r5, [r3, #12]
	mov	r0, fp
	str	r10, [r3, #16]
	ldr	r1, [sp, #8]
	str	r8, [r3, #24]
	ldr	ip, [r2, #1776]!
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r2, [r3, #4]
	str	r3, [r5, #1776]
	b	.L17027
.L16963:
	ldr	r3, [r5, #1776]
	add	r2, r5, #1776
	cmp	r2, r3
	bne	.L16971
	b	.L16968
.L17043:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L16968
.L16971:
	ldr	r0, [r3, #16]
	cmp	r10, r0
	bne	.L17043
	cmp	r3, #0
	bne	.L16967
.L16968:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L16949
.L17031:
	ldr	r10, [sp, #8]
	movw	r5, #3608
	movw	r8, #3610
	mov	r0, #1
	mov	fp, #0
	strh	ip, [r10, r8]	@ movhi
	strh	r1, [r10, r5]	@ movhi
	bl	set_ncm_ready
	movw	r0, #:lower16:.LC946
	ldrh	r3, [r10, r8]
	ldrh	r2, [r10, r5]
	movt	r0, #:upper16:.LC946
	ldr	r1, .L17045+8
	bl	printk
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	fp, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, fp
	bge	.L16940
	movw	r0, #:lower16:.LC947
	ldr	r1, .L17045+8
	movt	r0, #:upper16:.LC947
	bl	printk
	b	.L16940
.L16950:
	ldr	r3, [r5, #1776]
	add	r2, r5, #1776
	cmp	r2, r3
	bne	.L16958
	b	.L16955
.L17044:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L16955
.L16958:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L17044
	cmp	r3, #0
	beq	.L16955
	b	.L16954
.L17042:
	mov	r0, r3
	bl	kfree
.L16960:
	mov	r0, fp
	ldr	r1, [sp, #8]
	bl	_raw_spin_unlock_irqrestore
	b	.L16949
.L16989:
	mov	r3, #16
	b	.L16959
.L17046:
	.align	2
.L17045:
	.word	.LANCHOR1+2244
	.word	.LANCHOR3-1412
	.word	.LANCHOR3+1364
	.fnend
	.size	android_setup, .-android_setup
	.global	terminal_mode_vendor_id
	.global	terminal_mode_version
	.global	diag_dload
	.global	conn_gadget_function
	.global	usb30en
	.global	speaker_output_terminal_desc
	.global	speaker_input_terminal_desc
	.global	uac1_ac_header_desc
	.global	uac1_ac_interface_desc
	.global	_rndis_qc
	.global	bam2bam_data_ports
	.global	rndis_ul_max_xfer_size_rcvd
	.global	rndis_ul_max_pkt_per_xfer_rcvd
	.global	mtp_ext_config_desc
	.global	mtp_tx_reqs
	.global	mtp_tx_req_len
	.global	mtp_rx_req_len
	.global	ghsuart_data_stats_ops
	.global	ghsuart_data_tx_intr_thld
	.global	ghsic_stats_ops
	.global	gdata_timestamp_ops
	.global	ghsic_data_tx_intr_thld
	.global	gctrl_dfile
	.global	gctrl_dent
	.global	gctrl_stats_ops
	.global	smd_ctrl_dfile
	.global	smd_ctrl_dent
	.global	gsmd_ctrl_stats_ops
	.global	online_clients
	.global	gbam_dent
	.global	gbam_stats_ops
	.global	bam2bam_ports
	.global	smd_pi
	.global	sport_info
	.global	gs_dent
	.global	debug_adb_ops
	.global	debug_rst_ops
	.global	dent_rmnet_mux
	.global	rmnet_mux_svlte_debug_stats_ops
	.global	debug_rmnet_sdio_stats_ops
	.global	sdio_rx_fctrl_dis_thld
	.global	sdio_rx_fctrl_en_thld
	.global	sdio_tx_pkt_drop_thld
	.global	dent_smd
	.global	rmnet_smd_debug_stats_ops
	.global	dent_diag
	.section	.rodata
	.align	3
	.set	.LANCHOR2,. + 0
	.set	.LANCHOR3,. + 8184
	.type	__func__.38341, %object
	.size	__func__.38341, 24
__func__.38341:
	.ascii	"usb_rmnet_mux_ctrl_open\000"
	.type	__func__.48340, %object
	.size	__func__.48340, 14
__func__.48340:
	.ascii	"gsmd_start_rx\000"
	.space	2
	.type	__func__.49021, %object
	.size	__func__.49021, 21
__func__.49021:
	.ascii	"gbam_stop_endless_rx\000"
	.space	3
	.type	__func__.49027, %object
	.size	__func__.49027, 21
__func__.49027:
	.ascii	"gbam_stop_endless_tx\000"
	.space	3
	.type	__func__.50628, %object
	.size	__func__.50628, 24
__func__.50628:
	.ascii	"ghsic_send_cpkt_tomodem\000"
	.type	__func__.56593, %object
	.size	__func__.56593, 13
__func__.56593:
	.ascii	"ecm_qc_setup\000"
	.space	3
	.type	__func__.56910, %object
	.size	__func__.56910, 21
__func__.56910:
	.ascii	"mbim_ep0out_complete\000"
	.space	3
	.type	__func__.57171, %object
	.size	__func__.57171, 25
__func__.57171:
	.ascii	"bam_data_stop_endless_rx\000"
	.space	3
	.type	__func__.57177, %object
	.size	__func__.57177, 25
__func__.57177:
	.ascii	"bam_data_stop_endless_tx\000"
	.space	3
	.type	__func__.57555, %object
	.size	__func__.57555, 27
__func__.57555:
	.ascii	"rndis_qc_response_complete\000"
	.space	1
	.type	__func__.57547, %object
	.size	__func__.57547, 28
__func__.57547:
	.ascii	"rndis_qc_response_available\000"
	.type	__func__.61480, %object
	.size	__func__.61480, 21
__func__.61480:
	.ascii	"f_audio_buffer_alloc\000"
	.space	3
	.type	__func__.61650, %object
	.size	__func__.61650, 23
__func__.61650:
	.ascii	"audio_set_endpoint_req\000"
	.space	1
	.type	__func__.61726, %object
	.size	__func__.61726, 14
__func__.61726:
	.ascii	"f_audio_setup\000"
	.space	2
	.type	__func__.62786, %object
	.size	__func__.62786, 10
__func__.62786:
	.ascii	"ncm_setup\000"
	.space	2
	.type	__func__.62742, %object
	.size	__func__.62742, 22
__func__.62742:
	.ascii	"ncm_setdgram_complete\000"
	.space	2
	.type	__func__.63883, %object
	.size	__func__.63883, 24
__func__.63883:
	.ascii	"android_enable_function\000"
	.type	__func__.63723, %object
	.size	__func__.63723, 23
__func__.63723:
	.ascii	"sua_version_info_store\000"
	.space	1
	.type	__func__.57686, %object
	.size	__func__.57686, 21
__func__.57686:
	.ascii	"rndis_qc_release_dev\000"
	.space	3
	.type	__func__.57676, %object
	.size	__func__.57676, 18
__func__.57676:
	.ascii	"rndis_qc_open_dev\000"
	.space	2
	.type	__func__.38768, %object
	.size	__func__.38768, 23
__func__.38768:
	.ascii	"frmnet_notify_complete\000"
	.space	1
	.type	__func__.56961, %object
	.size	__func__.56961, 17
__func__.56961:
	.ascii	"mbim_ctrlrequest\000"
	.space	3
	.type	__func__.57073, %object
	.size	__func__.57073, 13
__func__.57073:
	.ascii	"mbim_release\000"
	.space	3
	.type	__func__.57065, %object
	.size	__func__.57065, 10
__func__.57065:
	.ascii	"mbim_open\000"
	.space	2
	.type	__func__.48077, %object
	.size	__func__.48077, 14
__func__.48077:
	.ascii	"gsdio_tx_pull\000"
	.space	2
	.type	__func__.48066, %object
	.size	__func__.48066, 19
__func__.48066:
	.ascii	"gsdio_read_pending\000"
	.space	1
	.type	__func__.48144, %object
	.size	__func__.48144, 16
__func__.48144:
	.ascii	"gsdio_open_work\000"
	.type	__func__.64076, %object
	.size	__func__.64076, 11
__func__.64076:
	.ascii	"state_show\000"
	.space	1
	.type	__func__.63991, %object
	.size	__func__.63991, 12
__func__.63991:
	.ascii	"enable_show\000"
	.type	__func__.45538, %object
	.size	__func__.45538, 19
__func__.45538:
	.ascii	"start_out_transfer\000"
	.space	1
	.type	__func__.63713, %object
	.size	__func__.63713, 22
__func__.63713:
	.ascii	"sua_version_info_show\000"
	.space	2
	.type	__func__.25357, %object
	.size	__func__.25357, 21
__func__.25357:
	.ascii	"composite_disconnect\000"
	.space	3
	.type	__func__.51615, %object
	.size	__func__.51615, 26
__func__.51615:
	.ascii	"ghsuart_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.48052, %object
	.size	__func__.48052, 21
__func__.48052:
	.ascii	"gsdio_write_complete\000"
	.space	3
	.type	__func__.48120, %object
	.size	__func__.48120, 24
__func__.48120:
	.ascii	"gsdio_ctrl_notify_modem\000"
	.type	__func__.48416, %object
	.size	__func__.48416, 20
__func__.48416:
	.ascii	"gsmd_write_complete\000"
	.type	__func__.48410, %object
	.size	__func__.48410, 19
__func__.48410:
	.ascii	"gsmd_read_complete\000"
	.space	1
	.type	__func__.52122, %object
	.size	__func__.52122, 19
__func__.52122:
	.ascii	"ghsuart_data_probe\000"
	.space	1
	.type	__func__.56986, %object
	.size	__func__.56986, 13
__func__.56986:
	.ascii	"mbim_suspend\000"
	.space	3
	.type	__func__.56990, %object
	.size	__func__.56990, 12
__func__.56990:
	.ascii	"mbim_resume\000"
	.type	CSWTCH.1855, %object
	.size	CSWTCH.1855, 40
CSWTCH.1855:
	.word	.LC411
	.word	.LC412
	.word	.LC413
	.word	.LC414
	.word	.LC415
	.word	.LC416
	.word	.LC417
	.word	.LC418
	.word	.LC419
	.word	.LC960
	.type	__func__.48362, %object
	.size	__func__.48362, 13
__func__.48362:
	.ascii	"gsmd_rx_push\000"
	.space	3
	.type	__func__.49418, %object
	.size	__func__.49418, 24
__func__.49418:
	.ascii	"grmnet_ctrl_smd_write_w\000"
	.type	__func__.48395, %object
	.size	__func__.48395, 13
__func__.48395:
	.ascii	"gsmd_tx_pull\000"
	.space	3
	.type	__func__.49390, %object
	.size	__func__.49390, 23
__func__.49390:
	.ascii	"grmnet_ctrl_smd_read_w\000"
	.space	1
	.type	__func__.54022, %object
	.size	__func__.54022, 16
__func__.54022:
	.ascii	"mtp_ctrlrequest\000"
	.type	__func__.38069, %object
	.size	__func__.38069, 27
__func__.38069:
	.ascii	"rmnet_mux_command_complete\000"
	.space	1
	.type	gsmd_ctrl_stats_ops, %object
	.size	gsmd_ctrl_stats_ops, 108
gsmd_ctrl_stats_ops:
	.space	8
	.word	gsmd_ctrl_read_stats
	.word	gsmd_ctrl_reset_stats
	.space	92
	.type	gctrl_stats_ops, %object
	.size	gctrl_stats_ops, 108
gctrl_stats_ops:
	.space	8
	.word	gctrl_read_stats
	.word	gctrl_reset_stats
	.space	92
	.type	ghsic_stats_ops, %object
	.size	ghsic_stats_ops, 108
ghsic_stats_ops:
	.space	8
	.word	ghsic_data_read_stats
	.word	ghsic_data_reset_stats
	.space	92
	.type	gdata_timestamp_ops, %object
	.size	gdata_timestamp_ops, 108
gdata_timestamp_ops:
	.space	8
	.word	show_timestamp
	.space	96
	.type	ghsuart_ctrl_stats_ops, %object
	.size	ghsuart_ctrl_stats_ops, 108
ghsuart_ctrl_stats_ops:
	.space	8
	.word	ghsuart_ctrl_read_stats
	.word	ghsuart_ctrl_reset_stats
	.space	92
	.type	ghsuart_data_stats_ops, %object
	.size	ghsuart_data_stats_ops, 108
ghsuart_data_stats_ops:
	.space	8
	.word	ghsuart_data_read_stats
	.word	ghsuart_data_reset_stats
	.space	92
	.type	debug_fdiag_ops, %object
	.size	debug_fdiag_ops, 108
debug_fdiag_ops:
	.space	8
	.word	debug_read_stats
	.word	debug_reset_stats
	.space	28
	.word	debug_open
	.space	60
	.type	__func__.37262, %object
	.size	__func__.37262, 24
__func__.37262:
	.ascii	"rmnet_sdio_data_rx_work\000"
	.type	__func__.48888, %object
	.size	__func__.48888, 23
__func__.48888:
	.ascii	"gbam_write_data_tohost\000"
	.space	1
	.type	__func__.48955, %object
	.size	__func__.48955, 19
__func__.48955:
	.ascii	"gbam_epin_complete\000"
	.space	1
	.type	__func__.49487, %object
	.size	__func__.49487, 26
__func__.49487:
	.ascii	"grmnet_ctrl_smd_connect_w\000"
	.space	2
	.type	__func__.49001, %object
	.size	__func__.49001, 14
__func__.49001:
	.ascii	"gbam_start_rx\000"
	.space	2
	.type	__func__.48970, %object
	.size	__func__.48970, 20
__func__.48970:
	.ascii	"gbam_epout_complete\000"
	.type	__func__.57702, %object
	.size	__func__.57702, 15
__func__.57702:
	.ascii	"rndis_qc_ioctl\000"
	.space	1
	.type	__func__.57081, %object
	.size	__func__.57081, 11
__func__.57081:
	.ascii	"mbim_ioctl\000"
	.space	1
	.type	__func__.38364, %object
	.size	__func__.38364, 24
__func__.38364:
	.ascii	"usb_rmnet_mux_ctrl_read\000"
	.space	4
	.type	audio_hw_info, %object
	.size	audio_hw_info, 64
audio_hw_info:
	.word	65811
	.space	4
	.word	4
	.word	0
	.space	4
	.word	44100
	.word	44100
	.word	2
	.word	2
	.word	1048576
	.word	64
	.word	524288
	.word	2
	.word	1024
	.space	8
	.type	__func__.48167, %object
	.size	__func__.48167, 15
__func__.48167:
	.ascii	"gsdio_ch_probe\000"
	.space	1
	.type	__func__.50714, %object
	.size	__func__.50714, 18
__func__.50714:
	.ascii	"ghsic_ctrl_remove\000"
	.space	2
	.type	__func__.48478, %object
	.size	__func__.48478, 18
__func__.48478:
	.ascii	"gsmd_notify_modem\000"
	.space	2
	.type	__func__.49104, %object
	.size	__func__.49104, 18
__func__.49104:
	.ascii	"gbam_connect_work\000"
	.space	2
	.type	__func__.49045, %object
	.size	__func__.49045, 14
__func__.49045:
	.ascii	"gbam_start_io\000"
	.space	2
	.type	__func__.49118, %object
	.size	__func__.49118, 22
__func__.49118:
	.ascii	"gbam2bam_connect_work\000"
	.space	2
	.type	__func__.49009, %object
	.size	__func__.49009, 22
__func__.49009:
	.ascii	"gbam_start_endless_rx\000"
	.space	2
	.type	__func__.49015, %object
	.size	__func__.49015, 22
__func__.49015:
	.ascii	"gbam_start_endless_tx\000"
	.space	2
	.type	__func__.57206, %object
	.size	__func__.57206, 26
__func__.57206:
	.ascii	"bam2bam_data_connect_work\000"
	.space	2
	.type	__func__.57159, %object
	.size	__func__.57159, 26
__func__.57159:
	.ascii	"bam_data_start_endless_rx\000"
	.space	2
	.type	__func__.57165, %object
	.size	__func__.57165, 26
__func__.57165:
	.ascii	"bam_data_start_endless_tx\000"
	.space	2
	.type	__func__.57184, %object
	.size	__func__.57184, 23
__func__.57184:
	.ascii	"bam_data_peer_reset_cb\000"
	.space	1
	.type	__func__.57717, %object
	.size	__func__.57717, 14
__func__.57717:
	.ascii	"rndis_qc_init\000"
	.space	2
	.type	__func__.38408, %object
	.size	__func__.38408, 27
__func__.38408:
	.ascii	"rmnet_mux_ctrl_device_init\000"
	.space	1
	.type	rmnet_mux_svlte_debug_stats_ops, %object
	.size	rmnet_mux_svlte_debug_stats_ops, 108
rmnet_mux_svlte_debug_stats_ops:
	.space	8
	.word	rmnet_mux_read_stats
	.word	rmnet_mux_reset_stats
	.space	28
	.word	dbg_rmnet_mux_open
	.space	60
	.type	__func__.57722, %object
	.size	__func__.57722, 17
__func__.57722:
	.ascii	"rndis_qc_cleanup\000"
	.space	3
	.type	__func__.57109, %object
	.size	__func__.57109, 14
__func__.57109:
	.ascii	"fmbim_cleanup\000"
	.space	2
	.type	__func__.57925, %object
	.size	__func__.57925, 12
__func__.57925:
	.ascii	"tx_complete\000"
	.type	__func__.56284, %object
	.size	__func__.56284, 13
__func__.56284:
	.ascii	"rndis_rm_hdr\000"
	.space	3
	.type	CSWTCH.2714, %object
	.size	CSWTCH.2714, 12
CSWTCH.2714:
	.word	.LC957
	.word	.LC958
	.word	.LC959
	.type	__func__.62531, %object
	.size	__func__.62531, 29
__func__.62531:
	.ascii	"conn_gadget_function_cleanup\000"
	.space	3
	.type	__func__.62522, %object
	.size	__func__.62522, 20
__func__.62522:
	.ascii	"conn_gadget_cleanup\000"
	.type	__func__.62527, %object
	.size	__func__.62527, 26
__func__.62527:
	.ascii	"conn_gadget_function_init\000"
	.space	2
	.type	__func__.62469, %object
	.size	__func__.62469, 18
__func__.62469:
	.ascii	"conn_gadget_setup\000"
	.space	2
	.type	__func__.62489, %object
	.size	__func__.62489, 34
__func__.62489:
	.ascii	"conn_gadget_usb_buffer_size_store\000"
	.space	2
	.type	__func__.63703, %object
	.size	__func__.63703, 27
__func__.63703:
	.ascii	"mass_storage_product_store\000"
	.space	1
	.type	__func__.63686, %object
	.size	__func__.63686, 26
__func__.63686:
	.ascii	"mass_storage_vendor_store\000"
	.space	2
	.type	__func__.62834, %object
	.size	__func__.62834, 13
__func__.62834:
	.ascii	"ncm_wrap_ntb\000"
	.space	3
	.type	__func__.64232, %object
	.size	__func__.64232, 11
__func__.64232:
	.ascii	"macos_show\000"
	.space	1
	.type	__func__.64222, %object
	.size	__func__.64222, 23
__func__.64222:
	.ascii	"ss_host_available_show\000"
	.space	1
	.type	__func__.64212, %object
	.size	__func__.64212, 14
__func__.64212:
	.ascii	"usb30en_store\000"
	.space	2
	.type	__func__.64370, %object
	.size	__func__.64370, 21
__func__.64370:
	.ascii	"alloc_android_config\000"
	.space	3
	.type	__func__.63974, %object
	.size	__func__.63974, 16
__func__.63974:
	.ascii	"functions_store\000"
	.type	__func__.64264, %object
	.size	__func__.64264, 13
__func__.64264:
	.ascii	"android_bind\000"
	.space	3
	.type	__func__.63812, %object
	.size	__func__.63812, 23
__func__.63812:
	.ascii	"android_init_functions\000"
	.space	1
	.type	longname, %object
	.size	longname, 15
longname:
	.ascii	"Gadget Android\000"
	.space	1
	.type	__func__.62916, %object
	.size	__func__.62916, 9
__func__.62916:
	.ascii	"ncm_work\000"
	.space	3
	.type	__func__.63029, %object
	.size	__func__.63029, 13
__func__.63029:
	.ascii	"android_work\000"
	.space	3
	.type	__func__.45417, %object
	.size	__func__.45417, 13
__func__.45417:
	.ascii	"send_message\000"
	.space	3
	.type	__func__.61749, %object
	.size	__func__.61749, 16
__func__.61749:
	.ascii	"f_audio_set_alt\000"
	.type	__func__.48042, %object
	.size	__func__.48042, 20
__func__.48042:
	.ascii	"gsdio_read_complete\000"
	.type	__func__.48111, %object
	.size	__func__.48111, 14
__func__.48111:
	.ascii	"gsdio_ctrl_wq\000"
	.space	2
	.type	__func__.49790, %object
	.size	__func__.49790, 16
__func__.49790:
	.ascii	"rmnet_ctrl_poll\000"
	.type	__func__.50635, %object
	.size	__func__.50635, 25
__func__.50635:
	.ascii	"ghsic_send_cbits_tomodem\000"
	.space	3
	.type	__func__.51624, %object
	.size	__func__.51624, 27
__func__.51624:
	.ascii	"ghsuart_send_cbits_tomodem\000"
	.space	1
	.type	__func__.57263, %object
	.size	__func__.57263, 17
__func__.57263:
	.ascii	"bam_data_wake_cb\000"
	.space	3
	.type	__func__.38732, %object
	.size	__func__.38732, 15
__func__.38732:
	.ascii	"frmnet_connect\000"
	.space	1
	.type	__func__.38739, %object
	.size	__func__.38739, 18
__func__.38739:
	.ascii	"frmnet_disconnect\000"
	.space	2
	.type	__func__.38759, %object
	.size	__func__.38759, 20
__func__.38759:
	.ascii	"frmnet_cmd_complete\000"
	.type	__func__.62512, %object
	.size	__func__.62512, 36
__func__.62512:
	.ascii	"conn_gadget_in_max_packet_size_show\000"
	.type	__func__.62500, %object
	.size	__func__.62500, 37
__func__.62500:
	.ascii	"conn_gadget_out_max_packet_size_show\000"
	.space	3
	.type	__func__.62479, %object
	.size	__func__.62479, 33
__func__.62479:
	.ascii	"conn_gadget_usb_buffer_size_show\000"
	.space	3
	.type	__func__.62966, %object
	.size	__func__.62966, 22
__func__.62966:
	.ascii	"terminal_version_show\000"
	.space	2
	.type	__func__.50647, %object
	.size	__func__.50647, 21
__func__.50647:
	.ascii	"ghsic_ctrl_connect_w\000"
	.space	3
	.type	__func__.58100, %object
	.size	__func__.58100, 12
__func__.58100:
	.ascii	"gether_init\000"
	.type	__func__.49447, %object
	.size	__func__.49447, 29
__func__.49447:
	.ascii	"gsmd_ctrl_send_cbits_tomodem\000"
	.space	3
	.type	__func__.64434, %object
	.size	__func__.64434, 5
__func__.64434:
	.ascii	"init\000"
	.space	3
	.type	__func__.62362, %object
	.size	__func__.62362, 18
__func__.62362:
	.ascii	"conn_gadget_flush\000"
	.space	2
	.type	__func__.51221, %object
	.size	__func__.51221, 18
__func__.51221:
	.ascii	"ghsic_data_remove\000"
	.space	2
	.type	__func__.52132, %object
	.size	__func__.52132, 20
__func__.52132:
	.ascii	"ghsuart_data_remove\000"
	.type	__func__.51952, %object
	.size	__func__.51952, 25
__func__.51952:
	.ascii	"ghsuart_data_write_tomdm\000"
	.space	3
	.type	__func__.51995, %object
	.size	__func__.51995, 22
__func__.51995:
	.ascii	"ghsuart_data_start_rx\000"
	.space	2
	.type	__func__.51937, %object
	.size	__func__.51937, 26
__func__.51937:
	.ascii	"ghsuart_data_write_tohost\000"
	.space	2
	.type	__func__.37370, %object
	.size	__func__.37370, 22
__func__.37370:
	.ascii	"rmnet_close_sdio_work\000"
	.space	2
	.type	__func__.48461, %object
	.size	__func__.48461, 18
__func__.48461:
	.ascii	"gsmd_connect_work\000"
	.space	2
	.type	__func__.49091, %object
	.size	__func__.49091, 25
__func__.49091:
	.ascii	"gbam2bam_disconnect_work\000"
	.space	3
	.type	__func__.57193, %object
	.size	__func__.57193, 29
__func__.57193:
	.ascii	"bam2bam_data_disconnect_work\000"
	.space	3
	.type	__func__.62924, %object
	.size	__func__.62924, 18
__func__.62924:
	.ascii	"ncm_function_init\000"
	.space	2
	.type	__func__.51176, %object
	.size	__func__.51176, 21
__func__.51176:
	.ascii	"ghsic_data_connect_w\000"
	.space	3
	.type	__func__.51632, %object
	.size	__func__.51632, 23
__func__.51632:
	.ascii	"ghsuart_ctrl_connect_w\000"
	.space	1
	.type	__func__.52094, %object
	.size	__func__.52094, 23
__func__.52094:
	.ascii	"ghsuart_data_connect_w\000"
	.space	1
	.type	__func__.48014, %object
	.size	__func__.48014, 12
__func__.48014:
	.ascii	"gsdio_write\000"
	.type	__func__.48906, %object
	.size	__func__.48906, 18
__func__.48906:
	.ascii	"gbam_data_recv_cb\000"
	.space	2
	.type	__func__.38684, %object
	.size	__func__.38684, 14
__func__.38684:
	.ascii	"frmnet_resume\000"
	.space	2
	.type	__func__.57250, %object
	.size	__func__.57250, 15
__func__.57250:
	.ascii	"bam_data_setup\000"
	.space	1
	.type	__func__.63838, %object
	.size	__func__.63838, 31
__func__.63838:
	.ascii	"android_bind_enabled_functions\000"
	.space	1
	.type	__func__.61274, %object
	.size	__func__.61274, 20
__func__.61274:
	.ascii	"gaudio_open_streams\000"
	.type	__func__.61247, %object
	.size	__func__.61247, 24
__func__.61247:
	.ascii	"playback_prepare_params\000"
	.type	__func__.61258, %object
	.size	__func__.61258, 23
__func__.61258:
	.ascii	"capture_prepare_params\000"
	.space	1
	.type	__func__.57094, %object
	.size	__func__.57094, 10
__func__.57094:
	.ascii	"mbim_init\000"
	.space	2
	.type	__func__.57226, %object
	.size	__func__.57226, 20
__func__.57226:
	.ascii	"bam_data_disconnect\000"
	.type	oid_supported_list, %object
	.size	oid_supported_list, 112
oid_supported_list:
	.word	65793
	.word	65794
	.word	65795
	.word	65796
	.word	65798
	.word	65799
	.word	65802
	.word	65803
	.word	65804
	.word	65805
	.word	65814
	.word	65806
	.word	65809
	.word	65812
	.word	66050
	.word	131329
	.word	131330
	.word	131331
	.word	131332
	.word	131333
	.word	16843009
	.word	16843010
	.word	16843011
	.word	16843013
	.word	16843012
	.word	16908545
	.word	16908546
	.word	16908547
	.type	__func__.56053, %object
	.size	__func__.56053, 20
__func__.56053:
	.ascii	"gen_ndis_query_resp\000"
	.type	__func__.53096, %object
	.size	__func__.53096, 22
__func__.53096:
	.ascii	"ccid_ctrl_device_init\000"
	.space	2
	.type	__func__.53107, %object
	.size	__func__.53107, 11
__func__.53107:
	.ascii	"ccid_setup\000"
	.space	1
	.type	__func__.53040, %object
	.size	__func__.53040, 22
__func__.53040:
	.ascii	"ccid_bulk_device_init\000"
	.space	2
	.type	__func__.52147, %object
	.size	__func__.52147, 33
__func__.52147:
	.ascii	"ghsuart_send_controlbits_tomodem\000"
	.space	3
	.type	__func__.47078, %object
	.size	__func__.47078, 12
__func__.47078:
	.ascii	"gs_start_tx\000"
	.type	__func__.47140, %object
	.size	__func__.47140, 18
__func__.47140:
	.ascii	"gs_write_complete\000"
	.space	2
	.type	dirletter.45861, %object
	.size	dirletter.45861, 4
dirletter.45861:
	.byte	117
	.byte	111
	.byte	105
	.byte	110
	.type	__func__.49433, %object
	.size	__func__.49433, 34
__func__.49433:
	.ascii	"grmnet_ctrl_smd_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.37286, %object
	.size	__func__.37286, 26
__func__.37286:
	.ascii	"rmnet_sdio_complete_epout\000"
	.space	2
	.type	__func__.63042, %object
	.size	__func__.63042, 15
__func__.63042:
	.ascii	"android_enable\000"
	.space	1
	.type	__func__.52681, %object
	.size	__func__.52681, 9
__func__.52681:
	.ascii	"adb_open\000"
	.space	3
	.type	__func__.61519, %object
	.size	__func__.61519, 22
__func__.61519:
	.ascii	"f_audio_playback_work\000"
	.space	2
	.type	__func__.61290, %object
	.size	__func__.61290, 17
__func__.61290:
	.ascii	"u_audio_playback\000"
	.space	3
	.type	__func__.61529, %object
	.size	__func__.61529, 29
__func__.61529:
	.ascii	"f_audio_playback_ep_complete\000"
	.space	3
	.type	__func__.61551, %object
	.size	__func__.61551, 28
__func__.61551:
	.ascii	"f_audio_capture_ep_complete\000"
	.type	__func__.61568, %object
	.size	__func__.61568, 17
__func__.61568:
	.ascii	"f_audio_complete\000"
	.space	3
	.type	__func__.51054, %object
	.size	__func__.51054, 24
__func__.51054:
	.ascii	"ghsic_data_write_tohost\000"
	.type	__func__.51213, %object
	.size	__func__.51213, 17
__func__.51213:
	.ascii	"ghsic_data_probe\000"
	.space	3
	.type	__func__.50702, %object
	.size	__func__.50702, 17
__func__.50702:
	.ascii	"ghsic_ctrl_probe\000"
	.space	3
	.type	__func__.56897, %object
	.size	__func__.56897, 21
__func__.56897:
	.ascii	"mbim_notify_complete\000"
	.space	3
	.type	__func__.56887, %object
	.size	__func__.56887, 15
__func__.56887:
	.ascii	"mbim_do_notify\000"
	.space	1
	.type	__func__.62293, %object
	.size	__func__.62293, 17
__func__.62293:
	.ascii	"conn_gadget_poll\000"
	.space	3
	.type	__func__.25393, %object
	.size	__func__.25393, 15
__func__.25393:
	.ascii	"composite_bind\000"
	.space	1
	.type	__func__.51083, %object
	.size	__func__.51083, 23
__func__.51083:
	.ascii	"ghsic_data_write_tomdm\000"
	.space	1
	.type	__func__.51132, %object
	.size	__func__.51132, 20
__func__.51132:
	.ascii	"ghsic_data_start_rx\000"
	.type	__func__.45533, %object
	.size	__func__.45533, 18
__func__.45533:
	.ascii	"start_in_transfer\000"
	.space	2
	.type	__func__.62251, %object
	.size	__func__.62251, 24
__func__.62251:
	.ascii	"conn_gadget_complete_in\000"
	.type	ffs_sb_operations, %object
	.size	ffs_sb_operations, 104
ffs_sb_operations:
	.space	16
	.word	generic_delete_inode
	.space	24
	.word	simple_statfs
	.space	56
	.type	ffs_ep0_operations, %object
	.size	ffs_ep0_operations, 108
ffs_ep0_operations:
	.word	0
	.word	no_llseek
	.word	ffs_ep0_read
	.word	ffs_ep0_write
	.space	16
	.word	ffs_ep0_ioctl
	.space	8
	.word	ffs_ep0_open
	.space	4
	.word	ffs_ep0_release
	.space	52
	.type	__func__.30857, %object
	.size	__func__.30857, 25
__func__.30857:
	.ascii	"usb_qdss_disconnect_work\000"
	.space	3
	.type	gs_tty_ops, %object
	.size	gs_tty_ops, 124
gs_tty_ops:
	.space	12
	.word	gs_open
	.word	gs_close
	.space	8
	.word	gs_write
	.word	gs_put_char
	.word	gs_flush_chars
	.word	gs_write_room
	.word	gs_chars_in_buffer
	.space	16
	.word	gs_unthrottle
	.space	12
	.word	gs_break_ctl
	.space	16
	.word	gs_tiocmget
	.word	gs_tiocmset
	.space	16
	.type	__func__.47357, %object
	.size	__func__.47357, 14
__func__.47357:
	.ascii	"gserial_setup\000"
	.space	2
	.type	debug_adb_ops, %object
	.size	debug_adb_ops, 108
debug_adb_ops:
	.space	8
	.word	debug_read_status
	.space	32
	.word	serial_debug_open
	.space	60
	.type	debug_rst_ops, %object
	.size	debug_rst_ops, 108
debug_rst_ops:
	.space	12
	.word	debug_write_reset
	.space	28
	.word	serial_debug_open
	.space	60
	.type	__func__.57024, %object
	.size	__func__.57024, 10
__func__.57024:
	.ascii	"mbim_read\000"
	.space	2
	.type	__func__.25010, %object
	.size	__func__.25010, 11
__func__.25010:
	.ascii	"config_buf\000"
	.space	1
	.type	__func__.25101, %object
	.size	__func__.25101, 11
__func__.25101:
	.ascii	"set_config\000"
	.space	1
	.type	__func__.25316, %object
	.size	__func__.25316, 16
__func__.25316:
	.ascii	"composite_setup\000"
	.type	__func__.38669, %object
	.size	__func__.38669, 15
__func__.38669:
	.ascii	"frmnet_suspend\000"
	.space	1
	.type	__func__.62342, %object
	.size	__func__.62342, 18
__func__.62342:
	.ascii	"conn_gadget_write\000"
	.space	2
	.type	__func__.64276, %object
	.size	__func__.64276, 19
__func__.64276:
	.ascii	"android_usb_unbind\000"
	.space	1
	.type	__func__.62402, %object
	.size	__func__.62402, 18
__func__.62402:
	.ascii	"conn_gadget_ioctl\000"
	.space	2
	.type	__func__.62391, %object
	.size	__func__.62391, 37
__func__.62391:
	.ascii	"conn_gadget_bind_status_copy_to_user\000"
	.space	3
	.type	__func__.57895, %object
	.size	__func__.57895, 13
__func__.57895:
	.ascii	"process_rx_w\000"
	.space	3
	.type	__func__.56932, %object
	.size	__func__.56932, 11
__func__.56932:
	.ascii	"mbim_setup\000"
	.space	1
	.type	__func__.62974, %object
	.size	__func__.62974, 23
__func__.62974:
	.ascii	"terminal_version_store\000"
	.space	1
	.type	__func__.62959, %object
	.size	__func__.62959, 14
__func__.62959:
	.ascii	"set_ncm_ready\000"
	.space	2
	.type	__func__.49670, %object
	.size	__func__.49670, 24
__func__.49670:
	.ascii	"rmnet_ctrl_queue_notify\000"
	.type	f_midi_cin_length, %object
	.size	f_midi_cin_length, 16
f_midi_cin_length:
	.byte	0
	.byte	0
	.byte	2
	.byte	3
	.byte	3
	.byte	1
	.byte	2
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	2
	.byte	2
	.byte	3
	.byte	1
	.type	__func__.38216, %object
	.size	__func__.38216, 16
__func__.38216:
	.ascii	"transport_store\000"
	.type	__func__.37208, %object
	.size	__func__.37208, 20
__func__.37208:
	.ascii	"rmnet_sdio_start_rx\000"
	.type	__func__.37431, %object
	.size	__func__.37431, 21
__func__.37431:
	.ascii	"rmnet_open_sdio_work\000"
	.space	3
	.type	__func__.63200, %object
	.size	__func__.63200, 25
__func__.63200:
	.ascii	"acm_function_bind_config\000"
	.space	3
	.type	__func__.49154, %object
	.size	__func__.49154, 19
__func__.49154:
	.ascii	"gbam_peer_reset_cb\000"
	.space	1
	.type	__func__.57590, %object
	.size	__func__.57590, 15
__func__.57590:
	.ascii	"rndis_qc_setup\000"
	.space	1
	.type	__func__.62223, %object
	.size	__func__.62223, 27
__func__.62223:
	.ascii	"conn_gadget_request_ep_out\000"
	.space	1
	.type	__func__.62356, %object
	.size	__func__.62356, 17
__func__.62356:
	.ascii	"conn_gadget_open\000"
	.space	3
	.type	__func__.62307, %object
	.size	__func__.62307, 17
__func__.62307:
	.ascii	"conn_gadget_read\000"
	.space	3
	.type	__func__.45511, %object
	.size	__func__.45511, 10
__func__.45511:
	.ascii	"fsg_setup\000"
	.space	2
	.type	__func__.62536, %object
	.size	__func__.62536, 33
__func__.62536:
	.ascii	"conn_gadget_function_bind_config\000"
	.space	3
	.type	__func__.63437, %object
	.size	__func__.63437, 26
__func__.63437:
	.ascii	"qdss_function_bind_config\000"
	.space	2
	.type	__func__.57013, %object
	.size	__func__.57013, 17
__func__.57013:
	.ascii	"mbim_bind_config\000"
	.space	3
	.type	__func__.56832, %object
	.size	__func__.56832, 15
__func__.56832:
	.ascii	"mbim_bam_setup\000"
	.space	1
	.type	debug_rmnet_sdio_stats_ops, %object
	.size	debug_rmnet_sdio_stats_ops, 108
debug_rmnet_sdio_stats_ops:
	.space	8
	.word	rmnet_sdio_read_stats
	.word	rmnet_sdio_reset_stats
	.space	28
	.word	debug_rmnet_sdio_open
	.space	60
	.type	rmnet_smd_debug_stats_ops, %object
	.size	rmnet_smd_debug_stats_ops, 108
rmnet_smd_debug_stats_ops:
	.space	8
	.word	rmnet_smd_debug_read_stats
	.word	rmnet_smd_debug_reset_stats
	.space	28
	.word	rmnet_smd_debug_open
	.space	60
	.type	ffs_epfile_operations, %object
	.size	ffs_epfile_operations, 108
ffs_epfile_operations:
	.word	0
	.word	no_llseek
	.word	ffs_epfile_read
	.word	ffs_epfile_write
	.space	16
	.word	ffs_epfile_ioctl
	.space	8
	.word	ffs_epfile_open
	.space	4
	.word	ffs_epfile_release
	.space	52
	.type	__func__.53017, %object
	.size	__func__.53017, 16
__func__.53017:
	.ascii	"ccid_bulk_write\000"
	.type	__func__.63506, %object
	.size	__func__.63506, 27
__func__.63506:
	.ascii	"rndis_function_bind_config\000"
	.space	1
	.type	eth_netdev_ops, %object
	.size	eth_netdev_ops, 136
eth_netdev_ops:
	.space	8
	.word	eth_open
	.word	eth_stop
	.word	eth_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_change_mtu
	.space	84
	.type	ops, %object
	.size	ops, 164
ops:
	.space	8
	.word	eth_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	rndis_proc_fops, %object
	.size	rndis_proc_fops, 108
rndis_proc_fops:
	.word	0
	.word	seq_lseek
	.word	seq_read
	.word	rndis_proc_write
	.space	28
	.word	rndis_proc_open
	.space	4
	.word	single_release
	.space	52
	.type	__func__.56919, %object
	.size	__func__.56919, 19
__func__.56919:
	.ascii	"fmbim_cmd_complete\000"
	.space	1
	.type	__func__.38387, %object
	.size	__func__.38387, 25
__func__.38387:
	.ascii	"usb_rmnet_mux_ctrl_write\000"
	.space	3
	.type	__func__.57060, %object
	.size	__func__.57060, 11
__func__.57060:
	.ascii	"mbim_write\000"
	.space	1
	.type	__func__.56824, %object
	.size	__func__.56824, 25
__func__.56824:
	.ascii	"fmbim_send_cpkt_response\000"
	.space	3
	.type	__func__.56814, %object
	.size	__func__.56814, 30
__func__.56814:
	.ascii	"fmbim_ctrl_response_available\000"
	.space	2
	.type	__func__.46013, %object
	.size	__func__.46013, 17
__func__.46013:
	.ascii	"handle_exception\000"
	.space	3
	.type	__func__.25437, %object
	.size	__func__.25437, 29
__func__.25437:
	.ascii	"usb_composite_setup_continue\000"
	.space	3
	.type	__func__.45943, %object
	.size	__func__.45943, 17
__func__.45943:
	.ascii	"get_next_command\000"
	.space	3
	.type	__func__.45425, %object
	.size	__func__.45425, 14
__func__.45425:
	.ascii	"do_timer_stop\000"
	.space	2
	.type	__func__.45429, %object
	.size	__func__.45429, 15
__func__.45429:
	.ascii	"do_timer_reset\000"
	.space	1
	.type	__func__.45436, %object
	.size	__func__.45436, 17
__func__.45436:
	.ascii	"get_version_info\000"
	.space	3
	.type	__func__.45832, %object
	.size	__func__.45832, 13
__func__.45832:
	.ascii	"finish_reply\000"
	.space	3
	.type	__func__.55297, %object
	.size	__func__.55297, 16
__func__.55297:
	.ascii	"acc_ctrlrequest\000"
	.type	__func__.38748, %object
	.size	__func__.38748, 26
__func__.38748:
	.ascii	"frmnet_send_cpkt_response\000"
	.space	2
	.type	__func__.49682, %object
	.size	__func__.49682, 34
__func__.49682:
	.ascii	"grmnet_ctrl_qti_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.61304, %object
	.size	__func__.61304, 16
__func__.61304:
	.ascii	"u_audio_capture\000"
	.type	__func__.61539, %object
	.size	__func__.61539, 21
__func__.61539:
	.ascii	"f_audio_capture_work\000"
	.space	3
	.type	__func__.52987, %object
	.size	__func__.52987, 15
__func__.52987:
	.ascii	"ccid_bulk_read\000"
	.space	1
	.type	__func__.56102, %object
	.size	__func__.56102, 18
__func__.56102:
	.ascii	"gen_ndis_set_resp\000"
	.space	2
	.type	__func__.56182, %object
	.size	__func__.56182, 17
__func__.56182:
	.ascii	"rndis_msg_parser\000"
	.space	3
	.type	__func__.57569, %object
	.size	__func__.57569, 26
__func__.57569:
	.ascii	"rndis_qc_command_complete\000"
	.space	2
	.type	__func__.56649, %object
	.size	__func__.56649, 12
__func__.56649:
	.ascii	"ecm_qc_bind\000"
	.type	__func__.56999, %object
	.size	__func__.56999, 10
__func__.56999:
	.ascii	"mbim_bind\000"
	.space	2
	.type	__func__.61781, %object
	.size	__func__.61781, 13
__func__.61781:
	.ascii	"f_audio_bind\000"
	.space	3
	.type	__func__.52954, %object
	.size	__func__.52954, 19
__func__.52954:
	.ascii	"ccid_function_bind\000"
	.space	1
	.type	__func__.38821, %object
	.size	__func__.38821, 12
__func__.38821:
	.ascii	"frmnet_bind\000"
	.type	__func__.57641, %object
	.size	__func__.57641, 14
__func__.57641:
	.ascii	"rndis_qc_bind\000"
	.space	2
	.type	__func__.62279, %object
	.size	__func__.62279, 34
__func__.62279:
	.ascii	"conn_gadget_create_bulk_endpoints\000"
	.space	2
	.type	__func__.37442, %object
	.size	__func__.37442, 19
__func__.37442:
	.ascii	"rmnet_sdio_set_alt\000"
	.space	1
	.type	__func__.52930, %object
	.size	__func__.52930, 22
__func__.52930:
	.ascii	"ccid_function_set_alt\000"
	.space	2
	.type	__func__.62447, %object
	.size	__func__.62447, 29
__func__.62447:
	.ascii	"conn_gadget_function_set_alt\000"
	.space	3
	.type	__func__.25162, %object
	.size	__func__.25162, 18
__func__.25162:
	.ascii	"usb_remove_config\000"
	.space	2
	.type	__func__.64015, %object
	.size	__func__.64015, 13
__func__.64015:
	.ascii	"enable_store\000"
	.space	3
	.type	__func__.52688, %object
	.size	__func__.52688, 12
__func__.52688:
	.ascii	"adb_release\000"
	.type	__func__.63159, %object
	.size	__func__.63159, 20
__func__.63159:
	.ascii	"adb_closed_callback\000"
	.type	__func__.63119, %object
	.size	__func__.63119, 27
__func__.63119:
	.ascii	"functionfs_closed_callback\000"
	.space	1
	.type	__func__.44500, %object
	.size	__func__.44500, 13
__func__.44500:
	.ascii	"ffs_data_put\000"
	.space	3
	.type	__func__.64400, %object
	.size	__func__.64400, 14
__func__.64400:
	.ascii	"android_probe\000"
	.space	2
	.type	__func__.62980, %object
	.size	__func__.62980, 26
__func__.62980:
	.ascii	"create_terminal_attribute\000"
	.space	2
	.type	__func__.25935, %object
	.size	__func__.25935, 14
__func__.25935:
	.ascii	"usb_diag_read\000"
	.space	2
	.type	__func__.25953, %object
	.size	__func__.25953, 15
__func__.25953:
	.ascii	"usb_diag_write\000"
	.space	1
	.type	__func__.63420, %object
	.size	__func__.63420, 26
__func__.63420:
	.ascii	"diag_function_bind_config\000"
	.space	2
	.type	__func__.47178, %object
	.size	__func__.47178, 12
__func__.47178:
	.ascii	"gs_start_io\000"
	.type	__func__.47965, %object
	.size	__func__.47965, 16
__func__.47965:
	.ascii	"gsdio_alloc_req\000"
	.type	__func__.48317, %object
	.size	__func__.48317, 15
__func__.48317:
	.ascii	"gsmd_alloc_req\000"
	.space	1
	.type	__func__.48421, %object
	.size	__func__.48421, 14
__func__.48421:
	.ascii	"gsmd_start_io\000"
	.space	2
	.type	__func__.47997, %object
	.size	__func__.47997, 15
__func__.47997:
	.ascii	"gsdio_start_rx\000"
	.space	1
	.type	__func__.48024, %object
	.size	__func__.48024, 14
__func__.48024:
	.ascii	"gsdio_rx_push\000"
	.space	2
	.type	__func__.48095, %object
	.size	__func__.48095, 15
__func__.48095:
	.ascii	"gsdio_start_io\000"
	.space	1
	.type	__func__.48104, %object
	.size	__func__.48104, 16
__func__.48104:
	.ascii	"gsdio_port_free\000"
	.type	__func__.48178, %object
	.size	__func__.48178, 17
__func__.48178:
	.ascii	"gsdio_port_alloc\000"
	.space	3
	.type	__func__.48191, %object
	.size	__func__.48191, 14
__func__.48191:
	.ascii	"gsdio_connect\000"
	.space	2
	.type	__func__.48201, %object
	.size	__func__.48201, 17
__func__.48201:
	.ascii	"gsdio_disconnect\000"
	.space	3
	.type	__func__.48258, %object
	.size	__func__.48258, 12
__func__.48258:
	.ascii	"gsdio_setup\000"
	.type	debug_gsdio_ops, %object
	.size	debug_gsdio_ops, 108
debug_gsdio_ops:
	.space	8
	.word	debug_sdio_read_stats
	.word	debug_sdio_reset_stats
	.space	28
	.word	debug_sdio_open
	.space	60
	.type	__func__.48487, %object
	.size	__func__.48487, 13
__func__.48487:
	.ascii	"gsmd_connect\000"
	.space	3
	.type	__func__.48497, %object
	.size	__func__.48497, 16
__func__.48497:
	.ascii	"gsmd_disconnect\000"
	.type	__func__.48594, %object
	.size	__func__.48594, 11
__func__.48594:
	.ascii	"gsmd_setup\000"
	.space	1
	.type	debug_gsmd_ops, %object
	.size	debug_gsmd_ops, 108
debug_gsmd_ops:
	.space	8
	.word	debug_smd_read_stats
	.word	debug_smd_reset_stats
	.space	28
	.word	debug_smd_open
	.space	60
	.type	__func__.49274, %object
	.size	__func__.49274, 16
__func__.49274:
	.ascii	"gbam_disconnect\000"
	.type	__func__.49289, %object
	.size	__func__.49289, 13
__func__.49289:
	.ascii	"gbam_connect\000"
	.space	3
	.type	__func__.49299, %object
	.size	__func__.49299, 11
__func__.49299:
	.ascii	"gbam_setup\000"
	.space	1
	.type	gbam_stats_ops, %object
	.size	gbam_stats_ops, 108
gbam_stats_ops:
	.space	8
	.word	gbam_read_stats
	.word	gbam_reset_stats
	.space	92
	.type	__func__.49498, %object
	.size	__func__.49498, 18
__func__.49498:
	.ascii	"gsmd_ctrl_connect\000"
	.space	2
	.type	__func__.49519, %object
	.size	__func__.49519, 21
__func__.49519:
	.ascii	"gsmd_ctrl_disconnect\000"
	.space	3
	.type	__func__.49582, %object
	.size	__func__.49582, 16
__func__.49582:
	.ascii	"gsmd_ctrl_setup\000"
	.type	ctrl_names, %object
	.size	ctrl_names, 24
ctrl_names:
	.word	.LC1053
	.word	.LC1054
	.word	.LC1055
	.word	.LC1054
	.space	8
	.type	__func__.49697, %object
	.size	__func__.49697, 18
__func__.49697:
	.ascii	"gqti_ctrl_connect\000"
	.space	2
	.type	__func__.49707, %object
	.size	__func__.49707, 21
__func__.49707:
	.ascii	"gqti_ctrl_disconnect\000"
	.space	3
	.type	__func__.50659, %object
	.size	__func__.50659, 19
__func__.50659:
	.ascii	"ghsic_ctrl_connect\000"
	.space	1
	.type	__func__.50677, %object
	.size	__func__.50677, 22
__func__.50677:
	.ascii	"ghsic_ctrl_disconnect\000"
	.space	2
	.type	__func__.50740, %object
	.size	__func__.50740, 25
__func__.50740:
	.ascii	"ghsic_ctrl_set_port_name\000"
	.space	3
	.type	__func__.50749, %object
	.size	__func__.50749, 17
__func__.50749:
	.ascii	"ghsic_ctrl_setup\000"
	.space	3
	.type	__func__.50731, %object
	.size	__func__.50731, 17
__func__.50731:
	.ascii	"gctrl_port_alloc\000"
	.space	3
	.type	__func__.51247, %object
	.size	__func__.51247, 22
__func__.51247:
	.ascii	"ghsic_data_disconnect\000"
	.space	2
	.type	__func__.51263, %object
	.size	__func__.51263, 19
__func__.51263:
	.ascii	"ghsic_data_connect\000"
	.space	1
	.type	__func__.51398, %object
	.size	__func__.51398, 25
__func__.51398:
	.ascii	"ghsic_data_set_port_name\000"
	.space	3
	.type	__func__.51407, %object
	.size	__func__.51407, 17
__func__.51407:
	.ascii	"ghsic_data_setup\000"
	.space	3
	.type	__func__.51234, %object
	.size	__func__.51234, 22
__func__.51234:
	.ascii	"ghsic_data_port_alloc\000"
	.space	2
	.type	__func__.51640, %object
	.size	__func__.51640, 21
__func__.51640:
	.ascii	"ghsuart_ctrl_connect\000"
	.space	3
	.type	__func__.51657, %object
	.size	__func__.51657, 24
__func__.51657:
	.ascii	"ghsuart_ctrl_disconnect\000"
	.type	__func__.51705, %object
	.size	__func__.51705, 19
__func__.51705:
	.ascii	"ghsuart_ctrl_setup\000"
	.space	1
	.type	__func__.51693, %object
	.size	__func__.51693, 24
__func__.51693:
	.ascii	"ghsuart_ctrl_port_alloc\000"
	.type	CSWTCH.3060, %object
	.size	CSWTCH.3060, 36
CSWTCH.3060:
	.word	.LC948
	.word	.LC949
	.word	.LC950
	.word	.LC951
	.word	.LC952
	.word	.LC953
	.word	.LC954
	.word	.LC955
	.word	.LC956
	.type	__func__.52170, %object
	.size	__func__.52170, 24
__func__.52170:
	.ascii	"ghsuart_data_disconnect\000"
	.type	__func__.38627, %object
	.size	__func__.38627, 23
__func__.38627:
	.ascii	"gport_rmnet_disconnect\000"
	.space	1
	.type	__func__.52189, %object
	.size	__func__.52189, 21
__func__.52189:
	.ascii	"ghsuart_data_connect\000"
	.space	3
	.type	__func__.38707, %object
	.size	__func__.38707, 15
__func__.38707:
	.ascii	"frmnet_set_alt\000"
	.space	1
	.type	__func__.38605, %object
	.size	__func__.38605, 20
__func__.38605:
	.ascii	"gport_rmnet_connect\000"
	.type	__func__.52271, %object
	.size	__func__.52271, 19
__func__.52271:
	.ascii	"ghsuart_data_setup\000"
	.space	1
	.type	ghsuart_data_names, %object
	.size	ghsuart_data_names, 8
ghsuart_data_names:
	.word	.LC1050
	.word	.LC1051
	.type	__func__.52155, %object
	.size	__func__.52155, 24
__func__.52155:
	.ascii	"ghsuart_data_port_alloc\000"
	.type	__func__.38854, %object
	.size	__func__.38854, 17
__func__.38854:
	.ascii	"frmnet_init_port\000"
	.space	3
	.type	__func__.63266, %object
	.size	__func__.63266, 27
__func__.63266:
	.ascii	"rmnet_function_bind_config\000"
	.space	1
	.type	__func__.38834, %object
	.size	__func__.38834, 19
__func__.38834:
	.ascii	"frmnet_bind_config\000"
	.space	1
	.type	__func__.56538, %object
	.size	__func__.56538, 17
__func__.56538:
	.ascii	"ecm_qc_bam_setup\000"
	.space	3
	.type	__func__.56663, %object
	.size	__func__.56663, 19
__func__.56663:
	.ascii	"ecm_qc_bind_config\000"
	.space	1
	.type	__func__.56838, %object
	.size	__func__.56838, 22
__func__.56838:
	.ascii	"mbim_configure_params\000"
	.space	2
	.type	__func__.56982, %object
	.size	__func__.56982, 13
__func__.56982:
	.ascii	"mbim_disable\000"
	.space	3
	.type	__func__.56851, %object
	.size	__func__.56851, 20
__func__.56851:
	.ascii	"mbim_bam_disconnect\000"
	.type	__func__.57238, %object
	.size	__func__.57238, 17
__func__.57238:
	.ascii	"bam_data_connect\000"
	.space	3
	.type	__func__.56971, %object
	.size	__func__.56971, 13
__func__.56971:
	.ascii	"mbim_set_alt\000"
	.space	3
	.type	__func__.56847, %object
	.size	__func__.56847, 17
__func__.56847:
	.ascii	"mbim_bam_connect\000"
	.space	3
	.type	__func__.57515, %object
	.size	__func__.57515, 19
__func__.57515:
	.ascii	"rndis_qc_bam_setup\000"
	.space	1
	.type	__func__.57668, %object
	.size	__func__.57668, 28
__func__.57668:
	.ascii	"rndis_qc_bind_config_vendor\000"
	.type	__func__.63622, %object
	.size	__func__.63622, 25
__func__.63622:
	.ascii	"ecm_function_bind_config\000"
	.space	3
	.type	__func__.58074, %object
	.size	__func__.58074, 15
__func__.58074:
	.ascii	"gether_connect\000"
	.space	1
	.type	__func__.62802, %object
	.size	__func__.62802, 12
__func__.62802:
	.ascii	"ncm_set_alt\000"
	.type	eth_qc_netdev_ops, %object
	.size	eth_qc_netdev_ops, 136
eth_qc_netdev_ops:
	.space	8
	.word	eth_qc_open
	.word	eth_qc_stop
	.word	eth_qc_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_qc_change_mtu
	.space	84
	.type	qc_ethtool_ops, %object
	.size	qc_ethtool_ops, 164
qc_ethtool_ops:
	.space	8
	.word	eth_qc_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.63513, %object
	.size	__func__.63513, 30
__func__.63513:
	.ascii	"rndis_qc_function_bind_config\000"
	.space	2
	.type	__func__.63317, %object
	.size	__func__.63317, 28
__func__.63317:
	.ascii	"ecm_qc_function_bind_config\000"
	.type	__func__.56548, %object
	.size	__func__.56548, 19
__func__.56548:
	.ascii	"ecm_qc_bam_connect\000"
	.space	1
	.type	__func__.57609, %object
	.size	__func__.57609, 17
__func__.57609:
	.ascii	"rndis_qc_disable\000"
	.space	3
	.type	__func__.57524, %object
	.size	__func__.57524, 21
__func__.57524:
	.ascii	"rndis_qc_bam_connect\000"
	.space	3
	.type	__func__.61328, %object
	.size	__func__.61328, 20
__func__.61328:
	.ascii	"gaudio_open_snd_dev\000"
	.type	__func__.61339, %object
	.size	__func__.61339, 13
__func__.61339:
	.ascii	"gaudio_setup\000"
	.space	3
	.type	__func__.61810, %object
	.size	__func__.61810, 18
__func__.61810:
	.ascii	"audio_bind_config\000"
	.space	2
	.type	__func__.62259, %object
	.size	__func__.62259, 25
__func__.62259:
	.ascii	"conn_gadget_complete_out\000"
	.space	3
	.type	__func__.62936, %object
	.size	__func__.62936, 25
__func__.62936:
	.ascii	"ncm_function_bind_config\000"
	.space	3
	.type	__func__.62951, %object
	.size	__func__.62951, 13
__func__.62951:
	.ascii	"is_ncm_ready\000"
	.space	3
	.type	__func__.62955, %object
	.size	__func__.62955, 26
__func__.62955:
	.ascii	"set_ncm_device_descriptor\000"
	.space	2
	.type	__func__.62988, %object
	.size	__func__.62988, 22
__func__.62988:
	.ascii	"terminal_ctrl_request\000"
	.space	2
	.type	mirrorlink_shortname, %object
	.size	mirrorlink_shortname, 8
mirrorlink_shortname:
	.ascii	"usb_ncm\000"
	.type	conn_gadget_fops, %object
	.size	conn_gadget_fops, 108
conn_gadget_fops:
	.word	0
	.space	4
	.word	conn_gadget_read
	.word	conn_gadget_write
	.space	12
	.word	conn_gadget_poll
	.word	conn_gadget_ioctl
	.space	8
	.word	conn_gadget_open
	.word	conn_gadget_flush
	.word	conn_gadget_release
	.space	52
	.type	conn_gadget_shortname, %object
	.size	conn_gadget_shortname, 17
conn_gadget_shortname:
	.ascii	"android_ssusbcon\000"
	.space	3
	.type	__param_str_audio_capture_buf_size, %object
	.size	__param_str_audio_capture_buf_size, 31
__param_str_audio_capture_buf_size:
	.ascii	"android.audio_capture_buf_size\000"
	.space	1
	.type	__param_str_req_capture_count, %object
	.size	__param_str_req_capture_count, 26
__param_str_req_capture_count:
	.ascii	"android.req_capture_count\000"
	.space	2
	.type	__param_str_req_capture_buf_size, %object
	.size	__param_str_req_capture_buf_size, 29
__param_str_req_capture_buf_size:
	.ascii	"android.req_capture_buf_size\000"
	.space	3
	.type	__param_str_audio_playback_buf_size, %object
	.size	__param_str_audio_playback_buf_size, 32
__param_str_audio_playback_buf_size:
	.ascii	"android.audio_playback_buf_size\000"
	.type	__param_str_req_playback_count, %object
	.size	__param_str_req_playback_count, 27
__param_str_req_playback_count:
	.ascii	"android.req_playback_count\000"
	.space	1
	.type	__param_str_req_playback_buf_size, %object
	.size	__param_str_req_playback_buf_size, 30
__param_str_req_playback_buf_size:
	.ascii	"android.req_playback_buf_size\000"
	.space	2
	.type	__param_str_fn_cntl, %object
	.size	__param_str_fn_cntl, 16
__param_str_fn_cntl:
	.ascii	"android.fn_cntl\000"
	.type	__param_str_fn_cap, %object
	.size	__param_str_fn_cap, 15
__param_str_fn_cap:
	.ascii	"android.fn_cap\000"
	.space	1
	.type	__param_str_fn_play, %object
	.size	__param_str_fn_play, 16
__param_str_fn_play:
	.ascii	"android.fn_play\000"
	.type	__param_str_qc_host_addr, %object
	.size	__param_str_qc_host_addr, 21
__param_str_qc_host_addr:
	.ascii	"android.qc_host_addr\000"
	.space	3
	.type	__param_str_qc_dev_addr, %object
	.size	__param_str_qc_dev_addr, 20
__param_str_qc_dev_addr:
	.ascii	"android.qc_dev_addr\000"
	.type	__param_str_host_addr, %object
	.size	__param_str_host_addr, 18
__param_str_host_addr:
	.ascii	"android.host_addr\000"
	.space	2
	.type	__param_str_dev_addr, %object
	.size	__param_str_dev_addr, 17
__param_str_dev_addr:
	.ascii	"android.dev_addr\000"
	.space	3
	.type	__param_str_qmult, %object
	.size	__param_str_qmult, 14
__param_str_qmult:
	.ascii	"android.qmult\000"
	.space	2
	.type	rndis_qc_fops, %object
	.size	rndis_qc_fops, 108
rndis_qc_fops:
	.word	0
	.space	28
	.word	rndis_qc_ioctl
	.space	8
	.word	rndis_qc_open_dev
	.space	4
	.word	rndis_qc_release_dev
	.space	52
	.type	mbim_fops, %object
	.size	mbim_fops, 108
mbim_fops:
	.word	0
	.space	4
	.word	mbim_read
	.word	mbim_write
	.space	16
	.word	mbim_ioctl
	.space	8
	.word	mbim_open
	.space	4
	.word	mbim_release
	.space	52
	.type	__param_str_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_str_rndis_ul_max_xfer_size_rcvd, 36
__param_str_rndis_ul_max_xfer_size_rcvd:
	.ascii	"android.rndis_ul_max_xfer_size_rcvd\000"
	.type	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, 39
__param_str_rndis_ul_max_pkt_per_xfer_rcvd:
	.ascii	"android.rndis_ul_max_pkt_per_xfer_rcvd\000"
	.space	1
	.type	__param_str_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer, 34
__param_str_rndis_ul_max_pkt_per_xfer:
	.ascii	"android.rndis_ul_max_pkt_per_xfer\000"
	.space	2
	.type	__param_str_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_str_rndis_dl_max_pkt_per_xfer, 34
__param_str_rndis_dl_max_pkt_per_xfer:
	.ascii	"android.rndis_dl_max_pkt_per_xfer\000"
	.space	2
	.type	acc_hid_table, %object
	.size	acc_hid_table, 32
acc_hid_table:
	.short	3
	.space	2
	.word	-1
	.word	-1
	.space	4
	.space	16
	.type	acc_fops, %object
	.size	acc_fops, 108
acc_fops:
	.word	0
	.space	4
	.word	acc_read
	.word	acc_write
	.space	16
	.word	acc_ioctl
	.space	8
	.word	acc_open
	.space	4
	.word	acc_release
	.space	52
	.type	mtp_fops, %object
	.size	mtp_fops, 108
mtp_fops:
	.word	0
	.space	4
	.word	mtp_read
	.word	mtp_write
	.space	16
	.word	mtp_ioctl
	.space	8
	.word	mtp_open
	.space	4
	.word	mtp_release
	.space	52
	.type	mtp_shortname, %object
	.size	mtp_shortname, 8
mtp_shortname:
	.ascii	"mtp_usb\000"
	.type	__param_str_mtp_tx_reqs, %object
	.size	__param_str_mtp_tx_reqs, 20
__param_str_mtp_tx_reqs:
	.ascii	"android.mtp_tx_reqs\000"
	.type	__param_str_mtp_tx_req_len, %object
	.size	__param_str_mtp_tx_req_len, 23
__param_str_mtp_tx_req_len:
	.ascii	"android.mtp_tx_req_len\000"
	.space	1
	.type	__param_str_mtp_rx_req_len, %object
	.size	__param_str_mtp_rx_req_len, 23
__param_str_mtp_rx_req_len:
	.ascii	"android.mtp_rx_req_len\000"
	.space	1
	.type	ccid_ctrl_fops, %object
	.size	ccid_ctrl_fops, 108
ccid_ctrl_fops:
	.word	0
	.space	4
	.word	ccid_ctrl_read
	.space	20
	.word	ccid_ctrl_ioctl
	.space	8
	.word	ccid_ctrl_open
	.space	4
	.word	ccid_ctrl_release
	.space	52
	.type	ccid_bulk_fops, %object
	.size	ccid_bulk_fops, 108
ccid_bulk_fops:
	.word	0
	.space	4
	.word	ccid_bulk_read
	.word	ccid_bulk_write
	.space	28
	.word	ccid_bulk_open
	.space	4
	.word	ccid_bulk_release
	.space	52
	.type	adb_fops, %object
	.size	adb_fops, 108
adb_fops:
	.word	0
	.space	4
	.word	adb_read
	.word	adb_write
	.space	28
	.word	adb_open
	.space	4
	.word	adb_release
	.space	52
	.type	adb_shortname, %object
	.size	adb_shortname, 12
adb_shortname:
	.ascii	"android_adb\000"
	.type	modem_fops, %object
	.size	modem_fops, 108
modem_fops:
	.word	0
	.word	no_llseek
	.word	modem_read
	.space	16
	.word	modem_poll
	.word	modem_ioctl
	.space	8
	.word	modem_open
	.space	4
	.word	modem_close
	.space	52
	.type	__param_str_ghsuart_data_tx_intr_thld, %object
	.size	__param_str_ghsuart_data_tx_intr_thld, 34
__param_str_ghsuart_data_tx_intr_thld:
	.ascii	"android.ghsuart_data_tx_intr_thld\000"
	.space	2
	.type	__param_str_ghsuart_data_rx_req_size, %object
	.size	__param_str_ghsuart_data_rx_req_size, 33
__param_str_ghsuart_data_rx_req_size:
	.ascii	"android.ghsuart_data_rx_req_size\000"
	.space	3
	.type	__param_str_ghsuart_data_serial_rx_q_size, %object
	.size	__param_str_ghsuart_data_serial_rx_q_size, 38
__param_str_ghsuart_data_serial_rx_q_size:
	.ascii	"android.ghsuart_data_serial_rx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_serial_tx_q_size, %object
	.size	__param_str_ghsuart_data_serial_tx_q_size, 38
__param_str_ghsuart_data_serial_tx_q_size:
	.ascii	"android.ghsuart_data_serial_tx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_rx_q_size, 37
__param_str_ghsuart_data_rmnet_rx_q_size:
	.ascii	"android.ghsuart_data_rmnet_rx_q_size\000"
	.space	3
	.type	__param_str_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_tx_q_size, 37
__param_str_ghsuart_data_rmnet_tx_q_size:
	.ascii	"android.ghsuart_data_rmnet_tx_q_size\000"
	.space	3
	.type	__param_str_record_timestamp, %object
	.size	__param_str_record_timestamp, 25
__param_str_record_timestamp:
	.ascii	"android.record_timestamp\000"
	.space	3
	.type	__param_str_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_str_ghsic_data_pend_limit_with_bridge, 42
__param_str_ghsic_data_pend_limit_with_bridge:
	.ascii	"android.ghsic_data_pend_limit_with_bridge\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_dis_thld, %object
	.size	__param_str_ghsic_data_fctrl_dis_thld, 34
__param_str_ghsic_data_fctrl_dis_thld:
	.ascii	"android.ghsic_data_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_en_thld, %object
	.size	__param_str_ghsic_data_fctrl_en_thld, 33
__param_str_ghsic_data_fctrl_en_thld:
	.ascii	"android.ghsic_data_fctrl_en_thld\000"
	.space	3
	.type	__param_str_ghsic_data_fctrl_support, %object
	.size	__param_str_ghsic_data_fctrl_support, 33
__param_str_ghsic_data_fctrl_support:
	.ascii	"android.ghsic_data_fctrl_support\000"
	.space	3
	.type	__param_str_ghsic_data_tx_intr_thld, %object
	.size	__param_str_ghsic_data_tx_intr_thld, 32
__param_str_ghsic_data_tx_intr_thld:
	.ascii	"android.ghsic_data_tx_intr_thld\000"
	.type	__param_str_ghsic_data_rx_req_size, %object
	.size	__param_str_ghsic_data_rx_req_size, 31
__param_str_ghsic_data_rx_req_size:
	.ascii	"android.ghsic_data_rx_req_size\000"
	.space	1
	.type	__param_str_ghsic_data_serial_rx_q_size, %object
	.size	__param_str_ghsic_data_serial_rx_q_size, 36
__param_str_ghsic_data_serial_rx_q_size:
	.ascii	"android.ghsic_data_serial_rx_q_size\000"
	.type	__param_str_ghsic_data_serial_tx_q_size, %object
	.size	__param_str_ghsic_data_serial_tx_q_size, 36
__param_str_ghsic_data_serial_tx_q_size:
	.ascii	"android.ghsic_data_serial_tx_q_size\000"
	.type	__param_str_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_rx_q_size, 35
__param_str_ghsic_data_rmnet_rx_q_size:
	.ascii	"android.ghsic_data_rmnet_rx_q_size\000"
	.space	1
	.type	__param_str_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_tx_q_size, 35
__param_str_ghsic_data_rmnet_tx_q_size:
	.ascii	"android.ghsic_data_rmnet_tx_q_size\000"
	.space	1
	.type	rmnet_ctrl_fops, %object
	.size	rmnet_ctrl_fops, 108
rmnet_ctrl_fops:
	.word	0
	.space	4
	.word	rmnet_ctrl_read
	.word	rmnet_ctrl_write
	.space	12
	.word	rmnet_ctrl_poll
	.word	rmnet_ctrl_ioctl
	.space	8
	.word	rmnet_ctrl_open
	.space	4
	.word	rmnet_ctrl_release
	.space	52
	.type	__param_str_dl_intr_threshold, %object
	.size	__param_str_dl_intr_threshold, 26
__param_str_dl_intr_threshold:
	.ascii	"android.dl_intr_threshold\000"
	.space	2
	.type	__param_str_bam_mux_rx_req_size, %object
	.size	__param_str_bam_mux_rx_req_size, 28
__param_str_bam_mux_rx_req_size:
	.ascii	"android.bam_mux_rx_req_size\000"
	.type	__param_str_bam_mux_rx_q_size, %object
	.size	__param_str_bam_mux_rx_q_size, 26
__param_str_bam_mux_rx_q_size:
	.ascii	"android.bam_mux_rx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_tx_q_size, %object
	.size	__param_str_bam_mux_tx_q_size, 26
__param_str_bam_mux_tx_q_size:
	.ascii	"android.bam_mux_tx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_dis_thld, 34
__param_str_bam_mux_rx_fctrl_dis_thld:
	.ascii	"android.bam_mux_rx_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_support, %object
	.size	__param_str_bam_mux_rx_fctrl_support, 33
__param_str_bam_mux_rx_fctrl_support:
	.ascii	"android.bam_mux_rx_fctrl_support\000"
	.space	3
	.type	__param_str_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_en_thld, 33
__param_str_bam_mux_rx_fctrl_en_thld:
	.ascii	"android.bam_mux_rx_fctrl_en_thld\000"
	.space	3
	.type	__param_str_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_str_bam_mux_tx_pkt_drop_thld, 33
__param_str_bam_mux_tx_pkt_drop_thld:
	.ascii	"android.bam_mux_tx_pkt_drop_thld\000"
	.space	3
	.type	__param_str_bam_pending_limit, %object
	.size	__param_str_bam_pending_limit, 26
__param_str_bam_pending_limit:
	.ascii	"android.bam_pending_limit\000"
	.space	2
	.type	fsg_string_interface, %object
	.size	fsg_string_interface, 13
fsg_string_interface:
	.ascii	"Mass Storage\000"
	.space	3
	.type	rmnet_mux_ctrl_fops, %object
	.size	rmnet_mux_ctrl_fops, 108
rmnet_mux_ctrl_fops:
	.word	0
	.space	4
	.word	usb_rmnet_mux_ctrl_read
	.word	usb_rmnet_mux_ctrl_write
	.space	16
	.word	usb_rmnet_mux_ctrl_ioctl
	.space	8
	.word	usb_rmnet_mux_ctrl_open
	.space	4
	.word	usb_rmnet_mux_ctrl_release
	.space	52
	.type	__param_str_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_dis_thld, 35
__param_str_mux_sdio_rx_fctrl_dis_thld:
	.ascii	"android.mux_sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_en_thld, 34
__param_str_mux_sdio_rx_fctrl_en_thld:
	.ascii	"android.mux_sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_mux_sdio_tx_pkt_drop_thld, 34
__param_str_mux_sdio_tx_pkt_drop_thld:
	.ascii	"android.mux_sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_mux_smd_data_ch, %object
	.size	__param_str_rmnet_mux_smd_data_ch, 30
__param_str_rmnet_mux_smd_data_ch:
	.ascii	"android.rmnet_mux_smd_data_ch\000"
	.space	2
	.type	__param_str_rmnet_mux_sdio_data_ch, %object
	.size	__param_str_rmnet_mux_sdio_data_ch, 31
__param_str_rmnet_mux_sdio_data_ch:
	.ascii	"android.rmnet_mux_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_str_rmnet_mux_sdio_ctl_ch, 30
__param_str_rmnet_mux_sdio_ctl_ch:
	.ascii	"android.rmnet_mux_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_sdio_rx_fctrl_dis_thld, 31
__param_str_sdio_rx_fctrl_dis_thld:
	.ascii	"android.sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_sdio_rx_fctrl_en_thld, 30
__param_str_sdio_rx_fctrl_en_thld:
	.ascii	"android.sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_sdio_tx_pkt_drop_thld, 30
__param_str_sdio_tx_pkt_drop_thld:
	.ascii	"android.sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_sdio_data_ch, %object
	.size	__param_str_rmnet_sdio_data_ch, 27
__param_str_rmnet_sdio_data_ch:
	.ascii	"android.rmnet_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_sdio_ctl_ch, %object
	.size	__param_str_rmnet_sdio_ctl_ch, 26
__param_str_rmnet_sdio_ctl_ch:
	.ascii	"android.rmnet_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_rmnet_data_ch, %object
	.size	__param_str_rmnet_data_ch, 22
__param_str_rmnet_data_ch:
	.ascii	"android.rmnet_data_ch\000"
	.space	2
	.type	__param_str_rmnet_ctl_ch, %object
	.size	__param_str_rmnet_ctl_ch, 21
__param_str_rmnet_ctl_ch:
	.ascii	"android.rmnet_ctl_ch\000"
	.space	3
	.type	__param_str_iSerialNumber, %object
	.size	__param_str_iSerialNumber, 22
__param_str_iSerialNumber:
	.ascii	"android.iSerialNumber\000"
	.space	2
	.type	__param_str_iProduct, %object
	.size	__param_str_iProduct, 17
__param_str_iProduct:
	.ascii	"android.iProduct\000"
	.space	3
	.type	__param_str_iManufacturer, %object
	.size	__param_str_iManufacturer, 22
__param_str_iManufacturer:
	.ascii	"android.iManufacturer\000"
	.space	2
	.type	__param_str_bcdDevice, %object
	.size	__param_str_bcdDevice, 18
__param_str_bcdDevice:
	.ascii	"android.bcdDevice\000"
	.space	2
	.type	__param_str_idProduct, %object
	.size	__param_str_idProduct, 18
__param_str_idProduct:
	.ascii	"android.idProduct\000"
	.space	2
	.type	__param_str_idVendor, %object
	.size	__param_str_idVendor, 17
__param_str_idVendor:
	.ascii	"android.idVendor\000"
	.data
	.align	3
	.set	.LANCHOR0,. + 0
	.set	.LANCHOR5,. + 8184
	.type	usb_diag_ch_list, %object
	.size	usb_diag_ch_list, 8
usb_diag_ch_list:
	.word	usb_diag_ch_list
	.word	usb_diag_ch_list
	.type	uac1_ac_header_desc, %object
	.size	uac1_ac_header_desc, 10
uac1_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	52
	.byte	2
	.space	2
	.space	2
	.type	ntb_parameters, %object
	.size	ntb_parameters, 28
ntb_parameters:
	.short	28
	.short	3
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.type	mbim_ntb_parameters, %object
	.size	mbim_ntb_parameters, 28
mbim_ntb_parameters:
	.short	28
	.short	1
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	4096
	.short	4
	.short	0
	.short	4
	.short	0
	.type	ndp16_opts, %object
	.size	ndp16_opts, 44
ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	ndp32_opts, %object
	.size	ndp32_opts, 44
ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mbim_ext_config_desc, %object
	.size	mbim_ext_config_desc, 40
mbim_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	65
	.byte	76
	.byte	84
	.byte	82
	.byte	67
	.byte	70
	.byte	71
	.space	1
	.space	14
	.type	mbim_os_string, %object
	.size	mbim_os_string, 18
mbim_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	-91
	.byte	0
	.space	2
	.type	device_desc, %object
	.size	device_desc, 18
device_desc:
	.byte	18
	.byte	1
	.short	512
	.byte	0
	.space	3
	.short	6353
	.short	1
	.short	-1
	.space	3
	.byte	1
	.space	2
	.type	_rs.51616, %object
	.size	_rs.51616, 24
_rs.51616:
	.word	0
	.word	1250
	.word	10
	.space	12
	.type	usb_qdss_ch_list, %object
	.size	usb_qdss_ch_list, 8
usb_qdss_ch_list:
	.word	usb_qdss_ch_list
	.word	usb_qdss_ch_list
	.type	android_platform_driver, %object
	.size	android_platform_driver, 80
android_platform_driver:
	.word	android_probe
	.word	android_remove
	.space	12
	.word	.LC802
	.space	16
	.word	usb_android_dt_match
	.space	32
	.word	android_id_table
	.type	rmnet_ctl_ch, %object
	.size	rmnet_ctl_ch, 4
rmnet_ctl_ch:
	.word	.LC591
	.type	rmnet_data_ch, %object
	.size	rmnet_data_ch, 4
rmnet_data_ch:
	.word	.LC591
	.type	mtp_os_string, %object
	.size	mtp_os_string, 18
mtp_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	1
	.byte	0
	.space	2
	.type	mtp_ext_config_desc, %object
	.size	mtp_ext_config_desc, 40
mtp_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	77
	.byte	84
	.byte	80
	.space	5
	.space	14
	.type	ccid_class_desc, %object
	.size	ccid_class_desc, 54
ccid_class_desc:
	.byte	54
	.byte	33
	.short	272
	.byte	0
	.byte	2
	.4byte	1
	.4byte	3580
	.4byte	3580
	.byte	0
	.4byte	9600
	.4byte	9600
	.byte	0
	.word	0
	.word	0
	.word	0
	.word	131198
	.word	512
	.byte	0
	.byte	0
	.short	0
	.byte	0
	.byte	1
	.space	2
	.type	_rs.38067, %object
	.size	_rs.38067, 24
_rs.38067:
	.word	0
	.word	1250
	.word	10
	.space	12
	.type	dl_intr_threshold, %object
	.size	dl_intr_threshold, 4
dl_intr_threshold:
	.word	20
	.type	ghsic_data_fctrl_support, %object
	.size	ghsic_data_fctrl_support, 4
ghsic_data_fctrl_support:
	.word	1
	.type	ghsic_data_fctrl_en_thld, %object
	.size	ghsic_data_fctrl_en_thld, 4
ghsic_data_fctrl_en_thld:
	.word	500
	.type	qmult, %object
	.size	qmult, 4
qmult:
	.word	10
	.type	mux_sdio_rx_fctrl_en_thld, %object
	.size	mux_sdio_rx_fctrl_en_thld, 4
mux_sdio_rx_fctrl_en_thld:
	.word	1000
	.type	bam_mux_rx_fctrl_support, %object
	.size	bam_mux_rx_fctrl_support, 4
bam_mux_rx_fctrl_support:
	.word	1
	.type	bam_mux_rx_fctrl_en_thld, %object
	.size	bam_mux_rx_fctrl_en_thld, 4
bam_mux_rx_fctrl_en_thld:
	.word	500
	.type	bam_mux_rx_req_size, %object
	.size	bam_mux_rx_req_size, 4
bam_mux_rx_req_size:
	.word	2048
	.type	mtp_rx_req_len, %object
	.size	mtp_rx_req_len, 4
mtp_rx_req_len:
	.word	16384
	.type	bam_pending_limit, %object
	.size	bam_pending_limit, 4
bam_pending_limit:
	.word	220
	.type	bam_mux_rx_fctrl_dis_thld, %object
	.size	bam_mux_rx_fctrl_dis_thld, 4
bam_mux_rx_fctrl_dis_thld:
	.word	300
	.type	bam_mux_rx_q_size, %object
	.size	bam_mux_rx_q_size, 4
bam_mux_rx_q_size:
	.word	16
	.type	bam_mux_tx_q_size, %object
	.size	bam_mux_tx_q_size, 4
bam_mux_tx_q_size:
	.word	200
	.type	rmnet_device, %object
	.size	rmnet_device, 36
rmnet_device:
	.word	255
	.word	.LC1052
	.word	rmnet_ctrl_fops
	.space	24
	.type	acc_device, %object
	.size	acc_device, 36
acc_device:
	.word	255
	.word	.LC1040
	.word	acc_fops
	.space	24
	.type	rndis_qc_device, %object
	.size	rndis_qc_device, 36
rndis_qc_device:
	.word	255
	.word	.LC1029
	.word	rndis_qc_fops
	.space	24
	.type	mtp_device, %object
	.size	mtp_device, 36
mtp_device:
	.word	255
	.word	mtp_shortname
	.word	mtp_fops
	.space	24
	.type	adb_device, %object
	.size	adb_device, 36
adb_device:
	.word	255
	.word	adb_shortname
	.word	adb_fops
	.space	24
	.type	rmnet_mux_ctrl_dev, %object
	.size	rmnet_mux_ctrl_dev, 36
rmnet_mux_ctrl_dev:
	.word	255
	.word	.LC1066
	.word	rmnet_mux_ctrl_fops
	.space	24
	.type	mirrorlink_device, %object
	.size	mirrorlink_device, 36
mirrorlink_device:
	.word	255
	.word	mirrorlink_shortname
	.space	28
	.type	ccid_bulk_device, %object
	.size	ccid_bulk_device, 36
ccid_bulk_device:
	.word	255
	.word	.LC1045
	.word	ccid_bulk_fops
	.space	24
	.type	ccid_ctrl_device, %object
	.size	ccid_ctrl_device, 36
ccid_ctrl_device:
	.word	255
	.word	.LC1044
	.word	ccid_ctrl_fops
	.space	24
	.type	mbim_device, %object
	.size	mbim_device, 36
mbim_device:
	.word	255
	.word	.LC1036
	.word	mbim_fops
	.space	24
	.type	ops.53543, %object
	.size	ops.53543, 12
ops.53543:
	.word	f_midi_snd_free
	.space	8
	.type	gmidi_in_ops, %object
	.size	gmidi_in_ops, 16
gmidi_in_ops:
	.word	f_midi_in_open
	.word	f_midi_in_close
	.word	f_midi_in_trigger
	.space	4
	.type	gmidi_out_ops, %object
	.size	gmidi_out_ops, 16
gmidi_out_ops:
	.word	f_midi_out_open
	.word	f_midi_out_close
	.word	f_midi_out_trigger
	.space	4
	.type	conn_gadget_device, %object
	.size	conn_gadget_device, 36
conn_gadget_device:
	.word	255
	.word	conn_gadget_shortname
	.word	conn_gadget_fops
	.space	24
	.type	strings_dev, %object
	.size	strings_dev, 32
strings_dev:
	.space	4
	.word	manufacturer_string
	.space	4
	.word	product_string
	.space	4
	.word	serial_string
	.space	8
	.type	last_vote.63008, %object
	.size	last_vote.63008, 4
last_vote.63008:
	.word	-1
	.type	acc_hid_ll_driver, %object
	.size	acc_hid_ll_driver, 28
acc_hid_ll_driver:
	.word	acc_hid_start
	.word	acc_hid_stop
	.word	acc_hid_open
	.word	acc_hid_close
	.space	8
	.word	acc_hid_parse
	.type	ffs_fs_type, %object
	.size	ffs_fs_type, 36
ffs_fs_type:
	.word	.LC1064
	.space	4
	.word	ffs_fs_mount
	.space	8
	.word	ffs_fs_kill_sb
	.word	0
	.space	8
	.type	req_capture_buf_size, %object
	.size	req_capture_buf_size, 4
req_capture_buf_size:
	.word	32
	.type	audio_playback_buf_size, %object
	.size	audio_playback_buf_size, 4
audio_playback_buf_size:
	.word	8192
	.type	req_playback_count, %object
	.size	req_playback_count, 4
req_playback_count:
	.word	48
	.type	req_playback_buf_size, %object
	.size	req_playback_buf_size, 4
req_playback_buf_size:
	.word	32
	.type	composite_driver, %object
	.size	composite_driver, 88
composite_driver:
	.space	8
	.word	composite_unbind
	.word	composite_setup
	.word	composite_disconnect
	.word	composite_suspend
	.word	composite_resume
	.space	8
	.word	0
	.space	44
	.space	4
	.type	_rs.51954, %object
	.size	_rs.51954, 24
_rs.51954:
	.word	0
	.word	1250
	.word	10
	.space	12
	.type	ghsuart_data_rx_req_size, %object
	.size	ghsuart_data_rx_req_size, 4
ghsuart_data_rx_req_size:
	.word	2048
	.type	_rs.52005, %object
	.size	_rs.52005, 24
_rs.52005:
	.word	0
	.word	1250
	.word	10
	.space	12
	.type	ghsuart_data_tx_intr_thld, %object
	.size	ghsuart_data_tx_intr_thld, 4
ghsuart_data_tx_intr_thld:
	.word	1
	.type	bam_mux_tx_pkt_drop_thld, %object
	.size	bam_mux_tx_pkt_drop_thld, 4
bam_mux_tx_pkt_drop_thld:
	.word	1000
	.type	sdio_rx_fctrl_en_thld, %object
	.size	sdio_rx_fctrl_en_thld, 4
sdio_rx_fctrl_en_thld:
	.word	1000
	.type	rl.52679, %object
	.size	rl.52679, 24
rl.52679:
	.word	0
	.word	2500
	.word	1
	.space	12
	.type	adb_function, %object
	.size	adb_function, 52
adb_function:
	.word	.LC620
	.space	20
	.word	adb_function_init
	.word	adb_function_cleanup
	.word	adb_android_function_enable
	.word	adb_android_function_disable
	.word	adb_function_bind_config
	.space	8
	.type	audio_capture_buf_size, %object
	.size	audio_capture_buf_size, 4
audio_capture_buf_size:
	.word	8192
	.type	ecm_qc_string_defs, %object
	.size	ecm_qc_string_defs, 32
ecm_qc_string_defs:
	.space	4
	.word	.LC1033
	.space	4
	.word	0
	.space	4
	.word	.LC1034
	.space	8
	.type	ghsic_data_tx_intr_thld, %object
	.size	ghsic_data_tx_intr_thld, 4
ghsic_data_tx_intr_thld:
	.word	20
	.type	ghsic_data_fctrl_dis_thld, %object
	.size	ghsic_data_fctrl_dis_thld, 4
ghsic_data_fctrl_dis_thld:
	.word	300
	.type	android_usb_attributes, %object
	.size	android_usb_attributes, 76
android_usb_attributes:
	.word	dev_attr_idVendor
	.word	dev_attr_idProduct
	.word	dev_attr_bcdDevice
	.word	dev_attr_bDeviceClass
	.word	dev_attr_bDeviceSubClass
	.word	dev_attr_bDeviceProtocol
	.word	dev_attr_iManufacturer
	.word	dev_attr_iProduct
	.word	dev_attr_iSerial
	.word	dev_attr_functions
	.word	dev_attr_enable
	.word	dev_attr_pm_qos
	.word	dev_attr_state
	.word	dev_attr_bcdUSB
	.word	dev_attr_usb30en
	.word	dev_attr_ss_host_available
	.word	dev_attr_macos
	.word	dev_attr_remote_wakeup
	.word	0
	.type	android_usb_driver, %object
	.size	android_usb_driver, 44
android_usb_driver:
	.word	.LC802
	.space	8
	.word	device_desc
	.word	dev_strings
	.word	5
	.space	4
	.word	android_usb_unbind
	.space	12
	.type	dev_attr_suspended, %object
	.size	dev_attr_suspended, 16
dev_attr_suspended:
	.word	.LC1071
	.short	292
	.space	2
	.word	composite_show_suspended
	.word	0
	.type	_rs.51088, %object
	.size	_rs.51088, 24
_rs.51088:
	.word	0
	.word	1250
	.word	10
	.space	12
	.type	ghsic_data_pend_limit_with_bridge, %object
	.size	ghsic_data_pend_limit_with_bridge, 4
ghsic_data_pend_limit_with_bridge:
	.word	500
	.type	ghsic_data_rx_req_size, %object
	.size	ghsic_data_rx_req_size, 4
ghsic_data_rx_req_size:
	.word	2048
	.type	_rs.51145, %object
	.size	_rs.51145, 24
_rs.51145:
	.word	0
	.word	1250
	.word	10
	.space	12
	.type	ncm_string_defs, %object
	.size	ncm_string_defs, 40
ncm_string_defs:
	.space	4
	.word	.LC1007
	.space	4
	.word	0
	.space	4
	.word	.LC1008
	.space	4
	.word	.LC1009
	.space	8
	.type	ecm_string_defs, %object
	.size	ecm_string_defs, 40
ecm_string_defs:
	.space	4
	.word	.LC1033
	.space	4
	.word	0
	.space	4
	.word	.LC1034
	.space	4
	.word	.LC1035
	.space	8
	.type	mbim_ndp16_opts, %object
	.size	mbim_ndp16_opts, 44
mbim_ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	mbim_ndp32_opts, %object
	.size	mbim_ndp32_opts, 44
mbim_ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mtp_tx_req_len, %object
	.size	mtp_tx_req_len, 4
mtp_tx_req_len:
	.word	16384
	.type	acc_hid_driver, %object
	.size	acc_hid_driver, 132
acc_hid_driver:
	.word	.LC1039
	.word	acc_hid_table
	.space	12
	.word	acc_hid_probe
	.space	108
	.type	acm_string_defs, %object
	.size	acm_string_defs, 32
acm_string_defs:
	.space	4
	.word	.LC1046
	.space	4
	.word	.LC1047
	.space	4
	.word	.LC1048
	.space	8
	.type	acm_control_interface_desc, %object
	.size	acm_control_interface_desc, 9
acm_control_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.space	3
	.type	acm_data_interface_desc, %object
	.size	acm_data_interface_desc, 9
acm_data_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	acm_iad_descriptor, %object
	.size	acm_iad_descriptor, 8
acm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.type	acm_strings, %object
	.size	acm_strings, 8
acm_strings:
	.word	acm_string_table
	.word	0
	.type	dev_attr_cdrom, %object
	.size	dev_attr_cdrom, 16
dev_attr_cdrom:
	.word	.LC1060
	.short	420
	.space	2
	.word	fsg_show_cdrom
	.word	fsg_store_cdrom
	.type	dev_attr_nofua, %object
	.size	dev_attr_nofua, 16
dev_attr_nofua:
	.word	.LC1062
	.short	420
	.space	2
	.word	fsg_show_nofua
	.word	fsg_store_nofua
	.type	dev_attr_ro, %object
	.size	dev_attr_ro, 16
dev_attr_ro:
	.word	.LC1063
	.short	420
	.space	2
	.word	fsg_show_ro
	.word	fsg_store_ro
	.type	dev_attr_file, %object
	.size	dev_attr_file, 16
dev_attr_file:
	.word	.LC1061
	.short	420
	.space	2
	.word	fsg_show_file
	.word	fsg_store_file
	.type	ccid_fs_descs, %object
	.size	ccid_fs_descs, 24
ccid_fs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_fs_notify_desc
	.word	ccid_fs_in_desc
	.word	ccid_fs_out_desc
	.word	0
	.type	ccid_hs_descs, %object
	.size	ccid_hs_descs, 24
ccid_hs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_hs_notify_desc
	.word	ccid_hs_in_desc
	.word	ccid_hs_out_desc
	.word	0
	.type	fs_adb_descs, %object
	.size	fs_adb_descs, 16
fs_adb_descs:
	.word	adb_interface_desc
	.word	adb_fullspeed_in_desc
	.word	adb_fullspeed_out_desc
	.word	0
	.type	hs_adb_descs, %object
	.size	hs_adb_descs, 16
hs_adb_descs:
	.word	adb_interface_desc
	.word	adb_highspeed_in_desc
	.word	adb_highspeed_out_desc
	.word	0
	.type	ss_adb_descs, %object
	.size	ss_adb_descs, 24
ss_adb_descs:
	.word	adb_interface_desc
	.word	adb_superspeed_in_desc
	.word	adb_superspeed_in_comp_desc
	.word	adb_superspeed_out_desc
	.word	adb_superspeed_out_comp_desc
	.word	0
	.type	acc_string_defs, %object
	.size	acc_string_defs, 16
acc_string_defs:
	.space	4
	.word	.LC1041
	.space	8
	.type	acc_interface_desc, %object
	.size	acc_interface_desc, 9
acc_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	acc_strings, %object
	.size	acc_strings, 8
acc_strings:
	.word	acc_string_table
	.word	0
	.type	fs_acc_descs, %object
	.size	fs_acc_descs, 16
fs_acc_descs:
	.word	acc_interface_desc
	.word	acc_fullspeed_in_desc
	.word	acc_fullspeed_out_desc
	.word	0
	.type	hs_acc_descs, %object
	.size	hs_acc_descs, 16
hs_acc_descs:
	.word	acc_interface_desc
	.word	acc_highspeed_in_desc
	.word	acc_highspeed_out_desc
	.word	0
	.type	ss_acc_descs, %object
	.size	ss_acc_descs, 24
ss_acc_descs:
	.word	acc_interface_desc
	.word	acc_superspeed_in_desc
	.word	acc_superspeed_in_comp_desc
	.word	acc_superspeed_out_desc
	.word	acc_superspeed_out_comp_desc
	.word	0
	.type	rmnet_mux_strings, %object
	.size	rmnet_mux_strings, 8
rmnet_mux_strings:
	.word	rmnet_mux_string_table
	.word	0
	.type	rmnet_mux_fs_function, %object
	.size	rmnet_mux_fs_function, 20
rmnet_mux_fs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_fs_notify_desc
	.word	rmnet_mux_fs_in_desc
	.word	rmnet_mux_fs_out_desc
	.word	0
	.type	rmnet_mux_hs_function, %object
	.size	rmnet_mux_hs_function, 20
rmnet_mux_hs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_hs_notify_desc
	.word	rmnet_mux_hs_in_desc
	.word	rmnet_mux_hs_out_desc
	.word	0
	.type	mtp_string_defs, %object
	.size	mtp_string_defs, 16
mtp_string_defs:
	.space	4
	.word	.LC1042
	.space	8
	.type	mtp_interface_desc, %object
	.size	mtp_interface_desc, 9
mtp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	mtp_strings, %object
	.size	mtp_strings, 8
mtp_strings:
	.word	mtp_string_table
	.word	0
	.type	fs_mtp_descs, %object
	.size	fs_mtp_descs, 20
fs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_mtp_descs, %object
	.size	hs_mtp_descs, 20
hs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_mtp_descs, %object
	.size	ss_mtp_descs, 32
ss_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	fs_ptp_descs, %object
	.size	fs_ptp_descs, 20
fs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_ptp_descs, %object
	.size	hs_ptp_descs, 20
hs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_ptp_descs, %object
	.size	ss_ptp_descs, 32
ss_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	fs_conn_gadget_descs, %object
	.size	fs_conn_gadget_descs, 16
fs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_fullspeed_in_desc
	.word	conn_gadget_fullspeed_out_desc
	.word	0
	.type	hs_conn_gadget_descs, %object
	.size	hs_conn_gadget_descs, 16
hs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_highspeed_in_desc
	.word	conn_gadget_highspeed_out_desc
	.word	0
	.type	ss_conn_gadget_descs, %object
	.size	ss_conn_gadget_descs, 24
ss_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_superspeed_in_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	conn_gadget_superspeed_out_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	0
	.type	qdss_string_defs, %object
	.size	qdss_string_defs, 24
qdss_string_defs:
	.space	4
	.word	.LC1069
	.space	4
	.word	.LC1070
	.space	8
	.type	qdss_data_intf_desc, %object
	.size	qdss_data_intf_desc, 9
qdss_data_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ctrl_intf_desc, %object
	.size	qdss_ctrl_intf_desc, 9
qdss_ctrl_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_hs_desc, %object
	.size	qdss_hs_desc, 24
qdss_hs_desc:
	.word	qdss_data_intf_desc
	.word	qdss_hs_data_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_hs_ctrl_in_desc
	.word	qdss_hs_ctrl_out_desc
	.word	0
	.type	qdss_strings, %object
	.size	qdss_strings, 8
qdss_strings:
	.word	qdss_string_table
	.word	0
	.type	mbim_string_defs, %object
	.size	mbim_string_defs, 24
mbim_string_defs:
	.space	4
	.word	.LC1037
	.space	4
	.word	.LC1038
	.space	8
	.type	mbim_control_intf, %object
	.size	mbim_control_intf, 9
mbim_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.space	3
	.type	mbim_data_nop_intf, %object
	.size	mbim_data_nop_intf, 9
mbim_data_nop_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_data_intf, %object
	.size	mbim_data_intf, 9
mbim_data_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_strings, %object
	.size	mbim_strings, 8
mbim_strings:
	.word	mbim_string_table
	.word	0
	.type	fsg_strings, %object
	.size	fsg_strings, 16
fsg_strings:
	.byte	0
	.space	3
	.word	fsg_string_interface
	.space	8
	.type	fsg_intf_desc, %object
	.size	fsg_intf_desc, 9
fsg_intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	8
	.byte	6
	.byte	80
	.byte	0
	.space	3
	.type	fsg_strings_array, %object
	.size	fsg_strings_array, 8
fsg_strings_array:
	.word	fsg_stringtab
	.word	0
	.type	rmnet_sdio_strings, %object
	.size	rmnet_sdio_strings, 8
rmnet_sdio_strings:
	.word	rmnet_sdio_string_table
	.word	0
	.type	rmnet_sdio_fs_function, %object
	.size	rmnet_sdio_fs_function, 20
rmnet_sdio_fs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_fs_notify_desc
	.word	rmnet_sdio_fs_in_desc
	.word	rmnet_sdio_fs_out_desc
	.word	0
	.type	rmnet_sdio_hs_function, %object
	.size	rmnet_sdio_hs_function, 20
rmnet_sdio_hs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_hs_notify_desc
	.word	rmnet_sdio_hs_in_desc
	.word	rmnet_sdio_hs_out_desc
	.word	0
	.type	rmnet_smd_strings, %object
	.size	rmnet_smd_strings, 8
rmnet_smd_strings:
	.word	rmnet_smd_string_table
	.word	0
	.type	rmnet_smd_fs_function, %object
	.size	rmnet_smd_fs_function, 20
rmnet_smd_fs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_fs_notify_desc
	.word	rmnet_smd_fs_in_desc
	.word	rmnet_smd_fs_out_desc
	.word	0
	.type	rmnet_smd_hs_function, %object
	.size	rmnet_smd_hs_function, 20
rmnet_smd_hs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_hs_notify_desc
	.word	rmnet_smd_hs_in_desc
	.word	rmnet_smd_hs_out_desc
	.word	0
	.type	ffs_function, %object
	.size	ffs_function, 52
ffs_function:
	.word	.LC314
	.space	12
	.word	ffs_function_attributes
	.space	4
	.word	ffs_function_init
	.word	ffs_function_cleanup
	.word	ffs_function_enable
	.word	ffs_function_disable
	.word	ffs_function_bind_config
	.space	8
	.type	midi_strings, %object
	.size	midi_strings, 8
midi_strings:
	.word	midi_stringtab
	.word	0
	.type	gadget_type, %object
	.size	gadget_type, 24
gadget_type:
	.word	.LC1028
	.space	20
	.type	rndis_iad_descriptor, %object
	.size	rndis_iad_descriptor, 8
rndis_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_control_intf, %object
	.size	rndis_control_intf, 9
rndis_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_string_defs, %object
	.size	rndis_string_defs, 32
rndis_string_defs:
	.space	4
	.word	.LC1030
	.space	4
	.word	.LC1031
	.space	4
	.word	.LC1032
	.space	8
	.type	rndis_data_intf, %object
	.size	rndis_data_intf, 9
rndis_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_ul_max_pkt_per_xfer, %object
	.size	rndis_ul_max_pkt_per_xfer, 4
rndis_ul_max_pkt_per_xfer:
	.word	3
	.type	rndis_dl_max_pkt_per_xfer, %object
	.size	rndis_dl_max_pkt_per_xfer, 4
rndis_dl_max_pkt_per_xfer:
	.word	3
	.type	rndis_strings, %object
	.size	rndis_strings, 8
rndis_strings:
	.word	rndis_string_table
	.word	0
	.space	4
	.type	_audio_dev, %object
	.size	_audio_dev, 160
_audio_dev:
	.word	.LC680
	.space	4
	.word	hs_audio_desc
	.space	4
	.word	fs_audio_desc
	.space	12
	.word	audio_bind
	.word	audio_unbind
	.word	audio_set_alt
	.space	4
	.word	audio_disable
	.word	audio_setup
	.space	28
	.space	12
	.word	_audio_dev+96
	.word	_audio_dev+96
	.space	4
	.word	0
	.space	48
	.type	audio_playback_ops, %object
	.size	audio_playback_ops, 56
audio_playback_ops:
	.word	audio_pcm_open
	.word	audio_pcm_close
	.word	snd_pcm_lib_ioctl
	.word	audio_pcm_hw_params
	.word	audio_pcm_hw_free
	.word	audio_pcm_prepare
	.word	audio_pcm_playback_trigger
	.word	audio_pcm_pointer
	.space	12
	.word	audio_pcm_mmap
	.space	8
	.type	intf_desc, %object
	.size	intf_desc, 9
intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	-1
	.byte	16
	.byte	1
	.space	1
	.space	3
	.type	fs_bulk_in_desc, %object
	.size	fs_bulk_in_desc, 9
fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_bulk_out_desc, %object
	.size	fs_bulk_out_desc, 9
fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_diag_desc, %object
	.size	fs_diag_desc, 16
fs_diag_desc:
	.word	intf_desc
	.word	fs_bulk_in_desc
	.word	fs_bulk_out_desc
	.word	0
	.type	hs_bulk_in_desc, %object
	.size	hs_bulk_in_desc, 9
hs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_out_desc, %object
	.size	hs_bulk_out_desc, 9
hs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_diag_desc, %object
	.size	hs_diag_desc, 16
hs_diag_desc:
	.word	intf_desc
	.word	hs_bulk_in_desc
	.word	hs_bulk_out_desc
	.word	0
	.type	ss_bulk_in_desc, %object
	.size	ss_bulk_in_desc, 9
ss_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_bulk_out_desc, %object
	.size	ss_bulk_out_desc, 9
ss_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_diag_desc, %object
	.size	ss_diag_desc, 24
ss_diag_desc:
	.word	intf_desc
	.word	ss_bulk_in_desc
	.word	ss_bulk_in_comp_desc
	.word	ss_bulk_out_desc
	.word	ss_bulk_out_comp_desc
	.word	0
	.type	rmnet_smd_interface_desc, %object
	.size	rmnet_smd_interface_desc, 9
rmnet_smd_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_smd_fs_in_desc, %object
	.size	rmnet_smd_fs_in_desc, 9
rmnet_smd_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_out_desc, %object
	.size	rmnet_smd_fs_out_desc, 9
rmnet_smd_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_notify_desc, %object
	.size	rmnet_smd_fs_notify_desc, 9
rmnet_smd_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_smd_hs_in_desc, %object
	.size	rmnet_smd_hs_in_desc, 9
rmnet_smd_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_out_desc, %object
	.size	rmnet_smd_hs_out_desc, 9
rmnet_smd_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_notify_desc, %object
	.size	rmnet_smd_hs_notify_desc, 9
rmnet_smd_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_sdio_interface_desc, %object
	.size	rmnet_sdio_interface_desc, 9
rmnet_sdio_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_sdio_fs_in_desc, %object
	.size	rmnet_sdio_fs_in_desc, 9
rmnet_sdio_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_out_desc, %object
	.size	rmnet_sdio_fs_out_desc, 9
rmnet_sdio_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_notify_desc, %object
	.size	rmnet_sdio_fs_notify_desc, 9
rmnet_sdio_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_sdio_hs_in_desc, %object
	.size	rmnet_sdio_hs_in_desc, 9
rmnet_sdio_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_out_desc, %object
	.size	rmnet_sdio_hs_out_desc, 9
rmnet_sdio_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_notify_desc, %object
	.size	rmnet_sdio_hs_notify_desc, 9
rmnet_sdio_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	input_terminal_desc, %object
	.size	input_terminal_desc, 12
input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	0
	.space	1
	.short	3
	.space	2
	.type	as_type_i_desc, %object
	.size	as_type_i_desc, 11
as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	audio_source_ac_interface_desc, %object
	.size	audio_source_ac_interface_desc, 9
audio_source_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	as_interface_alt_0_desc, %object
	.size	as_interface_alt_0_desc, 9
as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	as_interface_alt_1_desc, %object
	.size	as_interface_alt_1_desc, 9
as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	fs_as_in_ep_desc, %object
	.size	fs_as_in_ep_desc, 9
fs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	1
	.space	2
	.space	3
	.type	hs_as_in_ep_desc, %object
	.size	hs_as_in_ep_desc, 9
hs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	4
	.space	2
	.space	3
	.type	ecm_qc_control_intf, %object
	.size	ecm_qc_control_intf, 9
ecm_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_union_desc, %object
	.size	ecm_qc_union_desc, 5
ecm_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_qc_data_nop_intf, %object
	.size	ecm_qc_data_nop_intf, 9
ecm_qc_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_data_intf, %object
	.size	ecm_qc_data_intf, 9
ecm_qc_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_fs_in_desc, %object
	.size	ecm_qc_fs_in_desc, 9
ecm_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_out_desc, %object
	.size	ecm_qc_fs_out_desc, 9
ecm_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_notify_desc, %object
	.size	ecm_qc_fs_notify_desc, 9
ecm_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	ecm_qc_fs_function, %object
	.size	ecm_qc_fs_function, 40
ecm_qc_fs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_fs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_fs_in_desc
	.word	ecm_qc_fs_out_desc
	.word	0
	.type	ecm_qc_hs_in_desc, %object
	.size	ecm_qc_hs_in_desc, 9
ecm_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_out_desc, %object
	.size	ecm_qc_hs_out_desc, 9
ecm_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_notify_desc, %object
	.size	ecm_qc_hs_notify_desc, 9
ecm_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_hs_function, %object
	.size	ecm_qc_hs_function, 40
ecm_qc_hs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_hs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_hs_in_desc
	.word	ecm_qc_hs_out_desc
	.word	0
	.type	ecm_qc_ss_in_desc, %object
	.size	ecm_qc_ss_in_desc, 9
ecm_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_out_desc, %object
	.size	ecm_qc_ss_out_desc, 9
ecm_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_notify_desc, %object
	.size	ecm_qc_ss_notify_desc, 9
ecm_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_ss_function, %object
	.size	ecm_qc_ss_function, 52
ecm_qc_ss_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_ss_notify_desc
	.word	ecm_qc_ss_notify_comp_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_ss_in_desc
	.word	ecm_qc_ss_in_comp_desc
	.word	ecm_qc_ss_out_desc
	.word	ecm_qc_ss_out_comp_desc
	.word	0
	.type	mbim_iad_desc, %object
	.size	mbim_iad_desc, 8
mbim_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.type	mbim_union_desc, %object
	.size	mbim_union_desc, 5
mbim_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	fs_mbim_in_desc, %object
	.size	fs_mbim_in_desc, 9
fs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_out_desc, %object
	.size	fs_mbim_out_desc, 9
fs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_notify_desc, %object
	.size	fs_mbim_notify_desc, 9
fs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	mbb_desc, %object
	.size	mbb_desc, 12
mbb_desc:
	.byte	12
	.byte	36
	.byte	27
	.2byte	256
	.2byte	4096
	.byte	32
	.byte	-128
	.2byte	4064
	.byte	32
	.type	mbim_fs_function, %object
	.size	mbim_fs_function, 48
mbim_fs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	fs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	fs_mbim_in_desc
	.word	fs_mbim_out_desc
	.word	0
	.type	hs_mbim_in_desc, %object
	.size	hs_mbim_in_desc, 9
hs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_out_desc, %object
	.size	hs_mbim_out_desc, 9
hs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_notify_desc, %object
	.size	hs_mbim_notify_desc, 9
hs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_hs_function, %object
	.size	mbim_hs_function, 48
mbim_hs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	hs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	hs_mbim_in_desc
	.word	hs_mbim_out_desc
	.word	0
	.type	ss_mbim_in_desc, %object
	.size	ss_mbim_in_desc, 9
ss_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_out_desc, %object
	.size	ss_mbim_out_desc, 9
ss_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_notify_desc, %object
	.size	ss_mbim_notify_desc, 9
ss_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_ss_function, %object
	.size	mbim_ss_function, 60
mbim_ss_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	ss_mbim_notify_desc
	.word	ss_mbim_notify_comp_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	ss_mbim_in_desc
	.word	ss_mbim_in_comp_desc
	.word	ss_mbim_out_desc
	.word	ss_mbim_out_comp_desc
	.word	0
	.type	ecm_iad_descriptor, %object
	.size	ecm_iad_descriptor, 8
ecm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	ecm_control_intf, %object
	.size	ecm_control_intf, 9
ecm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_union_desc, %object
	.size	ecm_union_desc, 5
ecm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_data_nop_intf, %object
	.size	ecm_data_nop_intf, 9
ecm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_data_intf, %object
	.size	ecm_data_intf, 9
ecm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_ecm_in_desc, %object
	.size	fs_ecm_in_desc, 9
fs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_out_desc, %object
	.size	fs_ecm_out_desc, 9
fs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_notify_desc, %object
	.size	fs_ecm_notify_desc, 9
fs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ecm_in_desc, %object
	.size	hs_ecm_in_desc, 9
hs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_out_desc, %object
	.size	hs_ecm_out_desc, 9
hs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_notify_desc, %object
	.size	hs_ecm_notify_desc, 9
hs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ss_ecm_in_desc, %object
	.size	ss_ecm_in_desc, 9
ss_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_out_desc, %object
	.size	ss_ecm_out_desc, 9
ss_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_notify_desc, %object
	.size	ss_ecm_notify_desc, 9
ss_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_fs_function, %object
	.size	ecm_fs_function, 44
ecm_fs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	fs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	fs_ecm_in_desc
	.word	fs_ecm_out_desc
	.word	0
	.type	ecm_hs_function, %object
	.size	ecm_hs_function, 44
ecm_hs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	hs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	hs_ecm_in_desc
	.word	hs_ecm_out_desc
	.word	0
	.type	ecm_ss_function, %object
	.size	ecm_ss_function, 52
ecm_ss_function:
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	ss_ecm_notify_desc
	.word	ss_ecm_intr_comp_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	ss_ecm_in_desc
	.word	ss_ecm_bulk_comp_desc
	.word	ss_ecm_out_desc
	.word	ss_ecm_bulk_comp_desc
	.word	0
	.type	speaker_input_terminal_desc, %object
	.size	speaker_input_terminal_desc, 12
speaker_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	3
	.short	257
	.byte	4
	.space	1
	.short	3
	.space	2
	.type	speaker_as_type_i_desc, %object
	.size	speaker_as_type_i_desc, 11
speaker_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_input_terminal_desc, %object
	.size	microphone_input_terminal_desc, 12
microphone_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	2
	.byte	1
	.short	3
	.space	2
	.type	microphone_as_type_i_desc, %object
	.size	microphone_as_type_i_desc, 11
microphone_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.byte	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	uac1_ac_interface_desc, %object
	.size	uac1_ac_interface_desc, 9
uac1_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	microphone_as_interface_alt_0_desc, %object
	.size	microphone_as_interface_alt_0_desc, 9
microphone_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_interface_alt_1_desc, %object
	.size	microphone_as_interface_alt_1_desc, 9
microphone_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_0_desc, %object
	.size	speaker_as_interface_alt_0_desc, 9
speaker_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_1_desc, %object
	.size	speaker_as_interface_alt_1_desc, 9
speaker_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_ep_in_desc, %object
	.size	microphone_as_ep_in_desc, 9
microphone_as_ep_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	5
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	speaker_as_ep_out_desc, %object
	.size	speaker_as_ep_out_desc, 9
speaker_as_ep_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	9
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	microphone_as_iso_in, %object
	.size	microphone_as_iso_in, 32
microphone_as_iso_in:
	.word	microphone_as_iso_in
	.word	microphone_as_iso_in
	.space	12
	.word	.LC1015
	.byte	1
	.space	3
	.word	microphone_as_iso_in_desc
	.type	speaker_as_iso_out, %object
	.size	speaker_as_iso_out, 32
speaker_as_iso_out:
	.word	speaker_as_iso_out
	.word	speaker_as_iso_out
	.space	12
	.word	.LC1017
	.byte	1
	.space	3
	.word	speaker_as_iso_out_desc
	.type	f_audio_desc, %object
	.size	f_audio_desc, 76
f_audio_desc:
	.word	uac1_ac_interface_desc
	.word	uac1_ac_header_desc
	.word	microphone_input_terminal_desc
	.word	microphone_output_terminal_desc
	.word	speaker_input_terminal_desc
	.word	speaker_output_terminal_desc
	.word	microphone_as_interface_alt_0_desc
	.word	microphone_as_interface_alt_1_desc
	.word	microphone_as_header_desc
	.word	microphone_as_type_i_desc
	.word	microphone_as_ep_in_desc
	.word	microphone_as_iso_in_desc
	.word	speaker_as_interface_alt_0_desc
	.word	speaker_as_interface_alt_1_desc
	.word	speaker_as_header_desc
	.word	speaker_as_type_i_desc
	.word	speaker_as_ep_out_desc
	.word	speaker_as_iso_out_desc
	.word	0
	.type	ncm_iad_desc, %object
	.size	ncm_iad_desc, 8
ncm_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.type	ncm_control_intf, %object
	.size	ncm_control_intf, 9
ncm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.space	3
	.type	ncm_union_desc, %object
	.size	ncm_union_desc, 5
ncm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ncm_data_nop_intf, %object
	.size	ncm_data_nop_intf, 9
ncm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	ncm_data_intf, %object
	.size	ncm_data_intf, 9
ncm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	fs_ncm_in_desc, %object
	.size	fs_ncm_in_desc, 9
fs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_out_desc, %object
	.size	fs_ncm_out_desc, 9
fs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_notify_desc, %object
	.size	fs_ncm_notify_desc, 9
fs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ncm_in_desc, %object
	.size	hs_ncm_in_desc, 9
hs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_out_desc, %object
	.size	hs_ncm_out_desc, 9
hs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_notify_desc, %object
	.size	hs_ncm_notify_desc, 9
hs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ncm_fs_function, %object
	.size	ncm_fs_function, 48
ncm_fs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	fs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	fs_ncm_in_desc
	.word	fs_ncm_out_desc
	.word	0
	.type	ncm_hs_function, %object
	.size	ncm_hs_function, 48
ncm_hs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	hs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	hs_ncm_in_desc
	.word	hs_ncm_out_desc
	.word	0
	.type	fsg_fs_bulk_in_desc, %object
	.size	fsg_fs_bulk_in_desc, 9
fsg_fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fsg_fs_bulk_out_desc, %object
	.size	fsg_fs_bulk_out_desc, 9
fsg_fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fsg_hs_bulk_in_desc, %object
	.size	fsg_hs_bulk_in_desc, 9
fsg_hs_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	fsg_hs_bulk_out_desc, %object
	.size	fsg_hs_bulk_out_desc, 9
fsg_hs_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.byte	1
	.space	2
	.space	3
	.type	fsg_ss_bulk_in_desc, %object
	.size	fsg_ss_bulk_in_desc, 9
fsg_ss_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_in_comp_desc, %object
	.size	fsg_ss_bulk_in_comp_desc, 6
fsg_ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_bulk_out_desc, %object
	.size	fsg_ss_bulk_out_desc, 9
fsg_ss_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_out_comp_desc, %object
	.size	fsg_ss_bulk_out_comp_desc, 6
fsg_ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_fs_function, %object
	.size	fsg_fs_function, 16
fsg_fs_function:
	.word	fsg_intf_desc
	.word	fsg_fs_bulk_in_desc
	.word	fsg_fs_bulk_out_desc
	.word	0
	.type	fsg_hs_function, %object
	.size	fsg_hs_function, 16
fsg_hs_function:
	.word	fsg_intf_desc
	.word	fsg_hs_bulk_in_desc
	.word	fsg_hs_bulk_out_desc
	.word	0
	.type	fsg_ss_function, %object
	.size	fsg_ss_function, 24
fsg_ss_function:
	.word	fsg_intf_desc
	.word	fsg_ss_bulk_in_desc
	.word	fsg_ss_bulk_in_comp_desc
	.word	fsg_ss_bulk_out_desc
	.word	fsg_ss_bulk_out_comp_desc
	.word	0
	.type	ccid_interface_desc, %object
	.size	ccid_interface_desc, 9
ccid_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	11
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ccid_fs_notify_desc, %object
	.size	ccid_fs_notify_desc, 9
ccid_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	32
	.space	2
	.space	3
	.type	ccid_fs_in_desc, %object
	.size	ccid_fs_in_desc, 9
ccid_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_out_desc, %object
	.size	ccid_fs_out_desc, 9
ccid_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_hs_in_desc, %object
	.size	ccid_hs_in_desc, 9
ccid_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_out_desc, %object
	.size	ccid_hs_out_desc, 9
ccid_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_notify_desc, %object
	.size	ccid_hs_notify_desc, 9
ccid_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	9
	.space	2
	.space	3
	.type	qdss_data_ep_comp_desc, %object
	.size	qdss_data_ep_comp_desc, 6
qdss_data_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	1
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_data_desc, %object
	.size	qdss_ss_data_desc, 9
qdss_ss_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_in_ep_comp_desc, %object
	.size	qdss_ctrl_in_ep_comp_desc, 6
qdss_ctrl_in_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_in_desc, %object
	.size	qdss_ss_ctrl_in_desc, 9
qdss_ss_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_out_ep_comp_desc, %object
	.size	qdss_ctrl_out_ep_comp_desc, 6
qdss_ctrl_out_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_out_desc, %object
	.size	qdss_ss_ctrl_out_desc, 9
qdss_ss_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_hs_data_desc, %object
	.size	qdss_hs_data_desc, 9
qdss_hs_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_in_desc, %object
	.size	qdss_hs_ctrl_in_desc, 9
qdss_hs_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_out_desc, %object
	.size	qdss_hs_ctrl_out_desc, 9
qdss_hs_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_ss_desc, %object
	.size	qdss_ss_desc, 36
qdss_ss_desc:
	.word	qdss_data_intf_desc
	.word	qdss_ss_data_desc
	.word	qdss_data_ep_comp_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_ss_ctrl_in_desc
	.word	qdss_ctrl_in_ep_comp_desc
	.word	qdss_ss_ctrl_out_desc
	.word	qdss_ctrl_out_ep_comp_desc
	.word	0
	.type	rmnet_mux_interface_desc, %object
	.size	rmnet_mux_interface_desc, 9
rmnet_mux_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_mux_fs_in_desc, %object
	.size	rmnet_mux_fs_in_desc, 9
rmnet_mux_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_out_desc, %object
	.size	rmnet_mux_fs_out_desc, 9
rmnet_mux_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_notify_desc, %object
	.size	rmnet_mux_fs_notify_desc, 9
rmnet_mux_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_mux_hs_in_desc, %object
	.size	rmnet_mux_hs_in_desc, 9
rmnet_mux_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_out_desc, %object
	.size	rmnet_mux_hs_out_desc, 9
rmnet_mux_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_notify_desc, %object
	.size	rmnet_mux_hs_notify_desc, 9
rmnet_mux_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	midi_string_defs, %object
	.size	midi_string_defs, 16
midi_string_defs:
	.space	4
	.word	.LC1043
	.space	8
	.type	midi_ac_interface_desc, %object
	.size	midi_ac_interface_desc, 9
midi_ac_interface_desc:
	.byte	9
	.byte	4
	.space	3
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	midi_ms_interface_desc, %object
	.size	midi_ms_interface_desc, 9
midi_ms_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	1
	.byte	3
	.space	2
	.space	3
	.type	midi_ac_header_desc, %object
	.size	midi_ac_header_desc, 9
midi_ac_header_desc:
	.byte	9
	.byte	36
	.byte	1
	.2byte	256
	.2byte	9
	.byte	1
	.space	1
	.space	3
	.type	midi_bulk_in_desc, %object
	.size	midi_bulk_in_desc, 9
midi_bulk_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	midi_bulk_out_desc, %object
	.size	midi_bulk_out_desc, 9
midi_bulk_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	midi_ms_header_desc, %object
	.size	midi_ms_header_desc, 7
midi_ms_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.2byte	256
	.space	2
	.space	1
	.type	midi_ms_in_desc, %object
	.size	midi_ms_in_desc, 20
midi_ms_in_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	midi_ms_out_desc, %object
	.size	midi_ms_out_desc, 20
midi_ms_out_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	rmnet_interface_desc, %object
	.size	rmnet_interface_desc, 9
rmnet_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-32
	.byte	0
	.space	1
	.space	3
	.type	rmnet_fs_in_desc, %object
	.size	rmnet_fs_in_desc, 9
rmnet_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_out_desc, %object
	.size	rmnet_fs_out_desc, 9
rmnet_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_notify_desc, %object
	.size	rmnet_fs_notify_desc, 9
rmnet_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_fs_function, %object
	.size	rmnet_fs_function, 20
rmnet_fs_function:
	.word	rmnet_interface_desc
	.word	rmnet_fs_notify_desc
	.word	rmnet_fs_in_desc
	.word	rmnet_fs_out_desc
	.word	0
	.type	rmnet_hs_in_desc, %object
	.size	rmnet_hs_in_desc, 9
rmnet_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_out_desc, %object
	.size	rmnet_hs_out_desc, 9
rmnet_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_notify_desc, %object
	.size	rmnet_hs_notify_desc, 9
rmnet_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_hs_function, %object
	.size	rmnet_hs_function, 20
rmnet_hs_function:
	.word	rmnet_interface_desc
	.word	rmnet_hs_notify_desc
	.word	rmnet_hs_in_desc
	.word	rmnet_hs_out_desc
	.word	0
	.type	rmnet_ss_in_desc, %object
	.size	rmnet_ss_in_desc, 9
rmnet_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_out_desc, %object
	.size	rmnet_ss_out_desc, 9
rmnet_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_notify_desc, %object
	.size	rmnet_ss_notify_desc, 9
rmnet_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_ss_function, %object
	.size	rmnet_ss_function, 32
rmnet_ss_function:
	.word	rmnet_interface_desc
	.word	rmnet_ss_notify_desc
	.word	rmnet_ss_notify_comp_desc
	.word	rmnet_ss_in_desc
	.word	rmnet_ss_in_comp_desc
	.word	rmnet_ss_out_desc
	.word	rmnet_ss_out_comp_desc
	.word	0
	.type	acm_union_desc, %object
	.size	acm_union_desc, 5
acm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	acm_call_mgmt_descriptor, %object
	.size	acm_call_mgmt_descriptor, 5
acm_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	acm_fs_in_desc, %object
	.size	acm_fs_in_desc, 9
acm_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_out_desc, %object
	.size	acm_fs_out_desc, 9
acm_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_notify_desc, %object
	.size	acm_fs_notify_desc, 9
acm_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	acm_hs_function, %object
	.size	acm_hs_function, 44
acm_hs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_hs_in_desc
	.word	acm_hs_out_desc
	.word	0
	.type	acm_ss_function, %object
	.size	acm_ss_function, 56
acm_ss_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_data_interface_desc
	.word	acm_ss_in_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_ss_out_desc
	.word	acm_ss_bulk_comp_desc
	.word	0
	.type	acm_hs_in_desc, %object
	.size	acm_hs_in_desc, 9
acm_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_out_desc, %object
	.size	acm_hs_out_desc, 9
acm_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_notify_desc, %object
	.size	acm_hs_notify_desc, 9
acm_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_ss_in_desc, %object
	.size	acm_ss_in_desc, 9
acm_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_out_desc, %object
	.size	acm_ss_out_desc, 9
acm_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_fs_function, %object
	.size	acm_fs_function, 44
acm_fs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_fs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_fs_in_desc
	.word	acm_fs_out_desc
	.word	0
	.type	rndis_union_desc, %object
	.size	rndis_union_desc, 5
rndis_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	fs_in_desc, %object
	.size	fs_in_desc, 9
fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_out_desc, %object
	.size	fs_out_desc, 9
fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_notify_desc, %object
	.size	fs_notify_desc, 9
fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	hs_in_desc, %object
	.size	hs_in_desc, 9
hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_out_desc, %object
	.size	hs_out_desc, 9
hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_notify_desc, %object
	.size	hs_notify_desc, 9
hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	ss_in_desc, %object
	.size	ss_in_desc, 9
ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_out_desc, %object
	.size	ss_out_desc, 9
ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_notify_desc, %object
	.size	ss_notify_desc, 9
ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_fs_function, %object
	.size	eth_fs_function, 44
eth_fs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	fs_notify_desc
	.word	rndis_data_intf
	.word	fs_in_desc
	.word	fs_out_desc
	.word	0
	.type	eth_hs_function, %object
	.size	eth_hs_function, 44
eth_hs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	hs_notify_desc
	.word	rndis_data_intf
	.word	hs_in_desc
	.word	hs_out_desc
	.word	0
	.type	eth_ss_function, %object
	.size	eth_ss_function, 56
eth_ss_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	ss_notify_desc
	.word	ss_intr_comp_desc
	.word	rndis_data_intf
	.word	ss_in_desc
	.word	ss_bulk_comp_desc
	.word	ss_out_desc
	.word	ss_bulk_comp_desc
	.word	0
	.type	rndis_qc_iad_descriptor, %object
	.size	rndis_qc_iad_descriptor, 8
rndis_qc_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_qc_control_intf, %object
	.size	rndis_qc_control_intf, 9
rndis_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_qc_union_desc, %object
	.size	rndis_qc_union_desc, 5
rndis_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_qc_data_intf, %object
	.size	rndis_qc_data_intf, 9
rndis_qc_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_qc_fs_in_desc, %object
	.size	rndis_qc_fs_in_desc, 9
rndis_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_out_desc, %object
	.size	rndis_qc_fs_out_desc, 9
rndis_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_notify_desc, %object
	.size	rndis_qc_fs_notify_desc, 9
rndis_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	eth_qc_fs_function, %object
	.size	eth_qc_fs_function, 44
eth_qc_fs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_fs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_fs_in_desc
	.word	rndis_qc_fs_out_desc
	.word	0
	.type	rndis_qc_hs_in_desc, %object
	.size	rndis_qc_hs_in_desc, 9
rndis_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_out_desc, %object
	.size	rndis_qc_hs_out_desc, 9
rndis_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_notify_desc, %object
	.size	rndis_qc_hs_notify_desc, 9
rndis_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_hs_function, %object
	.size	eth_qc_hs_function, 44
eth_qc_hs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_hs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_hs_in_desc
	.word	rndis_qc_hs_out_desc
	.word	0
	.type	rndis_qc_ss_in_desc, %object
	.size	rndis_qc_ss_in_desc, 9
rndis_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_out_desc, %object
	.size	rndis_qc_ss_out_desc, 9
rndis_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_notify_desc, %object
	.size	rndis_qc_ss_notify_desc, 9
rndis_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_ss_function, %object
	.size	eth_qc_ss_function, 56
eth_qc_ss_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_ss_notify_desc
	.word	rndis_qc_ss_intr_comp_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_ss_in_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	rndis_qc_ss_out_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	0
	.type	conn_gadget_interface_desc, %object
	.size	conn_gadget_interface_desc, 9
conn_gadget_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	64
	.byte	1
	.space	1
	.space	3
	.type	conn_gadget_fullspeed_in_desc, %object
	.size	conn_gadget_fullspeed_in_desc, 9
conn_gadget_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_fullspeed_out_desc, %object
	.size	conn_gadget_fullspeed_out_desc, 9
conn_gadget_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_highspeed_in_desc, %object
	.size	conn_gadget_highspeed_in_desc, 9
conn_gadget_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_highspeed_out_desc, %object
	.size	conn_gadget_highspeed_out_desc, 9
conn_gadget_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_superspeed_in_desc, %object
	.size	conn_gadget_superspeed_in_desc, 9
conn_gadget_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	conn_gadget_superspeed_out_desc, %object
	.size	conn_gadget_superspeed_out_desc, 9
conn_gadget_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_fullspeed_in_desc, %object
	.size	acc_fullspeed_in_desc, 9
acc_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acc_fullspeed_out_desc, %object
	.size	acc_fullspeed_out_desc, 9
acc_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acc_highspeed_in_desc, %object
	.size	acc_highspeed_in_desc, 9
acc_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_highspeed_out_desc, %object
	.size	acc_highspeed_out_desc, 9
acc_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_superspeed_in_desc, %object
	.size	acc_superspeed_in_desc, 9
acc_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_superspeed_out_desc, %object
	.size	acc_superspeed_out_desc, 9
acc_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_fullspeed_in_desc, %object
	.size	mtp_fullspeed_in_desc, 9
mtp_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	mtp_fullspeed_out_desc, %object
	.size	mtp_fullspeed_out_desc, 9
mtp_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	mtp_intr_desc, %object
	.size	mtp_intr_desc, 9
mtp_intr_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	28
	.byte	6
	.space	2
	.space	3
	.type	mtp_tx_reqs, %object
	.size	mtp_tx_reqs, 4
mtp_tx_reqs:
	.word	8
	.type	mtp_highspeed_in_desc, %object
	.size	mtp_highspeed_in_desc, 9
mtp_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_highspeed_out_desc, %object
	.size	mtp_highspeed_out_desc, 9
mtp_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_superspeed_in_desc, %object
	.size	mtp_superspeed_in_desc, 9
mtp_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_superspeed_out_desc, %object
	.size	mtp_superspeed_out_desc, 9
mtp_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_interface_desc, %object
	.size	adb_interface_desc, 9
adb_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	66
	.byte	1
	.space	1
	.space	3
	.type	adb_fullspeed_in_desc, %object
	.size	adb_fullspeed_in_desc, 9
adb_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	adb_fullspeed_out_desc, %object
	.size	adb_fullspeed_out_desc, 9
adb_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	adb_highspeed_in_desc, %object
	.size	adb_highspeed_in_desc, 9
adb_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_highspeed_out_desc, %object
	.size	adb_highspeed_out_desc, 9
adb_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_superspeed_in_desc, %object
	.size	adb_superspeed_in_desc, 9
adb_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_superspeed_out_desc, %object
	.size	adb_superspeed_out_desc, 9
adb_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rl.64004, %object
	.size	rl.64004, 24
rl.64004:
	.word	0
	.word	2500
	.word	1
	.space	12
	.type	rl.52686, %object
	.size	rl.52686, 24
rl.52686:
	.word	0
	.word	2500
	.word	1
	.space	12
	.type	supported_functions, %object
	.size	supported_functions, 104
supported_functions:
	.word	ffs_function
	.word	mbim_function
	.word	ecm_qc_function
	.word	audio_function
	.word	rmnet_smd_function
	.word	rmnet_sdio_function
	.word	rmnet_smd_sdio_function
	.word	rmnet_function
	.word	diag_function
	.word	qdss_function
	.word	adb_function
	.word	midi_function
	.word	ccid_function
	.word	acm_function
	.word	mtp_function
	.word	ptp_function
	.word	rndis_function
	.word	rndis_qc_function
	.word	ecm_function
	.word	ncm_function
	.word	mass_storage_function
	.word	accessory_function
	.word	conn_gadget_function
	.word	audio_source_function
	.word	uasp_function
	.word	0
	.type	dev_attr_terminal_version, %object
	.size	dev_attr_terminal_version, 16
dev_attr_terminal_version:
	.word	.LC1006
	.short	420
	.space	2
	.word	terminal_version_show
	.word	terminal_version_store
	.type	modem_device, %object
	.size	modem_device, 36
modem_device:
	.word	123
	.word	.LC1049
	.word	modem_fops
	.space	24
	.type	rl.25930, %object
	.size	rl.25930, 24
rl.25930:
	.word	0
	.word	2500
	.word	1
	.space	12
	.type	rl.25948, %object
	.size	rl.25948, 24
rl.25948:
	.word	0
	.word	2500
	.word	1
	.space	12
	.type	sport_info, %object
	.size	sport_info, 24
sport_info:
	.word	.LC1058
	.space	4
	.word	9
	.word	.LC1059
	.space	4
	.word	10
	.type	smd_pi, %object
	.size	smd_pi, 24
smd_pi:
	.space	4
	.word	.LC1056
	.space	4
	.space	4
	.word	.LC1057
	.space	4
	.type	ghsic_data_serial_tx_q_size, %object
	.size	ghsic_data_serial_tx_q_size, 4
ghsic_data_serial_tx_q_size:
	.word	20
	.type	ghsic_data_serial_rx_q_size, %object
	.size	ghsic_data_serial_rx_q_size, 4
ghsic_data_serial_rx_q_size:
	.word	10
	.type	ghsic_data_rmnet_tx_q_size, %object
	.size	ghsic_data_rmnet_tx_q_size, 4
ghsic_data_rmnet_tx_q_size:
	.word	300
	.type	ghsic_data_rmnet_rx_q_size, %object
	.size	ghsic_data_rmnet_rx_q_size, 4
ghsic_data_rmnet_rx_q_size:
	.word	50
	.type	ghsuart_data_serial_tx_q_size, %object
	.size	ghsuart_data_serial_tx_q_size, 4
ghsuart_data_serial_tx_q_size:
	.word	5
	.type	ghsuart_data_serial_rx_q_size, %object
	.size	ghsuart_data_serial_rx_q_size, 4
ghsuart_data_serial_rx_q_size:
	.word	5
	.type	ghsuart_data_rmnet_tx_q_size, %object
	.size	ghsuart_data_rmnet_tx_q_size, 4
ghsuart_data_rmnet_tx_q_size:
	.word	20
	.type	ghsuart_data_rmnet_rx_q_size, %object
	.size	ghsuart_data_rmnet_rx_q_size, 4
ghsuart_data_rmnet_rx_q_size:
	.word	10
	.type	rmnet_string_defs, %object
	.size	rmnet_string_defs, 16
rmnet_string_defs:
	.space	4
	.word	.LC1065
	.space	8
	.type	rmnet_strings, %object
	.size	rmnet_strings, 8
rmnet_strings:
	.word	rmnet_string_table
	.word	0
	.type	ecm_qc_desc, %object
	.size	ecm_qc_desc, 13
ecm_qc_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_qc_strings, %object
	.size	ecm_qc_strings, 8
ecm_qc_strings:
	.word	ecm_qc_string_table
	.word	0
	.type	ecm_desc, %object
	.size	ecm_desc, 13
ecm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_strings, %object
	.size	ecm_strings, 8
ecm_strings:
	.word	ecm_string_table
	.word	0
	.type	rndis_qc_string_defs, %object
	.size	rndis_qc_string_defs, 32
rndis_qc_string_defs:
	.space	4
	.word	.LC1030
	.space	4
	.word	.LC1031
	.space	4
	.word	.LC1032
	.space	8
	.type	rndis_qc_strings, %object
	.size	rndis_qc_strings, 8
rndis_qc_strings:
	.word	rndis_qc_string_table
	.word	0
	.type	qc_gadget_type, %object
	.size	qc_gadget_type, 24
qc_gadget_type:
	.word	.LC1028
	.space	20
	.type	fn_cntl, %object
	.size	fn_cntl, 4
fn_cntl:
	.word	.LC1025
	.type	fn_play, %object
	.size	fn_play, 4
fn_play:
	.word	.LC1027
	.type	fn_cap, %object
	.size	fn_cap, 4
fn_cap:
	.word	.LC1026
	.type	audio_strings, %object
	.size	audio_strings, 8
audio_strings:
	.word	audio_stringtab_dev
	.word	0
	.type	microphone_fu_controls, %object
	.size	microphone_fu_controls, 32
microphone_fu_controls:
	.word	microphone_fu_controls
	.word	microphone_fu_controls
	.space	12
	.word	.LC1019
	.space	8
	.type	speaker_fu_controls, %object
	.size	speaker_fu_controls, 32
speaker_fu_controls:
	.word	speaker_fu_controls
	.word	speaker_fu_controls
	.space	12
	.word	.LC1022
	.space	8
	.type	microphone_mute_control, %object
	.size	microphone_mute_control, 44
microphone_mute_control:
	.word	microphone_mute_control
	.word	microphone_mute_control
	.word	.LC1021
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_volume_control, %object
	.size	microphone_volume_control, 44
microphone_volume_control:
	.word	microphone_volume_control
	.word	microphone_volume_control
	.word	.LC1020
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_mute_control, %object
	.size	speaker_mute_control, 44
speaker_mute_control:
	.word	speaker_mute_control
	.word	speaker_mute_control
	.word	.LC1024
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_volume_control, %object
	.size	speaker_volume_control, 44
speaker_volume_control:
	.word	speaker_volume_control
	.word	speaker_volume_control
	.word	.LC1023
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_sample_freq_control, %object
	.size	microphone_sample_freq_control, 44
microphone_sample_freq_control:
	.word	microphone_sample_freq_control
	.word	microphone_sample_freq_control
	.word	.LC1016
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_sample_freq_control, %object
	.size	speaker_sample_freq_control, 44
speaker_sample_freq_control:
	.word	speaker_sample_freq_control
	.word	speaker_sample_freq_control
	.word	.LC1018
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	necm_desc, %object
	.size	necm_desc, 13
necm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	9014
	.short	0
	.byte	0
	.space	3
	.type	ncm_strings, %object
	.size	ncm_strings, 8
ncm_strings:
	.word	ncm_string_table
	.word	0
	.type	usb_android_dt_match, %object
	.size	usb_android_dt_match, 392
usb_android_dt_match:
	.space	64
	.ascii	"qcom,android-usb\000"
	.space	111
	.space	4
	.space	196
	.type	dev_attr_remote_wakeup, %object
	.size	dev_attr_remote_wakeup, 16
dev_attr_remote_wakeup:
	.word	.LC961
	.short	420
	.space	2
	.word	remote_wakeup_show
	.word	remote_wakeup_store
	.type	dev_attr_state, %object
	.size	dev_attr_state, 16
dev_attr_state:
	.word	.LC962
	.short	292
	.space	2
	.word	state_show
	.word	0
	.type	dev_attr_pm_qos, %object
	.size	dev_attr_pm_qos, 16
dev_attr_pm_qos:
	.word	.LC963
	.short	420
	.space	2
	.word	pm_qos_show
	.word	pm_qos_store
	.type	dev_attr_enable, %object
	.size	dev_attr_enable, 16
dev_attr_enable:
	.word	.LC964
	.short	420
	.space	2
	.word	enable_show
	.word	enable_store
	.type	dev_attr_functions, %object
	.size	dev_attr_functions, 16
dev_attr_functions:
	.word	.LC965
	.short	420
	.space	2
	.word	functions_show
	.word	functions_store
	.type	dev_attr_macos, %object
	.size	dev_attr_macos, 16
dev_attr_macos:
	.word	.LC966
	.short	420
	.space	2
	.word	macos_show
	.word	0
	.type	dev_attr_ss_host_available, %object
	.size	dev_attr_ss_host_available, 16
dev_attr_ss_host_available:
	.word	.LC967
	.short	420
	.space	2
	.word	ss_host_available_show
	.word	0
	.type	dev_attr_usb30en, %object
	.size	dev_attr_usb30en, 16
dev_attr_usb30en:
	.word	.LC968
	.short	420
	.space	2
	.word	usb30en_show
	.word	usb30en_store
	.type	dev_attr_bcdUSB, %object
	.size	dev_attr_bcdUSB, 16
dev_attr_bcdUSB:
	.word	.LC969
	.short	420
	.space	2
	.word	bcdUSB_show
	.word	0
	.type	dev_attr_iSerial, %object
	.size	dev_attr_iSerial, 16
dev_attr_iSerial:
	.word	.LC970
	.short	420
	.space	2
	.word	iSerial_show
	.word	iSerial_store
	.type	dev_attr_iProduct, %object
	.size	dev_attr_iProduct, 16
dev_attr_iProduct:
	.word	.LC971
	.short	420
	.space	2
	.word	iProduct_show
	.word	iProduct_store
	.type	dev_attr_iManufacturer, %object
	.size	dev_attr_iManufacturer, 16
dev_attr_iManufacturer:
	.word	.LC972
	.short	420
	.space	2
	.word	iManufacturer_show
	.word	iManufacturer_store
	.type	dev_attr_bDeviceProtocol, %object
	.size	dev_attr_bDeviceProtocol, 16
dev_attr_bDeviceProtocol:
	.word	.LC973
	.short	420
	.space	2
	.word	bDeviceProtocol_show
	.word	bDeviceProtocol_store
	.type	dev_attr_bDeviceSubClass, %object
	.size	dev_attr_bDeviceSubClass, 16
dev_attr_bDeviceSubClass:
	.word	.LC974
	.short	420
	.space	2
	.word	bDeviceSubClass_show
	.word	bDeviceSubClass_store
	.type	dev_attr_bDeviceClass, %object
	.size	dev_attr_bDeviceClass, 16
dev_attr_bDeviceClass:
	.word	.LC975
	.short	420
	.space	2
	.word	bDeviceClass_show
	.word	bDeviceClass_store
	.type	dev_attr_bcdDevice, %object
	.size	dev_attr_bcdDevice, 16
dev_attr_bcdDevice:
	.word	.LC976
	.short	420
	.space	2
	.word	bcdDevice_show
	.word	bcdDevice_store
	.type	dev_attr_idProduct, %object
	.size	dev_attr_idProduct, 16
dev_attr_idProduct:
	.word	.LC977
	.short	420
	.space	2
	.word	idProduct_show
	.word	idProduct_store
	.type	dev_attr_idVendor, %object
	.size	dev_attr_idVendor, 16
dev_attr_idVendor:
	.word	.LC978
	.short	420
	.space	2
	.word	idVendor_show
	.word	idVendor_store
	.type	uasp_function, %object
	.size	uasp_function, 52
uasp_function:
	.word	.LC979
	.space	20
	.word	uasp_function_init
	.word	uasp_function_cleanup
	.space	8
	.word	uasp_function_bind_config
	.space	8
	.type	audio_source_function, %object
	.size	audio_source_function, 52
audio_source_function:
	.word	.LC680
	.space	12
	.word	audio_source_function_attributes
	.space	4
	.word	audio_source_function_init
	.word	audio_source_function_cleanup
	.space	8
	.word	audio_source_function_bind_config
	.word	audio_source_function_unbind_config
	.space	4
	.type	audio_source_function_attributes, %object
	.size	audio_source_function_attributes, 8
audio_source_function_attributes:
	.word	dev_attr_pcm
	.word	0
	.type	dev_attr_pcm, %object
	.size	dev_attr_pcm, 16
dev_attr_pcm:
	.word	.LC980
	.short	420
	.space	2
	.word	audio_source_pcm_show
	.word	0
	.type	accessory_function, %object
	.size	accessory_function, 52
accessory_function:
	.word	.LC622
	.space	20
	.word	accessory_function_init
	.word	accessory_function_cleanup
	.space	8
	.word	accessory_function_bind_config
	.space	4
	.word	accessory_function_ctrlrequest
	.type	mass_storage_function, %object
	.size	mass_storage_function, 52
mass_storage_function:
	.word	.LC981
	.space	12
	.word	mass_storage_function_attributes
	.space	4
	.word	mass_storage_function_init
	.word	mass_storage_function_cleanup
	.space	8
	.word	mass_storage_function_bind_config
	.space	8
	.type	mass_storage_function_attributes, %object
	.size	mass_storage_function_attributes, 20
mass_storage_function_attributes:
	.word	dev_attr_inquiry_string
	.word	dev_attr_vendor_string
	.word	dev_attr_product_string
	.word	dev_attr_sua_version_info
	.word	0
	.type	dev_attr_sua_version_info, %object
	.size	dev_attr_sua_version_info, 16
dev_attr_sua_version_info:
	.word	.LC982
	.short	420
	.space	2
	.word	sua_version_info_show
	.word	sua_version_info_store
	.type	dev_attr_product_string, %object
	.size	dev_attr_product_string, 16
dev_attr_product_string:
	.word	.LC983
	.short	420
	.space	2
	.word	mass_storage_product_show
	.word	mass_storage_product_store
	.type	dev_attr_vendor_string, %object
	.size	dev_attr_vendor_string, 16
dev_attr_vendor_string:
	.word	.LC984
	.short	420
	.space	2
	.word	mass_storage_vendor_show
	.word	mass_storage_vendor_store
	.type	dev_attr_inquiry_string, %object
	.size	dev_attr_inquiry_string, 16
dev_attr_inquiry_string:
	.word	.LC985
	.short	420
	.space	2
	.word	mass_storage_inquiry_show
	.word	mass_storage_inquiry_store
	.type	ecm_function, %object
	.size	ecm_function, 52
ecm_function:
	.word	.LC923
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_function_bind_config
	.word	ecm_function_unbind_config
	.space	4
	.type	rndis_qc_function, %object
	.size	rndis_qc_function, 52
rndis_qc_function:
	.word	.LC986
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_qc_function_init
	.word	rndis_qc_function_cleanup
	.space	8
	.word	rndis_qc_function_bind_config
	.word	rndis_qc_function_unbind_config
	.space	4
	.type	rndis_function, %object
	.size	rndis_function, 52
rndis_function:
	.word	.LC664
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_function_init
	.word	rndis_function_cleanup
	.space	8
	.word	rndis_function_bind_config
	.word	rndis_function_unbind_config
	.space	4
	.type	rndis_function_attributes, %object
	.size	rndis_function_attributes, 24
rndis_function_attributes:
	.word	dev_attr_manufacturer
	.word	dev_attr_wceis
	.word	dev_attr_ethaddr
	.word	dev_attr_vendorID
	.word	dev_attr_max_pkt_per_xfer
	.word	0
	.type	dev_attr_max_pkt_per_xfer, %object
	.size	dev_attr_max_pkt_per_xfer, 16
dev_attr_max_pkt_per_xfer:
	.word	.LC987
	.short	420
	.space	2
	.word	rndis_max_pkt_per_xfer_show
	.word	rndis_max_pkt_per_xfer_store
	.type	dev_attr_vendorID, %object
	.size	dev_attr_vendorID, 16
dev_attr_vendorID:
	.word	.LC988
	.short	420
	.space	2
	.word	rndis_vendorID_show
	.word	rndis_vendorID_store
	.type	dev_attr_ethaddr, %object
	.size	dev_attr_ethaddr, 16
dev_attr_ethaddr:
	.word	.LC989
	.short	420
	.space	2
	.word	rndis_ethaddr_show
	.word	rndis_ethaddr_store
	.type	dev_attr_wceis, %object
	.size	dev_attr_wceis, 16
dev_attr_wceis:
	.word	.LC990
	.short	420
	.space	2
	.word	rndis_wceis_show
	.word	rndis_wceis_store
	.type	dev_attr_manufacturer, %object
	.size	dev_attr_manufacturer, 16
dev_attr_manufacturer:
	.word	.LC991
	.short	420
	.space	2
	.word	rndis_manufacturer_show
	.word	rndis_manufacturer_store
	.type	ptp_function, %object
	.size	ptp_function, 52
ptp_function:
	.word	.LC992
	.space	20
	.word	ptp_function_init
	.word	ptp_function_cleanup
	.space	8
	.word	ptp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	mtp_function, %object
	.size	mtp_function, 52
mtp_function:
	.word	.LC625
	.space	20
	.word	mtp_function_init
	.word	mtp_function_cleanup
	.space	8
	.word	mtp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	ccid_function, %object
	.size	ccid_function, 52
ccid_function:
	.word	.LC618
	.space	20
	.word	ccid_function_init
	.word	ccid_function_cleanup
	.space	8
	.word	ccid_function_bind_config
	.space	8
	.type	qdss_function, %object
	.size	qdss_function, 52
qdss_function:
	.word	.LC629
	.space	20
	.word	qdss_function_init
	.word	qdss_function_cleanup
	.space	8
	.word	qdss_function_bind_config
	.space	8
	.type	diag_function, %object
	.size	diag_function, 52
diag_function:
	.word	.LC993
	.space	12
	.word	diag_function_attributes
	.space	4
	.word	diag_function_init
	.word	diag_function_cleanup
	.space	8
	.word	diag_function_bind_config
	.space	8
	.type	diag_function_attributes, %object
	.size	diag_function_attributes, 8
diag_function_attributes:
	.word	dev_attr_clients
	.word	0
	.type	dev_attr_clients, %object
	.size	dev_attr_clients, 16
dev_attr_clients:
	.word	.LC994
	.short	128
	.space	2
	.word	0
	.word	clients_store
	.type	audio_function, %object
	.size	audio_function, 52
audio_function:
	.word	.LC938
	.space	36
	.word	audio_function_bind_config
	.space	8
	.type	mbim_function, %object
	.size	mbim_function, 52
mbim_function:
	.word	.LC642
	.space	12
	.word	mbim_function_attributes
	.space	4
	.word	mbim_function_init
	.word	mbim_function_cleanup
	.space	8
	.word	mbim_function_bind_config
	.space	4
	.word	mbim_function_ctrlrequest
	.type	mbim_function_attributes, %object
	.size	mbim_function_attributes, 8
mbim_function_attributes:
	.word	dev_attr_mbim_transports
	.word	0
	.type	dev_attr_mbim_transports, %object
	.size	dev_attr_mbim_transports, 16
dev_attr_mbim_transports:
	.word	.LC995
	.short	420
	.space	2
	.word	mbim_transports_show
	.word	mbim_transports_store
	.type	ecm_qc_function, %object
	.size	ecm_qc_function, 52
ecm_qc_function:
	.word	.LC996
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_qc_function_bind_config
	.word	ecm_qc_function_unbind_config
	.space	4
	.type	ecm_function_attributes, %object
	.size	ecm_function_attributes, 12
ecm_function_attributes:
	.word	dev_attr_ecm_transports
	.word	dev_attr_ecm_ethaddr
	.word	0
	.type	dev_attr_ecm_transports, %object
	.size	dev_attr_ecm_transports, 16
dev_attr_ecm_transports:
	.word	.LC997
	.short	420
	.space	2
	.word	ecm_transports_show
	.word	ecm_transports_store
	.type	dev_attr_ecm_ethaddr, %object
	.size	dev_attr_ecm_ethaddr, 16
dev_attr_ecm_ethaddr:
	.word	.LC998
	.short	420
	.space	2
	.word	ecm_ethaddr_show
	.word	ecm_ethaddr_store
	.type	rmnet_function, %object
	.size	rmnet_function, 52
rmnet_function:
	.word	.LC651
	.space	12
	.word	rmnet_function_attributes
	.space	8
	.word	rmnet_function_cleanup
	.space	8
	.word	rmnet_function_bind_config
	.space	8
	.type	rmnet_function_attributes, %object
	.size	rmnet_function_attributes, 12
rmnet_function_attributes:
	.word	dev_attr_rmnet_transports
	.word	dev_attr_rmnet_xport_names
	.word	0
	.type	dev_attr_rmnet_xport_names, %object
	.size	dev_attr_rmnet_xport_names, 16
dev_attr_rmnet_xport_names:
	.word	.LC999
	.short	420
	.space	2
	.word	rmnet_xport_names_show
	.word	rmnet_xport_names_store
	.type	dev_attr_rmnet_transports, %object
	.size	dev_attr_rmnet_transports, 16
dev_attr_rmnet_transports:
	.word	.LC1000
	.short	420
	.space	2
	.word	rmnet_transports_show
	.word	rmnet_transports_store
	.type	rmnet_smd_sdio_function, %object
	.size	rmnet_smd_sdio_function, 52
rmnet_smd_sdio_function:
	.word	.LC623
	.space	12
	.word	rmnet_smd_sdio_attributes
	.space	4
	.word	rmnet_smd_sdio_function_init
	.word	rmnet_smd_sdio_function_cleanup
	.space	8
	.word	rmnet_smd_sdio_bind_config
	.space	8
	.type	rmnet_smd_sdio_attributes, %object
	.size	rmnet_smd_sdio_attributes, 8
rmnet_smd_sdio_attributes:
	.word	dev_attr_transport
	.word	0
	.type	rmnet_sdio_function, %object
	.size	rmnet_sdio_function, 52
rmnet_sdio_function:
	.word	.LC647
	.space	36
	.word	rmnet_sdio_function_bind_config
	.space	8
	.type	rmnet_smd_function, %object
	.size	rmnet_smd_function, 52
rmnet_smd_function:
	.word	.LC1001
	.space	36
	.word	rmnet_smd_function_bind_config
	.space	8
	.type	acm_function, %object
	.size	acm_function, 52
acm_function:
	.word	.LC781
	.space	12
	.word	acm_function_attributes
	.space	4
	.word	acm_function_init
	.word	acm_function_cleanup
	.space	8
	.word	acm_function_bind_config
	.space	8
	.type	acm_function_attributes, %object
	.size	acm_function_attributes, 8
acm_function_attributes:
	.word	dev_attr_instances
	.word	0
	.type	dev_attr_instances, %object
	.size	dev_attr_instances, 16
dev_attr_instances:
	.word	.LC1002
	.short	420
	.space	2
	.word	acm_instances_show
	.word	acm_instances_store
	.type	midi_function, %object
	.size	midi_function, 52
midi_function:
	.word	.LC1003
	.space	12
	.word	midi_function_attributes
	.space	4
	.word	midi_function_init
	.word	midi_function_cleanup
	.space	8
	.word	midi_function_bind_config
	.space	8
	.type	midi_function_attributes, %object
	.size	midi_function_attributes, 8
midi_function_attributes:
	.word	dev_attr_alsa
	.word	0
	.type	dev_attr_alsa, %object
	.size	dev_attr_alsa, 16
dev_attr_alsa:
	.word	.LC1004
	.short	292
	.space	2
	.word	midi_alsa_show
	.word	0
	.type	ffs_function_attributes, %object
	.size	ffs_function_attributes, 8
ffs_function_attributes:
	.word	dev_attr_aliases
	.word	0
	.type	dev_attr_aliases, %object
	.size	dev_attr_aliases, 16
dev_attr_aliases:
	.word	.LC1005
	.short	420
	.space	2
	.word	ffs_aliases_show
	.word	ffs_aliases_store
	.type	dev_strings, %object
	.size	dev_strings, 8
dev_strings:
	.word	stringtab_dev
	.word	0
	.type	stringtab_dev, %object
	.size	stringtab_dev, 8
stringtab_dev:
	.short	1033
	.space	2
	.word	strings_dev
	.type	ncm_function, %object
	.size	ncm_function, 52
ncm_function:
	.word	.LC553
	.space	20
	.word	ncm_function_init
	.word	ncm_function_cleanup
	.space	8
	.word	ncm_function_bind_config
	.word	ncm_function_unbind_config
	.space	4
	.type	ncm_string_table, %object
	.size	ncm_string_table, 8
ncm_string_table:
	.short	1033
	.space	2
	.word	ncm_string_defs
	.type	ncm_desc, %object
	.size	ncm_desc, 6
ncm_desc:
	.byte	6
	.byte	36
	.byte	26
	.2byte	256
	.byte	9
	.space	2
	.type	ncm_header_desc, %object
	.size	ncm_header_desc, 5
ncm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	conn_gadget_function, %object
	.size	conn_gadget_function, 52
conn_gadget_function:
	.word	.LC628
	.space	12
	.word	conn_gadget_function_attributes
	.space	4
	.word	conn_gadget_function_init
	.word	conn_gadget_function_cleanup
	.space	8
	.word	conn_gadget_function_bind_config
	.space	8
	.type	conn_gadget_function_attributes, %object
	.size	conn_gadget_function_attributes, 16
conn_gadget_function_attributes:
	.word	dev_attr_usb_buffer_size
	.word	dev_attr_out_max_packet_size
	.word	dev_attr_in_max_packet_size
	.word	0
	.type	dev_attr_in_max_packet_size, %object
	.size	dev_attr_in_max_packet_size, 16
dev_attr_in_max_packet_size:
	.word	.LC1010
	.short	420
	.space	2
	.word	conn_gadget_in_max_packet_size_show
	.word	conn_gadget_in_max_packet_size_store
	.type	dev_attr_out_max_packet_size, %object
	.size	dev_attr_out_max_packet_size, 16
dev_attr_out_max_packet_size:
	.word	.LC1011
	.short	420
	.space	2
	.word	conn_gadget_out_max_packet_size_show
	.word	conn_gadget_out_max_packet_size_store
	.type	dev_attr_usb_buffer_size, %object
	.size	dev_attr_usb_buffer_size, 16
dev_attr_usb_buffer_size:
	.word	.LC1012
	.short	420
	.space	2
	.word	conn_gadget_usb_buffer_size_show
	.word	conn_gadget_usb_buffer_size_store
	.type	conn_gadget_superspeed_bulk_comp_desc, %object
	.size	conn_gadget_superspeed_bulk_comp_desc, 6
conn_gadget_superspeed_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC1013
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC752
	.word	.LC1014
	.type	audio_stringtab_dev, %object
	.size	audio_stringtab_dev, 8
audio_stringtab_dev:
	.short	1033
	.space	2
	.word	audio_string_defs
	.type	microphone_as_iso_in_desc, %object
	.size	microphone_as_iso_in_desc, 7
microphone_as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_as_header_desc, %object
	.size	microphone_as_header_desc, 7
microphone_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	2
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_iso_out_desc, %object
	.size	speaker_as_iso_out_desc, 7
speaker_as_iso_out_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_header_desc, %object
	.size	speaker_as_header_desc, 7
speaker_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	3
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_output_terminal_desc, %object
	.size	microphone_output_terminal_desc, 9
microphone_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	2
	.short	257
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	speaker_output_terminal_desc, %object
	.size	speaker_output_terminal_desc, 9
speaker_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	4
	.short	769
	.byte	3
	.byte	3
	.space	1
	.space	3
	.type	req_capture_count, %object
	.size	req_capture_count, 4
req_capture_count:
	.word	48
	.type	rndis_qc_string_table, %object
	.size	rndis_qc_string_table, 8
rndis_qc_string_table:
	.short	1033
	.space	2
	.word	rndis_qc_string_defs
	.type	rndis_qc_ss_bulk_comp_desc, %object
	.size	rndis_qc_ss_bulk_comp_desc, 6
rndis_qc_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rndis_qc_ss_intr_comp_desc, %object
	.size	rndis_qc_ss_intr_comp_desc, 6
rndis_qc_ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_qc_acm_descriptor, %object
	.size	rndis_qc_acm_descriptor, 4
rndis_qc_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	rndis_qc_call_mgmt_descriptor, %object
	.size	rndis_qc_call_mgmt_descriptor, 5
rndis_qc_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	rndis_qc_header_desc, %object
	.size	rndis_qc_header_desc, 5
rndis_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_string_table, %object
	.size	ecm_string_table, 8
ecm_string_table:
	.short	1033
	.space	2
	.word	ecm_string_defs
	.type	ss_ecm_bulk_comp_desc, %object
	.size	ss_ecm_bulk_comp_desc, 6
ss_ecm_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_ecm_intr_comp_desc, %object
	.size	ss_ecm_intr_comp_desc, 6
ss_ecm_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_header_desc, %object
	.size	ecm_header_desc, 5
ecm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	mbim_string_table, %object
	.size	mbim_string_table, 8
mbim_string_table:
	.short	1033
	.space	2
	.word	mbim_string_defs
	.type	ss_mbim_out_comp_desc, %object
	.size	ss_mbim_out_comp_desc, 6
ss_mbim_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_in_comp_desc, %object
	.size	ss_mbim_in_comp_desc, 6
ss_mbim_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_notify_comp_desc, %object
	.size	ss_mbim_notify_comp_desc, 6
ss_mbim_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	ext_mbb_desc, %object
	.size	ext_mbb_desc, 8
ext_mbb_desc:
	.byte	8
	.byte	36
	.byte	28
	.2byte	256
	.byte	64
	.short	1500
	.type	mbim_header_desc, %object
	.size	mbim_header_desc, 5
mbim_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_qc_string_table, %object
	.size	ecm_qc_string_table, 8
ecm_qc_string_table:
	.short	1033
	.space	2
	.word	ecm_qc_string_defs
	.type	ecm_qc_ss_out_comp_desc, %object
	.size	ecm_qc_ss_out_comp_desc, 6
ecm_qc_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_in_comp_desc, %object
	.size	ecm_qc_ss_in_comp_desc, 6
ecm_qc_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_notify_comp_desc, %object
	.size	ecm_qc_ss_notify_comp_desc, 6
ecm_qc_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_qc_header_desc, %object
	.size	ecm_qc_header_desc, 5
ecm_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	rndis_string_table, %object
	.size	rndis_string_table, 8
rndis_string_table:
	.short	1033
	.space	2
	.word	rndis_string_defs
	.type	ss_bulk_comp_desc, %object
	.size	ss_bulk_comp_desc, 6
ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_intr_comp_desc, %object
	.size	ss_intr_comp_desc, 6
ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_acm_descriptor, %object
	.size	rndis_acm_descriptor, 4
rndis_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	call_mgmt_descriptor, %object
	.size	call_mgmt_descriptor, 5
call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	header_desc, %object
	.size	header_desc, 5
header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	acc_string_table, %object
	.size	acc_string_table, 8
acc_string_table:
	.short	1033
	.space	2
	.word	acc_string_defs
	.type	acc_superspeed_out_comp_desc, %object
	.size	acc_superspeed_out_comp_desc, 6
acc_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acc_superspeed_in_comp_desc, %object
	.size	acc_superspeed_in_comp_desc, 6
acc_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_string_table, %object
	.size	mtp_string_table, 8
mtp_string_table:
	.short	1033
	.space	2
	.word	mtp_string_defs
	.type	mtp_superspeed_intr_comp_desc, %object
	.size	mtp_superspeed_intr_comp_desc, 6
mtp_superspeed_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	28
	.space	2
	.type	mtp_superspeed_out_comp_desc, %object
	.size	mtp_superspeed_out_comp_desc, 6
mtp_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	mtp_superspeed_in_comp_desc, %object
	.size	mtp_superspeed_in_comp_desc, 6
mtp_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	ptp_interface_desc, %object
	.size	ptp_interface_desc, 9
ptp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	6
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	midi_stringtab, %object
	.size	midi_stringtab, 8
midi_stringtab:
	.short	1033
	.space	2
	.word	midi_string_defs
	.type	adb_superspeed_out_comp_desc, %object
	.size	adb_superspeed_out_comp_desc, 6
adb_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	adb_superspeed_in_comp_desc, %object
	.size	adb_superspeed_in_comp_desc, 6
adb_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_string_table, %object
	.size	acm_string_table, 8
acm_string_table:
	.short	1033
	.space	2
	.word	acm_string_defs
	.type	acm_ss_bulk_comp_desc, %object
	.size	acm_ss_bulk_comp_desc, 6
acm_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_descriptor, %object
	.size	acm_descriptor, 4
acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	acm_header_desc, %object
	.size	acm_header_desc, 5
acm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	fsg_stringtab, %object
	.size	fsg_stringtab, 8
fsg_stringtab:
	.short	1033
	.space	2
	.word	fsg_strings
	.type	fs_audio_desc, %object
	.size	fs_audio_desc, 48
fs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	fs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	hs_audio_desc, %object
	.size	hs_audio_desc, 48
hs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	hs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	as_iso_in_desc, %object
	.size	as_iso_in_desc, 7
as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	as_header_desc, %object
	.size	as_header_desc, 7
as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	output_terminal_desc, %object
	.size	output_terminal_desc, 9
output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	3
	.short	257
	.byte	2
	.byte	2
	.space	1
	.space	3
	.type	feature_unit_desc, %object
	.size	feature_unit_desc, 9
feature_unit_desc:
	.byte	9
	.byte	36
	.byte	6
	.byte	2
	.byte	1
	.byte	2
	.space	3
	.space	3
	.type	audio_source_ac_header_desc, %object
	.size	audio_source_ac_header_desc, 10
audio_source_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	40
	.byte	2
	.byte	0
	.byte	1
	.space	2
	.type	rmnet_string_table, %object
	.size	rmnet_string_table, 8
rmnet_string_table:
	.short	1033
	.space	2
	.word	rmnet_string_defs
	.type	rmnet_ss_out_comp_desc, %object
	.size	rmnet_ss_out_comp_desc, 6
rmnet_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_in_comp_desc, %object
	.size	rmnet_ss_in_comp_desc, 6
rmnet_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_notify_comp_desc, %object
	.size	rmnet_ss_notify_comp_desc, 6
rmnet_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	dev_attr_transport, %object
	.size	dev_attr_transport, 16
dev_attr_transport:
	.word	.LC1067
	.short	420
	.space	2
	.word	0
	.word	transport_store
	.type	rmnet_mux_string_table, %object
	.size	rmnet_mux_string_table, 8
rmnet_mux_string_table:
	.short	1033
	.space	2
	.word	rmnet_mux_string_defs
	.type	rmnet_mux_string_defs, %object
	.size	rmnet_mux_string_defs, 16
rmnet_mux_string_defs:
	.space	4
	.word	.LC1065
	.space	8
	.type	mux_sdio_rx_fctrl_dis_thld, %object
	.size	mux_sdio_rx_fctrl_dis_thld, 4
mux_sdio_rx_fctrl_dis_thld:
	.word	500
	.type	mux_sdio_tx_pkt_drop_thld, %object
	.size	mux_sdio_tx_pkt_drop_thld, 4
mux_sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_sdio_string_table, %object
	.size	rmnet_sdio_string_table, 8
rmnet_sdio_string_table:
	.short	1033
	.space	2
	.word	rmnet_sdio_string_defs
	.type	rmnet_sdio_string_defs, %object
	.size	rmnet_sdio_string_defs, 16
rmnet_sdio_string_defs:
	.space	4
	.word	.LC1068
	.space	8
	.type	sdio_rx_fctrl_dis_thld, %object
	.size	sdio_rx_fctrl_dis_thld, 4
sdio_rx_fctrl_dis_thld:
	.word	500
	.type	sdio_tx_pkt_drop_thld, %object
	.size	sdio_tx_pkt_drop_thld, 4
sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_smd_string_table, %object
	.size	rmnet_smd_string_table, 8
rmnet_smd_string_table:
	.short	1033
	.space	2
	.word	rmnet_smd_string_defs
	.type	rmnet_smd_string_defs, %object
	.size	rmnet_smd_string_defs, 16
rmnet_smd_string_defs:
	.space	4
	.word	.LC1068
	.space	8
	.type	qdss_string_table, %object
	.size	qdss_string_table, 8
qdss_string_table:
	.short	1033
	.space	2
	.word	qdss_string_defs
	.type	ss_bulk_out_comp_desc, %object
	.size	ss_bulk_out_comp_desc, 6
ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_bulk_in_comp_desc, %object
	.size	ss_bulk_in_comp_desc, 6
ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.bss
	.align	2
	.set	.LANCHOR1,. + 0
	.set	.LANCHOR6,. + 8184
	.type	n_sdio_ports, %object
	.size	n_sdio_ports, 4
n_sdio_ports:
	.space	4
	.type	sdio_ports, %object
	.size	sdio_ports, 216
sdio_ports:
	.space	216
	.type	n_smd_ports, %object
	.size	n_smd_ports, 4
n_smd_ports:
	.space	4
	.type	smd_ports, %object
	.size	smd_ports, 216
smd_ports:
	.space	216
	.type	n_bam_ports, %object
	.size	n_bam_ports, 4
n_bam_ports:
	.space	4
	.type	bam_ports, %object
	.size	bam_ports, 84
bam_ports:
	.space	84
	.type	ctrl_smd_ports, %object
	.size	ctrl_smd_ports, 504
ctrl_smd_ports:
	.space	504
	.type	ctrl_port, %object
	.size	ctrl_port, 4
ctrl_port:
	.space	4
	.type	no_ctrl_ports, %object
	.size	no_ctrl_ports, 4
no_ctrl_ports:
	.space	4
	.type	gctrl_ports, %object
	.size	gctrl_ports, 416
gctrl_ports:
	.space	416
	.type	no_data_ports, %object
	.size	no_data_ports, 4
no_data_ports:
	.space	4
	.type	gdata_ports, %object
	.size	gdata_ports, 416
gdata_ports:
	.space	416
	.type	num_ctrl_ports, %object
	.size	num_ctrl_ports, 4
num_ctrl_ports:
	.space	4
	.type	ghsuart_ctrl_ports, %object
	.size	ghsuart_ctrl_ports, 168
ghsuart_ctrl_ports:
	.space	168
	.type	num_data_ports, %object
	.size	num_data_ports, 4
num_data_ports:
	.space	4
	.type	ghsuart_data_ports, %object
	.size	ghsuart_data_ports, 168
ghsuart_data_ports:
	.space	168
	.type	read_state, %object
	.size	read_state, 4
read_state:
	.space	4
	.type	modem_wait_q, %object
	.size	modem_wait_q, 12
modem_wait_q:
	.space	12
	.type	_ccid_dev, %object
	.size	_ccid_dev, 4
_ccid_dev:
	.space	4
	.type	audio_reinit, %object
	.size	audio_reinit, 1
audio_reinit:
	.space	1
	.space	3
	.type	android_dev_list, %object
	.size	android_dev_list, 8
android_dev_list:
	.space	8
	.type	composite, %object
	.size	composite, 4
composite:
	.space	4
	.type	serial_string, %object
	.size	serial_string, 256
serial_string:
	.space	256
	.type	rmux_dev, %object
	.size	rmux_dev, 4
rmux_dev:
	.space	4
	.type	_conn_gadget_dev, %object
	.size	_conn_gadget_dev, 4
_conn_gadget_dev:
	.space	4
	.type	_acc_dev, %object
	.size	_acc_dev, 4
_acc_dev:
	.space	4
	.type	rndis_lock, %object
	.size	rndis_lock, 4
rndis_lock:
	.space	4
	.type	_rndis_qc, %object
	.size	_rndis_qc, 4
_rndis_qc:
	.space	4
	.type	_mtp_dev, %object
	.size	_mtp_dev, 4
_mtp_dev:
	.space	4
	.type	rmnet_ports, %object
	.size	rmnet_ports, 72
rmnet_ports:
	.space	72
	.type	_mbim_dev, %object
	.size	_mbim_dev, 4
_mbim_dev:
	.space	4
	.type	product_string, %object
	.size	product_string, 256
product_string:
	.space	256
	.type	manufacturer_string, %object
	.size	manufacturer_string, 256
manufacturer_string:
	.space	256
	.type	ecm_transports, %object
	.size	ecm_transports, 50
ecm_transports:
	.space	50
	.space	2
	.type	rmnet_xport_names, %object
	.size	rmnet_xport_names, 50
rmnet_xport_names:
	.space	50
	.space	2
	.type	rmnet_transports, %object
	.size	rmnet_transports, 50
rmnet_transports:
	.space	50
	.space	2
	.type	mbim_transports, %object
	.size	mbim_transports, 50
mbim_transports:
	.space	50
	.type	usb30en, %object
	.size	usb30en, 1
usb30en:
	.space	1
	.space	1
	.type	rmnet_smd, %object
	.size	rmnet_smd, 4
rmnet_smd:
	.space	4
	.type	gserial_wq, %object
	.size	gserial_wq, 4
gserial_wq:
	.space	4
	.type	gsdio_wq, %object
	.size	gsdio_wq, 4
gsdio_wq:
	.space	4
	.type	gsmd_wq, %object
	.size	gsmd_wq, 4
gsmd_wq:
	.space	4
	.type	bam2bam_data_ports, %object
	.size	bam2bam_data_ports, 4
bam2bam_data_ports:
	.space	4
	.type	bam_data_wq, %object
	.size	bam_data_wq, 4
bam_data_wq:
	.space	4
	.type	uether_wq, %object
	.size	uether_wq, 4
uether_wq:
	.space	4
	.type	d_lock, %object
	.size	d_lock, 4
d_lock:
	.space	4
	.type	dent_smd, %object
	.size	dent_smd, 4
dent_smd:
	.space	4
	.type	ghsuart_ctrl_dent, %object
	.size	ghsuart_ctrl_dent, 4
ghsuart_ctrl_dent:
	.space	4
	.type	ghsuart_data_dent, %object
	.size	ghsuart_data_dent, 4
ghsuart_data_dent:
	.space	4
	.type	dent_diag, %object
	.size	dent_diag, 4
dent_diag:
	.space	4
	.type	ch_lock, %object
	.size	ch_lock, 4
ch_lock:
	.space	4
	.type	nr_rmnet_ports, %object
	.size	nr_rmnet_ports, 4
nr_rmnet_ports:
	.space	4
	.type	gbam_dent, %object
	.size	gbam_dent, 4
gbam_dent:
	.space	4
	.type	no_ctrl_smd_ports, %object
	.size	no_ctrl_smd_ports, 4
no_ctrl_smd_ports:
	.space	4
	.type	no_ctrl_qti_ports, %object
	.size	no_ctrl_qti_ports, 4
no_ctrl_qti_ports:
	.space	4
	.type	no_data_bam_ports, %object
	.size	no_data_bam_ports, 4
no_data_bam_ports:
	.space	4
	.type	no_data_bam2bam_ports, %object
	.size	no_data_bam2bam_ports, 4
no_data_bam2bam_ports:
	.space	4
	.type	no_ctrl_hsic_ports, %object
	.size	no_ctrl_hsic_ports, 4
no_ctrl_hsic_ports:
	.space	4
	.type	no_data_hsic_ports, %object
	.size	no_data_hsic_ports, 4
no_data_hsic_ports:
	.space	4
	.type	no_ctrl_hsuart_ports, %object
	.size	no_ctrl_hsuart_ports, 4
no_ctrl_hsuart_ports:
	.space	4
	.type	no_data_hsuart_ports, %object
	.size	no_data_hsuart_ports, 4
no_data_hsuart_ports:
	.space	4
	.type	_adb_dev, %object
	.size	_adb_dev, 4
_adb_dev:
	.space	4
	.type	control_line_state, %object
	.size	control_line_state, 4
control_line_state:
	.space	4
	.type	grmnet_ctrl_wq, %object
	.size	grmnet_ctrl_wq, 4
grmnet_ctrl_wq:
	.space	4
	.type	smd_ctrl_dent, %object
	.size	smd_ctrl_dent, 4
smd_ctrl_dent:
	.space	4
	.type	smd_ctrl_dfile, %object
	.size	smd_ctrl_dfile, 4
smd_ctrl_dfile:
	.space	4
	.type	online_clients, %object
	.size	online_clients, 1
online_clients:
	.space	1
	.space	3
	.type	gctrl_dent, %object
	.size	gctrl_dent, 4
gctrl_dent:
	.space	4
	.type	gctrl_dfile, %object
	.size	gctrl_dfile, 4
gctrl_dfile:
	.space	4
	.type	gdata_dent, %object
	.size	gdata_dent, 4
gdata_dent:
	.space	4
	.type	gdata_dfile_stats, %object
	.size	gdata_dfile_stats, 4
gdata_dfile_stats:
	.space	4
	.type	gdata_dfile_tstamp, %object
	.size	gdata_dfile_tstamp, 4
gdata_dfile_tstamp:
	.space	4
	.type	diag_dev_list, %object
	.size	diag_dev_list, 8
diag_dev_list:
	.space	8
	.type	n_tx_req_queued, %object
	.size	n_tx_req_queued, 4
n_tx_req_queued:
	.space	4
	.type	gbam_wq, %object
	.size	gbam_wq, 4
gbam_wq:
	.space	4
	.type	retry_cnt.38186, %object
	.size	retry_cnt.38186, 4
retry_cnt.38186:
	.space	4
	.type	diag_dload, %object
	.size	diag_dload, 4
diag_dload:
	.space	4
	.type	diag_clients, %object
	.size	diag_clients, 32
diag_clients:
	.space	32
	.type	ipa_params, %object
	.size	ipa_params, 28
ipa_params:
	.space	28
	.type	__key.49802, %object
	.size	__key.49802, 0
__key.49802:
	.type	__key.55415, %object
	.size	__key.55415, 0
__key.55415:
	.type	__key.55416, %object
	.size	__key.55416, 0
__key.55416:
	.type	__key.54077, %object
	.size	__key.54077, 0
__key.54077:
	.type	__key.54078, %object
	.size	__key.54078, 0
__key.54078:
	.type	__key.54079, %object
	.size	__key.54079, 0
__key.54079:
	.type	__key.52736, %object
	.size	__key.52736, 0
__key.52736:
	.type	__key.52737, %object
	.size	__key.52737, 0
__key.52737:
	.type	__key.38281, %object
	.size	__key.38281, 0
__key.38281:
	.type	__key.38407, %object
	.size	__key.38407, 0
__key.38407:
	.type	dent_rmnet_mux, %object
	.size	dent_rmnet_mux, 4
dent_rmnet_mux:
	.space	4
	.type	_ncm_dev, %object
	.size	_ncm_dev, 4
_ncm_dev:
	.space	4
	.type	nr_mbim_ports, %object
	.size	nr_mbim_ports, 4
nr_mbim_ports:
	.space	4
	.type	mbim_ports, %object
	.size	mbim_ports, 8
mbim_ports:
	.space	8
	.type	rndis_ul_max_xfer_size_rcvd, %object
	.size	rndis_ul_max_xfer_size_rcvd, 4
rndis_ul_max_xfer_size_rcvd:
	.space	4
	.type	rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	rndis_ul_max_pkt_per_xfer_rcvd, 4
rndis_ul_max_pkt_per_xfer_rcvd:
	.space	4
	.type	__key.62466, %object
	.size	__key.62466, 0
__key.62466:
	.type	__key.62467, %object
	.size	__key.62467, 0
__key.62467:
	.type	__key.62468, %object
	.size	__key.62468, 0
__key.62468:
	.type	android_dev_count, %object
	.size	android_dev_count, 4
android_dev_count:
	.space	4
	.type	android_class, %object
	.size	android_class, 4
android_class:
	.space	4
	.type	composite_string_index, %object
	.size	composite_string_index, 4
composite_string_index:
	.space	4
	.type	ncm_connect, %object
	.size	ncm_connect, 1
ncm_connect:
	.space	1
	.space	3
	.type	next_state.63023, %object
	.size	next_state.63023, 4
next_state.63023:
	.space	4
	.type	last_uevent.63022, %object
	.size	last_uevent.63022, 4
last_uevent.63022:
	.space	4
	.type	__key.45419, %object
	.size	__key.45419, 0
__key.45419:
	.type	epnum, %object
	.size	epnum, 4
epnum:
	.space	4
	.type	terminal_mode_version, %object
	.size	terminal_mode_version, 2
terminal_mode_version:
	.space	2
	.type	terminal_mode_vendor_id, %object
	.size	terminal_mode_vendor_id, 2
terminal_mode_vendor_id:
	.space	2
	.type	record_timestamp, %object
	.size	record_timestamp, 4
record_timestamp:
	.space	4
	.type	bam2bam_ports, %object
	.size	bam2bam_ports, 12
bam2bam_ports:
	.space	12
	.type	n_bam2bam_data_ports, %object
	.size	n_bam2bam_data_ports, 4
n_bam2bam_data_ports:
	.space	4
	.type	the_card, %object
	.size	the_card, 4
the_card:
	.space	4
	.type	__key.57097, %object
	.size	__key.57097, 0
__key.57097:
	.type	__key.57098, %object
	.size	__key.57098, 0
__key.57098:
	.type	rndis_per_dev_params, %object
	.size	rndis_per_dev_params, 60
rndis_per_dev_params:
	.space	60
	.type	__key.53095, %object
	.size	__key.53095, 0
__key.53095:
	.type	__key.53038, %object
	.size	__key.53038, 0
__key.53038:
	.type	__key.53039, %object
	.size	__key.53039, 0
__key.53039:
	.type	prev_len.47071, %object
	.size	prev_len.47071, 4
prev_len.47071:
	.space	4
	.type	n_ports, %object
	.size	n_ports, 4
n_ports:
	.space	4
	.type	gs_tty_driver, %object
	.size	gs_tty_driver, 4
gs_tty_driver:
	.space	4
	.type	ports, %object
	.size	ports, 224
ports:
	.space	224
	.type	gs_dent, %object
	.size	gs_dent, 4
gs_dent:
	.space	4
	.type	composite_gadget_bind, %object
	.size	composite_gadget_bind, 4
composite_gadget_bind:
	.space	4
	.type	idVendor, %object
	.size	idVendor, 2
idVendor:
	.space	2
	.type	idProduct, %object
	.size	idProduct, 2
idProduct:
	.space	2
	.type	bcdDevice, %object
	.size	bcdDevice, 2
bcdDevice:
	.space	2
	.space	2
	.type	iManufacturer, %object
	.size	iManufacturer, 4
iManufacturer:
	.space	4
	.type	composite_manufacturer, %object
	.size	composite_manufacturer, 50
composite_manufacturer:
	.space	50
	.space	2
	.type	iProduct, %object
	.size	iProduct, 4
iProduct:
	.space	4
	.type	iSerialNumber, %object
	.size	iSerialNumber, 4
iSerialNumber:
	.space	4
	.type	write_error_after_csw_sent, %object
	.size	write_error_after_csw_sent, 4
write_error_after_csw_sent:
	.space	4
	.type	csw_hack_sent, %object
	.size	csw_hack_sent, 4
csw_hack_sent:
	.space	4
	.type	__key.44508, %object
	.size	__key.44508, 0
__key.44508:
	.type	__key.44510, %object
	.size	__key.44510, 0
__key.44510:
	.type	__key.8288, %object
	.size	__key.8288, 0
__key.8288:
	.type	bam_info, %object
	.size	bam_info, 16
bam_info:
	.space	16
	.type	__key.47353, %object
	.size	__key.47353, 0
__key.47353:
	.type	__key.47299, %object
	.size	__key.47299, 0
__key.47299:
	.type	__key.47300, %object
	.size	__key.47300, 0
__key.47300:
	.type	the_dev, %object
	.size	the_dev, 4
the_dev:
	.space	4
	.type	acm_data, %object
	.size	acm_data, 4
acm_data:
	.space	4
	.type	rndis_initialized, %object
	.size	rndis_initialized, 1
rndis_initialized:
	.space	1
	.space	3
	.type	rmnet_mux_smd_data_ch, %object
	.size	rmnet_mux_smd_data_ch, 4
rmnet_mux_smd_data_ch:
	.space	4
	.type	retry_cnt.37430, %object
	.size	retry_cnt.37430, 4
retry_cnt.37430:
	.space	4
	.type	__key.46068, %object
	.size	__key.46068, 0
__key.46068:
	.type	__key.46077, %object
	.size	__key.46077, 0
__key.46077:
	.type	__key.31993, %object
	.size	__key.31993, 0
__key.31993:
	.type	__key.31994, %object
	.size	__key.31994, 0
__key.31994:
	.type	__key.44545, %object
	.size	__key.44545, 0
__key.44545:
	.type	__key.44546, %object
	.size	__key.44546, 0
__key.44546:
	.type	dev_addr, %object
	.size	dev_addr, 4
dev_addr:
	.space	4
	.type	new_product_name.45696, %object
	.size	new_product_name.45696, 17
new_product_name.45696:
	.space	17
	.space	3
	.type	unknown.45886, %object
	.size	unknown.45886, 16
unknown.45886:
	.space	16
	.type	__key.64406, %object
	.size	__key.64406, 0
__key.64406:
	.type	__key.64410, %object
	.size	__key.64410, 0
__key.64410:
	.type	__key.52344, %object
	.size	__key.52344, 0
__key.52344:
	.type	__key.48259, %object
	.size	__key.48259, 0
__key.48259:
	.type	__key.48595, %object
	.size	__key.48595, 0
__key.48595:
	.type	n_bam2bam_ports, %object
	.size	n_bam2bam_ports, 4
n_bam2bam_ports:
	.space	4
	.type	__key.49568, %object
	.size	__key.49568, 0
__key.49568:
	.type	__key.49569, %object
	.size	__key.49569, 0
__key.49569:
	.type	port_num.50739, %object
	.size	port_num.50739, 4
port_num.50739:
	.space	4
	.type	port_num.51397, %object
	.size	port_num.51397, 4
port_num.51397:
	.space	4
	.type	rmnet_initialized.63264, %object
	.size	rmnet_initialized.63264, 4
rmnet_initialized.63264:
	.space	4
	.type	ports.63265, %object
	.size	ports.63265, 4
ports.63265:
	.space	4
	.type	qc_dev_addr, %object
	.size	qc_dev_addr, 4
qc_dev_addr:
	.space	4
	.type	qc_host_addr, %object
	.size	qc_host_addr, 4
qc_host_addr:
	.space	4
	.type	audio_string_defs, %object
	.size	audio_string_defs, 8
audio_string_defs:
	.space	8
	.type	host_addr, %object
	.size	host_addr, 4
host_addr:
	.space	4
	.type	dbg_data, %object
	.size	dbg_data, 4104
dbg_data:
	.space	4104
	.type	rmnet_mux_sdio_data_ch, %object
	.size	rmnet_mux_sdio_data_ch, 4
rmnet_mux_sdio_data_ch:
	.space	4
	.type	rmnet_mux_sdio_ctl_ch, %object
	.size	rmnet_mux_sdio_ctl_ch, 4
rmnet_mux_sdio_ctl_ch:
	.space	4
	.type	rmnet_sdio_data_ch, %object
	.size	rmnet_sdio_data_ch, 4
rmnet_sdio_data_ch:
	.space	4
	.type	rmnet_sdio_ctl_ch, %object
	.size	rmnet_sdio_ctl_ch, 4
rmnet_sdio_ctl_ch:
	.space	4
	.type	debug_buffer, %object
	.size	debug_buffer, 4096
debug_buffer:
	.space	4096
	.section	.data.unlikely,"aw",%progbits
	.set	.LANCHOR4,. + 0
	.type	__warned.11129, %object
	.size	__warned.11129, 1
__warned.11129:
	.space	1
	.section	.devinit.rodata,"a",%progbits
	.align	2
	.type	android_id_table, %object
	.size	android_id_table, 48
android_id_table:
	.ascii	"android_usb\000"
	.space	8
	.space	4
	.ascii	"android_usb_hsic\000"
	.space	3
	.space	4
	.section	.exitcall.exit,"aw",%progbits
	.align	2
	.type	__exitcall_cleanup, %object
	.size	__exitcall_cleanup, 4
__exitcall_cleanup:
	.word	cleanup
	.type	__exitcall_gether_exit, %object
	.size	__exitcall_gether_exit, 4
__exitcall_gether_exit:
	.word	gether_exit
	.type	__exitcall_ghsuart_data_exit, %object
	.size	__exitcall_ghsuart_data_exit, 4
__exitcall_ghsuart_data_exit:
	.word	ghsuart_data_exit
	.type	__exitcall_ghsuart_ctrl_exit, %object
	.size	__exitcall_ghsuart_ctrl_exit, 4
__exitcall_ghsuart_ctrl_exit:
	.word	ghsuart_ctrl_exit
	.type	__exitcall_ghsic_data_exit, %object
	.size	__exitcall_ghsic_data_exit, 4
__exitcall_ghsic_data_exit:
	.word	ghsic_data_exit
	.type	__exitcall_gctrl_exit, %object
	.size	__exitcall_gctrl_exit, 4
__exitcall_gctrl_exit:
	.word	gctrl_exit
	.type	__exitcall_gqti_ctrl_cleanup, %object
	.size	__exitcall_gqti_ctrl_cleanup, 4
__exitcall_gqti_ctrl_cleanup:
	.word	gqti_ctrl_cleanup
	.type	__exitcall_gsmd_ctrl_exit, %object
	.size	__exitcall_gsmd_ctrl_exit, 4
__exitcall_gsmd_ctrl_exit:
	.word	gsmd_ctrl_exit
	.section	.initcall6.init,"aw",%progbits
	.align	2
	.type	__initcall_init6, %object
	.size	__initcall_init6, 4
__initcall_init6:
	.word	init
	.type	__initcall_gether_init6, %object
	.size	__initcall_gether_init6, 4
__initcall_gether_init6:
	.word	gether_init
	.type	__initcall_ghsuart_data_init6, %object
	.size	__initcall_ghsuart_data_init6, 4
__initcall_ghsuart_data_init6:
	.word	ghsuart_data_init
	.type	__initcall_ghsuart_ctrl_init6, %object
	.size	__initcall_ghsuart_ctrl_init6, 4
__initcall_ghsuart_ctrl_init6:
	.word	ghsuart_ctrl_init
	.type	__initcall_ghsic_data_init6, %object
	.size	__initcall_ghsic_data_init6, 4
__initcall_ghsic_data_init6:
	.word	ghsic_data_init
	.type	__initcall_gctrl_init6, %object
	.size	__initcall_gctrl_init6, 4
__initcall_gctrl_init6:
	.word	gctrl_init
	.type	__initcall_gqti_ctrl_init6, %object
	.size	__initcall_gqti_ctrl_init6, 4
__initcall_gqti_ctrl_init6:
	.word	gqti_ctrl_init
	.type	__initcall_gsmd_ctrl_init6, %object
	.size	__initcall_gsmd_ctrl_init6, 4
__initcall_gsmd_ctrl_init6:
	.word	gsmd_ctrl_init
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"rmnet data rx enqueue err %d\012\000"
	.space	2
.LC1:
	.ascii	"rmnet notify ep error %d\012\000"
	.space	2
.LC2:
	.ascii	"rmnet notify ep enqueue error %d\012\000"
	.space	2
.LC3:
	.ascii	"rmnet notifyep error %d\012\000"
	.space	3
.LC4:
	.ascii	"rmnet notify ep enq error %d\012\000"
	.space	2
.LC5:
	.ascii	"rmnet control SDIO write failed\012\000"
	.space	3
.LC6:
	.ascii	"ecm req %02x.%02x response err %d\012\000"
	.space	1
.LC7:
	.ascii	"rmnet_mux notifyep error %d\012\000"
	.space	3
.LC8:
	.ascii	"rmnet_mux ep0 enqueue err %d\012\000"
	.space	2
.LC9:
	.ascii	"/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget"
	.ascii	"/f_fs.c\000"
	.space	1
.LC10:
	.ascii	"<3>%s: device is already opened\012\000"
	.space	3
.LC11:
	.ascii	"<3>audio response on err %d\012\000"
	.space	3
.LC12:
	.ascii	"<3>%s: port is null\012\000"
	.space	3
.LC13:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d\012"
	.ascii	"\000"
	.space	3
.LC14:
	.ascii	"<3>%s: port->port_usb is NULL\000"
	.space	2
.LC15:
	.ascii	"<3>%s: error dequeuing transfer, %d\012\000"
	.space	3
.LC16:
	.ascii	"<3>%s: Invalid portno#%d\012\000"
	.space	2
.LC17:
	.ascii	"<3>%s: ecm req %02x.%02x response err %d\012\000"
	.space	2
.LC18:
	.ascii	"<3>%s: Bad control-OUT transfer\012\000"
	.space	3
.LC19:
	.ascii	"<3>%s: Illegal INPUT SIZE (%d) from host\012\000"
	.space	2
.LC20:
	.ascii	"<3>%s: Illegal NTB length %d\012\000"
	.space	2
.LC21:
	.ascii	"<3>%s: %s: Failed\012\000"
	.space	1
.LC22:
	.ascii	"<3>%s: %s: error dequeuing transfer, %d\012\000"
	.space	3
.LC23:
	.ascii	"<3>%s: %s(): cdev or config is NULL.\012\000"
	.space	2
.LC24:
	.ascii	"<6>%s: RNDIS %s response error %d, %d/%d\012\000"
	.space	2
.LC25:
	.ascii	"<6>%s: notify/0 --> %d\012\000"
.LC26:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf\000"
.LC27:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf buffer\000"
	.space	1
.LC28:
	.ascii	"<3>%s: Unknown command\000"
	.space	1
.LC29:
	.ascii	"<3>%s: Unknown control request %02x.%02x v%04x i%04"
	.ascii	"x l%d\012\000"
	.space	2
.LC30:
	.ascii	"<3>%s: audio response failed on err %d\012\000"
.LC31:
	.ascii	"<3>%s: STALL\012\000"
	.space	2
.LC32:
	.ascii	"<6>conn_gadget_release\012\000"
.LC33:
	.ascii	"<6>list_for_each...\012\000"
	.space	3
.LC34:
	.ascii	"<3>usb:%s * Host asked current MaxDatagramSize, sen"
	.ascii	"ding %d *\012\000"
	.space	2
.LC35:
	.ascii	"ncm req %02x.%02x response err %d\012\000"
	.space	1
.LC36:
	.ascii	"<3>usb:%s * Bad control-OUT transfer *\012\000"
.LC37:
	.ascii	"<3>usb:%s * Got wrong MTU SIZE (%d) from host *\012"
	.ascii	"\000"
	.space	3
.LC38:
	.ascii	"<3>usb:%s * MTU SIZE is larger than NTB SIZE (%d) f"
	.ascii	"rom host * \012\000"
.LC39:
	.ascii	"<3>************************************************"
	.ascii	"*\012\000"
	.space	2
.LC40:
	.ascii	"<3>usb:%s * Set MTU SIZE %d *\012\000"
	.space	1
.LC41:
	.ascii	"<3>%s: %s is enabled in other device\012\000"
	.space	2
.LC42:
	.ascii	"<3>%s: Failed to alloc f_holder\012\000"
	.space	3
.LC43:
	.ascii	"<3>acc_complete_set_string, err %d\012\000"
.LC44:
	.ascii	"<3>unknown accessory string index %d\012\000"
	.space	2
.LC45:
	.ascii	"<6>acc_release\012\000"
.LC46:
	.ascii	"/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget"
	.ascii	"/f_accessory.c\000"
	.space	2
.LC47:
	.ascii	"<6>acc_open\012\000"
	.space	3
.LC48:
	.ascii	"<7>usb: %s buf=%s[%d], %s\012\000"
	.space	1
.LC49:
	.ascii	"<6>%s: Close rndis QC file\000"
	.space	1
.LC50:
	.ascii	"<3>%s: rndis_qc_dev not present\012\000"
	.space	3
.LC51:
	.ascii	"<6>%s: Open rndis QC driver\012\000"
	.space	3
.LC52:
	.ascii	"<3>%s: rndis_qc_dev not created yet\012\000"
	.space	3
.LC53:
	.ascii	"<6>%s: rndis QC file opened\012\000"
	.space	3
.LC54:
	.ascii	"<3>%s: Already opened\012\000"
	.space	1
.LC55:
	.ascii	"<6>mtp_release\012\000"
.LC56:
	.ascii	"<6>mtp_open\012\000"
	.space	3
.LC57:
	.ascii	"<3>CCID notify ep error %d\012\000"
.LC58:
	.ascii	"<3>ctrl resp queue empty  req%02x.%02x v%04x i%04x "
	.ascii	"l%d\012\000"
.LC59:
	.ascii	"rmnet ep0 enqueue err %d\012\000"
	.space	2
.LC60:
	.ascii	"<3>rmnet notify ep error %d\012\000"
	.space	3
.LC61:
	.ascii	"<3>%s: Invalid notify_count=%lu to decrement\012\000"
	.space	2
.LC62:
	.ascii	"<3>%s: response queue error: %d\000"
.LC63:
	.ascii	"<6>%s: Close mbim file\000"
	.space	1
.LC64:
	.ascii	"<6>%s: Open mbim driver\012\000"
	.space	3
.LC65:
	.ascii	"<3>%s: mbim_dev not created yet\012\000"
	.space	3
.LC66:
	.ascii	"<6>%s: Lock mbim_dev->open_excl for open\012\000"
	.space	2
.LC67:
	.ascii	"<3>%s: USB cable not connected\012\000"
.LC68:
	.ascii	"<6>%s: Exit, mbim file opened\012\000"
	.space	1
.LC69:
	.ascii	"<3>%s: usb disconnected\012\000"
	.space	3
.LC70:
	.ascii	"<3>%s: port:%pK port#%d sdio read failed err:%d\000"
.LC71:
	.ascii	"<3>%s: port:%pK port#%d unable to open sdio ch:%s\012"
	.ascii	"\000"
	.space	1
.LC72:
	.ascii	"%d\012\000"
.LC73:
	.ascii	"CONFIGURED\000"
	.space	1
.LC74:
	.ascii	"DISCONNECTED\000"
	.space	3
.LC75:
	.ascii	"CONNECTED\000"
	.space	2
.LC76:
	.ascii	"<7>usb: %s buf=%s\012\000"
	.space	1
.LC77:
	.ascii	"%s\012\000"
.LC78:
	.ascii	"<7>usb: %s dev->enabled=%d\012\000"
.LC79:
	.ascii	"%s\000"
	.space	1
.LC80:
	.ascii	"%04x\012\000"
	.space	2
.LC81:
	.ascii	"%d %d\012\000"
	.space	1
.LC82:
	.ascii	"%02x:%02x:%02x:%02x:%02x:%02x\012\000"
	.space	1
.LC83:
	.ascii	"common->fsg is NULL in %s at %u\012\000"
	.space	3
.LC84:
	.ascii	"/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget"
	.ascii	"/f_mass_storage.c\000"
	.space	3
.LC85:
	.ascii	"error in submission: %s --> %d\012\000"
.LC86:
	.ascii	"failed to override string ID\012\000"
	.space	2
.LC87:
	.ascii	"rmnet %s response error %d, %d/%d\012\000"
	.space	1
.LC88:
	.ascii	"rmnet_mux %s response error %d, %d/%d\012\000"
	.space	1
.LC89:
	.ascii	"%01x\012\000"
	.space	2
.LC90:
	.ascii	"%u\012\000"
.LC91:
	.ascii	"%s\015\012\000"
	.space	3
.LC92:
	.ascii	"<7>usb: %s version %s\012\000"
	.space	1
.LC93:
	.ascii	"<7>usb: %s\012\000"
.LC94:
	.ascii	"delayed status mismatch..resetting\012\000"
.LC95:
	.ascii	"/home/pascua14/Desktop/s5-kernel/include/linux/netd"
	.ascii	"evice.h\000"
	.space	1
.LC96:
	.ascii	"<6>netif_stop_queue() cannot be called before regis"
	.ascii	"ter_netdev()\012\000"
	.space	3
.LC97:
	.ascii	"<3>%s: write error:%d\012\000"
	.space	1
.LC98:
	.ascii	"<4>%s: port:%pK port#%d unexpected %s status %d\012"
	.ascii	"\000"
	.space	3
.LC99:
	.ascii	"<3>%s: invalid portno#%d\012\000"
	.space	2
.LC100:
	.ascii	"<3>%s: gser is null\012\000"
	.space	3
.LC101:
	.ascii	"<3>%s: port:%pK port#%d sdio not connected\012\000"
.LC102:
	.ascii	"<3>acc_complete_set_hid_report_desc, err %d\012\000"
	.space	3
.LC103:
	.ascii	"qmi resp empty  req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC104:
	.ascii	"<3>%s: invalid port: %d\012\000"
	.space	3
.LC105:
	.ascii	"<6>%s: mbim suspended\012\000"
	.space	1
.LC106:
	.ascii	"<6>%s: mbim resumed\012\000"
	.space	3
.LC107:
	.ascii	"smd_control_ch_opened: %lu\012smd_data_ch_opened: %"
	.ascii	"lu\012usb online : %d\012dpkts_from_modem: %lu\012d"
	.ascii	"pkts_to_host: %lu\012pending_dpkts_to_host: %lu\012"
	.ascii	"dpkts_from_host: %lu\012dpkts_to_modem: %lu\012pend"
	.ascii	"ing_dpkts_to_modem: %lu\012cpkts_from_modem: %lu\012"
	.ascii	"cpkts_to_host: %lu\012pending_cpkts_to_host: %lu\012"
	.ascii	"cpkts_from_host: %lu\012cpkts_to_modem: %lu\012pend"
	.ascii	"ing_cpkts_to_modem: %lu\012smd_read_avail_ctrl: %d\012"
	.ascii	"smd_write_avail_ctrl: %d\012smd_read_avail_data: %d"
	.ascii	"\012smd_write_avail_data: %d\012\000"
.LC108:
	.ascii	"-*-DATA-*-\012dpkts_tohost:%lu epInPool:%u tx_size:"
	.ascii	"%u drp_cnt:%lu\012dpkts_tomodem:%lu epOutPool:%u rx"
	.ascii	"_size:%u pending:%u\012-*-QMI-*-\012cpkts_tomodem:%"
	.ascii	"lu  qmi_req_q:%u cbits:%d\012cpkts_tolaptop:%lu qmi"
	.ascii	"_resp_q:%u notify_cnt:%d\012-*-MISC-*-\012data_ch_s"
	.ascii	"tatus: %lu ctrl_ch_status: %lu\012\000"
	.space	2
.LC109:
	.ascii	"UNDEFINED\000"
	.space	2
.LC110:
	.ascii	"dpkts_tomsm:  %lu\012dpkts_tomdm: %lu\012cpkts_tomd"
	.ascii	"m: %lu\012dpkts_tolaptop: %lu\012cpkts_tolaptop:  %"
	.ascii	"lu\012cbits_to_modem: %lu\012tx skb size:     %u\012"
	.ascii	"rx_skb_size:     %u\012dpkts_pending_at_dmux: %u\012"
	.ascii	"tx drp cnt: %lu\012cpkts_drp_cnt: %lu\012cpkt_tx_ql"
	.ascii	"en: %lu\012cpkt_rx_qlen_to_modem: %lu\012xport: %s\012"
	.ascii	"ctr_ch_opened:\011%d\012\000"
.LC111:
	.ascii	"<3>usb: tty or gser is NULL !!\012\000"
.LC112:
	.ascii	"nbytes_from_host: %lu\012\000"
	.space	1
.LC113:
	.ascii	"nbytes_to_tty: %lu\012\000"
.LC114:
	.ascii	"nbytes_with_usb_OUT_txr: %lu\012\000"
	.space	2
.LC115:
	.ascii	"nbytes_from_tty: %lu\012\000"
	.space	2
.LC116:
	.ascii	"nbytes_to_host: %lu\012\000"
	.space	3
.LC117:
	.ascii	"nbytes_with_usb_IN_txr: %lu\012\000"
	.space	3
.LC118:
	.ascii	"tty_flags: %lu\012\000"
.LC119:
	.ascii	"DTR_status: %d\012\000"
.LC120:
	.ascii	"###PORT:%d port:%pK###\012nbytes_tolaptop: %lu\012n"
	.ascii	"bytes_tomodem:  %lu\012cbits_to_modem:  %u\012cbits"
	.ascii	"_to_laptop: %u\012read_pool_len:   %lu\012read_queu"
	.ascii	"e_len:  %lu\012write_pool_len:  %lu\012n_read:     "
	.ascii	"     %u\012sdio_open:       %d\012sdio_probe:      "
	.ascii	"%d\012\000"
	.space	3
.LC121:
	.ascii	"###PORT:%d###\012nbytes_tolaptop: %lu\012nbytes_tom"
	.ascii	"odem:  %lu\012cbits_to_modem:  %u\012cbits_to_lapto"
	.ascii	"p: %u\012n_read: %u\012smd_read_avail: %d\012smd_wr"
	.ascii	"ite_avail: %d\012CH_OPENED: %d\012CH_READY: %d\012\000"
	.space	2
.LC122:
	.ascii	"#PORT:%d port:%pK data_ch:%pK#\012dpkts_to_usbhost:"
	.ascii	" %lu\012dpkts_to_modem:  %lu\012dpkts_pwith_bam: %u"
	.ascii	"\012to_usbhost_dcnt:  %u\012tomodem__dcnt:  %u\012r"
	.ascii	"x_flow_control_disable_count: %u\012rx_flow_control"
	.ascii	"_enable_count: %u\012rx_flow_control_triggered: %u\012"
	.ascii	"max_num_pkts_pending_with_bam: %u\012tx_buf_len:\011"
	.ascii	" %u\012rx_buf_len:\011 %u\012data_ch_open:   %d\012"
	.ascii	"data_ch_ready:  %d\012\000"
.LC123:
	.ascii	"HIGH\000"
	.space	3
.LC124:
	.ascii	"LOW\000"
.LC125:
	.ascii	"#PORT:%d port:%pK ctrl_ch:%pK#\012to_usbhost: %lu\012"
	.ascii	"to_modem:   %lu\012DTR:        %s\012ch_open:    %d"
	.ascii	"\012ch_ready:   %d\012read_avail: %d\012write_avail"
	.ascii	":%d\012\000"
	.space	1
.LC126:
	.ascii	"\012Name:        %s\012#PORT:%d port: %pK\012to_usb"
	.ascii	"host:    %lu\012to_modem:      %lu\012cpkt_drp_cnt:"
	.ascii	"  %lu\012DTR:           %s\012ch_open:       %d\012"
	.ascii	"ch_ready:      %d\012\000"
.LC127:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012\012"
	.ascii	"******UL INFO*****\012\012dpkts_to_modem:   %lu\012"
	.ascii	"tomodem_drp_cnt:  %u\012rx_buf_len:       %u\012tx "
	.ascii	"thld cnt       %u\012tx unthld cnt     %u\012TX_THR"
	.ascii	"OTTLED      %d\012\000"
.LC128:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012rx thld cnt\011   %u\012"
	.ascii	"rx unthld cnt\011   %u\012uthld pnd skbs    %u\012R"
	.ascii	"X_THROTTLED\011   %d\012\000"
	.space	3
.LC129:
	.ascii	"#PORT:%d port: %pK\012to_usbhost:    %lu\012to_mode"
	.ascii	"m:      %lu\012cpkt_drp_cnt:  %lu\012DTR:          "
	.ascii	" %s\012\000"
	.space	1
.LC130:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012d"
	.ascii	"ata_ch_connected: %d\012\012******UL INFO*****\012\012"
	.ascii	"dpkts_to_modem:   %lu\012tomodem_drp_cnt:  %u\012rx"
	.ascii	"_buf_len:       %u\012TX_THROTTLED      %d\012\000"
.LC131:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012RX_THROTTLED\011   %d\012"
	.ascii	"\000"
	.space	2
.LC132:
	.ascii	"---Name: %s---\012endpoints: %s, %s\012dpkts_tolapt"
	.ascii	"op: %lu\012dpkts_tomodem:  %lu\012pkts_tolaptop_pen"
	.ascii	"ding: %u\012\000"
.LC133:
	.ascii	"rmnet command error %d\012\000"
.LC134:
	.ascii	"rmnet control smd write failed\012\000"
.LC135:
	.ascii	"rmnet QMI pool is empty\012\000"
	.space	3
.LC136:
	.ascii	"RMNET %s response error %d, %d/%d\012\000"
	.space	1
.LC137:
	.ascii	"rmnet data smd write failed\012\000"
	.space	3
.LC138:
	.ascii	"rmnet SMD data write failed\012\000"
	.space	3
.LC139:
	.ascii	"<4>%s: port:%pK port#%d Unexpected Rx Status:%d\012"
	.ascii	"\000"
	.space	3
.LC140:
	.ascii	"<3>%s: smd write failed err:%d\012\000"
.LC141:
	.ascii	"<3>%s: smd_write failed err:%d\012\000"
.LC142:
	.ascii	"rmnet_mux SMD data write failed\012\000"
	.space	3
.LC143:
	.ascii	"RMNET_MUX %s response error %d, %d/%d\012\000"
	.space	1
.LC144:
	.ascii	"rmnet_mux data smd write failed\012\000"
	.space	3
.LC145:
	.ascii	"rmnet data tx ep error %d\012\000"
	.space	1
.LC146:
	.ascii	"rmnet_mux data tx ep error %d\012\000"
	.space	1
.LC147:
	.ascii	"rmnet tx data enqueue err %d\012\000"
	.space	2
.LC148:
	.ascii	"rmnet QMI Tx buffers full\012\000"
	.space	1
.LC149:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d err"
	.ascii	":%d\012\000"
.LC150:
	.ascii	"Unable to open control smd channel: %d\012\000"
.LC151:
	.ascii	"pdrv %s register failed %d\012\000"
.LC152:
	.ascii	"Unable to open data smd channel\012\000"
	.space	3
.LC153:
	.ascii	"<3>%s:smd read_avail failure:%d or channel closed c"
	.ascii	"h=%pK\000"
	.space	3
.LC154:
	.ascii	"<3>%s: SMD sending incorrect pkt\012\000"
	.space	2
.LC155:
	.ascii	"<3>%s: smd read failure %d\012\000"
.LC156:
	.ascii	"<3>conn_gadget_function_disable cdev %pK\012\000"
	.space	2
.LC157:
	.ascii	"%s: response queue error\012\000"
	.space	2
.LC158:
	.ascii	"<3>ccid ep0 enqueue err %d\012\000"
.LC159:
	.ascii	"rmnet_mux command error %d\012\000"
.LC160:
	.ascii	"unable to allocate memory for ctrl req\012\000"
.LC161:
	.ascii	"<3>%s: ctrl pkts dropped: cpkts_drp_cnt: %lu\012\000"
	.space	2
.LC162:
	.ascii	"acm response on ttyGS%d, err %d\012\000"
	.space	3
.LC163:
	.ascii	"usb_rmnet_ctrl_smd\000"
	.space	1
.LC164:
	.ascii	"status\000"
	.space	1
.LC165:
	.ascii	"ghsic_ctrl_xport\000"
	.space	3
.LC166:
	.ascii	"ghsic_data_xport\000"
	.space	3
.LC167:
	.ascii	"timestamp\000"
	.space	2
.LC168:
	.ascii	"ghsuart_ctrl_xport\000"
	.space	1
.LC169:
	.ascii	"ghsuart_data_xport\000"
	.space	1
.LC170:
	.ascii	"usb_diag\000"
	.space	3
.LC171:
	.ascii	"<6>%s: sdio data ch not open\012\000"
	.space	2
.LC172:
	.ascii	"rmnet SDIO data write failed\012\000"
	.space	2
.LC173:
	.ascii	"<3>%s: usb epIn failed with %d\012\000"
.LC174:
	.ascii	"<3>%s: data tx ep error %d\012\000"
.LC175:
	.ascii	"rmnet_mux SDIO data write failed\012\000"
	.space	2
.LC176:
	.ascii	"rmnet_mux data rx enqueue err %d\012\000"
	.space	2
.LC177:
	.ascii	"<3>%s: unable to open smd port:%s err:%d\012\000"
	.space	2
.LC178:
	.ascii	"Unable to open SDIO DATA channel\012\000"
	.space	2
.LC179:
	.ascii	"<3>%s: rx queue failed %d\012\000"
	.space	1
.LC180:
	.ascii	"<3>%s: %s response error %d, %d/%d\012\000"
.LC181:
	.ascii	"<3>%s: data rx enqueue err %d\012\000"
	.space	1
.LC182:
	.ascii	"<3>copying to user space failed\000"
.LC183:
	.ascii	"<3>wrong parameter\000"
	.space	1
.LC184:
	.ascii	"<6>%s: Received command %d\012\000"
.LC185:
	.ascii	"<3>%s: copying to user space failed\000"
.LC186:
	.ascii	"<6>%s: Sent max packets per xfer %d\000"
.LC187:
	.ascii	"<3>%s: Unsupported IOCTL\000"
	.space	3
.LC188:
	.ascii	"<6>%s: Sent NTB size %d\000"
.LC189:
	.ascii	"<6>%s: Sent NTB datagrams count %d\000"
	.space	1
.LC190:
	.ascii	"<3>%s: wrong parameter\000"
	.space	1
.LC191:
	.ascii	"<3>%s: cpkt size:%d > buf size:%d\012\000"
	.space	1
.LC192:
	.ascii	"<3>Buffer size is too big %d, should be at most %d\012"
	.ascii	"\000"
.LC193:
	.ascii	"<3>Previous reading is not finished yet\012\000"
	.space	3
.LC194:
	.ascii	"<3>cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC195:
	.ascii	"<3>copy_to_user failed: err %d\012\000"
.LC196:
	.ascii	"<3>Previous writing not finished yet\012\000"
	.space	2
.LC197:
	.ascii	"<3>failed to allocate ctrl pkt\012\000"
.LC198:
	.ascii	"<3>copy_from_user failed err:%d\012\000"
	.space	3
.LC199:
	.ascii	"<3>failed to send ctrl packet. error=%d\012\000"
	.space	3
.LC200:
	.ascii	"<3>send_cpkt_response callback is NULL\012\000"
.LC201:
	.ascii	"<3>ccid notify ep enqueue error %d\012\000"
.LC202:
	.ascii	"g_ether\000"
.LC203:
	.ascii	"29-May-2008\000"
.LC204:
	.ascii	"g_qc_ether\000"
	.space	1
.LC205:
	.ascii	"<3>usb_ep_queue failed ret: %d\012\000"
.LC206:
	.ascii	"%s,\000"
.LC207:
	.ascii	"<4>ttyGS%d: unexpected RX status %d\012\000"
	.space	3
.LC208:
	.ascii	"<4>ttyGS%d: RX not scheduled?\012\000"
	.space	1
.LC209:
	.ascii	"<6>%s: name:%s is not found\012\000"
	.space	3
.LC210:
	.ascii	"bam_dmux_ch_8\000"
	.space	2
.LC211:
	.ascii	"<3>%s: unable open bam ch:%d err:%d\012\000"
	.space	3
.LC212:
	.ascii	"<3>%s: rx req allocation failed\012\000"
	.space	3
.LC213:
	.ascii	"<3>%s: tx req allocation failed\012\000"
	.space	3
.LC214:
	.ascii	"<3>%s: usb_bam_connect (src) failed: err:%d\012\000"
	.space	3
.LC215:
	.ascii	"<3>%s: usb_bam_connect (dst) failed: err:%d\012\000"
	.space	3
.LC216:
	.ascii	"<3>%s:teth_bridge_init() failed\012\000"
	.space	3
.LC217:
	.ascii	"<3>%s: out of memory\012\000"
	.space	2
.LC218:
	.ascii	"<3>%s: error enqueuing transfer, %d\012\000"
	.space	3
.LC219:
	.ascii	"<3>%s: usb_bam_client_ready failed: err:%d\012\000"
.LC220:
	.ascii	"<3>%s: %s:teth_bridge_init() failed\012\000"
	.space	3
.LC221:
	.ascii	"<3>%s: %s: usb_bam_connect_ipa failed: err:%d\012\000"
	.space	1
.LC222:
	.ascii	"<3>%s: %s:teth_bridge_connect() failed\012\000"
.LC223:
	.ascii	"<3>%s: port_usb is NULL\000"
.LC224:
	.ascii	"<3>%s: port_usb->out (bulk out ep) is NULL\000"
	.space	1
.LC225:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed: err:%d\012\000"
.LC226:
	.ascii	"<3>%s: %s: BAM reset failed %d\012\000"
.LC227:
	.ascii	"<3>Failed to allocate rmnet control device\012\000"
.LC228:
	.ascii	"&port->read_wq\000"
	.space	1
.LC229:
	.ascii	"<3>rmnet control driver failed to register\000"
	.space	1
.LC230:
	.ascii	"&dev->read_wq\000"
	.space	2
.LC231:
	.ascii	"&dev->write_wq\000"
	.space	1
.LC232:
	.ascii	"<3>USB accessory gadget driver failed to initialize"
	.ascii	"\012\000"
	.space	3
.LC233:
	.ascii	"<6>%s: initialize rndis QC instance\012\000"
	.space	3
.LC234:
	.ascii	"<3>%s: rndis QC driver failed to register\000"
	.space	2
.LC235:
	.ascii	"&dev->intr_wq\000"
	.space	2
.LC236:
	.ascii	"f_mtp\000"
	.space	2
.LC237:
	.ascii	"<3>mtp gadget driver failed to initialize\012\000"
	.space	1
.LC238:
	.ascii	"<3>adb gadget driver failed to initialize\012\000"
	.space	1
.LC239:
	.ascii	"k_rmnet_mux_work\000"
	.space	3
.LC240:
	.ascii	"&smd_dev->smd_data.wait\000"
.LC241:
	.ascii	"&ctrl_dev->tx_wait_q\000"
	.space	3
.LC242:
	.ascii	"usb_rmnet_mux\000"
	.space	2
.LC243:
	.ascii	"<3>%s: failed to register misc device\012\000"
	.space	1
.LC244:
	.ascii	"<6>%s: rndis QC cleanup\000"
.LC245:
	.ascii	"<6>%s: Enter\000"
	.space	3
.LC246:
	.ascii	"gmidi_transmit: midi_alloc_ep_request failed\012\000"
	.space	2
.LC247:
	.ascii	"snd_card_create() failed\012\000"
	.space	2
.LC248:
	.ascii	"snd_device_new() failed: error %d\012\000"
	.space	1
.LC251:
	.ascii	"MIDI\000"
	.space	3
.LC252:
	.ascii	"snd_rawmidi_new() failed: error %d\012\000"
.LC253:
	.ascii	"snd_card_register() failed\012\000"
.LC249:
	.ascii	"MIDI Gadget\000"
.LC250:
	.ascii	"f_midi\000"
	.space	1
.LC254:
	.ascii	"<3>usb:%s tx queue err %d\012\000"
	.space	1
.LC255:
	.ascii	"<3>invalid rndis pkt: skblen:%u hdr_len:%u\000"
	.space	1
.LC256:
	.ascii	"<3>invalid rndis message: %d/%d/%d/%d, len:%d\012\000"
	.space	1
.LC257:
	.ascii	"<3>%s:skb clone failed\012\000"
.LC258:
	.ascii	"y\000"
	.space	2
.LC259:
	.ascii	"n\000"
	.space	2
.LC260:
	.ascii	"?\000"
	.space	2
.LC261:
	.ascii	"disconnected\000"
	.space	3
.LC262:
	.ascii	"connected\000"
	.space	2
.LC263:
	.ascii	"Config Nr. %d\012used      : %s\012state     : %s\012"
	.ascii	"medium    : 0x%08X\012speed     : %d\012cable     :"
	.ascii	" %s\012vendor ID : 0x%08X\012vendor    : %s\012ul-m"
	.ascii	"ax-xfer-size:%d max-xfer-size-rcvd: %d\012ul-max-pk"
	.ascii	"ts-per-xfer:%d max-pkts-per-xfer-rcvd:%d\012\000"
	.space	3
.LC264:
	.ascii	"unable to open backing file: %s\012\000"
	.space	3
.LC265:
	.ascii	"invalid file type: %s\012\000"
	.space	1
.LC266:
	.ascii	"file not readable: %s\012\000"
	.space	1
.LC267:
	.ascii	"unable to find file size: %s\012\000"
	.space	2
.LC268:
	.ascii	"file too big: %s\012\000"
	.space	2
.LC269:
	.ascii	"using only first %d blocks\012\000"
.LC270:
	.ascii	"file too small: %s\012\000"
.LC271:
	.ascii	"<3>%s(#) call conn_gadget_cleanup\012\000"
	.space	1
.LC272:
	.ascii	"<6>conn_gadget_cleanup\012\000"
.LC273:
	.ascii	"<3>%s() _conn_gadget_dev is not allocated\012\000"
	.space	1
.LC274:
	.ascii	"<3>%s(#) call conn_gadget_setup\012\000"
	.space	3
.LC275:
	.ascii	"<6>conn_gadget_setup\012\000"
	.space	2
.LC276:
	.ascii	"<3>alloc conn_gadget_dev F\012\000"
.LC277:
	.ascii	"&dev->ioctl_wq\000"
	.space	1
.LC278:
	.ascii	"<3>%s: error rd_queue vmalloc\012\000"
	.space	1
.LC279:
	.ascii	"<3>%s: misc_register f %d\012\000"
	.space	1
.LC280:
	.ascii	"<3>%s() conn_gadget gadget driver failed to initial"
	.ascii	"ize\012\000"
.LC281:
	.ascii	"<3>%s() _conn_gadget_dev is NULL\012\000"
	.space	2
.LC282:
	.ascii	"<3>%s() _conn_gaddget_dev onlined\012\000"
	.space	1
.LC283:
	.ascii	"%d\000"
	.space	1
.LC284:
	.ascii	"<3>%s() rd_queue_buf vmalloc f\012\000"
.LC285:
	.ascii	"<7>%s: product %s\000"
	.space	2
.LC286:
	.ascii	"<7>%s: vendor %s\000"
	.space	3
.LC287:
	.ascii	"%28s\000"
	.space	3
.LC288:
	.ascii	"%04x\000"
	.space	3
.LC289:
	.ascii	"%255s\000"
	.space	2
.LC290:
	.ascii	"Wrong NTH SIGN, skblen %d\012\000"
	.space	1
.LC291:
	.ascii	"HEAD:\000"
	.space	2
.LC292:
	.ascii	"<6>\000"
.LC293:
	.ascii	"Wrong NTB headersize\012\000"
	.space	2
.LC294:
	.ascii	"OUT size exceeded\012\000"
	.space	1
.LC295:
	.ascii	"Bad index: %x\012\000"
	.space	1
.LC296:
	.ascii	"Wrong NDP SIGN\012\000"
.LC297:
	.ascii	"Bad NDP length: %x\012\000"
.LC298:
	.ascii	"Bad dgram length: %x\012\000"
	.space	2
.LC299:
	.ascii	"Bad CRC\012\000"
	.space	3
.LC300:
	.ascii	"<3>usb: force short packet %d  \012\000"
	.space	3
.LC301:
	.ascii	"<3>Dropped skb \012\000"
	.space	3
.LC302:
	.ascii	"<3>usb:%s final Expanding the buffer %d \012\000"
	.space	2
.LC303:
	.ascii	"<3>usb: %s superspeed available \012\000"
	.space	2
.LC304:
	.ascii	"<3>usb: %s ss_host_available(%d), windowsos(%d)\012"
	.ascii	"\000"
	.space	3
.LC305:
	.ascii	"<3>usb: %s gadget not available \012\000"
	.space	2
.LC306:
	.ascii	"<3>usb: %s MAC host is always disabled \012\000"
	.space	3
.LC307:
	.ascii	"<6>usb: %s ignore!! usb30en(%d), value(%d)\012\000"
.LC308:
	.ascii	"<7>usb: %s B4 disconectng gadget\012\000"
	.space	2
.LC309:
	.ascii	"<7>usb: %s after usb_gadget_connect\012\000"
	.space	3
.LC310:
	.ascii	"<3>usb: %s Failed to set the usb30_en value\012\000"
	.space	3
.LC311:
	.ascii	":\000"
	.space	2
.LC312:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android con"
	.ascii	"f\012\000"
	.space	2
.LC313:
	.ascii	",\000"
	.space	2
.LC314:
	.ascii	"ffs\000"
.LC315:
	.ascii	"<3>%s: android_usb: Cannot enable ffs (%d)\000"
	.space	1
.LC316:
	.ascii	"<3>%s: android_usb: Cannot enable '%s' (%d)\000"
.LC317:
	.ascii	"<7>usb: %s disconnect\012\000"
	.space	1
.LC318:
	.ascii	"f_%s\000"
	.space	3
.LC319:
	.ascii	"<3>%s: %s: Failed to create dev %s\000"
	.space	1
.LC320:
	.ascii	"<3>%s: %s: Failed to init %s\000"
	.space	3
.LC321:
	.ascii	"<3>%s: %s: Failed to create function %s attributes\000"
	.space	1
.LC322:
	.ascii	"Android\000"
.LC323:
	.ascii	"0123456789ABCDEF\000"
	.space	3
.LC324:
	.ascii	"net2280\000"
.LC325:
	.ascii	"dummy_udc\000"
	.space	2
.LC326:
	.ascii	"pxa25x_udc\000"
	.space	1
.LC327:
	.ascii	"goku_udc\000"
	.space	3
.LC328:
	.ascii	"omap_udc\000"
	.space	3
.LC329:
	.ascii	"pxa27x_udc\000"
	.space	1
.LC330:
	.ascii	"s3c2410_udc\000"
.LC331:
	.ascii	"at91_udc\000"
	.space	3
.LC332:
	.ascii	"imx_udc\000"
.LC333:
	.ascii	"musb-hdrc\000"
	.space	2
.LC334:
	.ascii	"atmel_usba_udc\000"
	.space	1
.LC335:
	.ascii	"fsl-usb2-udc\000"
	.space	3
.LC336:
	.ascii	"amd5536udc\000"
	.space	1
.LC337:
	.ascii	"m66592_udc\000"
	.space	1
.LC338:
	.ascii	"fsl_qe_udc\000"
	.space	1
.LC339:
	.ascii	"ci13xxx_pci\000"
.LC340:
	.ascii	"langwell_udc\000"
	.space	3
.LC341:
	.ascii	"r8a66597_udc\000"
	.space	3
.LC342:
	.ascii	"s3c-hsotg\000"
	.space	2
.LC343:
	.ascii	"pch_udc\000"
.LC344:
	.ascii	"ci13xxx_msm\000"
.LC345:
	.ascii	"renesas_usbhs_udc\000"
	.space	2
.LC346:
	.ascii	"s3c-hsudc\000"
	.space	2
.LC347:
	.ascii	"net2272\000"
.LC348:
	.ascii	"dwc3-gadget\000"
.LC349:
	.ascii	"msm72k_udc\000"
	.space	1
.LC350:
	.ascii	"ci13xxx_msm_hsic\000"
	.space	3
.LC351:
	.ascii	"<4>%s: %s: controller '%s' not recognized\012\000"
	.space	1
.LC352:
	.ascii	"ACCESSORY=START\000"
.LC353:
	.ascii	"NCM_DEVICE=START\000"
	.space	3
.LC354:
	.ascii	"NCM_DEVICE=RELEASE\000"
	.space	1
.LC355:
	.ascii	"<7>usb: %s ncm_connect=%d\012\000"
	.space	1
.LC356:
	.ascii	"USB_STATE=DISCONNECTED\000"
	.space	1
.LC357:
	.ascii	"USB_STATE=CONNECTED\000"
.LC358:
	.ascii	"USB_STATE=CONFIGURED\000"
	.space	3
.LC359:
	.ascii	"USB_STATE=SUSPENDED\000"
.LC360:
	.ascii	"USB_STATE=RESUMED\000"
	.space	2
.LC361:
	.ascii	"low\000"
.LC362:
	.ascii	"<6>%s: %s: did not send uevent (%d %d %pK)\012\000"
.LC363:
	.ascii	"<6>%s: %s: sent missed DISCONNECT event\012\000"
	.space	3
.LC364:
	.ascii	"<6>%s: %s: sent uevent %s\012\000"
	.space	1
.LC365:
	.ascii	"<3>acc_complete_send_hid_event, err %d\012\000"
.LC366:
	.ascii	"<3>can't add hid device: %d\012\000"
	.space	3
.LC367:
	.ascii	"<3>can't add HID device %pK\012\000"
	.space	3
.LC368:
	.ascii	"<6>%s (%s)\012\000"
.LC369:
	.ascii	"SWITCH_NAME=USB_MESSAGE\000"
.LC370:
	.ascii	"SWITCH_STATE=%s\000"
.LC371:
	.ascii	"usb_msg\000"
.LC372:
	.ascii	"<6>unloading\012\000"
	.space	2
.LC373:
	.ascii	"<6>file system registered\012\000"
	.space	1
.LC374:
	.ascii	"<3>failed registering file system (%d)\012\000"
.LC375:
	.ascii	"<3>%s: Failed to enable capture ep\000"
	.space	1
.LC376:
	.ascii	"<3>%s: request allocation failed\012\000"
	.space	2
.LC377:
	.ascii	"<3>%s: request buffer allocation failed\012\000"
	.space	3
.LC378:
	.ascii	"<3>%s: Failed to queue %s req: err %d\012\000"
	.space	1
.LC379:
	.ascii	"<3>%s: Failed to enable playback ep\000"
.LC380:
	.ascii	"<3>%s: Failed to queue %s queue req: err %d\012\000"
	.space	3
.LC381:
	.ascii	"<3>%s: Schedule playback_work\000"
	.space	2
.LC382:
	.ascii	"<3>%s: playback_buf is empty. Stop.\000"
.LC383:
	.ascii	"<3>%s: Interface %d. Do nothing. Return %d\012\000"
.LC384:
	.ascii	"<3>Physical address or size of buf is NULL\000"
	.space	1
.LC385:
	.ascii	"<3>%s on a NULL device\012\000"
.LC386:
	.ascii	"<3>%s: FAILED: d_port == NULL\000"
	.space	2
.LC387:
	.ascii	"<3>%s: FAILED: d_port->cdev == NULL\000"
.LC388:
	.ascii	"<3>%s: FAILED: d_port->cdev->gadget == NULL\000"
.LC389:
	.ascii	"<3>%s: Invalid grmnet:%pK\012\000"
	.space	1
.LC390:
	.ascii	"<3>%s: rmnet notify ep enqueue error %d\012\000"
	.space	3
.LC391:
	.ascii	"<3>%s: rmnet dev is null\012\000"
	.space	2
.LC392:
	.ascii	"major %x minor %x vendor %x\012\000"
	.space	3
.LC393:
	.ascii	"<7>usb: %s terminal_mode %s\012\000"
	.space	3
.LC394:
	.ascii	"<3>%s: ctrl bridge open failed :%d\012\000"
.LC395:
	.ascii	"uether\000"
	.space	1
.LC396:
	.ascii	"<3>%s: %s: Unable to create workqueue: uether\012\000"
	.space	1
.LC397:
	.ascii	"<3>%s: grmnet is null\012\000"
	.space	1
.LC398:
	.ascii	"<3>%s: %s(): Failed to register androidplatform dri"
	.ascii	"ver\012\000"
.LC399:
	.ascii	"<6>conn_gadget_flush\012\000"
	.space	2
.LC400:
	.ascii	"<3>%s() _conn_gadget_dev is invalid\012\000"
	.space	3
.LC401:
	.ascii	"<3>%s:Unable to close smux channel: %d\012\000"
.LC402:
	.ascii	"<3>%s: rx queue failed\012\000"
.LC403:
	.ascii	"<3>%s: usb epIn failed\012\000"
.LC404:
	.ascii	"<6>%s: setting notify count to zero\012\000"
	.space	3
.LC405:
	.ascii	"<3>%s: usb_bam_disconnect_ipa failed: err:%d\012\000"
	.space	2
.LC406:
	.ascii	"usb: %s - usb_ncm misc driver fail \012\000"
	.space	3
.LC407:
	.ascii	"<3>%s: unable open bridge ch:%d err:%d\012\000"
.LC408:
	.ascii	"<3>%s: smux close timedout\012\000"
.LC409:
	.ascii	"<3> %s smux_open failed\012\000"
	.space	3
.LC410:
	.ascii	"<3>%s: unable to open smux ch:%d err:%d\012\000"
	.space	3
.LC411:
	.ascii	"TTY\000"
.LC412:
	.ascii	"SDIO\000"
	.space	3
.LC413:
	.ascii	"SMD\000"
.LC414:
	.ascii	"QTI\000"
.LC415:
	.ascii	"BAM\000"
.LC416:
	.ascii	"BAM2BAM\000"
.LC417:
	.ascii	"BAM2BAM_IPA\000"
.LC418:
	.ascii	"HSIC\000"
	.space	3
.LC419:
	.ascii	"HSUART\000"
	.space	1
.LC420:
	.ascii	"<3>%s: port#%d sdio write failed err:%d\000"
.LC421:
	.ascii	"<3>%s: tx pkt dropped: tx_drop_cnt:%u\012\000"
	.space	1
.LC422:
	.ascii	"<3>%s: Un-supported transport: %s\012\000"
	.space	1
.LC423:
	.ascii	"<3>RNDIS header is NULL.\012\000"
	.space	2
.LC424:
	.ascii	"<3>%s: Failed to alloc port:%d\012\000"
.LC425:
	.ascii	"<3>%s: %s: %s failed\012\000"
	.space	2
.LC426:
	.ascii	"<3>%s: %s: Card is NULL\000"
.LC427:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_DROP failed: %d\012\000"
.LC428:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_HW_PARAMS failed: %d\012\000"
	.space	3
.LC429:
	.ascii	"<3>%s: Preparing playback failed: %d\012\000"
	.space	2
.LC430:
	.ascii	"<3>%s: Setting playback params failed: err %d\000"
	.space	2
.LC431:
	.ascii	"<3>%s: Failed to allocate hw params\000"
.LC432:
	.ascii	"<3>%s: Preparing capture failed: %d\012\000"
	.space	3
.LC433:
	.ascii	"<3>%s: Failed to allocate sw params\000"
.LC434:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_SW_PARAMS failed: %d\012\000"
	.space	3
.LC435:
	.ascii	"<3>%s: Setting capture params failed: err %d\000"
	.space	3
.LC436:
	.ascii	"<6>%s: Initialized capture params\000"
	.space	2
.LC437:
	.ascii	"<6>%s: initialize %d instances\012\000"
.LC438:
	.ascii	"<3>%s: Failed to allocate mbim dev\012\000"
.LC439:
	.ascii	"<3>%s: mbim driver failed to register\000"
	.space	2
.LC440:
	.ascii	"<6>%s: Initialized %d ports\012\000"
	.space	3
.LC441:
	.ascii	"<3>%s: Failed\000"
	.space	2
.LC442:
	.ascii	"<3>%s: invalid bam2bam portno#%d\012\000"
	.space	2
.LC443:
	.ascii	"<3>%s: data port is null\012\000"
	.space	2
.LC444:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed\012\000"
.LC445:
	.ascii	"<4>%s: query unknown OID 0x%08X\012\000"
	.space	3
.LC446:
	.ascii	"&bulk_dev->read_wq\000"
	.space	1
.LC447:
	.ascii	"&bulk_dev->write_wq\000"
.LC448:
	.ascii	"<3>%s: ccid_ctrl_device_init failed, err:%d\012\000"
	.space	3
.LC449:
	.ascii	"<3>%s: ccid_bulk_device_init failed, err:%d\012\000"
	.space	3
.LC450:
	.ascii	"<3>ccid gadget driver failed to initialize\012\000"
.LC451:
	.ascii	"acm ttyGS%d can't notify serial state, %d\012\000"
	.space	1
.LC452:
	.ascii	"<7>acm ttyGS%d serial state %04x\012\000"
	.space	2
.LC453:
	.ascii	"queue\000"
	.space	2
.LC454:
	.ascii	"<3>%s: %s err %d\012\000"
	.space	2
.LC455:
	.ascii	"<4>%s: unexpected %s status %d\012\000"
.LC456:
	.ascii	", H%c=%u\000"
	.space	3
.LC457:
	.ascii	"<3>'=' missing in %s\012\000"
	.space	2
.LC458:
	.ascii	"<3>%s: invalid value: %s\012\000"
	.space	2
.LC459:
	.ascii	"rmode\000"
	.space	2
.LC460:
	.ascii	"fmode\000"
	.space	2
.LC461:
	.ascii	"mode\000"
	.space	3
.LC462:
	.ascii	"uid\000"
.LC463:
	.ascii	"gid\000"
.LC464:
	.ascii	"<3>%s: invalid option\012\000"
	.space	1
.LC465:
	.ascii	"<3>%s: Unable to allocate ctrl pkt\012\000"
.LC466:
	.ascii	"unable to allocate memory for QMI req\012\000"
	.space	1
.LC467:
	.ascii	"/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget"
	.ascii	"/android.c\000"
	.space	2
.LC468:
	.ascii	"<3>%s: %s: usb_add_config failed : err: %d\012\000"
.LC469:
	.ascii	"<6>adb_open\012\000"
	.space	3
.LC470:
	.ascii	"<3>%s: kevent %d may have been dropped\012\000"
.LC471:
	.ascii	"/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget"
	.ascii	"/u_serial.c\000"
	.space	1
.LC472:
	.ascii	"<3>%s: playback_buf is empty\000"
	.space	3
.LC473:
	.ascii	"<3>%s: Buffer is empty, no data to play\000"
.LC474:
	.ascii	"<3>%s: Failed to init audio streams\000"
.LC475:
	.ascii	"<3>%s: copying failed\000"
	.space	2
.LC476:
	.ascii	"<3>%s: SND failure - runtime->frame_bits == 0\000"
	.space	2
.LC477:
	.ascii	"<3>%s: snd_pcm_lib_write failed with err %d\012\000"
	.space	3
.LC478:
	.ascii	"<3>%s: Failed to queue %s req: err - %d\012\000"
	.space	3
.LC479:
	.ascii	"<3>%s: Failed completion: status %d\000"
.LC480:
	.ascii	"can't allocate request for %s\012\000"
	.space	1
.LC481:
	.ascii	"<6>%s: ESHUTDOWN/ECONNRESET, connection gone\000"
	.space	3
.LC482:
	.ascii	"<3>%s: Unknown event %02x --> %d\012\000"
	.space	2
.LC483:
	.ascii	"<3>%s: Pending notifications in MBIM_NOTIFY_NONE\012"
	.ascii	"\000"
	.space	2
.LC484:
	.ascii	"<3>%s: Queue notify request failed, err: %d\000"
.LC485:
	.ascii	"<3>%s: usb_ep_queue failed, err: %d\000"
.LC486:
	.ascii	"<3>%s() _conn_gadget_dev is offlined\012\000"
	.space	2
.LC487:
	.ascii	"/home/pascua14/Desktop/s5-kernel/drivers/usb/gadget"
	.ascii	"/composite.c\000"
.LC488:
	.ascii	"<7>usb: %s idVendor=0x%x, idProduct=0x%x\012\000"
	.space	2
.LC489:
	.ascii	"<7>usb: %s bcdDevice=0x%x\012\000"
	.space	1
.LC490:
	.ascii	"%s %s with %s\000"
	.space	2
.LC491:
	.ascii	"<7>usb: %s composite_manufacturer=%s\012\000"
	.space	2
.LC492:
	.ascii	"userspace failed to provide iSerialNumber\012\000"
	.space	1
.LC493:
	.ascii	"%s ready\012\000"
	.space	2
.LC494:
	.ascii	"write %u @ %llu beyond end %llu\012\000"
	.space	3
.LC495:
	.ascii	"<3>%s() req->status f %d\012\000"
	.space	2
.LC496:
	.ascii	"&ffs->mutex\000"
.LC497:
	.ascii	"&ffs->ev.waitq\000"
	.space	1
.LC498:
	.ascii	"&x->wait\000"
	.space	3
.LC499:
	.ascii	"ep0\000"
.LC500:
	.ascii	"<3>uninit_data\012\000"
.LC501:
	.ascii	"<3>msm_ep_unconfig failed\012\000"
	.space	1
.LC502:
	.ascii	"<3>%s: uninit_data error\012\000"
	.space	2
.LC503:
	.ascii	"<3>usb_bam_disconnection error\012\000"
.LC504:
	.ascii	"<3>qdss_disconnect error\000"
	.space	3
.LC505:
	.ascii	"g_serial\000"
	.space	3
.LC506:
	.ascii	"ttyGS\000"
	.space	2
.LC507:
	.ascii	"k_gserial\000"
	.space	2
.LC508:
	.ascii	"&ports[i].lock\000"
	.space	1
.LC509:
	.ascii	"&port->close_wait\000"
	.space	2
.LC510:
	.ascii	"&port->drain_wait\000"
	.space	2
.LC511:
	.ascii	"<3>%s: cannot register, err %d\012\000"
.LC512:
	.ascii	"<4>%s: no classdev for port %d, err %ld\012\000"
	.space	3
.LC513:
	.ascii	"usb_serial%d\000"
	.space	3
.LC514:
	.ascii	"readstatus\000"
	.space	1
.LC515:
	.ascii	"reset\000"
	.space	2
.LC516:
	.ascii	"<3>%s: Received NULL mbim pointer\012\000"
	.space	1
.LC517:
	.ascii	"<3>%s: Buffer size is too big %d, should be at most"
	.ascii	" %d\012\000"
.LC518:
	.ascii	"<3>%s: Previous reading is not finished yet\012\000"
	.space	3
.LC519:
	.ascii	"<3>%s: USB cable not connected. Wait.\012\000"
	.space	1
.LC520:
	.ascii	"<3>%s: cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC521:
	.ascii	"<3>%s: copy_to_user failed: err %d\012\000"
.LC522:
	.ascii	"<3>%s: Waiting failed\012\000"
	.space	1
.LC523:
	.ascii	"<6>DUN is unregisterd\012\000"
	.space	1
.LC524:
	.ascii	"<7>usb: GET_DES\012\000"
	.space	3
.LC525:
	.ascii	"<7>usb: %s failed to change configuration\012\000"
	.space	1
.LC526:
	.ascii	"%s config #%d: %s\012\000"
	.space	1
.LC527:
	.ascii	"battery\000"
.LC528:
	.ascii	"<3>%s(): No SS desc for function:%s\012\000"
	.space	3
.LC529:
	.ascii	"<3>%s: fail to get %s psy\012\000"
	.space	1
.LC530:
	.ascii	"<7>usb: SET_CON\012\000"
	.space	3
.LC531:
	.ascii	"<6>%s sec_qcom_usb_rdrv = %d, disable\012\000"
	.space	1
.LC532:
	.ascii	"<6>Redriver OFF in Mac OS\012\000"
	.space	1
.LC533:
	.ascii	"func_suspend() returned error %d\012\000"
	.space	2
.LC534:
	.ascii	"%s: Delayed status not supported for w_length != 0\000"
	.space	1
.LC535:
	.ascii	"unconfigured\000"
	.space	3
.LC536:
	.ascii	"<3>conn_gadget_function_unbind\012\000"
.LC537:
	.ascii	"rndis0\000"
	.space	1
.LC538:
	.ascii	"<3>%s() conn_gadget_lock(write_excl) f\012\000"
.LC539:
	.ascii	"<3>%s() conn_gadget_write dev->error\012\000"
	.space	2
.LC540:
	.ascii	"<3>%s: copy_from_user failed\012\000"
	.space	2
.LC541:
	.ascii	"<3>%s() xfer error %d\012\000"
	.space	1
.LC542:
	.ascii	"<3>%s: wait_event_interruptible(wrwq,reqget) failed"
	.ascii	" %d\012\000"
.LC543:
	.ascii	"driver/rndis-%03d\000"
	.space	2
.LC544:
	.ascii	"<3>%s() cmd is not proper ioctl type %c\012\000"
	.space	3
.LC545:
	.ascii	"<3>%s() cmd is not proper ioctl number %d\012\000"
	.space	1
.LC546:
	.ascii	"<3>%s() cmd has no buffer\012\000"
	.space	1
.LC547:
	.ascii	"<3>%s() cmd has invalid direction\012\000"
	.space	1
.LC548:
	.ascii	"<3>%s() SUPPORT_LIST copy_to_user f %d\012\000"
.LC549:
	.ascii	"<3>%s() close called\012\000"
	.space	2
.LC550:
	.ascii	"<3>%s() copy_to_user f %d\012\000"
	.space	1
.LC551:
	.ascii	"<3>%s() WAIT_NOTIFY copy_to_user f %d\012\000"
	.space	1
.LC552:
	.ascii	"<3>%s() GET_STATUS copy_to_user f %d\012\000"
	.space	2
.LC553:
	.ascii	"ncm\000"
.LC554:
	.ascii	"<3>usb: %s  drop incase of NCM rx length %d\012\000"
	.space	3
.LC555:
	.ascii	"<3>usb: %s  Dont drop incase of NCM rx length %d\012"
	.ascii	"\000"
	.space	2
.LC556:
	.ascii	"<3>usb: %s Drop rx length %d\012\000"
	.space	2
.LC557:
	.ascii	"<6>%s: usb cable is not connected\012\000"
	.space	1
.LC558:
	.ascii	"<3>%s: w_length > 0: %d\000"
.LC559:
	.ascii	"<3>%s: ctrl resp queue empty\012\000"
	.space	2
.LC560:
	.ascii	"<3>%s: wrong NTB length %d\000"
	.space	1
.LC561:
	.ascii	"<3>%s: invalid control req: %02x.%02x v%04x i%04x l"
	.ascii	"%d\012\000"
	.space	1
.LC562:
	.ascii	"<3>%s: queueing req failed: %02x.%02x, err %d\012\000"
	.space	1
.LC563:
	.ascii	"<3>%s: ctrl req err %d: %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	1
.LC564:
	.ascii	"%x\000"
	.space	1
.LC565:
	.ascii	"<7>usb: %s old status=%d, new status=%d\012\000"
	.space	3
.LC566:
	.ascii	"<3>%s: rmnet ctrl file handler %pK is not open\000"
	.space	1
.LC567:
	.ascii	"kill %s:  resubmit %d bytes --> %d\012\000"
.LC568:
	.ascii	"<3>%s: usb cable is not connected\012\000"
	.space	1
.LC569:
	.ascii	"<3>%s: given_xport:%s cur_xport:%s doing nothing\012"
	.ascii	"\000"
	.space	2
.LC570:
	.ascii	"<3>%s: undefined transport\012\000"
.LC571:
	.ascii	"ecm0\000"
	.space	3
.LC572:
	.ascii	"<3>%s: USB not connected\012\000"
	.space	2
.LC573:
	.ascii	"<6>%s: usb rmnet sdio channels are open retry_cnt:%"
	.ascii	"d\012\000"
	.space	2
.LC574:
	.ascii	"Unable to open control SDIO channel\012\000"
	.space	3
.LC575:
	.ascii	"Unable to open DATA SDIO channel\012\000"
	.space	2
.LC576:
	.ascii	"<1>DUN : DTR %d\012\000"
	.space	3
.LC577:
	.ascii	"<6>modem_ioctl: Unknown ioctl cmd(0x%x).\012\000"
	.space	2
.LC578:
	.ascii	"acm%u\000"
	.space	2
.LC579:
	.ascii	"<3>%s: Could not bind acm%u config\012\000"
.LC580:
	.ascii	"<3>%s: BAM reset failed %d\012\000"
.LC581:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%pK\000"
	.space	3
.LC582:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%pK\000"
	.space	2
.LC583:
	.ascii	"lun%d\000"
	.space	2
.LC584:
	.ascii	"Linux\000"
	.space	2
.LC585:
	.ascii	"File-Stor Gadget\000"
	.space	3
.LC586:
	.ascii	"File-CD Gadget\000"
	.space	1
.LC587:
	.ascii	"file-storage\000"
	.space	3
.LC588:
	.ascii	"(no medium)\000"
.LC589:
	.ascii	"(error)\000"
.LC590:
	.ascii	"removable \000"
	.space	1
.LC591:
	.ascii	"\000"
	.space	3
.LC592:
	.ascii	"read only \000"
	.space	1
.LC593:
	.ascii	"lun\000"
.LC594:
	.ascii	"&common->filesem\000"
	.space	3
.LC595:
	.ascii	"failed to register LUN%d: %d\012\000"
	.space	2
.LC596:
	.ascii	"no file given for LUN%d\012\000"
	.space	3
.LC597:
	.ascii	"controller '%s' not recognized\012\000"
.LC598:
	.ascii	"%-8s%-16s%04x\000"
	.space	2
.LC599:
	.ascii	"SAMSUNG\000"
.LC600:
	.ascii	"&common->fsg_wait\000"
	.space	2
.LC601:
	.ascii	"Mass Storage Function, version: 2009/09/11\012\000"
.LC602:
	.ascii	"Number of LUNs=%d\012\000"
	.space	1
.LC603:
	.ascii	"LUN: %s%s%sfile: %s\012\000"
	.space	3
.LC604:
	.ascii	"CD-ROM \000"
.LC605:
	.ascii	"<3>%s: rndis response on err %d\012\000"
	.space	3
.LC606:
	.ascii	"rndis response on err %d\012\000"
	.space	2
.LC607:
	.ascii	"<3>%s() failed to queue req %pK (%d)\012\000"
	.space	2
.LC608:
	.ascii	"<6>conn_gadget_open\012\000"
	.space	3
.LC609:
	.ascii	"<3>%s() handle closing now. open again\012\000"
.LC610:
	.ascii	"<3>%s() conn_gadget_lock(open_excl) f\012\000"
	.space	1
.LC611:
	.ascii	"<3>%s() count is too large (%d)\012\000"
	.space	3
.LC612:
	.ascii	"<3>%s() conn_gadget_lock(read_excl) f\012\000"
	.space	1
.LC613:
	.ascii	"<3>%s() waiting for online state\012\000"
	.space	2
.LC614:
	.ascii	"<3>%s() dev->error has value\012\000"
	.space	2
.LC615:
	.ascii	"<3>%s() zero queue\012\000"
.LC616:
	.ascii	"<3>%s() kfifo_to_user f %d\012\000"
.LC617:
	.ascii	"<3>%s() wait_event_interruptible f %d\012\000"
	.space	1
.LC618:
	.ascii	"ccid\000"
	.space	3
.LC619:
	.ascii	"<6>adb_bind_config\012\000"
.LC620:
	.ascii	"adb\000"
.LC621:
	.ascii	"<6>acc_bind_config\012\000"
.LC622:
	.ascii	"accessory\000"
	.space	2
.LC623:
	.ascii	"rmnet_smd_sdio\000"
	.space	1
.LC624:
	.ascii	"<6>mtp_bind_config\012\000"
.LC625:
	.ascii	"mtp\000"
.LC626:
	.ascii	"<3>%s(#) call conn_gadget_bind_config\012\000"
	.space	1
.LC627:
	.ascii	"<6>conn_gadget_bind_config\012\000"
.LC628:
	.ascii	"conn_gadget\000"
.LC629:
	.ascii	"qdss\000"
	.space	3
.LC630:
	.ascii	"<3>qdss_bind_config: allocating channel failed\012\000"
.LC631:
	.ascii	"<3>qdss usb_add_function failed\012\000"
	.space	3
.LC632:
	.ascii	"<3>%s: qdss: Cannot open channel qdss\000"
	.space	2
.LC633:
	.ascii	"<6>%s: port number %u\000"
	.space	2
.LC634:
	.ascii	"<3>%s: Can not add port %u. Max ports = %d\000"
	.space	1
.LC635:
	.ascii	"<6>%s: no_ports:%d\012\000"
.LC636:
	.ascii	"<3>%s: Invalid num of ports count:%d\012\000"
	.space	2
.LC637:
	.ascii	"k_bam_data\000"
	.space	1
.LC638:
	.ascii	"<3>%s: Failed to create workqueue\012\000"
	.space	1
.LC639:
	.ascii	"<3>%s: bam_data_setup failed err: %d\012\000"
	.space	2
.LC640:
	.ascii	"<3>%s: bam setup failed\000"
.LC641:
	.ascii	"<6>%s: mbim struct not allocated\000"
	.space	3
.LC642:
	.ascii	"usb_mbim\000"
	.space	3
.LC643:
	.ascii	"<6>%s: Exit status %d\000"
	.space	2
.LC644:
	.ascii	"Mass Storage Function\000"
	.space	2
.LC645:
	.ascii	"/home/pascua14/Desktop/s5-kernel/include/linux/kref"
	.ascii	".h\000"
	.space	2
.LC646:
	.ascii	"k_rmnet_work\000"
	.space	3
.LC647:
	.ascii	"rmnet_sdio\000"
	.space	1
.LC648:
	.ascii	"usb_rmnet_sdio\000"
	.space	1
.LC649:
	.ascii	"&dev->smd_ctl.wait\000"
	.space	1
.LC650:
	.ascii	"&dev->smd_data.wait\000"
.LC651:
	.ascii	"rmnet\000"
	.space	2
.LC652:
	.ascii	"usb_rmnet_smd\000"
	.space	2
.LC653:
	.ascii	"<6>read descriptors\012\000"
	.space	3
.LC654:
	.ascii	"<6>read strings\012\000"
	.space	3
.LC655:
	.ascii	"&epfile->mutex\000"
	.space	1
.LC656:
	.ascii	"&epfile->wait\000"
	.space	2
.LC657:
	.ascii	"ep%u\000"
	.space	3
.LC658:
	.ascii	"<3>%s: zero length ctrl pkt\012\000"
	.space	3
.LC659:
	.ascii	"<3>%s: max_buffer_size:%d given_pkt_size:%d\012\000"
	.space	3
.LC660:
	.ascii	"<3> %s dev->error\012\000"
	.space	1
.LC661:
	.ascii	"gmidi function\000"
	.space	1
.LC662:
	.ascii	"<3>%s: %s: rndis_pdata\012\000"
.LC663:
	.ascii	"<6>%s: %s MAC: %02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC664:
	.ascii	"rndis\000"
	.space	2
.LC665:
	.ascii	"%s%%d\000"
	.space	2
.LC666:
	.ascii	"self\000"
	.space	3
.LC667:
	.ascii	"using random %s ethernet address\012\000"
	.space	2
.LC668:
	.ascii	"<7>usb: set unique host mac\012\000"
	.space	3
.LC669:
	.ascii	"<6>%s: MAC %pM\012\000"
.LC670:
	.ascii	"<6>%s: HOST MAC %pM\012\000"
	.space	3
.LC671:
	.ascii	"<3>%s: %s: gether_setup failed\012\000"
.LC672:
	.ascii	"<3>%s: mbim dev is null\012\000"
	.space	3
.LC673:
	.ascii	"<3>%s: mbim command error %d\012\000"
	.space	2
.LC674:
	.ascii	"<3>%s: max_pkt_size:%d given_pkt_size:%d\012\000"
	.space	2
.LC675:
	.ascii	"<3>%s: cannot allocate rmnet_mux ctrl pkt\012\000"
	.space	1
.LC676:
	.ascii	"<3>%s: copy_from_user failed err:%d\012\000"
	.space	3
.LC677:
	.ascii	"rmnet_mux notify ep enqueue error %d\012\000"
	.space	2
.LC678:
	.ascii	"USB audio source\000"
	.space	3
.LC679:
	.ascii	"USB gadget audio\000"
	.space	3
.LC680:
	.ascii	"audio_source\000"
	.space	3
.LC681:
	.ascii	"USB accessory audio source\000"
	.space	1
.LC682:
	.ascii	"<3>%s: given pkt size too big:%d > max_pkt_size:%d\012"
	.ascii	"\000"
.LC683:
	.ascii	"<3>%s: Previous writing not finished yet\012\000"
	.space	2
.LC684:
	.ascii	"<3>%s: dev:%pK is not connected\012\000"
	.space	3
.LC685:
	.ascii	"<3>%s: dev:%pK state=%d, recover!!\012\000"
.LC686:
	.ascii	"<3>%s: dev:%pK is not online\012\000"
	.space	2
.LC687:
	.ascii	"<3>%s: dev:%pK req is NULL\012\000"
.LC688:
	.ascii	"<3>%s: dev:%pK req->buf is NULL\012\000"
	.space	3
.LC689:
	.ascii	"<3>%s: ep enqueue error %d\012\000"
.LC690:
	.ascii	"%s: Unexpected call\012\000"
	.space	3
.LC691:
	.ascii	"usb_ep_set_wedge -> %d\012\000"
.LC692:
	.ascii	"usb_ep_set_halt -> %d\012\000"
	.space	1
.LC693:
	.ascii	" Card\000"
	.space	2
.LC694:
	.ascii	"Load AT\000"
.LC695:
	.ascii	"Load User\000"
	.space	2
.LC696:
	.ascii	"<6>%s called\012\000"
	.space	2
.LC697:
	.ascii	"time stop\000"
	.space	2
.LC698:
	.ascii	"time reset\000"
	.space	1
.LC699:
	.ascii	"usb: %s : common->version_string[%d]=%s\015\012\000"
	.space	2
.LC700:
	.ascii	"Unknown x%02x\000"
	.space	2
.LC701:
	.ascii	"%s setup response queue error\012\000"
	.space	1
.LC702:
	.ascii	"<3>%s: Invalid grmnet/buf, grmnet:%pK buf:%pK\012\000"
	.space	1
.LC703:
	.ascii	"<3>given pkt size too big:%d > max_pkt_size:%d\012\000"
.LC704:
	.ascii	"<3>rmnet file handler %pK is not open\000"
	.space	2
.LC705:
	.ascii	"<3>%s: Failed to init audio streams: err %d\000"
.LC706:
	.ascii	"<3>%s: Capture error: %d\012\000"
	.space	2
.LC707:
	.ascii	"<3>%s bulk_dev_error\012\000"
	.space	2
.LC708:
	.ascii	"<3>%s usb ep queue failed\012\000"
	.space	1
.LC709:
	.ascii	"<4>%s: set unknown OID 0x%08X, size %d\012\000"
.LC710:
	.ascii	"<4>%s: unknown RNDIS message 0x%08X len %d\012\000"
.LC711:
	.ascii	"<3>%s: RNDIS command error %d, %d/%d\012\000"
	.space	2
.LC712:
	.ascii	"ep-e\000"
	.space	3
.LC713:
	.ascii	"ep-f\000"
	.space	3
.LC714:
	.ascii	"ep3-bulk\000"
	.space	3
.LC715:
	.ascii	"ep2-bulk\000"
	.space	3
.LC716:
	.ascii	"<3>%s: %s: can't bind, err %d\012\000"
	.space	1
.LC717:
	.ascii	"dual\000"
	.space	3
.LC718:
	.ascii	"full\000"
	.space	3
.LC719:
	.ascii	"<3>%s: usb epin autoconfig failed\012\000"
	.space	1
.LC720:
	.ascii	"<6>%s: usb epin autoconfig succeeded\012\000"
	.space	2
.LC721:
	.ascii	"<3>%s: usb epout autoconfig failed\012\000"
.LC722:
	.ascii	"<6>%s: usb epout autoconfig succeeded\012\000"
	.space	1
.LC723:
	.ascii	"<3>%s: usb notify ep autoconfig failed\012\000"
.LC724:
	.ascii	"<6>%s: usb notify ep autoconfig succeeded\012\000"
	.space	1
.LC725:
	.ascii	"<6>%s: allocated notify ep request & request buffer"
	.ascii	"\012\000"
	.space	3
.LC726:
	.ascii	"<6>%s: failed to allocate notify request\012\000"
	.space	2
.LC727:
	.ascii	"<6>%s: mbim(%d): %s speed IN/%s OUT/%s NOTIFY/%s\012"
	.ascii	"\000"
	.space	2
.LC728:
	.ascii	"<3>%s: %s failed to bind, err %d\012\000"
	.space	2
.LC729:
	.ascii	"%s: can't bind, err %d\012\000"
.LC730:
	.ascii	"<3>%s: %s: failed to allocate desc interface\000"
	.space	3
.LC731:
	.ascii	"<3>%s: %s: failed to allocate alt interface\000"
.LC732:
	.ascii	"<3>%s: %s: failed to autoconfig in endpoint\000"
.LC733:
	.ascii	"<3>%s: %s: failed to autoconfig out endpoint\000"
	.space	3
.LC734:
	.ascii	"unable to autoconfigure all endpoints\012\000"
	.space	1
.LC735:
	.ascii	"<3>%s: unable to allocate ifc id, err:%d\000"
	.space	3
.LC736:
	.ascii	"<3>%s: usb epnotify autoconfig failed\012\000"
	.space	1
.LC737:
	.ascii	"<3>qdss_bind: full-speed is not supported\012\000"
	.space	1
.LC738:
	.ascii	"<3>interface allocation error\012\000"
	.space	1
.LC739:
	.ascii	"<3>ep_autoconfig error\012\000"
.LC740:
	.ascii	"<3>usb_copy_descriptors error\012\000"
	.space	1
.LC741:
	.ascii	"<3>%s: unable to allocate memory for notify req\012"
	.ascii	"\000"
	.space	3
.LC742:
	.ascii	"<6>%s: RmNet(%d) %s Speed, IN:%s OUT:%s\012\000"
	.space	3
.LC743:
	.ascii	"<6>DUN register failed. data is null.\012\000"
	.space	1
.LC744:
	.ascii	"<6>DUN is registerd\012\000"
	.space	3
.LC745:
	.ascii	"%s/%pK: can't bind, err %d\012\000"
.LC746:
	.ascii	"super\000"
	.space	2
.LC747:
	.ascii	"<3>conn_gadget_function_bind dev: %pK\012\000"
	.space	1
.LC748:
	.ascii	"<3>usb_ep_autoconfig for ep_in failed\012\000"
	.space	1
.LC749:
	.ascii	"<3>usb_ep_autoconfig for ep_out failed\012\000"
.LC750:
	.ascii	"<3>%s() conn_gadget_bind() could not allocate reque"
	.ascii	"sts\012\000"
.LC751:
	.ascii	"<3>%s speed %s: IN/%s, OUT/%s\012\000"
	.space	1
.LC752:
	.ascii	"android\000"
.LC753:
	.ascii	"<3>acc_bind() could not allocate requests\012\000"
	.space	1
.LC754:
	.ascii	"<3>mtp_bind() could not allocate requests\012\000"
	.space	1
.LC755:
	.ascii	"<3>adb_bind() could not allocate requests\012\000"
	.space	1
.LC756:
	.ascii	"ep0 bMaxBurst must be 0\012\000"
	.space	3
.LC757:
	.ascii	"can't enable %s, result %d\012\000"
.LC758:
	.ascii	"config_ep_by_speed failed for ep %s, result %d\012\000"
.LC759:
	.ascii	"config_ep_by_speed failes for ep %s, result %d\012\000"
.LC760:
	.ascii	"<3>%s: unable to allocate memory for notify ep\012\000"
.LC761:
	.ascii	"config_ep fail ep %s, result %d\012\000"
	.space	3
.LC762:
	.ascii	"failedto enable ep%s, result %d\012\000"
	.space	3
.LC763:
	.ascii	"failed to enable ep %s, result %d\012\000"
	.space	1
.LC764:
	.ascii	"<3>%s: unable to allocate memory for out req\012\000"
	.space	2
.LC765:
	.ascii	"<3>%s: unable to allocate memory for in req\012\000"
	.space	3
.LC766:
	.ascii	"<3>%s: config_ep_by_speed failed for ep#%s, err#%d\012"
	.ascii	"\000"
.LC767:
	.ascii	"<3>%s: usb ep#%s enable failed, err#%d\012\000"
.LC768:
	.ascii	"<3>qdss_st_alt: qdss supportes HS or SS only\012\000"
	.space	2
.LC769:
	.ascii	"<3>qdss_set_alt failed\012\000"
.LC770:
	.ascii	"<3>%s: intf: %d alt: %d\012\000"
	.space	3
.LC771:
	.ascii	"<3>%s() kfifo_reset\012\000"
	.space	3
.LC772:
	.ascii	"can't configure %s: %d\012\000"
.LC773:
	.ascii	"can't start %s: %d\012\000"
.LC774:
	.ascii	"%s queue req: %d\012\000"
	.space	2
.LC775:
	.ascii	"<7>usb: %s cdev->config=%pK, config=%pK\012\000"
	.space	3
.LC776:
	.ascii	"enabled\000"
.LC777:
	.ascii	"disabled\000"
	.space	3
.LC778:
	.ascii	"<6>usb: enabled: %d, dev->enabled: %d\012\000"
	.space	1
.LC779:
	.ascii	"SAMSUNG_Android\000"
.LC780:
	.ascii	"<7>usb: %s f_holder->f:%s\012\000"
	.space	1
.LC781:
	.ascii	"acm\000"
.LC782:
	.ascii	"<7>usb: acm is enabled. (bcdDevice=0x400)\012\000"
	.space	1
.LC783:
	.ascii	"<7>usb: conn_gadget + kies (bcdDevice=0xC00)\012\000"
	.space	2
.LC784:
	.ascii	"<7>usb: conn_gadget only (bcdDevice=0x800)\012\000"
.LC785:
	.ascii	"<7>usb: %s vendor=%x,product=%x,bcdDevice=%x\000"
	.space	3
.LC786:
	.ascii	"<7>,Class=%x,SubClass=%x,Protocol=%x\012\000"
	.space	2
.LC787:
	.ascii	"<7>usb: %s next cmd : usb_add_config\012\000"
	.space	2
.LC788:
	.ascii	"<3>%s: %s: android_enable failed\012\000"
	.space	2
.LC789:
	.ascii	"<3>%s: android_usb: already %s\012\000"
.LC790:
	.ascii	"<6>adb_release\012\000"
.LC791:
	.ascii	"<3>%s: adb_closed_callback: data->dev is NULL\000"
	.space	2
.LC792:
	.ascii	"<3>%s: adb_closed_callback: config->dev is NULL\000"
.LC793:
	.ascii	"<6>%s(): freeing\012\000"
	.space	2
.LC794:
	.ascii	"Function FS Gadget\000"
	.space	1
.LC795:
	.ascii	"composite\000"
	.space	2
.LC796:
	.ascii	"<3>%s: unable to allocate platform data\012\000"
	.space	3
.LC797:
	.ascii	"qcom,android-usb-swfi-latency\000"
	.space	2
.LC798:
	.ascii	"qcom,android-usb-cdrom\000"
	.space	1
.LC799:
	.ascii	"qcom,android-usb-internal-ums\000"
	.space	2
.LC800:
	.ascii	"qcom,streaming-func\000"
.LC801:
	.ascii	"<3>%s: Invalid number of functions used.\012\000"
	.space	2
.LC802:
	.ascii	"android_usb\000"
.LC803:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android_dev"
	.ascii	"\012\000"
	.space	3
.LC804:
	.ascii	"&android_dev->mutex\000"
.LC805:
	.ascii	"ioremap failed\012\000"
.LC806:
	.ascii	"android%d\000"
	.space	2
.LC807:
	.ascii	"<3>%s: %s(): android_create_device failed\012\000"
	.space	1
.LC808:
	.ascii	"<7>usb: %s error pdev(%pK)\012\000"
.LC809:
	.ascii	"<7>usb: %s failed to create attr\012\000"
	.space	2
.LC810:
	.ascii	"<3>usb: %s To create terminal_atttrr is failed\012\000"
.LC811:
	.ascii	"<3>%s: %s(): Failed to register android composite d"
	.ascii	"river\012\000"
	.space	2
.LC812:
	.ascii	"high\000"
	.space	3
.LC813:
	.ascii	"<3>DUN register is failed, ret = %d\012\000"
	.space	3
.LC814:
	.ascii	"<3>usb: %s modem misc register is failed\012\000"
	.space	2
.LC815:
	.ascii	"&modem_wait_q\000"
	.space	2
.LC816:
	.ascii	"%s: no requests available\012\000"
	.space	1
.LC817:
	.ascii	"%s: cannot queue read request\012\000"
	.space	1
.LC818:
	.ascii	"usb_add_function failed\012\000"
	.space	3
.LC819:
	.ascii	"unable to get diag usb channel\012\000"
.LC820:
	.ascii	"<3>%s: diag: Cannot open channel '%s'\000"
	.space	2
.LC821:
	.ascii	"<3>usb_ep_alloc_request failed\012\000"
.LC822:
	.ascii	"<3>send_sps_req: usb_ep_queue error\012\000"
	.space	3
.LC823:
	.ascii	"<3>msm_ep_config failed\012\000"
	.space	3
.LC824:
	.ascii	"<3>init_data error\000"
	.space	1
.LC825:
	.ascii	"<3>qdss_data_connection: memory alloc failed\012\000"
	.space	2
.LC826:
	.ascii	"<3>set_qdss_data_connection error\000"
	.space	2
.LC827:
	.ascii	"<3>send_sps_req error\012\000"
	.space	1
.LC828:
	.ascii	"<3>usb_qdss_free_req: qdss ctx is NULL\012\000"
.LC829:
	.ascii	"<3>usb_qdss_alloc_req: missing params\012\000"
	.space	1
.LC830:
	.ascii	"<3>usb_qdss_alloc_req: ctrl_in allocation err\012\000"
	.space	1
.LC831:
	.ascii	"<3>usb_qdss_alloc_req:ctrl_out allocation err\012\000"
	.space	1
.LC832:
	.ascii	"<3>error: usb_qdss_ctrl_read list is empty\012\000"
.LC833:
	.ascii	"<3>qdss usb_ep_queue failed\012\000"
	.space	3
.LC834:
	.ascii	"<3>error: usb_qdss_ctrl_write list is empty\012\000"
	.space	3
.LC835:
	.ascii	"<3>usb_qdss_open: notification func is missing\012\000"
.LC836:
	.ascii	"<3>usb:[%s] port_usb or port_tty is NULL!! started("
	.ascii	"%d)\012\000"
.LC837:
	.ascii	"<3>%s: usb alloc request failed\012\000"
	.space	3
.LC838:
	.ascii	"<3>%s: request buf allocation failed\012\000"
	.space	2
.LC839:
	.ascii	"<3>%s: unable to allocate out requests\012\000"
.LC840:
	.ascii	"<3>%s: unable to allocate IN requests\012\000"
	.space	1
.LC841:
	.ascii	"<3>%s: sio channel is not open\012\000"
.LC842:
	.ascii	"<3>%s: usb request is null port#%d\012\000"
.LC843:
	.ascii	"<3>%s: unable to allocate out reqs\012\000"
.LC844:
	.ascii	"<3>%s: unable to allocate in reqs\012\000"
	.space	1
.LC845:
	.ascii	"<3>%s: port allocation failed\012\000"
	.space	1
.LC846:
	.ascii	"<3>%s: failed to enable in ep w/ err:%d\012\000"
	.space	3
.LC847:
	.ascii	"<3>%s: invalid number of ports count:%d max_ports:%"
	.ascii	"d\012\000"
	.space	2
.LC848:
	.ascii	"<3>%s: unable to create workqueue gsdio_wq\012\000"
.LC849:
	.ascii	"&sdio_ports[i].lock\000"
.LC850:
	.ascii	"<3>%s: sdio logical port allocation failed\012\000"
.LC851:
	.ascii	"usb_gsdio\000"
	.space	2
.LC852:
	.ascii	"<3>%s: Invalid port no#%d\000"
	.space	2
.LC853:
	.ascii	"<3>%s: Invalid num of ports count:%d gadget:%pK\012"
	.ascii	"\000"
	.space	3
.LC854:
	.ascii	"k_gsmd\000"
	.space	1
.LC855:
	.ascii	"<3>%s: Unable to create workqueue gsmd_wq\012\000"
	.space	1
.LC856:
	.ascii	"&smd_ports[i].lock\000"
	.space	1
.LC857:
	.ascii	"<3>%s: Unable to alloc port:%d\012\000"
.LC858:
	.ascii	"usb_gsmd\000"
	.space	3
.LC859:
	.ascii	"<3>%s: invalid bam portno#%d\012\000"
	.space	2
.LC860:
	.ascii	"<3>%s: grmnet port is null\012\000"
.LC861:
	.ascii	"<3>%s: usb_bam_client_ready failed\012\000"
.LC862:
	.ascii	"<3>%s: Invalid num of ports count:%d,%d\012\000"
	.space	3
.LC863:
	.ascii	"k_gbam\000"
	.space	1
.LC864:
	.ascii	"<3>%s: Unable to create workqueue gbam_wq\012\000"
	.space	1
.LC865:
	.ascii	"usb_rmnet\000"
	.space	2
.LC866:
	.ascii	"<3>%s: Invalid port_num#%d\012\000"
.LC867:
	.ascii	"<3>%s: Invalid client:%d\012\000"
	.space	2
.LC868:
	.ascii	"gsmd_ctrl\000"
	.space	2
.LC869:
	.ascii	"<3>%s: Unable to create workqueue grmnet_ctrl\012\000"
	.space	1
.LC870:
	.ascii	"&c->wait\000"
	.space	3
.LC871:
	.ascii	"&c->smd_wait_q\000"
	.space	1
.LC872:
	.ascii	"<3>%s: setting xport name for invalid port num %d\012"
	.ascii	"\000"
	.space	1
.LC873:
	.ascii	"_ctrl\000"
	.space	2
.LC874:
	.ascii	"<3>%s: Unable to create workqueue:%s\012\000"
	.space	2
.LC875:
	.ascii	"_data\000"
	.space	2
.LC876:
	.ascii	"SMUX_RMNET_CTL_HSUART\000"
	.space	2
.LC877:
	.ascii	"<3>%s: gsmd_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC878:
	.ascii	"<3>%s: gqti_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC879:
	.ascii	"<3>%s: ghsic_ctrl_connect failed: err:%d\012\000"
	.space	2
.LC880:
	.ascii	"<3>%s: ghsuart_ctrl_connect failed: err:%d\012\000"
.LC881:
	.ascii	"<3>%s: usb_bam_get_connection_idx failed\012\000"
	.space	2
.LC882:
	.ascii	"<3>%s: gbam_connect failed: err:%d\012\000"
.LC883:
	.ascii	"<3>%s: ghsic_data_connect failed: err:%d\012\000"
	.space	2
.LC884:
	.ascii	"<3>%s: ghsuart_data_connect failed: err:%d\012\000"
.LC885:
	.ascii	"<3>%s: Max-%d instances supported\012\000"
	.space	1
.LC886:
	.ascii	"<3>%s: Unable to allocate rmnet device\012\000"
.LC887:
	.ascii	"<3>%s: Un-supported transport: %u\012\000"
	.space	1
.LC888:
	.ascii	"<3>%s: rmnet: Cannot open ctrl port:'%s' data port:"
	.ascii	"'%s'\012\000"
	.space	3
.LC889:
	.ascii	"<3>%s: supporting ports#%u port_id:%u\000"
	.space	2
.LC890:
	.ascii	"<3>%s: failed to get string id, err:%d\012\000"
.LC891:
	.ascii	"rmnet%d\000"
.LC892:
	.ascii	"<3>%s: cannot allocate memory for name\012\000"
.LC893:
	.ascii	"<3>%s: usb add function failed: %d\012\000"
.LC894:
	.ascii	"<3>%s: Could not bind rmnet%u config\012\000"
	.space	2
.LC895:
	.ascii	"<3>%s: rmnet: Cannot setup transports\000"
	.space	2
.LC896:
	.ascii	"RNDIS command error %d, %d/%d\012\000"
	.space	1
.LC897:
	.ascii	"%02X%02X%02X%02X%02X%02X\000"
	.space	3
.LC898:
	.ascii	"cdc_ethernet\000"
	.space	3
.LC899:
	.ascii	"<3>%s: failed to add function\000"
	.space	2
.LC900:
	.ascii	"<3>%s: %s: teth_bridge_set_aggr_params failed\012\000"
	.space	1
.LC901:
	.ascii	"<6>%s: SET DEVICE OFFLINE\000"
	.space	2
.LC902:
	.ascii	"<6>%s: dev:%pK port:%d. Do nothing.\012\000"
	.space	3
.LC903:
	.ascii	"<6>%s: mbim deactivated\012\000"
	.space	3
.LC904:
	.ascii	"<6>%s: CONTROL_INTERFACE\000"
	.space	3
.LC905:
	.ascii	"<6>%s: reset mbim control %d\012\000"
	.space	2
.LC906:
	.ascii	"<3>%s: Failed configuring notify ep %s: err %d\012\000"
.LC907:
	.ascii	"<6>%s: DATA_INTERFACE\000"
	.space	2
.LC908:
	.ascii	"<6>%s: reset mbim\012\000"
	.space	1
.LC909:
	.ascii	"<6>%s: Alt set 1, initialize ports\000"
	.space	1
.LC910:
	.ascii	"<6>%s: Choose endpoints\000"
.LC911:
	.ascii	"<3>%s: IN ep %s failed: %d\012\000"
.LC912:
	.ascii	"<6>%s: Set mbim port in_desc = 0x%pK\012\000"
	.space	2
.LC913:
	.ascii	"<3>%s: OUT ep %s failed: %d\012\000"
	.space	3
.LC914:
	.ascii	"<6>%s: Set mbim port out_desc = 0x%pK\012\000"
	.space	1
.LC915:
	.ascii	"<6>%s: dev:%pK portno:%d\012\000"
	.space	2
.LC916:
	.ascii	"<3>%s: bam_data_setup failed: err:%d\012\000"
	.space	2
.LC917:
	.ascii	"<6>%s: mbim bam connected\012\000"
	.space	1
.LC918:
	.ascii	"<6>%s: PORTS already SET\000"
	.space	3
.LC919:
	.ascii	"<6>%s: SET DEVICE ONLINE\000"
	.space	3
.LC920:
	.ascii	"<3>%s: ERROR: Illegal Interface\000"
.LC921:
	.ascii	"usb\000"
.LC922:
	.ascii	"<3>%s: %s: ecm_pdata\012\000"
	.space	2
.LC923:
	.ascii	"ecm\000"
.LC924:
	.ascii	"<3>%s: %s: ecm_bind_config failed\012\000"
	.space	1
.LC925:
	.ascii	"<3>%s: RNDIS header memory allocation failed.\012\000"
	.space	1
.LC926:
	.ascii	"<7>usb: %s gather_disconnect\012\000"
	.space	2
.LC927:
	.ascii	"<3>activate ncm setting MTU size (%d)\012\000"
	.space	1
.LC928:
	.ascii	"host\000"
	.space	3
.LC929:
	.ascii	"<3>%s: bam_data_connect failed: err:%d\012\000"
.LC930:
	.ascii	"<6>%s: rndis deactivated\012\000"
	.space	2
.LC931:
	.ascii	"<6>%s: rndis bam connected\012\000"
.LC932:
	.ascii	"<3>%s: unable to open sound control device file: %s"
	.ascii	"\012\000"
	.space	3
.LC933:
	.ascii	"<3>%s: No such PCM playback device: %s\012\000"
.LC934:
	.ascii	"<3>%s: Setting playback HW params failed: err %d\000"
	.space	3
.LC935:
	.ascii	"<3>%s: No such PCM capture device: %s\012\000"
	.space	1
.LC936:
	.ascii	"<3>%s: Setting capture HW params failed: err %d\000"
.LC937:
	.ascii	"<3>%s: Failed to open snd devices\012\000"
	.space	1
.LC938:
	.ascii	"audio\000"
	.space	2
.LC939:
	.ascii	"<3>%s: %s: Failed to add usb audio function, err = "
	.ascii	"%d\000"
	.space	2
.LC940:
	.ascii	"<3>%s: %s: ncm_pdata\012\000"
	.space	2
.LC941:
	.ascii	"<7>usb: %s MAC:%02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC942:
	.ascii	"<7>usb: %s before MAC:%02X:%02X:%02X:%02X:%02X:%02X"
	.ascii	"\012\000"
	.space	3
.LC943:
	.ascii	"<7>usb: %s after MAC:%02X:%02X:%02X:%02X:%02X:%02X\012"
	.ascii	"\000"
.LC944:
	.ascii	"<7>usb: %s ncm ready (%s)\012\000"
	.space	1
.LC945:
	.ascii	"<7>usb: %s idProduct=0x%x, DeviceClass=0x%x\012\000"
	.space	3
.LC946:
	.ascii	"<7>usb: %s ver=0x%x vendor_id=0x%x\012\000"
.LC947:
	.ascii	"<7>usb: %s failed usb_ep_queue\012\000"
.LC948:
	.ascii	"SMUX_CONNECTED\000"
	.space	1
.LC949:
	.ascii	"SMUX_DISCONNECTED\000"
	.space	2
.LC950:
	.ascii	"SMUX_READ_DONE\000"
	.space	1
.LC951:
	.ascii	"SMUX_READ_FAIL\000"
	.space	1
.LC952:
	.ascii	"SMUX_WRITE_DONE\000"
.LC953:
	.ascii	"SMUX_WRITE_FAIL\000"
.LC954:
	.ascii	"SMUX_TIOCM_UPDATE\000"
	.space	2
.LC955:
	.ascii	"SMUX_LOW_WM_HIT\000"
.LC956:
	.ascii	"SMUX_HIGH_WM_HIT\000"
	.space	3
.LC957:
	.ascii	"RNDIS_UNINITIALIZED\000"
.LC958:
	.ascii	"RNDIS_INITIALIZED\000"
	.space	2
.LC959:
	.ascii	"RNDIS_DATA_INITIALIZED\000"
	.space	1
.LC960:
	.ascii	"NONE\000"
	.space	3
.LC961:
	.ascii	"remote_wakeup\000"
	.space	2
.LC962:
	.ascii	"state\000"
	.space	2
.LC963:
	.ascii	"pm_qos\000"
	.space	1
.LC964:
	.ascii	"enable\000"
	.space	1
.LC965:
	.ascii	"functions\000"
	.space	2
.LC966:
	.ascii	"macos\000"
	.space	2
.LC967:
	.ascii	"ss_host_available\000"
	.space	2
.LC968:
	.ascii	"usb30en\000"
.LC969:
	.ascii	"bcdUSB\000"
	.space	1
.LC970:
	.ascii	"iSerial\000"
.LC971:
	.ascii	"iProduct\000"
	.space	3
.LC972:
	.ascii	"iManufacturer\000"
	.space	2
.LC973:
	.ascii	"bDeviceProtocol\000"
.LC974:
	.ascii	"bDeviceSubClass\000"
.LC975:
	.ascii	"bDeviceClass\000"
	.space	3
.LC976:
	.ascii	"bcdDevice\000"
	.space	2
.LC977:
	.ascii	"idProduct\000"
	.space	2
.LC978:
	.ascii	"idVendor\000"
	.space	3
.LC979:
	.ascii	"uasp\000"
	.space	3
.LC980:
	.ascii	"pcm\000"
.LC981:
	.ascii	"mass_storage\000"
	.space	3
.LC982:
	.ascii	"sua_version_info\000"
	.space	3
.LC983:
	.ascii	"product_string\000"
	.space	1
.LC984:
	.ascii	"vendor_string\000"
	.space	2
.LC985:
	.ascii	"inquiry_string\000"
	.space	1
.LC986:
	.ascii	"rndis_qc\000"
	.space	3
.LC987:
	.ascii	"max_pkt_per_xfer\000"
	.space	3
.LC988:
	.ascii	"vendorID\000"
	.space	3
.LC989:
	.ascii	"ethaddr\000"
.LC990:
	.ascii	"wceis\000"
	.space	2
.LC991:
	.ascii	"manufacturer\000"
	.space	3
.LC992:
	.ascii	"ptp\000"
.LC993:
	.ascii	"diag\000"
	.space	3
.LC994:
	.ascii	"clients\000"
.LC995:
	.ascii	"mbim_transports\000"
.LC996:
	.ascii	"ecm_qc\000"
	.space	1
.LC997:
	.ascii	"ecm_transports\000"
	.space	1
.LC998:
	.ascii	"ecm_ethaddr\000"
.LC999:
	.ascii	"transport_names\000"
.LC1000:
	.ascii	"transports\000"
	.space	1
.LC1001:
	.ascii	"rmnet_smd\000"
	.space	2
.LC1002:
	.ascii	"instances\000"
	.space	2
.LC1003:
	.ascii	"midi\000"
	.space	3
.LC1004:
	.ascii	"alsa\000"
	.space	3
.LC1005:
	.ascii	"aliases\000"
.LC1006:
	.ascii	"terminal_version\000"
	.space	3
.LC1007:
	.ascii	"CDC Network Control Model (NCM)\000"
.LC1008:
	.ascii	"CDC Network Data\000"
	.space	3
.LC1009:
	.ascii	"CDC NCM\000"
.LC1010:
	.ascii	"in_max_packet_size\000"
	.space	1
.LC1011:
	.ascii	"out_max_packet_size\000"
.LC1012:
	.ascii	"usb_buffer_size\000"
.LC1013:
	.ascii	"version\000"
.LC1014:
	.ascii	"1.0\000"
.LC1015:
	.ascii	"Microphone Iso-IN Endpoint Control\000"
	.space	1
.LC1016:
	.ascii	"Microphone Sampling Frequency Control\000"
	.space	2
.LC1017:
	.ascii	"Speaker Iso-out Endpoint Control\000"
	.space	3
.LC1018:
	.ascii	"Speaker Sampling Frequency Control\000"
	.space	1
.LC1019:
	.ascii	"Microphone Feature Unit Controls\000"
	.space	3
.LC1020:
	.ascii	"Microphone Volume Control\000"
	.space	2
.LC1021:
	.ascii	"Microphone Mute Control\000"
.LC1022:
	.ascii	"Speaker Function Unit Controls\000"
	.space	1
.LC1023:
	.ascii	"Speaker Volume Control\000"
	.space	1
.LC1024:
	.ascii	"Speaker Mute Control\000"
	.space	3
.LC1025:
	.ascii	"/dev/snd/controlC0\000"
	.space	1
.LC1026:
	.ascii	"/dev/snd/pcmC0D6c\000"
	.space	2
.LC1027:
	.ascii	"/dev/snd/pcmC0D5p\000"
	.space	2
.LC1028:
	.ascii	"gadget\000"
	.space	1
.LC1029:
	.ascii	"android_rndis_qc\000"
	.space	3
.LC1030:
	.ascii	"RNDIS Communications Control\000"
	.space	3
.LC1031:
	.ascii	"RNDIS Ethernet Data\000"
.LC1032:
	.ascii	"RNDIS\000"
	.space	2
.LC1033:
	.ascii	"CDC Ethernet Control Model (ECM)\000"
	.space	3
.LC1034:
	.ascii	"CDC Ethernet Data\000"
	.space	2
.LC1035:
	.ascii	"CDC ECM\000"
.LC1036:
	.ascii	"android_mbim\000"
	.space	3
.LC1037:
	.ascii	"MBIM Control\000"
	.space	3
.LC1038:
	.ascii	"MBIM Data\000"
	.space	2
.LC1039:
	.ascii	"USB accessory\000"
	.space	2
.LC1040:
	.ascii	"usb_accessory\000"
	.space	2
.LC1041:
	.ascii	"Android Accessory Interface\000"
.LC1042:
	.ascii	"MTP\000"
.LC1043:
	.ascii	"MIDI function\000"
	.space	2
.LC1044:
	.ascii	"ccid_ctrl\000"
	.space	2
.LC1045:
	.ascii	"ccid_bulk\000"
	.space	2
.LC1046:
	.ascii	"CDC Abstract Control Model (ACM)\000"
	.space	3
.LC1047:
	.ascii	"CDC ACM Data\000"
	.space	3
.LC1048:
	.ascii	"CDC Serial\000"
	.space	1
.LC1049:
	.ascii	"dun\000"
.LC1050:
	.ascii	"SMUX_DUN_DATA_HSUART\000"
	.space	3
.LC1051:
	.ascii	"SMUX_RMNET_DATA_HSUART\000"
	.space	1
.LC1052:
	.ascii	"rmnet_ctrl\000"
	.space	1
.LC1053:
	.ascii	"DATA40_CNTL\000"
.LC1054:
	.ascii	"DATA39_CNTL\000"
.LC1055:
	.ascii	"DATA38_CNTL\000"
.LC1056:
	.ascii	"DS\000"
	.space	1
.LC1057:
	.ascii	"UNUSED\000"
	.space	1
.LC1058:
	.ascii	"SDIO_DUN\000"
	.space	3
.LC1059:
	.ascii	"SDIO_NMEA\000"
	.space	2
.LC1060:
	.ascii	"cdrom\000"
	.space	2
.LC1061:
	.ascii	"file\000"
	.space	3
.LC1062:
	.ascii	"nofua\000"
	.space	2
.LC1063:
	.ascii	"ro\000"
	.space	1
.LC1064:
	.ascii	"functionfs\000"
	.space	1
.LC1065:
	.ascii	"RmNet\000"
	.space	2
.LC1066:
	.ascii	"rmnet_mux_ctrl\000"
	.space	1
.LC1067:
	.ascii	"transport\000"
	.space	2
.LC1068:
	.ascii	"QMI RmNet\000"
	.space	2
.LC1069:
	.ascii	"QDSS DATA\000"
	.space	2
.LC1070:
	.ascii	"QDSS CTRL\000"
	.space	2
.LC1071:
	.ascii	"suspended\000"
	.section	__modver,"a",%progbits
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.section	__param,"a",%progbits
	.align	2
	.type	__param_audio_capture_buf_size, %object
	.size	__param_audio_capture_buf_size, 16
__param_audio_capture_buf_size:
	.word	__param_str_audio_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_capture_buf_size
	.type	__param_req_capture_count, %object
	.size	__param_req_capture_count, 16
__param_req_capture_count:
	.word	__param_str_req_capture_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_count
	.type	__param_req_capture_buf_size, %object
	.size	__param_req_capture_buf_size, 16
__param_req_capture_buf_size:
	.word	__param_str_req_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_buf_size
	.type	__param_audio_playback_buf_size, %object
	.size	__param_audio_playback_buf_size, 16
__param_audio_playback_buf_size:
	.word	__param_str_audio_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_playback_buf_size
	.type	__param_req_playback_count, %object
	.size	__param_req_playback_count, 16
__param_req_playback_count:
	.word	__param_str_req_playback_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_count
	.type	__param_req_playback_buf_size, %object
	.size	__param_req_playback_buf_size, 16
__param_req_playback_buf_size:
	.word	__param_str_req_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_buf_size
	.type	__param_fn_cntl, %object
	.size	__param_fn_cntl, 16
__param_fn_cntl:
	.word	__param_str_fn_cntl
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cntl
	.type	__param_fn_cap, %object
	.size	__param_fn_cap, 16
__param_fn_cap:
	.word	__param_str_fn_cap
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cap
	.type	__param_fn_play, %object
	.size	__param_fn_play, 16
__param_fn_play:
	.word	__param_str_fn_play
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_play
	.type	__param_qc_host_addr, %object
	.size	__param_qc_host_addr, 16
__param_qc_host_addr:
	.word	__param_str_qc_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_host_addr
	.type	__param_qc_dev_addr, %object
	.size	__param_qc_dev_addr, 16
__param_qc_dev_addr:
	.word	__param_str_qc_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_dev_addr
	.type	__param_host_addr, %object
	.size	__param_host_addr, 16
__param_host_addr:
	.word	__param_str_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	host_addr
	.type	__param_dev_addr, %object
	.size	__param_dev_addr, 16
__param_dev_addr:
	.word	__param_str_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	dev_addr
	.type	__param_qmult, %object
	.size	__param_qmult, 16
__param_qmult:
	.word	__param_str_qmult
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	qmult
	.type	__param_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_rndis_ul_max_xfer_size_rcvd, 16
__param_rndis_ul_max_xfer_size_rcvd:
	.word	__param_str_rndis_ul_max_xfer_size_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_xfer_size_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_rndis_ul_max_pkt_per_xfer_rcvd, 16
__param_rndis_ul_max_pkt_per_xfer_rcvd:
	.word	__param_str_rndis_ul_max_pkt_per_xfer_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_rndis_ul_max_pkt_per_xfer, 16
__param_rndis_ul_max_pkt_per_xfer:
	.word	__param_str_rndis_ul_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer
	.type	__param_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_rndis_dl_max_pkt_per_xfer, 16
__param_rndis_dl_max_pkt_per_xfer:
	.word	__param_str_rndis_dl_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_dl_max_pkt_per_xfer
	.type	__param_mtp_tx_reqs, %object
	.size	__param_mtp_tx_reqs, 16
__param_mtp_tx_reqs:
	.word	__param_str_mtp_tx_reqs
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_reqs
	.type	__param_mtp_tx_req_len, %object
	.size	__param_mtp_tx_req_len, 16
__param_mtp_tx_req_len:
	.word	__param_str_mtp_tx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_req_len
	.type	__param_mtp_rx_req_len, %object
	.size	__param_mtp_rx_req_len, 16
__param_mtp_rx_req_len:
	.word	__param_str_mtp_rx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_rx_req_len
	.type	__param_ghsuart_data_tx_intr_thld, %object
	.size	__param_ghsuart_data_tx_intr_thld, 16
__param_ghsuart_data_tx_intr_thld:
	.word	__param_str_ghsuart_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_tx_intr_thld
	.type	__param_ghsuart_data_rx_req_size, %object
	.size	__param_ghsuart_data_rx_req_size, 16
__param_ghsuart_data_rx_req_size:
	.word	__param_str_ghsuart_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rx_req_size
	.type	__param_ghsuart_data_serial_rx_q_size, %object
	.size	__param_ghsuart_data_serial_rx_q_size, 16
__param_ghsuart_data_serial_rx_q_size:
	.word	__param_str_ghsuart_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_rx_q_size
	.type	__param_ghsuart_data_serial_tx_q_size, %object
	.size	__param_ghsuart_data_serial_tx_q_size, 16
__param_ghsuart_data_serial_tx_q_size:
	.word	__param_str_ghsuart_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_tx_q_size
	.type	__param_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_ghsuart_data_rmnet_rx_q_size, 16
__param_ghsuart_data_rmnet_rx_q_size:
	.word	__param_str_ghsuart_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_rx_q_size
	.type	__param_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_ghsuart_data_rmnet_tx_q_size, 16
__param_ghsuart_data_rmnet_tx_q_size:
	.word	__param_str_ghsuart_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_tx_q_size
	.type	__param_record_timestamp, %object
	.size	__param_record_timestamp, 16
__param_record_timestamp:
	.word	__param_str_record_timestamp
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	record_timestamp
	.type	__param_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_ghsic_data_pend_limit_with_bridge, 16
__param_ghsic_data_pend_limit_with_bridge:
	.word	__param_str_ghsic_data_pend_limit_with_bridge
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_pend_limit_with_bridge
	.type	__param_ghsic_data_fctrl_dis_thld, %object
	.size	__param_ghsic_data_fctrl_dis_thld, 16
__param_ghsic_data_fctrl_dis_thld:
	.word	__param_str_ghsic_data_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_dis_thld
	.type	__param_ghsic_data_fctrl_en_thld, %object
	.size	__param_ghsic_data_fctrl_en_thld, 16
__param_ghsic_data_fctrl_en_thld:
	.word	__param_str_ghsic_data_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_en_thld
	.type	__param_ghsic_data_fctrl_support, %object
	.size	__param_ghsic_data_fctrl_support, 16
__param_ghsic_data_fctrl_support:
	.word	__param_str_ghsic_data_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_support
	.type	__param_ghsic_data_tx_intr_thld, %object
	.size	__param_ghsic_data_tx_intr_thld, 16
__param_ghsic_data_tx_intr_thld:
	.word	__param_str_ghsic_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_tx_intr_thld
	.type	__param_ghsic_data_rx_req_size, %object
	.size	__param_ghsic_data_rx_req_size, 16
__param_ghsic_data_rx_req_size:
	.word	__param_str_ghsic_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rx_req_size
	.type	__param_ghsic_data_serial_rx_q_size, %object
	.size	__param_ghsic_data_serial_rx_q_size, 16
__param_ghsic_data_serial_rx_q_size:
	.word	__param_str_ghsic_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_rx_q_size
	.type	__param_ghsic_data_serial_tx_q_size, %object
	.size	__param_ghsic_data_serial_tx_q_size, 16
__param_ghsic_data_serial_tx_q_size:
	.word	__param_str_ghsic_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_tx_q_size
	.type	__param_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_ghsic_data_rmnet_rx_q_size, 16
__param_ghsic_data_rmnet_rx_q_size:
	.word	__param_str_ghsic_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_rx_q_size
	.type	__param_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_ghsic_data_rmnet_tx_q_size, 16
__param_ghsic_data_rmnet_tx_q_size:
	.word	__param_str_ghsic_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_tx_q_size
	.type	__param_dl_intr_threshold, %object
	.size	__param_dl_intr_threshold, 16
__param_dl_intr_threshold:
	.word	__param_str_dl_intr_threshold
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	dl_intr_threshold
	.type	__param_bam_mux_rx_req_size, %object
	.size	__param_bam_mux_rx_req_size, 16
__param_bam_mux_rx_req_size:
	.word	__param_str_bam_mux_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_req_size
	.type	__param_bam_mux_rx_q_size, %object
	.size	__param_bam_mux_rx_q_size, 16
__param_bam_mux_rx_q_size:
	.word	__param_str_bam_mux_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_q_size
	.type	__param_bam_mux_tx_q_size, %object
	.size	__param_bam_mux_tx_q_size, 16
__param_bam_mux_tx_q_size:
	.word	__param_str_bam_mux_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_q_size
	.type	__param_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_bam_mux_rx_fctrl_dis_thld, 16
__param_bam_mux_rx_fctrl_dis_thld:
	.word	__param_str_bam_mux_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_dis_thld
	.type	__param_bam_mux_rx_fctrl_support, %object
	.size	__param_bam_mux_rx_fctrl_support, 16
__param_bam_mux_rx_fctrl_support:
	.word	__param_str_bam_mux_rx_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_support
	.type	__param_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_bam_mux_rx_fctrl_en_thld, 16
__param_bam_mux_rx_fctrl_en_thld:
	.word	__param_str_bam_mux_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_en_thld
	.type	__param_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_bam_mux_tx_pkt_drop_thld, 16
__param_bam_mux_tx_pkt_drop_thld:
	.word	__param_str_bam_mux_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_pkt_drop_thld
	.type	__param_bam_pending_limit, %object
	.size	__param_bam_pending_limit, 16
__param_bam_pending_limit:
	.word	__param_str_bam_pending_limit
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_pending_limit
	.type	__param_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_mux_sdio_rx_fctrl_dis_thld, 16
__param_mux_sdio_rx_fctrl_dis_thld:
	.word	__param_str_mux_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_dis_thld
	.type	__param_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_mux_sdio_rx_fctrl_en_thld, 16
__param_mux_sdio_rx_fctrl_en_thld:
	.word	__param_str_mux_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_en_thld
	.type	__param_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_mux_sdio_tx_pkt_drop_thld, 16
__param_mux_sdio_tx_pkt_drop_thld:
	.word	__param_str_mux_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_tx_pkt_drop_thld
	.type	__param_rmnet_mux_smd_data_ch, %object
	.size	__param_rmnet_mux_smd_data_ch, 16
__param_rmnet_mux_smd_data_ch:
	.word	__param_str_rmnet_mux_smd_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_mux_smd_data_ch
	.type	__param_rmnet_mux_sdio_data_ch, %object
	.size	__param_rmnet_mux_sdio_data_ch, 16
__param_rmnet_mux_sdio_data_ch:
	.word	__param_str_rmnet_mux_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_data_ch
	.type	__param_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_rmnet_mux_sdio_ctl_ch, 16
__param_rmnet_mux_sdio_ctl_ch:
	.word	__param_str_rmnet_mux_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_ctl_ch
	.type	__param_sdio_rx_fctrl_dis_thld, %object
	.size	__param_sdio_rx_fctrl_dis_thld, 16
__param_sdio_rx_fctrl_dis_thld:
	.word	__param_str_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_dis_thld
	.type	__param_sdio_rx_fctrl_en_thld, %object
	.size	__param_sdio_rx_fctrl_en_thld, 16
__param_sdio_rx_fctrl_en_thld:
	.word	__param_str_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_en_thld
	.type	__param_sdio_tx_pkt_drop_thld, %object
	.size	__param_sdio_tx_pkt_drop_thld, 16
__param_sdio_tx_pkt_drop_thld:
	.word	__param_str_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_tx_pkt_drop_thld
	.type	__param_rmnet_sdio_data_ch, %object
	.size	__param_rmnet_sdio_data_ch, 16
__param_rmnet_sdio_data_ch:
	.word	__param_str_rmnet_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_data_ch
	.type	__param_rmnet_sdio_ctl_ch, %object
	.size	__param_rmnet_sdio_ctl_ch, 16
__param_rmnet_sdio_ctl_ch:
	.word	__param_str_rmnet_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_ctl_ch
	.type	__param_rmnet_data_ch, %object
	.size	__param_rmnet_data_ch, 16
__param_rmnet_data_ch:
	.word	__param_str_rmnet_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_data_ch
	.type	__param_rmnet_ctl_ch, %object
	.size	__param_rmnet_ctl_ch, 16
__param_rmnet_ctl_ch:
	.word	__param_str_rmnet_ctl_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_ctl_ch
	.type	__param_iSerialNumber, %object
	.size	__param_iSerialNumber, 16
__param_iSerialNumber:
	.word	__param_str_iSerialNumber
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iSerialNumber
	.type	__param_iProduct, %object
	.size	__param_iProduct, 16
__param_iProduct:
	.word	__param_str_iProduct
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iProduct
	.type	__param_iManufacturer, %object
	.size	__param_iManufacturer, 16
__param_iManufacturer:
	.word	__param_str_iManufacturer
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iManufacturer
	.type	__param_bcdDevice, %object
	.size	__param_bcdDevice, 16
__param_bcdDevice:
	.word	__param_str_bcdDevice
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	bcdDevice
	.type	__param_idProduct, %object
	.size	__param_idProduct, 16
__param_idProduct:
	.word	__param_str_idProduct
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idProduct
	.type	__param_idVendor, %object
	.size	__param_idVendor, 16
__param_idVendor:
	.word	__param_str_idVendor
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idVendor
	.ident	"GCC: (Linaro GCC 7.4-2019.02) 7.4.1 20181213 [linaro-7.4-2019.02 revision 56ec6f6b99cc167ff0c2f8e1a2eed33b1edc85d4]"
	.section	.note.GNU-stack,"",%progbits
