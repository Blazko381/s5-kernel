From b61f3cd0df53f7409b98a8578311d343e080c40c Mon Sep 17 00:00:00 2001
From: Samuel Pascua <pascua.samuel.14@gmail.com>
Date: Thu, 15 Aug 2019 20:28:14 +0800
Subject: [PATCH] GCC prebuilt binaries

I can't seem to fix any of these (yet, or not anymore):
USB/gadget: there are some variable-length array usage which Clang doesn't allow. Fixing it results in successful compilation but with runtime error, probably because patches for VLAIS removal are made for older drivers
F2FS/segment: There is probably an infinite loop in issue_flush_thread(). Refactoring it to use while loop results in the same behavior
wcd9320: There are buffer overflows in it
---
 drivers/usb/gadget/android.c         | 4013 -----------------
 drivers/usb/gadget/android.o_shipped |  Bin 0 -> 625156 bytes
 fs/f2fs/segment.c                    | 3535 ---------------
 fs/f2fs/segment.o_shipped            |  Bin 0 -> 62296 bytes
 sound/soc/codecs/wcd9320.c           | 7861 ----------------------------------
 sound/soc/codecs/wcd9320.o_shipped   |  Bin 0 -> 164524 bytes
 6 files changed, 15409 deletions(-)
 delete mode 100644 drivers/usb/gadget/android.c
 create mode 100644 drivers/usb/gadget/android.o_shipped
 delete mode 100644 fs/f2fs/segment.c
 create mode 100644 fs/f2fs/segment.o_shipped
 delete mode 100644 sound/soc/codecs/wcd9320.c
 create mode 100644 sound/soc/codecs/wcd9320.o_shipped

diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
deleted file mode 100644
index 18be64363ab..00000000000
--- a/drivers/usb/gadget/android.c
+++ /dev/null
@@ -1,4013 +0,0 @@
-/*
- * Gadget Driver for Android
- *
- * Copyright (C) 2008 Google, Inc.
- * Author: Mike Lockwood <lockwood@android.com>
- *         Benoit Goby <benoit@android.com>
- *
- * This software is licensed under the terms of the GNU General Public
- * License version 2, as published by the Free Software Foundation, and
- * may be copied, distributed, and modified under those terms.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/init.h>
-#include <linux/module.h>
-#include <linux/fs.h>
-#include <linux/delay.h>
-#include <linux/kernel.h>
-#include <linux/utsname.h>
-#include <linux/platform_device.h>
-#include <linux/pm_qos.h>
-#include <linux/of.h>
-
-#include <linux/usb/ch9.h>
-#include <linux/usb/composite.h>
-#include <linux/usb/gadget.h>
-#include <linux/usb/android.h>
-
-#include <mach/diag_dload.h>
-
-#include "gadget_chips.h"
-
-/*
- * Kbuild is not very cooperative with respect to linking separately
- * compiled library objects into one module.  So for now we won't use
- * separate compilation ... ensuring init/exit sections work to shrink
- * the runtime footprint, and giving us at least some parts of what
- * a "gcc --combine ... part1.c part2.c part3.c ... " build would.
- */
-#include "usbstring.c"
-#include "config.c"
-#include "epautoconf.c"
-#include "composite.c"
-
-#include "f_diag.c"
-#include "f_qdss.c"
-#include "f_rmnet_smd.c"
-#include "f_rmnet_sdio.c"
-#include "f_rmnet_smd_sdio.c"
-#include "f_rmnet.c"
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-#include "f_gps.c"
-#endif
-#ifdef CONFIG_SND_PCM
-#include "f_audio_source.c"
-#endif
-#include "f_fs.c"
-#include "f_mass_storage.c"
-#include "u_serial.c"
-#include "u_sdio.c"
-#include "u_smd.c"
-#include "u_bam.c"
-#include "u_rmnet_ctrl_smd.c"
-#include "u_rmnet_ctrl_qti.c"
-#include "u_ctrl_hsic.c"
-#include "u_data_hsic.c"
-#include "u_ctrl_hsuart.c"
-#include "u_data_hsuart.c"
-#ifdef CONFIG_USB_DUN_SUPPORT
-#include "serial_acm.c"
-#endif
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-#include "f_serial.c"
-#endif
-#include "f_acm.c"
-#include "f_adb.c"
-#include "f_ccid.c"
-#ifdef CONFIG_SND_RAWMIDI
-#include "f_midi.c"
-#endif
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_MTP
-#include "f_mtp_samsung.c"
-#else
-#include "f_mtp.c"
-#endif
-#include "f_accessory.c"
-#define USB_ETH_RNDIS y
-#include "f_rndis.c"
-#include "rndis.c"
-#include "f_qc_ecm.c"
-#include "f_mbim.c"
-#include "u_bam_data.c"
-#include "f_ecm.c"
-#include "f_qc_rndis.c"
-#include "u_ether.c"
-#include "u_qc_ether.c"
-#ifdef CONFIG_TARGET_CORE
-#include "f_tcm.c"
-#endif
-#ifdef CONFIG_SND_PCM
-#include "u_uac1.c"
-#include "f_uac1.c"
-#endif
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-#include "f_ncm.c"
-#endif
-#ifdef CONFIG_USB_LOCK_SUPPORT_FOR_MDM
-#include <linux/power_supply.h>
-#endif
-
-MODULE_AUTHOR("Mike Lockwood");
-MODULE_DESCRIPTION("Android Composite USB Driver");
-MODULE_LICENSE("GPL");
-MODULE_VERSION("1.0");
-
-static const char longname[] = "Gadget Android";
-
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-static int composite_string_index;
-#endif
-/* Default vendor and product IDs, overridden by userspace */
-#define VENDOR_ID		0x18D1
-#define PRODUCT_ID		0x0001
-
-#define ANDROID_DEVICE_NODE_NAME_LENGTH 11
-
-/* f_midi configuration */
-#ifdef CONFIG_SND_RAWMIDI
-#define SNDRV_DEFAULT_IDX1	(-1)
-#define SNDRV_DEFAULT_STR1	NULL
-#define MIDI_INPUT_PORTS    1
-#define MIDI_OUTPUT_PORTS   1
-#define MIDI_BUFFER_SIZE    1024
-#define MIDI_QUEUE_LENGTH   32
-#endif
-
-struct android_usb_function {
-	char *name;
-	void *config;
-
-	struct device *dev;
-	char *dev_name;
-	struct device_attribute **attributes;
-
-	struct android_dev *android_dev;
-
-	/* Optional: initialization during gadget bind */
-	int (*init)(struct android_usb_function *, struct usb_composite_dev *);
-	/* Optional: cleanup during gadget unbind */
-	void (*cleanup)(struct android_usb_function *);
-	/* Optional: called when the function is added the list of
-	 *		enabled functions */
-	void (*enable)(struct android_usb_function *);
-	/* Optional: called when it is removed */
-	void (*disable)(struct android_usb_function *);
-
-	int (*bind_config)(struct android_usb_function *,
-			   struct usb_configuration *);
-
-	/* Optional: called when the configuration is removed */
-	void (*unbind_config)(struct android_usb_function *,
-			      struct usb_configuration *);
-	/* Optional: handle ctrl requests before the device is configured */
-	int (*ctrlrequest)(struct android_usb_function *,
-					struct usb_composite_dev *,
-					const struct usb_ctrlrequest *);
-};
-#if defined(CONFIG_SEC_H_PROJECT) || defined(CONFIG_SEC_F_PROJECT) || defined(CONFIG_SEC_K_PROJECT)
-u8    usb30en;
-extern int sec_set_speedlimit(struct usb_gadget *gadget,
-			enum usb_device_speed speed);
-extern int sec_get_ss_host_available(struct usb_gadget *gadget);
-#endif
-
-struct android_usb_function_holder {
-
-	struct android_usb_function *f;
-
-	/* for android_conf.enabled_functions */
-	struct list_head enabled_list;
-};
-
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_SIDESYNC
-#include "f_conn_gadget.c"
-#endif
-
-/**
-* struct android_dev - represents android USB gadget device
-* @name: device name.
-* @functions: an array of all the supported USB function
-*    drivers that this gadget support but not necessarily
-*    added to one of the gadget configurations.
-* @cdev: The internal composite device. Android gadget device
-*    is a composite device, such that it can support configurations
-*    with more than one function driver.
-* @dev: The kernel device that represents this android device.
-* @enabled: True if the android gadget is enabled, means all
-*    the configurations were set and all function drivers were
-*    bind and ready for USB enumeration.
-* @disable_depth: Number of times the device was disabled, after
-*    symmetrical number of enables the device willl be enabled.
-*    Used for controlling ADB userspace disable/enable requests.
-* @mutex: Internal mutex for protecting device member fields.
-* @pdata: Platform data fetched from the kernel device platfrom data.
-* @connected: True if got connect notification from the gadget UDC.
-*    False if got disconnect notification from the gadget UDC.
-* @sw_connected: Equal to 'connected' only after the connect
-*    notification was handled by the android gadget work function.
-* @suspended: True if got suspend notification from the gadget UDC.
-*    False if got resume notification from the gadget UDC.
-* @sw_suspended: Equal to 'suspended' only after the susped
-*    notification was handled by the android gadget work function.
-* @pm_qos: An attribute string that can be set by user space in order to
-*    determine pm_qos policy. Set to 'high' for always demand pm_qos
-*    when USB bus is connected and resumed. Set to 'low' for disable
-*    any setting of pm_qos by this driver. Default = 'high'.
-* @work: workqueue used for handling notifications from the gadget UDC.
-* @configs: List of configurations currently configured into the device.
-*    The android gadget supports more than one configuration. The host
-*    may choose one configuration from the suggested.
-* @configs_num: Number of configurations currently configured and existing
-*    in the configs list.
-* @list_item: This driver supports more than one android gadget device (for
-*    example in order to support multiple USB cores), therefore this is
-*    a item in a linked list of android devices.
-*/
-struct android_dev {
-	const char *name;
-	struct android_usb_function **functions;
-	struct usb_composite_dev *cdev;
-	struct device *dev;
-
-	bool enabled;
-	int disable_depth;
-	struct mutex mutex;
-	struct android_usb_platform_data *pdata;
-
-	bool connected;
-	bool sw_connected;
-	bool suspended;
-	bool sw_suspended;
-	char pm_qos[5];
-	struct pm_qos_request pm_qos_req_dma;
-	struct work_struct work;
-	char ffs_aliases[256];
-#if defined(CONFIG_SEC_H_PROJECT)
-	struct delayed_work usb_connection_work;
-	int speaker_check_count;
-#endif
-#ifdef CONFIG_USB_LOCK_SUPPORT_FOR_MDM
-	int usb_lock;
-#endif
-	/* A list of struct android_configuration */
-	struct list_head configs;
-	int configs_num;
-
-	/* A list node inside the android_dev_list */
-	struct list_head list_item;
-};
-
-struct android_configuration {
-	struct usb_configuration usb_config;
-
-	/* A list of the functions supported by this config */
-	struct list_head enabled_functions;
-
-	/* A list node inside the struct android_dev.configs list */
-	struct list_head list_item;
-};
-
-struct dload_struct __iomem *diag_dload;
-static struct class *android_class;
-static struct list_head android_dev_list;
-static int android_dev_count;
-static int android_bind_config(struct usb_configuration *c);
-static void android_unbind_config(struct usb_configuration *c);
-static struct android_dev *cdev_to_android_dev(struct usb_composite_dev *cdev);
-static struct android_configuration *alloc_android_config
-						(struct android_dev *dev);
-static void free_android_config(struct android_dev *dev,
-				struct android_configuration *conf);
-static int usb_diag_update_pid_and_serial_num(uint32_t pid, const char *snum);
-
-/* string IDs are assigned dynamically */
-#define STRING_MANUFACTURER_IDX		0
-#define STRING_PRODUCT_IDX		1
-#define STRING_SERIAL_IDX		2
-
-static char manufacturer_string[256];
-static char product_string[256];
-static char serial_string[256];
-
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-#include "u_ncm.c"
-#endif
-
-/* String Table */
-static struct usb_string strings_dev[] = {
-	[STRING_MANUFACTURER_IDX].s = manufacturer_string,
-	[STRING_PRODUCT_IDX].s = product_string,
-	[STRING_SERIAL_IDX].s = serial_string,
-	{  }			/* end of list */
-};
-
-static struct usb_gadget_strings stringtab_dev = {
-	.language	= 0x0409,	/* en-us */
-	.strings	= strings_dev,
-};
-
-static struct usb_gadget_strings *dev_strings[] = {
-	&stringtab_dev,
-	NULL,
-};
-
-static struct usb_device_descriptor device_desc = {
-	.bLength              = sizeof(device_desc),
-	.bDescriptorType      = USB_DT_DEVICE,
-	.bcdUSB               = __constant_cpu_to_le16(0x0200),
-	.bDeviceClass         = USB_CLASS_PER_INTERFACE,
-	.idVendor             = __constant_cpu_to_le16(VENDOR_ID),
-	.idProduct            = __constant_cpu_to_le16(PRODUCT_ID),
-	.bcdDevice            = __constant_cpu_to_le16(0xffff),
-	.bNumConfigurations   = 1,
-};
-
-static struct usb_otg_descriptor otg_descriptor = {
-	.bLength =		sizeof otg_descriptor,
-	.bDescriptorType =	USB_DT_OTG,
-	.bmAttributes =		USB_OTG_SRP | USB_OTG_HNP,
-	.bcdOTG               = __constant_cpu_to_le16(0x0200),
-};
-
-static const struct usb_descriptor_header *otg_desc[] = {
-	(struct usb_descriptor_header *) &otg_descriptor,
-	NULL,
-};
-
-enum android_device_state {
-	USB_DISCONNECTED,
-	USB_CONNECTED,
-	USB_CONFIGURED,
-	USB_SUSPENDED,
-	USB_RESUMED
-};
-
-static void android_pm_qos_update_latency(struct android_dev *dev, int vote)
-{
-	struct android_usb_platform_data *pdata = dev->pdata;
-	u32 swfi_latency = 0;
-	static int last_vote = -1;
-
-	if (!pdata || vote == last_vote
-		|| !pdata->swfi_latency)
-		return;
-
-	swfi_latency = pdata->swfi_latency + 1;
-	if (vote)
-		pm_qos_update_request(&dev->pm_qos_req_dma,
-				swfi_latency);
-	else
-		pm_qos_update_request(&dev->pm_qos_req_dma,
-				PM_QOS_DEFAULT_VALUE);
-	last_vote = vote;
-}
-
-static void android_work(struct work_struct *data)
-{
-	struct android_dev *dev = container_of(data, struct android_dev, work);
-	struct usb_composite_dev *cdev = dev->cdev;
-	char *disconnected[2] = { "USB_STATE=DISCONNECTED", NULL };
-	char *connected[2]    = { "USB_STATE=CONNECTED", NULL };
-	char *configured[2]   = { "USB_STATE=CONFIGURED", NULL };
-	char *suspended[2]   = { "USB_STATE=SUSPENDED", NULL };
-	char *resumed[2]   = { "USB_STATE=RESUMED", NULL };
-#if defined(CONFIG_SEC_H_PROJECT)
-	char *cableconnect[2] = { "USB_CONNECTION=CONNECTED", NULL };
-#endif
-	char **uevent_envp = NULL;
-	static enum android_device_state last_uevent, next_state;
-	unsigned long flags;
-	int pm_qos_vote = -1;
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	if (dev->suspended != dev->sw_suspended && cdev->config) {
-		if (strncmp(dev->pm_qos, "low", 3))
-			pm_qos_vote = dev->suspended ? 0 : 1;
-		next_state = dev->suspended ? USB_SUSPENDED : USB_RESUMED;
-		uevent_envp = dev->suspended ? suspended : resumed;
-	} else if (cdev->config) {
-		uevent_envp = configured;
-		next_state = USB_CONFIGURED;
-	} else if (dev->connected != dev->sw_connected) {
-		uevent_envp = dev->connected ? connected : disconnected;
-		next_state = dev->connected ? USB_CONNECTED : USB_DISCONNECTED;
-		if (dev->connected && strncmp(dev->pm_qos, "low", 3))
-			pm_qos_vote = 1;
-		else if (!dev->connected || !strncmp(dev->pm_qos, "low", 3))
-			pm_qos_vote = 0;
-	}
-	dev->sw_connected = dev->connected;
-	dev->sw_suspended = dev->suspended;
-	spin_unlock_irqrestore(&cdev->lock, flags);
-
-	if (pm_qos_vote != -1)
-		android_pm_qos_update_latency(dev, pm_qos_vote);
-
-	if (uevent_envp) {
-		/*
-		 * Some userspace modules, e.g. MTP, work correctly only if
-		 * CONFIGURED uevent is preceded by DISCONNECT uevent.
-		 * Check if we missed sending out a DISCONNECT uevent. This can
-		 * happen if host PC resets and configures device really quick.
-		 */
-		if (((uevent_envp == connected) &&
-		      (last_uevent != USB_DISCONNECTED)) ||
-		    ((uevent_envp == configured) &&
-		      (last_uevent == USB_CONFIGURED))) {
-			pr_info("%s: sent missed DISCONNECT event\n", __func__);
-			kobject_uevent_env(&dev->dev->kobj, KOBJ_CHANGE,
-								disconnected);
-//			msleep(20);
-		}
-		/*
-		 * Before sending out CONFIGURED uevent give function drivers
-		 * a chance to wakeup userspace threads and notify disconnect
-		 */
-//		if (uevent_envp == configured)
-//			msleep(50);
-
-		/* Do not notify on suspend / resume */
-		if (next_state != USB_SUSPENDED && next_state != USB_RESUMED) {
-			kobject_uevent_env(&dev->dev->kobj, KOBJ_CHANGE,
-					   uevent_envp);
-#if defined(CONFIG_SEC_H_PROJECT)
-		if (uevent_envp == connected)
-			kobject_uevent_env(&dev->dev->kobj, KOBJ_CHANGE, cableconnect);
-#endif
-			last_uevent = next_state;
-		}
-		pr_info("%s: sent uevent %s\n", __func__, uevent_envp[0]);
-	} else {
-		pr_info("%s: did not send uevent (%d %d %pK)\n", __func__,
-			 dev->connected, dev->sw_connected, cdev->config);
-	}
-}
-
-#if defined(CONFIG_SEC_H_PROJECT)
-extern int speaker_status;
-
-void usb_gadget_connect_work(struct work_struct *work)
-{
-	struct android_dev *dev =
-	    container_of(work, struct android_dev, usb_connection_work.work);
-	struct usb_composite_dev *cdev = dev->cdev;
-
-	pr_info("%s: speaker_status: %d, speaker_check_count %d\n",
-		__func__, speaker_status, dev->speaker_check_count);
-
-	/* Max 3 sec */
-	if (speaker_status > 0) {
-		dev->speaker_check_count++;
-		if (dev->speaker_check_count < 60) {
-			schedule_delayed_work(&dev->usb_connection_work, msecs_to_jiffies(50));
-			return;
-		}
-	}
-	usb_gadget_connect(cdev->gadget);
-}
-
-void schedule_usb_gadget_connect_work(struct android_dev *dev)
-{
-	char *ready[2] = { "USB_CONNECTION=READY", NULL };
-
-	if (dev == NULL) return;
-
-	pr_info("%s\n",__func__);
-
-	if (work_busy(&dev->usb_connection_work.work)) {
-		cancel_delayed_work(&dev->usb_connection_work);
-		pr_info("%s  canceling the work\n",__func__);
-	}
-
-	kobject_uevent_env(&dev->dev->kobj, KOBJ_CHANGE, ready);
-	dev->speaker_check_count = 0;
-	schedule_delayed_work(&dev->usb_connection_work, msecs_to_jiffies(1));
-}
-#endif
-
-static int android_enable(struct android_dev *dev)
-{
-	struct usb_composite_dev *cdev = dev->cdev;
-	struct android_configuration *conf;
-	int err = 0;
-
-	if (WARN_ON(!dev->disable_depth))
-		return err;
-
-	if (--dev->disable_depth == 0) {
-
-		list_for_each_entry(conf, &dev->configs, list_item) {
-			err = usb_add_config(cdev, &conf->usb_config,
-						android_bind_config);
-			if (err < 0) {
-				pr_err("%s: usb_add_config failed : err: %d\n",
-						__func__, err);
-				return err;
-			}
-		}
-#if defined(CONFIG_SEC_H_PROJECT)
-		schedule_usb_gadget_connect_work(dev);
-#else
-		usb_gadget_connect(cdev->gadget);
-#endif
-	}
-
-	return err;
-}
-
-static void android_disable(struct android_dev *dev)
-{
-	struct usb_composite_dev *cdev = dev->cdev;
-	struct android_configuration *conf;
-
-	if (dev->disable_depth++ == 0) {
-		usb_gadget_disconnect(cdev->gadget);
-		/* Cancel pending control requests */
-		usb_ep_dequeue(cdev->gadget->ep0, cdev->req);
-
-		list_for_each_entry(conf, &dev->configs, list_item)
-			usb_remove_config(cdev, &conf->usb_config);
-	}
-}
-
-/*-------------------------------------------------------------------------*/
-/* Supported functions initialization */
-
-struct functionfs_config {
-	bool opened;
-	bool enabled;
-	struct ffs_data *data;
-	struct android_dev *dev;
-};
-
-static int ffs_function_init(struct android_usb_function *f,
-			     struct usb_composite_dev *cdev)
-{
-	f->config = kzalloc(sizeof(struct functionfs_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-
-	return functionfs_init();
-}
-
-static void ffs_function_cleanup(struct android_usb_function *f)
-{
-	functionfs_cleanup();
-	kfree(f->config);
-}
-
-static void ffs_function_enable(struct android_usb_function *f)
-{
-	struct android_dev *dev = f->android_dev;
-	struct functionfs_config *config = f->config;
-
-	config->enabled = true;
-
-	/* Disable the gadget until the function is ready */
-	if (!config->opened)
-		android_disable(dev);
-}
-
-static void ffs_function_disable(struct android_usb_function *f)
-{
-	struct android_dev *dev = f->android_dev;
-	struct functionfs_config *config = f->config;
-
-	config->enabled = false;
-
-	/* Balance the disable that was called in closed_callback */
-	if (!config->opened)
-		android_enable(dev);
-}
-
-static int ffs_function_bind_config(struct android_usb_function *f,
-				    struct usb_configuration *c)
-{
-	struct functionfs_config *config = f->config;
-	return functionfs_bind_config(c->cdev, c, config->data);
-}
-
-static ssize_t
-ffs_aliases_show(struct device *pdev, struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev;
-	int ret;
-
-	dev = list_first_entry(&android_dev_list, struct android_dev,
-					list_item);
-
-	mutex_lock(&dev->mutex);
-	ret = sprintf(buf, "%s\n", dev->ffs_aliases);
-	mutex_unlock(&dev->mutex);
-
-	return ret;
-}
-
-static ssize_t
-ffs_aliases_store(struct device *pdev, struct device_attribute *attr,
-					const char *buf, size_t size)
-{
-	struct android_dev *dev;
-	char buff[256];
-
-	dev = list_first_entry(&android_dev_list, struct android_dev,
-					list_item);
-
-	mutex_lock(&dev->mutex);
-
-	if (dev->enabled) {
-		mutex_unlock(&dev->mutex);
-		return -EBUSY;
-	}
-
-	strlcpy(buff, buf, sizeof(buff));
-	strlcpy(dev->ffs_aliases, strim(buff), sizeof(dev->ffs_aliases));
-
-	mutex_unlock(&dev->mutex);
-
-	return size;
-}
-
-static DEVICE_ATTR(aliases, S_IRUGO | S_IWUSR, ffs_aliases_show,
-					       ffs_aliases_store);
-static struct device_attribute *ffs_function_attributes[] = {
-	&dev_attr_aliases,
-	NULL
-};
-
-static struct android_usb_function ffs_function = {
-	.name		= "ffs",
-	.init		= ffs_function_init,
-	.enable		= ffs_function_enable,
-	.disable	= ffs_function_disable,
-	.cleanup	= ffs_function_cleanup,
-	.bind_config	= ffs_function_bind_config,
-	.attributes	= ffs_function_attributes,
-};
-
-static int functionfs_ready_callback(struct ffs_data *ffs)
-{
-	struct android_dev *dev = ffs_function.android_dev;
-	struct functionfs_config *config = ffs_function.config;
-	int ret = 0;
-
-	/* dev is null in case ADB is not in the composition */
-	if (dev) {
-		mutex_lock(&dev->mutex);
-		ret = functionfs_bind(ffs, dev->cdev);
-		if (ret) {
-			mutex_unlock(&dev->mutex);
-			return ret;
-		}
-	} else {
-		/* android ffs_func requires daemon to start only after enable*/
-		pr_debug("start adbd only in ADB composition\n");
-		return -ENODEV;
-	}
-
-	config->data = ffs;
-	config->opened = true;
-	/* Save dev in case the adb function will get disabled */
-	config->dev = dev;
-
-	if (config->enabled)
-		android_enable(dev);
-
-	mutex_unlock(&dev->mutex);
-
-	return 0;
-
-}
-
-static void functionfs_closed_callback(struct ffs_data *ffs)
-{
-	struct android_dev *dev = ffs_function.android_dev;
-	struct functionfs_config *config = ffs_function.config;
-
-	/*
-	 * In case new composition is without ADB or ADB got disabled by the
-	 * time ffs_daemon was stopped then use saved one
-	 */
-	if (!dev)
-		dev = config->dev;
-
-	/* fatal-error: It should never happen */
-	if (!dev)
-		pr_err("adb_closed_callback: config->dev is NULL");
-
-	if (dev)
-		mutex_lock(&dev->mutex);
-
-	if (config->enabled && dev)
-		android_disable(dev);
-
-	config->dev = NULL;
-
-	config->opened = false;
-	config->data = NULL;
-
-	functionfs_unbind(ffs);
-
-	if (dev)
-		mutex_unlock(&dev->mutex);
-}
-
-static int functionfs_check_dev_callback(const char *dev_name)
-{
-	return 0;
-}
-
-
-struct adb_data {
-	bool opened;
-	bool enabled;
-	struct android_dev *dev;
-};
-
-static int
-adb_function_init(struct android_usb_function *f,
-		struct usb_composite_dev *cdev)
-{
-	f->config = kzalloc(sizeof(struct adb_data), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-
-	return adb_setup();
-}
-
-static void adb_function_cleanup(struct android_usb_function *f)
-{
-	adb_cleanup();
-	kfree(f->config);
-}
-
-static int
-adb_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	return adb_bind_config(c);
-}
-
-static void adb_android_function_enable(struct android_usb_function *f)
-{
-	struct android_dev *dev = f->android_dev;
-	struct adb_data *data = f->config;
-
-	data->enabled = true;
-
-
-	/* Disable the gadget until adbd is ready */
-	if (!data->opened)
-		android_disable(dev);
-}
-
-static void adb_android_function_disable(struct android_usb_function *f)
-{
-	struct android_dev *dev = f->android_dev;
-	struct adb_data *data = f->config;
-
-	data->enabled = false;
-
-	/* Balance the disable that was called in closed_callback */
-	if (!data->opened)
-		android_enable(dev);
-}
-
-static struct android_usb_function adb_function = {
-	.name		= "adb",
-	.enable		= adb_android_function_enable,
-	.disable	= adb_android_function_disable,
-	.init		= adb_function_init,
-	.cleanup	= adb_function_cleanup,
-	.bind_config	= adb_function_bind_config,
-};
-
-static void adb_ready_callback(void)
-{
-	struct android_dev *dev = adb_function.android_dev;
-	struct adb_data *data = adb_function.config;
-
-	/* dev is null in case ADB is not in the composition */
-	if (dev)
-		mutex_lock(&dev->mutex);
-
-	/* Save dev in case the adb function will get disabled */
-	data->dev = dev;
-	data->opened = true;
-
-	if (data->enabled && dev)
-		android_enable(dev);
-
-	if (dev)
-		mutex_unlock(&dev->mutex);
-}
-
-static void adb_closed_callback(void)
-{
-	struct adb_data *data = adb_function.config;
-	struct android_dev *dev = adb_function.android_dev;
-
-	/* In case new composition is without ADB, use saved one */
-	if (!dev)
-		dev = data->dev;
-
-	if (!dev)
-		pr_err("adb_closed_callback: data->dev is NULL");
-
-	if (dev)
-		mutex_lock(&dev->mutex);
-
-	data->opened = false;
-
-	if (data->enabled && dev)
-		android_disable(dev);
-
-	data->dev = NULL;
-
-	if (dev)
-		mutex_unlock(&dev->mutex);
-}
-
-#ifdef CONFIG_SND_RAWMIDI
-static int midi_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-	struct midi_alsa_config *config;
-	config = kzalloc(sizeof(struct midi_alsa_config), GFP_KERNEL);
-	f->config = config;
-	if (!config)
-		return -ENOMEM;
-	config->card = -1;
-	config->device = -1;
-	return 0;
-}
-
-static void midi_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-}
-
-static int midi_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	struct midi_alsa_config *config = f->config;
-
-	return  f_midi_bind_config(c, SNDRV_DEFAULT_IDX1, SNDRV_DEFAULT_STR1,
-			MIDI_INPUT_PORTS, MIDI_OUTPUT_PORTS, MIDI_BUFFER_SIZE,
-			MIDI_QUEUE_LENGTH, config);
-}
-
-static ssize_t midi_alsa_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct midi_alsa_config *config = f->config;
-
-	/* print ALSA card and device numbers */
-	return sprintf(buf, "%d %d\n", config->card, config->device);
-}
-
-static DEVICE_ATTR(alsa, S_IRUGO, midi_alsa_show, NULL);
-
-static struct device_attribute *midi_function_attributes[] = {
-	&dev_attr_alsa,
-	NULL
-};
-
-static struct android_usb_function midi_function = {
-	.name		= "midi",
-	.init		= midi_function_init,
-	.cleanup	= midi_function_cleanup,
-	.bind_config	= midi_function_bind_config,
-	.attributes	= midi_function_attributes,
-};
-#endif
-/*-------------------------------------------------------------------------*/
-/* Supported functions initialization */
-
-/* ACM */
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-#define MAX_ACM_INSTANCES 4
-struct acm_function_config {
-	int instances;
-};
-
-static int acm_function_init(struct android_usb_function *f,
-		struct usb_composite_dev *cdev)
-{
-	int ret;
-
-	f->config = kzalloc(sizeof(struct acm_function_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-
-	ret = gserial_setup(cdev->gadget, MAX_ACM_INSTANCES);
-
-	return ret;
-}
-
-static void acm_function_cleanup(struct android_usb_function *f)
-{
-	gserial_cleanup();
-	kfree(f->config);
-	f->config = NULL;
-}
-
-static int acm_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	int i;
-	int ret = 0;
-	struct acm_function_config *config = f->config;
-
-	for (i = 0; i < config->instances; i++) {
-		ret = acm_bind_config(c, i);
-		if (ret) {
-			pr_err("Could not bind acm%u config\n", i);
-			break;
-		}
-	}
-	return ret;
-}
-
-static ssize_t acm_instances_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct acm_function_config *config = f->config;
-	return sprintf(buf, "%d\n", config->instances);
-}
-
-static ssize_t acm_instances_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct acm_function_config *config = f->config;
-	int value;
-
-	sscanf(buf, "%d", &value);
-	if (value > MAX_ACM_INSTANCES)
-		value = MAX_ACM_INSTANCES;
-	config->instances = value;
-	return size;
-}
-
-static DEVICE_ATTR(instances, S_IRUGO | S_IWUSR,
-		acm_instances_show, acm_instances_store);
-static struct device_attribute *acm_function_attributes[]
-		= { &dev_attr_instances, NULL };
-
-static struct android_usb_function acm_function = {
-	.name		= "acm",
-	.init		= acm_function_init,
-	.cleanup	= acm_function_cleanup,
-	.bind_config	= acm_function_bind_config,
-	.attributes	= acm_function_attributes,
-};
-#else
-static char acm_transports[32];	/*enabled ACM ports - "tty[,sdio]"*/
-static ssize_t acm_transports_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(acm_transports, buff, sizeof(acm_transports));
-
-	return size;
-}
-
-static DEVICE_ATTR(acm_transports, S_IWUSR, NULL, acm_transports_store);
-static struct device_attribute *acm_function_attributes[] = {
-		&dev_attr_acm_transports,
-		NULL
-};
-
-static void acm_function_cleanup(struct android_usb_function *f)
-{
-	gserial_cleanup();
-}
-
-static int
-acm_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	char *name;
-	char buf[32], *b;
-	int err = -1, i;
-	static int acm_initialized, ports;
-
-	if (acm_initialized)
-		goto bind_config;
-
-	acm_initialized = 1;
-	strlcpy(buf, acm_transports, sizeof(buf));
-	b = strim(buf);
-
-	while (b) {
-		name = strsep(&b, ",");
-
-		if (name) {
-			err = acm_init_port(ports, name);
-			if (err) {
-				pr_err("acm: Cannot open port '%s'", name);
-				goto out;
-			}
-			ports++;
-		}
-	}
-	err = acm_port_setup(c);
-	if (err) {
-		pr_err("acm: Cannot setup transports");
-		goto out;
-	}
-
-bind_config:
-	for (i = 0; i < ports; i++) {
-		err = acm_bind_config(c, i);
-		if (err) {
-			pr_err("acm: bind_config failed for port %d", i);
-			goto out;
-		}
-	}
-
-out:
-	return err;
-}
-
-static struct android_usb_function acm_function = {
-	.name		= "acm",
-	.cleanup	= acm_function_cleanup,
-	.bind_config	= acm_function_bind_config,
-	.attributes	= acm_function_attributes,
-};
-#endif
-
-/* RMNET_SMD */
-static int rmnet_smd_function_bind_config(struct android_usb_function *f,
-					  struct usb_configuration *c)
-{
-	return rmnet_smd_bind_config(c);
-}
-
-static struct android_usb_function rmnet_smd_function = {
-	.name		= "rmnet_smd",
-	.bind_config	= rmnet_smd_function_bind_config,
-};
-
-/* RMNET_SDIO */
-static int rmnet_sdio_function_bind_config(struct android_usb_function *f,
-					  struct usb_configuration *c)
-{
-	return rmnet_sdio_function_add(c);
-}
-
-static struct android_usb_function rmnet_sdio_function = {
-	.name		= "rmnet_sdio",
-	.bind_config	= rmnet_sdio_function_bind_config,
-};
-
-/* RMNET_SMD_SDIO */
-static int rmnet_smd_sdio_function_init(struct android_usb_function *f,
-				 struct usb_composite_dev *cdev)
-{
-	return rmnet_smd_sdio_init();
-}
-
-static void rmnet_smd_sdio_function_cleanup(struct android_usb_function *f)
-{
-	rmnet_smd_sdio_cleanup();
-}
-
-static int rmnet_smd_sdio_bind_config(struct android_usb_function *f,
-					  struct usb_configuration *c)
-{
-	return rmnet_smd_sdio_function_add(c);
-}
-
-static struct device_attribute *rmnet_smd_sdio_attributes[] = {
-					&dev_attr_transport, NULL };
-
-static struct android_usb_function rmnet_smd_sdio_function = {
-	.name		= "rmnet_smd_sdio",
-	.init		= rmnet_smd_sdio_function_init,
-	.cleanup	= rmnet_smd_sdio_function_cleanup,
-	.bind_config	= rmnet_smd_sdio_bind_config,
-	.attributes	= rmnet_smd_sdio_attributes,
-};
-
-/*rmnet transport string format(per port):"ctrl0,data0,ctrl1,data1..." */
-#define MAX_XPORT_STR_LEN 50
-static char rmnet_transports[MAX_XPORT_STR_LEN];
-
-/*rmnet transport name string - "rmnet_hsic[,rmnet_hsusb]" */
-static char rmnet_xport_names[MAX_XPORT_STR_LEN];
-
-static void rmnet_function_cleanup(struct android_usb_function *f)
-{
-	frmnet_cleanup();
-}
-
-static int rmnet_function_bind_config(struct android_usb_function *f,
-					 struct usb_configuration *c)
-{
-	int i;
-	int err = 0;
-	char *ctrl_name;
-	char *data_name;
-	char *tname = NULL;
-	char buf[MAX_XPORT_STR_LEN], *b;
-	char xport_name_buf[MAX_XPORT_STR_LEN], *tb;
-	static int rmnet_initialized, ports;
-
-	if (!rmnet_initialized) {
-		rmnet_initialized = 1;
-		strlcpy(buf, rmnet_transports, sizeof(buf));
-		b = strim(buf);
-
-		strlcpy(xport_name_buf, rmnet_xport_names,
-				sizeof(xport_name_buf));
-		tb = strim(xport_name_buf);
-
-		while (b) {
-			ctrl_name = strsep(&b, ",");
-			data_name = strsep(&b, ",");
-			if (ctrl_name && data_name) {
-				if (tb)
-					tname = strsep(&tb, ",");
-				err = frmnet_init_port(ctrl_name, data_name,
-						tname);
-				if (err) {
-					pr_err("rmnet: Cannot open ctrl port:"
-						"'%s' data port:'%s'\n",
-						ctrl_name, data_name);
-					goto out;
-				}
-				ports++;
-			}
-		}
-
-		err = rmnet_gport_setup();
-		if (err) {
-			pr_err("rmnet: Cannot setup transports");
-			goto out;
-		}
-	}
-
-	for (i = 0; i < ports; i++) {
-		err = frmnet_bind_config(c, i);
-		if (err) {
-			pr_err("Could not bind rmnet%u config\n", i);
-			break;
-		}
-	}
-out:
-	return err;
-}
-
-static ssize_t rmnet_transports_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	return snprintf(buf, PAGE_SIZE, "%s\n", rmnet_transports);
-}
-
-static ssize_t rmnet_transports_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(rmnet_transports, buff, sizeof(rmnet_transports));
-
-	return size;
-}
-
-static ssize_t rmnet_xport_names_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	return snprintf(buf, PAGE_SIZE, "%s\n", rmnet_xport_names);
-}
-
-static ssize_t rmnet_xport_names_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(rmnet_xport_names, buff, sizeof(rmnet_xport_names));
-
-	return size;
-}
-
-static struct device_attribute dev_attr_rmnet_transports =
-					__ATTR(transports, S_IRUGO | S_IWUSR,
-						rmnet_transports_show,
-						rmnet_transports_store);
-
-static struct device_attribute dev_attr_rmnet_xport_names =
-				__ATTR(transport_names, S_IRUGO | S_IWUSR,
-				rmnet_xport_names_show,
-				rmnet_xport_names_store);
-
-static struct device_attribute *rmnet_function_attributes[] = {
-					&dev_attr_rmnet_transports,
-					&dev_attr_rmnet_xport_names,
-					NULL };
-
-static struct android_usb_function rmnet_function = {
-	.name		= "rmnet",
-	.cleanup	= rmnet_function_cleanup,
-	.bind_config	= rmnet_function_bind_config,
-	.attributes	= rmnet_function_attributes,
-};
-
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-static void gps_function_cleanup(struct android_usb_function *f)
-{
-	gps_cleanup();
-}
-
-static int gps_function_bind_config(struct android_usb_function *f,
-					 struct usb_configuration *c)
-{
-	int err;
-	static int gps_initialized;
-
-	if (!gps_initialized) {
-		gps_initialized = 1;
-		err = gps_init_port();
-		if (err) {
-			pr_err("gps: Cannot init gps port");
-			return err;
-		}
-	}
-
-	err = gps_gport_setup();
-	if (err) {
-		pr_err("gps: Cannot setup transports");
-		return err;
-	}
-	err = gps_bind_config(c);
-	if (err) {
-		pr_err("Could not bind gps config\n");
-		return err;
-	}
-
-	return 0;
-}
-
-static struct android_usb_function gps_function = {
-	.name		= "gps",
-	.cleanup	= gps_function_cleanup,
-	.bind_config	= gps_function_bind_config,
-};
-#endif
-
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-/* ncm */
-struct ncm_function_config {
-	u8      ethaddr[ETH_ALEN];
-};
-static int
-ncm_function_init(struct android_usb_function *f, struct usb_composite_dev *c)
-{
-	f->config = kzalloc(sizeof(struct ncm_function_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-
-	return 0;
-}
-
-static void ncm_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-	f->config = NULL;
-}
-
-static int
-ncm_function_bind_config(struct android_usb_function *f,
-				struct usb_configuration *c)
-{
-	struct ncm_function_config *ncm = f->config;
-	int ret;
-
-	if (!ncm) {
-		pr_err("%s: ncm config is null\n", __func__);
-		return -EINVAL;
-	}
-
-	pr_info("%s MAC: %02X:%02X:%02X:%02X:%02X:%02X\n", __func__,
-		ncm->ethaddr[0], ncm->ethaddr[1], ncm->ethaddr[2],
-		ncm->ethaddr[3], ncm->ethaddr[4], ncm->ethaddr[5]);
-
-	ret = gether_setup_name(c->cdev->gadget, ncm->ethaddr, "ncm");
-	if (ret) {
-		pr_err("%s: gether setup failed err:%d\n", __func__, ret);
-		return ret;
-	}
-
-	ret = ncm_bind_config(c, ncm->ethaddr);
-	if (ret) {
-		pr_err("%s: ncm bind config failed err:%d", __func__, ret);
-		gether_cleanup();
-		return ret;
-	}
-
-	return ret;
-}
-
-static void ncm_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	gether_cleanup();
-}
-
-static ssize_t ncm_ethaddr_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct ncm_function_config *ncm = f->config;
-	return snprintf(buf, PAGE_SIZE, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		ncm->ethaddr[0], ncm->ethaddr[1], ncm->ethaddr[2],
-		ncm->ethaddr[3], ncm->ethaddr[4], ncm->ethaddr[5]);
-}
-
-static ssize_t ncm_ethaddr_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct ncm_function_config *ncm = f->config;
-
-	if (sscanf(buf, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		    (int *)&ncm->ethaddr[0], (int *)&ncm->ethaddr[1],
-		    (int *)&ncm->ethaddr[2], (int *)&ncm->ethaddr[3],
-		    (int *)&ncm->ethaddr[4], (int *)&ncm->ethaddr[5]) == 6)
-		return size;
-	return -EINVAL;
-}
-
-static DEVICE_ATTR(ncm_ethaddr, S_IRUGO | S_IWUSR, ncm_ethaddr_show,
-					       ncm_ethaddr_store);
-static struct device_attribute *ncm_function_attributes[] = {
-	&dev_attr_ncm_ethaddr,
-	NULL
-};
-
-static struct android_usb_function ncm_function = {
-	.name		= "ncm",
-	.init		= ncm_function_init,
-	.cleanup	= ncm_function_cleanup,
-	.bind_config	= ncm_function_bind_config,
-	.unbind_config	= ncm_function_unbind_config,
-	.attributes	= ncm_function_attributes,
-};
-#endif
-/* ecm transport string */
-static char ecm_transports[MAX_XPORT_STR_LEN];
-
-struct ecm_function_config {
-	u8      ethaddr[ETH_ALEN];
-};
-
-static int ecm_function_init(struct android_usb_function *f,
-				struct usb_composite_dev *cdev)
-{
-	f->config = kzalloc(sizeof(struct ecm_function_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-	return 0;
-}
-
-static void ecm_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-	f->config = NULL;
-}
-
-static int ecm_qc_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	int ret;
-	char *trans;
-	struct ecm_function_config *ecm = f->config;
-
-	if (!ecm) {
-		pr_err("%s: ecm_pdata\n", __func__);
-		return -EINVAL;
-	}
-
-	pr_debug("%s: ecm_transport is %s", __func__, ecm_transports);
-
-	trans = strim(ecm_transports);
-	if (strcmp("BAM2BAM_IPA", trans)) {
-		ret = gether_qc_setup_name(c->cdev->gadget,
-						ecm->ethaddr, "ecm");
-		if (ret) {
-			pr_err("%s: gether_setup failed\n", __func__);
-			return ret;
-		}
-	}
-
-	return ecm_qc_bind_config(c, ecm->ethaddr, trans);
-}
-
-static void ecm_qc_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	char *trans = strim(ecm_transports);
-
-	if (strcmp("BAM2BAM_IPA", trans))
-		gether_qc_cleanup_name("ecm0");
-}
-
-static ssize_t ecm_ethaddr_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct ecm_function_config *ecm = f->config;
-	return snprintf(buf, PAGE_SIZE, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		ecm->ethaddr[0], ecm->ethaddr[1], ecm->ethaddr[2],
-		ecm->ethaddr[3], ecm->ethaddr[4], ecm->ethaddr[5]);
-}
-
-static ssize_t ecm_ethaddr_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct ecm_function_config *ecm = f->config;
-
-	if (sscanf(buf, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		    (int *)&ecm->ethaddr[0], (int *)&ecm->ethaddr[1],
-		    (int *)&ecm->ethaddr[2], (int *)&ecm->ethaddr[3],
-		    (int *)&ecm->ethaddr[4], (int *)&ecm->ethaddr[5]) == 6)
-		return size;
-	return -EINVAL;
-}
-
-static DEVICE_ATTR(ecm_ethaddr, S_IRUGO | S_IWUSR, ecm_ethaddr_show,
-					       ecm_ethaddr_store);
-
-static ssize_t ecm_transports_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	return snprintf(buf, PAGE_SIZE, "%s\n", ecm_transports);
-}
-
-static ssize_t ecm_transports_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	strlcpy(ecm_transports, buf, sizeof(ecm_transports));
-	return size;
-}
-
-static DEVICE_ATTR(ecm_transports, S_IRUGO | S_IWUSR, ecm_transports_show,
-					       ecm_transports_store);
-
-static struct device_attribute *ecm_function_attributes[] = {
-	&dev_attr_ecm_transports,
-	&dev_attr_ecm_ethaddr,
-	NULL
-};
-
-static struct android_usb_function ecm_qc_function = {
-	.name		= "ecm_qc",
-	.init		= ecm_function_init,
-	.cleanup	= ecm_function_cleanup,
-	.bind_config	= ecm_qc_function_bind_config,
-	.unbind_config	= ecm_qc_function_unbind_config,
-	.attributes	= ecm_function_attributes,
-};
-
-/* MBIM - used with BAM */
-#define MAX_MBIM_INSTANCES 1
-
-static int mbim_function_init(struct android_usb_function *f,
-					 struct usb_composite_dev *cdev)
-{
-	return mbim_init(MAX_MBIM_INSTANCES);
-}
-
-static void mbim_function_cleanup(struct android_usb_function *f)
-{
-	fmbim_cleanup();
-}
-
-
-/* mbim transport string */
-static char mbim_transports[MAX_XPORT_STR_LEN];
-
-static int mbim_function_bind_config(struct android_usb_function *f,
-					  struct usb_configuration *c)
-{
-	char *trans;
-
-	pr_debug("%s: mbim transport is %s", __func__, mbim_transports);
-	trans = strim(mbim_transports);
-	return mbim_bind_config(c, 0, trans);
-}
-
-static int mbim_function_ctrlrequest(struct android_usb_function *f,
-					struct usb_composite_dev *cdev,
-					const struct usb_ctrlrequest *c)
-{
-	return mbim_ctrlrequest(cdev, c);
-}
-
-static ssize_t mbim_transports_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	return snprintf(buf, PAGE_SIZE, "%s\n", mbim_transports);
-}
-
-static ssize_t mbim_transports_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	strlcpy(mbim_transports, buf, sizeof(mbim_transports));
-	return size;
-}
-
-static DEVICE_ATTR(mbim_transports, S_IRUGO | S_IWUSR, mbim_transports_show,
-				   mbim_transports_store);
-
-static struct device_attribute *mbim_function_attributes[] = {
-	&dev_attr_mbim_transports,
-	NULL
-};
-
-static struct android_usb_function mbim_function = {
-	.name		= "usb_mbim",
-	.cleanup	= mbim_function_cleanup,
-	.bind_config	= mbim_function_bind_config,
-	.init		= mbim_function_init,
-	.ctrlrequest	= mbim_function_ctrlrequest,
-	.attributes		= mbim_function_attributes,
-};
-
-#ifdef CONFIG_SND_PCM
-/* PERIPHERAL AUDIO */
-static int audio_function_bind_config(struct android_usb_function *f,
-					  struct usb_configuration *c)
-{
-	return audio_bind_config(c);
-}
-
-static struct android_usb_function audio_function = {
-	.name		= "audio",
-	.bind_config	= audio_function_bind_config,
-};
-#endif
-
-
-/* DIAG */
-static char diag_clients[32];	    /*enabled DIAG clients- "diag[,diag_mdm]" */
-static ssize_t clients_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(diag_clients, buff, sizeof(diag_clients));
-
-	return size;
-}
-
-static DEVICE_ATTR(clients, S_IWUSR, NULL, clients_store);
-static struct device_attribute *diag_function_attributes[] =
-					 { &dev_attr_clients, NULL };
-
-static int diag_function_init(struct android_usb_function *f,
-				 struct usb_composite_dev *cdev)
-{
-	return diag_setup();
-}
-
-static void diag_function_cleanup(struct android_usb_function *f)
-{
-	diag_cleanup();
-}
-
-static int diag_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	char *name;
-	char buf[32], *b;
-	int once = 0, err = -1;
-	int (*notify)(uint32_t, const char *);
-	struct android_dev *dev = cdev_to_android_dev(c->cdev);
-
-	strlcpy(buf, diag_clients, sizeof(buf));
-	b = strim(buf);
-
-	while (b) {
-		notify = NULL;
-		name = strsep(&b, ",");
-		/* Allow only first diag channel to update pid and serial no */
-		if (!once++) {
-			if (dev->pdata && dev->pdata->update_pid_and_serial_num)
-				notify = dev->pdata->update_pid_and_serial_num;
-			else
-				notify = usb_diag_update_pid_and_serial_num;
-		}
-
-		if (name) {
-			err = diag_function_add(c, name, notify);
-			if (err)
-				pr_err("diag: Cannot open channel '%s'", name);
-		}
-	}
-
-	return err;
-}
-
-static struct android_usb_function diag_function = {
-	.name		= "diag",
-	.init		= diag_function_init,
-	.cleanup	= diag_function_cleanup,
-	.bind_config	= diag_function_bind_config,
-	.attributes	= diag_function_attributes,
-};
-
-/* DEBUG */
-static int qdss_function_init(struct android_usb_function *f,
-	struct usb_composite_dev *cdev)
-{
-	return qdss_setup();
-}
-
-static void qdss_function_cleanup(struct android_usb_function *f)
-{
-	qdss_cleanup();
-}
-
-static int qdss_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	int  err = -1;
-
-	err = qdss_bind_config(c, "qdss");
-	if (err)
-		pr_err("qdss: Cannot open channel qdss");
-
-	return err;
-}
-
-static struct android_usb_function qdss_function = {
-	.name		= "qdss",
-	.init		= qdss_function_init,
-	.cleanup	= qdss_function_cleanup,
-	.bind_config	= qdss_function_bind_config,
-};
-
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-/* SERIAL */
-static char serial_transports[32];	/*enabled FSERIAL ports - "tty[,sdio]"*/
-static ssize_t serial_transports_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(serial_transports, buff, sizeof(serial_transports));
-
-	return size;
-}
-
-/*enabled FSERIAL transport names - "serial_hsic[,serial_hsusb]"*/
-static char serial_xport_names[32];
-static ssize_t serial_xport_names_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(serial_xport_names, buff, sizeof(serial_xport_names));
-
-	return size;
-}
-
-static ssize_t serial_xport_names_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	return snprintf(buf, PAGE_SIZE, "%s\n", serial_xport_names);
-}
-
-static DEVICE_ATTR(transports, S_IWUSR, NULL, serial_transports_store);
-static struct device_attribute dev_attr_serial_xport_names =
-				__ATTR(transport_names, S_IRUGO | S_IWUSR,
-				serial_xport_names_show,
-				serial_xport_names_store);
-
-static struct device_attribute *serial_function_attributes[] = {
-					&dev_attr_transports,
-					&dev_attr_serial_xport_names,
-					NULL };
-
-static void serial_function_cleanup(struct android_usb_function *f)
-{
-	gserial_cleanup();
-}
-
-static int serial_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	char *name, *xport_name = NULL;
-	char buf[32], *b, xport_name_buf[32], *tb;
-	int err = -1, i;
-	static int serial_initialized = 0, ports = 0;
-
-	if (serial_initialized)
-		goto bind_config;
-
-	serial_initialized = 1;
-	strlcpy(buf, serial_transports, sizeof(buf));
-	b = strim(buf);
-
-	strlcpy(xport_name_buf, serial_xport_names, sizeof(xport_name_buf));
-	tb = strim(xport_name_buf);
-
-	while (b) {
-		name = strsep(&b, ",");
-
-		if (name) {
-			if (tb)
-				xport_name = strsep(&tb, ",");
-			err = gserial_init_port(ports, name, xport_name);
-			if (err) {
-				pr_err("serial: Cannot open port '%s'", name);
-				goto out;
-			}
-			ports++;
-		}
-	}
-	err = gport_setup(c);
-	if (err) {
-		pr_err("serial: Cannot setup transports");
-		goto out;
-	}
-
-bind_config:
-	for (i = 0; i < ports; i++) {
-		err = gser_bind_config(c, i);
-		if (err) {
-			pr_err("serial: bind_config failed for port %d", i);
-			goto out;
-		}
-	}
-
-out:
-	return err;
-}
-
-static struct android_usb_function serial_function = {
-	.name		= "serial",
-	.cleanup	= serial_function_cleanup,
-	.bind_config	= serial_function_bind_config,
-	.attributes	= serial_function_attributes,
-};
-#endif
-
-/* CCID */
-static int ccid_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-	return ccid_setup();
-}
-
-static void ccid_function_cleanup(struct android_usb_function *f)
-{
-	ccid_cleanup();
-}
-
-static int ccid_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	return ccid_bind_config(c);
-}
-
-static struct android_usb_function ccid_function = {
-	.name		= "ccid",
-	.init		= ccid_function_init,
-	.cleanup	= ccid_function_cleanup,
-	.bind_config	= ccid_function_bind_config,
-};
-
-static int
-mtp_function_init(struct android_usb_function *f,
-		struct usb_composite_dev *cdev)
-{
-	return mtp_setup();
-}
-
-static void mtp_function_cleanup(struct android_usb_function *f)
-{
-	mtp_cleanup();
-}
-
-static int
-mtp_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	return mtp_bind_config(c, false);
-}
-
-static int
-ptp_function_init(struct android_usb_function *f,
-		struct usb_composite_dev *cdev)
-{
-	/* nothing to do - initialization is handled by mtp_function_init */
-	return 0;
-}
-
-static void ptp_function_cleanup(struct android_usb_function *f)
-{
-	/* nothing to do - cleanup is handled by mtp_function_cleanup */
-}
-
-static int
-ptp_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	return mtp_bind_config(c, true);
-}
-
-static int mtp_function_ctrlrequest(struct android_usb_function *f,
-					struct usb_composite_dev *cdev,
-					const struct usb_ctrlrequest *c)
-{
-	return mtp_ctrlrequest(cdev, c);
-}
-
-static struct android_usb_function mtp_function = {
-	.name		= "mtp",
-	.init		= mtp_function_init,
-	.cleanup	= mtp_function_cleanup,
-	.bind_config	= mtp_function_bind_config,
-	.ctrlrequest	= mtp_function_ctrlrequest,
-};
-
-/* PTP function is same as MTP with slightly different interface descriptor */
-static struct android_usb_function ptp_function = {
-	.name		= "ptp",
-	.init		= ptp_function_init,
-	.cleanup	= ptp_function_cleanup,
-	.bind_config	= ptp_function_bind_config,
-	.ctrlrequest 	= mtp_function_ctrlrequest,
-};
-
-
-struct rndis_function_config {
-	u8      ethaddr[ETH_ALEN];
-	u32     vendorID;
-	u8      max_pkt_per_xfer;
-	char	manufacturer[256];
-	/* "Wireless" RNDIS; auto-detected by Windows */
-	bool	wceis;
-};
-
-static int
-rndis_function_init(struct android_usb_function *f,
-		struct usb_composite_dev *cdev)
-{
-	f->config = kzalloc(sizeof(struct rndis_function_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-	return 0;
-}
-
-static void rndis_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-	f->config = NULL;
-}
-
-static int rndis_qc_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-	f->config = kzalloc(sizeof(struct rndis_function_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-
-	return rndis_qc_init();
-}
-
-static void rndis_qc_function_cleanup(struct android_usb_function *f)
-{
-	rndis_qc_cleanup();
-	kfree(f->config);
-}
-
-static int
-rndis_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	int ret;
-	struct rndis_function_config *rndis = f->config;
-
-	if (!rndis) {
-		pr_err("%s: rndis_pdata\n", __func__);
-		return -1;
-	}
-
-	pr_info("%s MAC: %02X:%02X:%02X:%02X:%02X:%02X\n", __func__,
-		rndis->ethaddr[0], rndis->ethaddr[1], rndis->ethaddr[2],
-		rndis->ethaddr[3], rndis->ethaddr[4], rndis->ethaddr[5]);
-
-	ret = gether_setup_name(c->cdev->gadget, rndis->ethaddr, "rndis");
-	if (ret) {
-		pr_err("%s: gether_setup failed\n", __func__);
-		return ret;
-	}
-
-	if (rndis->wceis) {
-		/* "Wireless" RNDIS; auto-detected by Windows */
-		rndis_iad_descriptor.bFunctionClass =
-						USB_CLASS_WIRELESS_CONTROLLER;
-		rndis_iad_descriptor.bFunctionSubClass = 0x01;
-		rndis_iad_descriptor.bFunctionProtocol = 0x03;
-		rndis_control_intf.bInterfaceClass =
-						USB_CLASS_WIRELESS_CONTROLLER;
-		rndis_control_intf.bInterfaceSubClass =	 0x01;
-		rndis_control_intf.bInterfaceProtocol =	 0x03;
-	}
-
-	return rndis_bind_config_vendor(c, rndis->ethaddr, rndis->vendorID,
-					   rndis->manufacturer);
-}
-
-static int rndis_qc_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	int ret;
-	struct rndis_function_config *rndis = f->config;
-
-	if (!rndis) {
-		pr_err("%s: rndis_pdata\n", __func__);
-		return -EINVAL;
-	}
-
-	pr_info("%s MAC: %02X:%02X:%02X:%02X:%02X:%02X\n", __func__,
-		rndis->ethaddr[0], rndis->ethaddr[1], rndis->ethaddr[2],
-		rndis->ethaddr[3], rndis->ethaddr[4], rndis->ethaddr[5]);
-
-	ret = gether_qc_setup_name(c->cdev->gadget, rndis->ethaddr, "rndis");
-	if (ret) {
-		pr_err("%s: gether_setup failed\n", __func__);
-		return ret;
-	}
-
-	if (rndis->wceis) {
-		/* "Wireless" RNDIS; auto-detected by Windows */
-		rndis_qc_iad_descriptor.bFunctionClass =
-						USB_CLASS_WIRELESS_CONTROLLER;
-		rndis_qc_iad_descriptor.bFunctionSubClass = 0x01;
-		rndis_qc_iad_descriptor.bFunctionProtocol = 0x03;
-		rndis_qc_control_intf.bInterfaceClass =
-						USB_CLASS_WIRELESS_CONTROLLER;
-		rndis_qc_control_intf.bInterfaceSubClass =	 0x01;
-		rndis_qc_control_intf.bInterfaceProtocol =	 0x03;
-	}
-
-	return rndis_qc_bind_config_vendor(c, rndis->ethaddr, rndis->vendorID,
-				    rndis->manufacturer,
-					rndis->max_pkt_per_xfer);
-}
-
-static void rndis_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	gether_cleanup();
-}
-
-static void rndis_qc_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	gether_qc_cleanup_name("rndis0");
-}
-
-static ssize_t rndis_manufacturer_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-
-	return snprintf(buf, PAGE_SIZE, "%s\n", config->manufacturer);
-}
-
-static ssize_t rndis_manufacturer_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-
-	if (size >= sizeof(config->manufacturer))
-		return -EINVAL;
-
-	if (sscanf(buf, "%255s", config->manufacturer) == 1)
-		return size;
-	return -1;
-}
-
-static DEVICE_ATTR(manufacturer, S_IRUGO | S_IWUSR, rndis_manufacturer_show,
-						    rndis_manufacturer_store);
-
-static ssize_t rndis_wceis_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-
-	return snprintf(buf, PAGE_SIZE, "%d\n", config->wceis);
-}
-
-static ssize_t rndis_wceis_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-	int value;
-
-	if (sscanf(buf, "%d", &value) == 1) {
-		config->wceis = value;
-		return size;
-	}
-	return -EINVAL;
-}
-
-static DEVICE_ATTR(wceis, S_IRUGO | S_IWUSR, rndis_wceis_show,
-					     rndis_wceis_store);
-
-static ssize_t rndis_ethaddr_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *rndis = f->config;
-
-	return snprintf(buf, PAGE_SIZE, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		rndis->ethaddr[0], rndis->ethaddr[1], rndis->ethaddr[2],
-		rndis->ethaddr[3], rndis->ethaddr[4], rndis->ethaddr[5]);
-}
-
-static ssize_t rndis_ethaddr_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *rndis = f->config;
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	int i;
-	char *src;
-	for (i = 0; i < ETH_ALEN; i++)
-			rndis->ethaddr[i] = 0;
-	/* create a fake MAC address from our serial number.
-	 * first byte is 0x02 to signify locally administered.
-	 */
-	rndis->ethaddr[0] = 0x02;
-	src = serial_string;
-	for (i = 0; (i < 256) && *src; i++) {
-		/* XOR the USB serial across the remaining bytes */
-		rndis->ethaddr[i % (ETH_ALEN - 1) + 1] ^= *src++;
-	}
-	return size;
-#else
-	if (sscanf(buf, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		    (int *)&rndis->ethaddr[0], (int *)&rndis->ethaddr[1],
-		    (int *)&rndis->ethaddr[2], (int *)&rndis->ethaddr[3],
-		    (int *)&rndis->ethaddr[4], (int *)&rndis->ethaddr[5]) == 6)
-		return size;
-	return -EINVAL;
-#endif
-}
-
-static DEVICE_ATTR(ethaddr, S_IRUGO | S_IWUSR, rndis_ethaddr_show,
-					       rndis_ethaddr_store);
-
-static ssize_t rndis_vendorID_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-
-	return snprintf(buf, PAGE_SIZE, "%04x\n", config->vendorID);
-}
-
-static ssize_t rndis_vendorID_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-	int value;
-
-	if (sscanf(buf, "%04x", &value) == 1) {
-		config->vendorID = value;
-		return size;
-	}
-	return -EINVAL;
-}
-
-static DEVICE_ATTR(vendorID, S_IRUGO | S_IWUSR, rndis_vendorID_show,
-						rndis_vendorID_store);
-
-static ssize_t rndis_max_pkt_per_xfer_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-	return snprintf(buf, PAGE_SIZE, "%d\n", config->max_pkt_per_xfer);
-}
-
-static ssize_t rndis_max_pkt_per_xfer_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-	int value;
-
-	if (sscanf(buf, "%d", &value) == 1) {
-		config->max_pkt_per_xfer = value;
-		return size;
-	}
-	return -EINVAL;
-}
-
-static DEVICE_ATTR(max_pkt_per_xfer, S_IRUGO | S_IWUSR,
-				   rndis_max_pkt_per_xfer_show,
-				   rndis_max_pkt_per_xfer_store);
-
-static struct device_attribute *rndis_function_attributes[] = {
-	&dev_attr_manufacturer,
-	&dev_attr_wceis,
-	&dev_attr_ethaddr,
-	&dev_attr_vendorID,
-	&dev_attr_max_pkt_per_xfer,
-	NULL
-};
-
-static struct android_usb_function rndis_function = {
-	.name		= "rndis",
-	.init		= rndis_function_init,
-	.cleanup	= rndis_function_cleanup,
-	.bind_config	= rndis_function_bind_config,
-	.unbind_config	= rndis_function_unbind_config,
-	.attributes	= rndis_function_attributes,
-};
-
-static struct android_usb_function rndis_qc_function = {
-	.name		= "rndis_qc",
-	.init		= rndis_qc_function_init,
-	.cleanup	= rndis_qc_function_cleanup,
-	.bind_config	= rndis_qc_function_bind_config,
-	.unbind_config	= rndis_qc_function_unbind_config,
-	.attributes	= rndis_function_attributes,
-};
-
-static int ecm_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	int ret;
-	struct ecm_function_config *ecm = f->config;
-
-	if (!ecm) {
-		pr_err("%s: ecm_pdata\n", __func__);
-		return -EINVAL;
-	}
-
-	ret = gether_setup_name(c->cdev->gadget, ecm->ethaddr, "ecm");
-	if (ret) {
-		pr_err("%s: gether_setup failed\n", __func__);
-		return ret;
-	}
-
-	ret = ecm_bind_config(c, ecm->ethaddr);
-	if (ret) {
-		pr_err("%s: ecm_bind_config failed\n", __func__);
-		gether_cleanup();
-	}
-	return ret;
-}
-
-static void ecm_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	gether_cleanup();
-}
-
-static struct android_usb_function ecm_function = {
-	.name		= "ecm",
-	.init		= ecm_function_init,
-	.cleanup	= ecm_function_cleanup,
-	.bind_config	= ecm_function_bind_config,
-	.unbind_config	= ecm_function_unbind_config,
-	.attributes	= ecm_function_attributes,
-};
-
-struct mass_storage_function_config {
-	struct fsg_config fsg;
-	struct fsg_common *common;
-};
-
-static int mass_storage_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-#endif
-	struct mass_storage_function_config *config;
-	struct fsg_common *common;
-	int err;
-	int i;
-	const char *name[3];
-
-	config = kzalloc(sizeof(struct mass_storage_function_config),
-								GFP_KERNEL);
-	if (!config)
-		return -ENOMEM;
-
-	config->fsg.nluns = 1;
-	name[0] = "lun";
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	config->fsg.luns[0].cdrom = 1;
-	config->fsg.luns[0].ro = 0;
-	config->fsg.luns[0].removable = 1;
-#else
-	if (dev->pdata && dev->pdata->cdrom) {
-		config->fsg.luns[config->fsg.nluns].cdrom = 1;
-		config->fsg.luns[config->fsg.nluns].ro = 1;
-		config->fsg.luns[config->fsg.nluns].removable = 0;
-		name[config->fsg.nluns] = "lun0";
-		config->fsg.nluns++;
-	}
-	if (dev->pdata && dev->pdata->internal_ums) {
-		config->fsg.luns[config->fsg.nluns].cdrom = 0;
-		config->fsg.luns[config->fsg.nluns].ro = 0;
-		config->fsg.luns[config->fsg.nluns].removable = 1;
-		name[config->fsg.nluns] = "lun1";
-		config->fsg.nluns++;
-	}
-
-	config->fsg.luns[0].removable = 1;
-#endif
-
-	common = fsg_common_init(NULL, cdev, &config->fsg);
-	if (IS_ERR(common)) {
-		kfree(config);
-		return PTR_ERR(common);
-	}
-
-	for (i = 0; i < config->fsg.nluns; i++) {
-		err = sysfs_create_link(&f->dev->kobj,
-					&common->luns[i].dev.kobj,
-					name[i]);
-		if (err)
-			goto error;
-	}
-
-	config->common = common;
-	f->config = config;
-	return 0;
-error:
-	for (; i > 0 ; i--)
-		sysfs_remove_link(&f->dev->kobj, name[i-1]);
-
-	fsg_common_release(&common->ref);
-	kfree(config);
-	return err;
-}
-
-static void mass_storage_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-	f->config = NULL;
-}
-
-static int mass_storage_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	struct mass_storage_function_config *config = f->config;
-	return fsg_bind_config(c->cdev, c, config->common);
-}
-
-static ssize_t mass_storage_inquiry_show(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	return snprintf(buf, PAGE_SIZE, "%s\n", config->common->inquiry_string);
-}
-
-static ssize_t mass_storage_inquiry_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	if (size >= sizeof(config->common->inquiry_string))
-		return -EINVAL;
-	if (sscanf(buf, "%28s", config->common->inquiry_string) != 1)
-		return -EINVAL;
-	return size;
-}
-
-static DEVICE_ATTR(inquiry_string, S_IRUGO | S_IWUSR,
-					mass_storage_inquiry_show,
-					mass_storage_inquiry_store);
-
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-static ssize_t mass_storage_vendor_show(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	return sprintf(buf, "%s\n", config->common->vendor_string);
-}
-
-static ssize_t mass_storage_vendor_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-
-	if (size >= sizeof(config->common->vendor_string))
-		return -EINVAL;
-	if (sscanf(buf, "%s", config->common->vendor_string) != 1)
-		return -EINVAL;
-
-	printk(KERN_DEBUG "%s: vendor %s", __func__,
-				config->common->vendor_string);
-	return size;
-}
-
-static DEVICE_ATTR(vendor_string, S_IRUGO | S_IWUSR,
-					mass_storage_vendor_show,
-					mass_storage_vendor_store);
-
-static ssize_t mass_storage_product_show(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	return sprintf(buf, "%s\n", config->common->product_string);
-}
-
-static ssize_t mass_storage_product_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-
-	if (size >= sizeof(config->common->product_string))
-		return -EINVAL;
-	if (sscanf(buf, "%s", config->common->product_string) != 1)
-		return -EINVAL;
-
-	printk(KERN_DEBUG "%s: product %s", __func__,
-				config->common->product_string);
-	return size;
-}
-
-static DEVICE_ATTR(product_string, S_IRUGO | S_IWUSR,
-					mass_storage_product_show,
-					mass_storage_product_store);
-
-static ssize_t sua_version_info_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	int ret;
-
-	ret = sprintf(buf, "%s\r\n",config->common-> version_string);
-	printk(KERN_DEBUG "usb: %s version %s\n", __func__, buf);
-	return ret;
-}
-
-/*
- /sys/class/android_usb/android0/f_mass_storage/sua_version_info
-*/
-static ssize_t sua_version_info_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	int len=0;
-
-	if (size < sizeof(config->common-> version_string))
-		memcpy(config->common-> version_string,buf,size);
-	else
-	{
-		len=sizeof(config->common-> version_string);
-		memcpy(config->common-> version_string,buf,len-1);
-	}
-	printk(KERN_DEBUG "usb: %s buf=%s[%d], %s\n", __func__, buf,sizeof(buf),config->common-> version_string);
-	return size;
-}
-
-static DEVICE_ATTR(sua_version_info,  S_IRUGO | S_IWUSR,
-		sua_version_info_show, sua_version_info_store);
-#endif
-
-static struct device_attribute *mass_storage_function_attributes[] = {
-	&dev_attr_inquiry_string,
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	&dev_attr_vendor_string,
-	&dev_attr_product_string,
-	&dev_attr_sua_version_info,
-#endif
-	NULL
-};
-
-static struct android_usb_function mass_storage_function = {
-	.name		= "mass_storage",
-	.init		= mass_storage_function_init,
-	.cleanup	= mass_storage_function_cleanup,
-	.bind_config	= mass_storage_function_bind_config,
-	.attributes	= mass_storage_function_attributes,
-};
-
-
-static int accessory_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-	return acc_setup();
-}
-
-static void accessory_function_cleanup(struct android_usb_function *f)
-{
-	acc_cleanup();
-}
-
-static int accessory_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	return acc_bind_config(c);
-}
-
-static int accessory_function_ctrlrequest(struct android_usb_function *f,
-						struct usb_composite_dev *cdev,
-						const struct usb_ctrlrequest *c)
-{
-	return acc_ctrlrequest(cdev, c);
-}
-
-static struct android_usb_function accessory_function = {
-	.name		= "accessory",
-	.init		= accessory_function_init,
-	.cleanup	= accessory_function_cleanup,
-	.bind_config	= accessory_function_bind_config,
-	.ctrlrequest	= accessory_function_ctrlrequest,
-};
-
-#ifdef CONFIG_SND_PCM
-static int audio_source_function_init(struct android_usb_function *f,
-			struct usb_composite_dev *cdev)
-{
-	struct audio_source_config *config;
-
-	config = kzalloc(sizeof(struct audio_source_config), GFP_KERNEL);
-	if (!config)
-		return -ENOMEM;
-	config->card = -1;
-	config->device = -1;
-	f->config = config;
-	return 0;
-}
-
-static void audio_source_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-}
-
-static int audio_source_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	struct audio_source_config *config = f->config;
-
-	return audio_source_bind_config(c, config);
-}
-
-static void audio_source_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	struct audio_source_config *config = f->config;
-
-	config->card = -1;
-	config->device = -1;
-}
-
-static ssize_t audio_source_pcm_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct audio_source_config *config = f->config;
-
-	/* print PCM card and device numbers */
-	return snprintf(buf, PAGE_SIZE,
-			"%d %d\n", config->card, config->device);
-}
-
-static DEVICE_ATTR(pcm, S_IRUGO | S_IWUSR, audio_source_pcm_show, NULL);
-
-static struct device_attribute *audio_source_function_attributes[] = {
-	&dev_attr_pcm,
-	NULL
-};
-
-static struct android_usb_function audio_source_function = {
-	.name		= "audio_source",
-	.init		= audio_source_function_init,
-	.cleanup	= audio_source_function_cleanup,
-	.bind_config	= audio_source_function_bind_config,
-	.unbind_config	= audio_source_function_unbind_config,
-	.attributes	= audio_source_function_attributes,
-};
-#endif
-
-static int android_uasp_connect_cb(bool connect)
-{
-	/*
-	 * TODO
-	 * We may have to disable gadget till UASP configfs nodes
-	 * are configured which includes mapping LUN with the
-	 * backing file. It is a fundamental difference between
-	 * f_mass_storage and f_tcp. That means UASP can not be
-	 * in default composition.
-	 *
-	 * For now, assume that UASP configfs nodes are configured
-	 * before enabling android gadget. Or cable should be
-	 * reconnected after mapping the LUN.
-	 *
-	 * Also consider making UASP to respond to Host requests when
-	 * Lun is not mapped.
-	 */
-	pr_debug("UASP %s\n", connect ? "connect" : "disconnect");
-
-	return 0;
-}
-
-static int uasp_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-	return f_tcm_init(&android_uasp_connect_cb);
-}
-
-static void uasp_function_cleanup(struct android_usb_function *f)
-{
-	f_tcm_exit();
-}
-
-static int uasp_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	return tcm_bind_config(c);
-}
-
-static struct android_usb_function uasp_function = {
-	.name		= "uasp",
-	.init		= uasp_function_init,
-	.cleanup	= uasp_function_cleanup,
-	.bind_config	= uasp_function_bind_config,
-};
-
-static struct android_usb_function *supported_functions[] = {
-	&ffs_function,
-	&mbim_function,
-	&ecm_qc_function,
-#ifdef CONFIG_SND_PCM
-	&audio_function,
-#endif
-	&rmnet_smd_function,
-	&rmnet_sdio_function,
-	&rmnet_smd_sdio_function,
-	&rmnet_function,
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	&gps_function,
-#endif
-	&diag_function,
-	&qdss_function,
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	&serial_function,
-#endif
-	&adb_function,
-#ifdef CONFIG_SND_RAWMIDI
-	&midi_function,
-#endif
-	&ccid_function,
-	&acm_function,
-	&mtp_function,
-	&ptp_function,
-	&rndis_function,
-	&rndis_qc_function,
-	&ecm_function,
-	&ncm_function,
-	&mass_storage_function,
-	&accessory_function,
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_SIDESYNC
-	&conn_gadget_function,
-#endif
-#ifdef CONFIG_SND_PCM
-	&audio_source_function,
-#endif
-	&uasp_function,
-	NULL
-};
-
-static void android_cleanup_functions(struct android_usb_function **functions)
-{
-	struct android_usb_function *f;
-	struct device_attribute **attrs;
-	struct device_attribute *attr;
-
-	while (*functions) {
-		f = *functions++;
-
-		if (f->dev) {
-			device_destroy(android_class, f->dev->devt);
-			kfree(f->dev_name);
-		} else
-			continue;
-
-		if (f->cleanup)
-			f->cleanup(f);
-
-		attrs = f->attributes;
-		if (attrs) {
-			while ((attr = *attrs++))
-				device_remove_file(f->dev, attr);
-		}
-	}
-}
-
-static int android_init_functions(struct android_usb_function **functions,
-				  struct usb_composite_dev *cdev)
-{
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-	struct android_usb_function *f;
-	struct device_attribute **attrs;
-	struct device_attribute *attr;
-	int err = 0;
-	int index = 1; /* index 0 is for android0 device */
-
-	for (; (f = *functions++); index++) {
-		f->dev_name = kasprintf(GFP_KERNEL, "f_%s", f->name);
-		f->android_dev = NULL;
-		if (!f->dev_name) {
-			err = -ENOMEM;
-			goto err_out;
-		}
-		f->dev = device_create(android_class, dev->dev,
-				MKDEV(0, index), f, f->dev_name);
-		if (IS_ERR(f->dev)) {
-			pr_err("%s: Failed to create dev %s", __func__,
-							f->dev_name);
-			err = PTR_ERR(f->dev);
-			f->dev = NULL;
-			goto err_create;
-		}
-
-		if (f->init) {
-			err = f->init(f, cdev);
-			if (err) {
-				pr_err("%s: Failed to init %s", __func__,
-								f->name);
-				goto err_init;
-			}
-		}
-
-		attrs = f->attributes;
-		if (attrs) {
-			while ((attr = *attrs++) && !err)
-				err = device_create_file(f->dev, attr);
-		}
-		if (err) {
-			pr_err("%s: Failed to create function %s attributes",
-					__func__, f->name);
-			goto err_attrs;
-		}
-	}
-	return 0;
-
-err_attrs:
-	for (attr = *(attrs -= 2); attrs != f->attributes; attr = *(attrs--))
-		device_remove_file(f->dev, attr);
-	if (f->cleanup)
-		f->cleanup(f);
-err_init:
-	device_destroy(android_class, f->dev->devt);
-err_create:
-	f->dev = NULL;
-	kfree(f->dev_name);
-err_out:
-	android_cleanup_functions(dev->functions);
-	return err;
-}
-
-static int
-android_bind_enabled_functions(struct android_dev *dev,
-			       struct usb_configuration *c)
-{
-	struct android_usb_function_holder *f_holder;
-	struct android_configuration *conf =
-		container_of(c, struct android_configuration, usb_config);
-	int ret;
-
-	list_for_each_entry(f_holder, &conf->enabled_functions, enabled_list) {
-		ret = f_holder->f->bind_config(f_holder->f, c);
-		if (ret) {
-			pr_err("%s: %s failed\n", __func__, f_holder->f->name);
-			while (!list_empty(&c->functions)) {
-				struct usb_function		*f;
-
-				f = list_first_entry(&c->functions,
-					struct usb_function, list);
-				list_del(&f->list);
-				if (f->unbind)
-					f->unbind(c, f);
-			}
-			if (c->unbind)
-				c->unbind(c);
-			return ret;
-		}
-	}
-	return 0;
-}
-
-static void
-android_unbind_enabled_functions(struct android_dev *dev,
-			       struct usb_configuration *c)
-{
-	struct android_usb_function_holder *f_holder;
-	struct android_configuration *conf =
-		container_of(c, struct android_configuration, usb_config);
-
-	list_for_each_entry(f_holder, &conf->enabled_functions, enabled_list) {
-		if (f_holder->f->unbind_config)
-			f_holder->f->unbind_config(f_holder->f, c);
-	}
-}
-
-static inline void check_streaming_func(struct usb_gadget *gadget,
-		struct android_usb_platform_data *pdata,
-		char *name)
-{
-	int i;
-
-	for (i = 0; i < pdata->streaming_func_count; i++) {
-		if (!strcmp(name,
-			pdata->streaming_func[i])) {
-			pr_debug("set streaming_enabled to true\n");
-			gadget->streaming_enabled = true;
-			break;
-		}
-	}
-}
-
-static int android_enable_function(struct android_dev *dev,
-				   struct android_configuration *conf,
-				   char *name)
-{
-	struct android_usb_function **functions = dev->functions;
-	struct android_usb_function *f;
-	struct android_usb_function_holder *f_holder;
-	struct android_usb_platform_data *pdata = dev->pdata;
-	struct usb_gadget *gadget = dev->cdev->gadget;
-
-	while ((f = *functions++)) {
-		if (!strcmp(name, f->name)) {
-			if (f->android_dev && f->android_dev != dev)
-				pr_err("%s is enabled in other device\n",
-					f->name);
-			else {
-				f_holder = kzalloc(sizeof(*f_holder),
-						GFP_KERNEL);
-				if (!f_holder) {
-					pr_err("Failed to alloc f_holder\n");
-					return -ENOMEM;
-				}
-
-				f->android_dev = dev;
-				f_holder->f = f;
-				list_add_tail(&f_holder->enabled_list,
-					      &conf->enabled_functions);
-				pr_debug("func:%s is enabled.\n", f->name);
-				/*
-				 * compare enable function with streaming func
-				 * list and based on the same request streaming.
-				 */
-				check_streaming_func(gadget, pdata, f->name);
-
-				return 0;
-			}
-		}
-	}
-	return -EINVAL;
-}
-
-/*-------------------------------------------------------------------------*/
-/* /sys/class/android_usb/android%d/ interface */
-
-static ssize_t remote_wakeup_show(struct device *pdev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct android_configuration *conf;
-
-	/*
-	 * Show the wakeup attribute of the first configuration,
-	 * since all configurations have the same wakeup attribute
-	 */
-	if (dev->configs_num == 0)
-		return 0;
-	conf = list_entry(dev->configs.next,
-			  struct android_configuration,
-			  list_item);
-
-	return snprintf(buf, PAGE_SIZE, "%d\n",
-			!!(conf->usb_config.bmAttributes &
-				USB_CONFIG_ATT_WAKEUP));
-}
-
-static ssize_t remote_wakeup_store(struct device *pdev,
-		struct device_attribute *attr, const char *buff, size_t size)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct android_configuration *conf;
-	int enable = 0;
-
-	sscanf(buff, "%d", &enable);
-
-	pr_debug("android_usb: %s remote wakeup\n",
-			enable ? "enabling" : "disabling");
-
-	list_for_each_entry(conf, &dev->configs, list_item)
-		if (enable)
-			conf->usb_config.bmAttributes |=
-					USB_CONFIG_ATT_WAKEUP;
-		else
-			conf->usb_config.bmAttributes &=
-					~USB_CONFIG_ATT_WAKEUP;
-
-	return size;
-}
-
-static ssize_t
-functions_show(struct device *pdev, struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct android_configuration *conf;
-	struct android_usb_function_holder *f_holder;
-	char *buff = buf;
-
-	mutex_lock(&dev->mutex);
-
-	list_for_each_entry(conf, &dev->configs, list_item) {
-		if (buff != buf)
-			*(buff-1) = ':';
-		list_for_each_entry(f_holder, &conf->enabled_functions,
-					enabled_list)
-			buff += snprintf(buff, PAGE_SIZE, "%s,",
-					f_holder->f->name);
-	}
-
-	mutex_unlock(&dev->mutex);
-
-	if (buff != buf)
-		*(buff-1) = '\n';
-	return buff - buf;
-}
-
-static ssize_t
-functions_store(struct device *pdev, struct device_attribute *attr,
-			       const char *buff, size_t size)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct list_head *curr_conf = &dev->configs;
-	struct android_configuration *conf;
-	char *conf_str;
-	struct android_usb_function_holder *f_holder;
-	char *name;
-	char buf[256], *b;
-	char aliases[256], *a;
-	int err;
-	int is_ffs;
-	int ffs_enabled = 0;
-
-	mutex_lock(&dev->mutex);
-
-	if (dev->enabled) {
-		mutex_unlock(&dev->mutex);
-		return -EBUSY;
-	}
-
-	/* Clear previous enabled list */
-	list_for_each_entry(conf, &dev->configs, list_item) {
-		while (conf->enabled_functions.next !=
-				&conf->enabled_functions) {
-			f_holder = list_entry(conf->enabled_functions.next,
-					typeof(*f_holder),
-					enabled_list);
-			f_holder->f->android_dev = NULL;
-			list_del(&f_holder->enabled_list);
-			kfree(f_holder);
-		}
-		INIT_LIST_HEAD(&conf->enabled_functions);
-	}
-
-	strlcpy(buf, buff, sizeof(buf));
-	b = strim(buf);
-
-	while (b) {
-		conf_str = strsep(&b, ":");
-		if (conf_str) {
-			/* If the next not equal to the head, take it */
-			if (curr_conf->next != &dev->configs)
-				conf = list_entry(curr_conf->next,
-						  struct android_configuration,
-						  list_item);
-			else
-				conf = alloc_android_config(dev);
-
-			curr_conf = curr_conf->next;
-		}
-
-		while (conf_str) {
-			name = strsep(&conf_str, ",");
-
-			is_ffs = 0;
-			strlcpy(aliases, dev->ffs_aliases, sizeof(aliases));
-			a = aliases;
-
-
-			while (a) {
-				char *alias = strsep(&a, ",");
-				if (alias && !strcmp(name, alias)) {
-					is_ffs = 1;
-					break;
-				}
-			}
-
-			if (is_ffs) {
-				if (ffs_enabled)
-					continue;
-				err = android_enable_function(dev, conf, "ffs");
-				if (err)
-					pr_err("android_usb: Cannot enable ffs (%d)",
-						err);
-				else
-					ffs_enabled = 1;
-				continue;
-			}
-
-			err = android_enable_function(dev, conf, name);
-			if (err)
-				pr_err("android_usb: Cannot enable '%s' (%d)",
-								   name, err);
-		}
-	}
-
-	/* Free uneeded configurations if exists */
-	while (curr_conf->next != &dev->configs) {
-		conf = list_entry(curr_conf->next,
-				  struct android_configuration, list_item);
-		free_android_config(dev, conf);
-	}
-
-	mutex_unlock(&dev->mutex);
-
-	return size;
-}
-
-static ssize_t enable_show(struct device *pdev, struct device_attribute *attr,
-			   char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	printk(KERN_DEBUG "usb: %s dev->enabled=%d\n", __func__,  dev->enabled);
-	return snprintf(buf, PAGE_SIZE, "%d\n", dev->enabled);
-}
-
-static ssize_t enable_store(struct device *pdev, struct device_attribute *attr,
-			    const char *buff, size_t size)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct usb_composite_dev *cdev = dev->cdev;
-	struct android_usb_function_holder *f_holder;
-	struct android_configuration *conf;
-	int enabled = 0;
-	bool audio_enabled = false;
-	static DEFINE_RATELIMIT_STATE(rl, 10*HZ, 1);
-	int err = 0;
-
-	if (!cdev)
-		return -ENODEV;
-
-	mutex_lock(&dev->mutex);
-
-	sscanf(buff, "%d", &enabled);
-	printk(KERN_INFO "usb: enabled: %d, dev->enabled: %d\n",
-			enabled, dev->enabled);
-	if (enabled && !dev->enabled) {
-		/*
-		 * Update values in composite driver's copy of
-		 * device descriptor.
-		 */
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-		cdev->next_string_id = composite_string_index;
-		strncpy(manufacturer_string, "SAMSUNG",
-				sizeof(manufacturer_string) - 1);
-		strncpy(product_string, "SAMSUNG_Android",
-				sizeof(product_string) - 1);
-#else
-		cdev->next_string_id = 0;
-#endif
-		cdev->desc.idVendor = device_desc.idVendor;
-		cdev->desc.idProduct = device_desc.idProduct;
-		cdev->desc.bcdDevice = device_desc.bcdDevice;
-		cdev->desc.bDeviceClass = device_desc.bDeviceClass;
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-		list_for_each_entry(conf, &dev->configs, list_item)
-			list_for_each_entry(f_holder, &conf->enabled_functions,
-						enabled_list) {
-				printk(KERN_DEBUG "usb: %s f_holder->f:%s\n",
-					__func__, f_holder->f->name);
-				if (!strcmp(f_holder->f->name, "acm")) {
-					printk(KERN_DEBUG "usb: acm is enabled. (bcdDevice=0x400)\n");
-					/* Samsung KIES needs fixed bcdDevice number */
-					cdev->desc.bcdDevice = cpu_to_le16(0x0400);
-				}
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_SIDESYNC
-				if (!strcmp(f_holder->f->name, "conn_gadget")) {
-					if(cdev->desc.bcdDevice == cpu_to_le16(0x0400))	{
-						printk(KERN_DEBUG "usb: conn_gadget + kies (bcdDevice=0xC00)\n");
-						cdev->desc.bcdDevice = cpu_to_le16(0x0C00);
-					} else {
-						printk(KERN_DEBUG "usb: conn_gadget only (bcdDevice=0x800)\n");
-						cdev->desc.bcdDevice = cpu_to_le16(0x0800);
-					}
-				}
-#endif
-			}
-		strncpy(manufacturer_string, "SAMSUNG", sizeof(manufacturer_string) - 1);
-		strncpy(product_string, "SAMSUNG_Android", sizeof(product_string) - 1);
-#endif
-		cdev->desc.bDeviceSubClass = device_desc.bDeviceSubClass;
-		cdev->desc.bDeviceProtocol = device_desc.bDeviceProtocol;
-
-		printk(KERN_DEBUG "usb: %s vendor=%x,product=%x,bcdDevice=%x",
-				__func__, cdev->desc.idVendor,
-				cdev->desc.idProduct, cdev->desc.bcdDevice);
-		printk(KERN_DEBUG ",Class=%x,SubClass=%x,Protocol=%x\n",
-				cdev->desc.bDeviceClass,
-				cdev->desc.bDeviceSubClass,
-				cdev->desc.bDeviceProtocol);
-		printk(KERN_DEBUG "usb: %s next cmd : usb_add_config\n",
-				__func__);
-
-		/* Audio dock accessory is unable to enumerate device if
-		 * pull-up is enabled immediately. The enumeration is
-		 * reliable with 100 msec delay.
-		 */
-		list_for_each_entry(conf, &dev->configs, list_item)
-			list_for_each_entry(f_holder, &conf->enabled_functions,
-						enabled_list) {
-				if (f_holder->f->enable)
-					f_holder->f->enable(f_holder->f);
-				if (!strncmp(f_holder->f->name,
-						"audio_source", 12))
-					audio_enabled = true;
-			}
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-		if (audio_enabled)
-			msleep(100);
-#endif
-		err = android_enable(dev);
-		if (err < 0) {
-			pr_err("%s: android_enable failed\n", __func__);
-			dev->connected = 0;
-			dev->enabled = false;
-			mutex_unlock(&dev->mutex);
-			return size;
-		}
-		dev->enabled = true;
-	} else if (!enabled && dev->enabled) {
-		android_disable(dev);
-		list_for_each_entry(conf, &dev->configs, list_item)
-			list_for_each_entry(f_holder, &conf->enabled_functions,
-						enabled_list) {
-				if (f_holder->f->disable)
-					f_holder->f->disable(f_holder->f);
-			}
-		dev->enabled = false;
-	} else if (!enabled) {
-		usb_gadget_disconnect(cdev->gadget);
-		dev->enabled = false;
-	} else if (__ratelimit(&rl)) {
-		pr_err("android_usb: already %s\n",
-				dev->enabled ? "enabled" : "disabled");
-	}
-
-	mutex_unlock(&dev->mutex);
-
-	return size;
-}
-
-static ssize_t pm_qos_show(struct device *pdev,
-			   struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-
-	return snprintf(buf, PAGE_SIZE, "%s\n", dev->pm_qos);
-}
-
-static ssize_t pm_qos_store(struct device *pdev,
-			   struct device_attribute *attr,
-			   const char *buff, size_t size)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-
-	strlcpy(dev->pm_qos, buff, sizeof(dev->pm_qos));
-
-	return size;
-}
-
-static ssize_t state_show(struct device *pdev, struct device_attribute *attr,
-			   char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct usb_composite_dev *cdev = dev->cdev;
-	char *state = "DISCONNECTED";
-	unsigned long flags;
-
-	if (!cdev)
-		goto out;
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	if (cdev->config)
-		state = "CONFIGURED";
-	else if (dev->connected)
-		state = "CONNECTED";
-	spin_unlock_irqrestore(&cdev->lock, flags);
-out:
-	printk(KERN_DEBUG "usb: %s buf=%s\n", __func__, state);
-	return snprintf(buf, PAGE_SIZE, "%s\n", state);
-}
-
-#define DESCRIPTOR_ATTR(field, format_string)				\
-static ssize_t								\
-field ## _show(struct device *dev, struct device_attribute *attr,	\
-		char *buf)						\
-{									\
-	return snprintf(buf, PAGE_SIZE,					\
-			format_string, device_desc.field);		\
-}									\
-static ssize_t								\
-field ## _store(struct device *dev, struct device_attribute *attr,	\
-		const char *buf, size_t size)				\
-{									\
-	int value;							\
-	if (sscanf(buf, format_string, &value) == 1) {			\
-		device_desc.field = value;				\
-		return size;						\
-	}								\
-	return -1;							\
-}									\
-static DEVICE_ATTR(field, S_IRUGO | S_IWUSR, field ## _show, field ## _store);
-
-#define DESCRIPTOR_STRING_ATTR(field, buffer)				\
-static ssize_t								\
-field ## _show(struct device *dev, struct device_attribute *attr,	\
-		char *buf)						\
-{									\
-	return snprintf(buf, PAGE_SIZE, "%s", buffer);			\
-}									\
-static ssize_t								\
-field ## _store(struct device *dev, struct device_attribute *attr,	\
-		const char *buf, size_t size)				\
-{									\
-	if (size >= sizeof(buffer))					\
-		return -EINVAL;						\
-	strlcpy(buffer, buf, sizeof(buffer));				\
-	strim(buffer);							\
-	return size;							\
-}									\
-static DEVICE_ATTR(field, S_IRUGO | S_IWUSR, field ## _show, field ## _store);
-
-
-DESCRIPTOR_ATTR(idVendor, "%04x\n")
-DESCRIPTOR_ATTR(idProduct, "%04x\n")
-DESCRIPTOR_ATTR(bcdDevice, "%04x\n")
-DESCRIPTOR_ATTR(bDeviceClass, "%d\n")
-DESCRIPTOR_ATTR(bDeviceSubClass, "%d\n")
-DESCRIPTOR_ATTR(bDeviceProtocol, "%d\n")
-DESCRIPTOR_STRING_ATTR(iManufacturer, manufacturer_string)
-DESCRIPTOR_STRING_ATTR(iProduct, product_string)
-DESCRIPTOR_STRING_ATTR(iSerial, serial_string)
-
-static ssize_t
-bcdUSB_show(struct device *pdev, struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-
-	if(dev->cdev) {
-		return sprintf(buf, "%04x\n", dev->cdev->desc.bcdUSB);
-	} else {
-		return sprintf(buf, "%04x\n", device_desc.bcdUSB);
-	}
-}
-
-#if defined(CONFIG_SEC_H_PROJECT) || defined(CONFIG_SEC_F_PROJECT) || defined(CONFIG_SEC_K_PROJECT)
-static ssize_t
-usb30en_show(struct device *pdev, struct device_attribute *attr, char *buf)
-{
-	return sprintf(buf, "%01x\n", usb30en);
-}
-
-extern void set_redriver_power(int on);
-static ssize_t usb30en_store (struct device *pdev,
-			struct device_attribute *attr,
-			const char *buf, size_t size)
-{
-	int value;
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	if(get_host_os_type() == 0) {
-		usb30en = 0;
-		printk(KERN_ERR "usb: %s MAC host is always disabled \n", __func__);
-		return size;
-	}
-	if (sscanf(buf, "%d", &value) == 1) {
-		if (dev->cdev ) {
-			if(usb30en == value){
-				printk(KERN_INFO "usb: %s ignore!! usb30en(%d), value(%d)\n",
-						__func__, usb30en, value);
-				return size;
-			}
-			usb30en = value;
-			usb_gadget_disconnect(dev->cdev->gadget);
-			sec_set_speedlimit(dev->cdev->gadget,
-					(usb30en ? USB_SPEED_SUPER : USB_SPEED_HIGH));
-			printk(KERN_DEBUG "usb: %s B4 disconectng gadget\n", __func__);
-			msleep(200);
-#if defined(CONFIG_SEC_H_PROJECT)
-			if (!usb30en)
-				schedule_usb_gadget_connect_work(dev);
-			else
-#endif
-			usb_gadget_connect(dev->cdev->gadget);
-			printk(KERN_DEBUG "usb: %s after usb_gadget_connect\n",	__func__);
-			return size;
-		}
-	}
-	printk(KERN_ERR "usb: %s Failed to set the usb30_en value\n", __func__);
-	return -1;
-}
-
-static ssize_t ss_host_available_show(struct device *pdev,
-				struct device_attribute *attr, char *buf)
-{
-	int value = 0;
-	int ss_host_available;
-	int windowsos;
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	if (dev->cdev ) {
-		ss_host_available = sec_get_ss_host_available(dev->cdev->gadget);
-		windowsos = get_host_os_type();
-		if((ss_host_available == 1) && ( windowsos == 1)) {
-			printk(KERN_ERR "usb: %s superspeed available \n", __func__);
-			value = 1;
-		}
-		printk(KERN_ERR "usb: %s ss_host_available(%d), windowsos(%d)\n",
-			__func__, ss_host_available, windowsos);
-	} else {
-		printk(KERN_ERR "usb: %s gadget not available \n", __func__);
-		value = -1;
-	}
-	return sprintf(buf, "%d\n", value);
-}
-
-static ssize_t macos_show(struct device *pdev,
-			struct device_attribute *attr, char *buf)
-{
-	int value = 1;
-	int ss_host_available;
-	int windowsos;
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	if (dev->cdev ) {
-		ss_host_available = sec_get_ss_host_available(dev->cdev->gadget);
-		windowsos = get_host_os_type();
-		if((ss_host_available == 1) && ( windowsos == 1)) {
-			printk(KERN_ERR "usb: %s superspeed available \n", __func__);
-			value = 0;
-		}
-		printk(KERN_ERR "usb: %s ss_host_available(%d), windowsos(%d)\n",
-			__func__, ss_host_available, windowsos);
-	} else {
-		printk(KERN_ERR "usb: %s gadget not available \n", __func__);
-		value = -1;
-	}
-	return sprintf(buf, "%d\n", value);
-}
-#endif
-
-#ifdef CONFIG_USB_LOCK_SUPPORT_FOR_MDM
-static ssize_t show_usb_device_lock_state(struct device *pdev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-
-	if (!dev->usb_lock)
-		return snprintf(buf, PAGE_SIZE, "USB_UNLOCK\n");
-	else
-		return snprintf(buf, PAGE_SIZE, "USB_LOCK\n");
-}
-
-static ssize_t store_usb_device_lock_state(struct device *pdev,
-		struct device_attribute *attr, const char *buff, size_t count)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct power_supply *psy;
-
-	psy = power_supply_get_by_name("dwc-usb");
-
-	if (!psy) {
-		pr_info("%s: couldn't get usb power supply\n", __func__);
-		return -EINVAL;
-	}
-
-	if (!strncmp(buff, "0", 1)){
-		mutex_lock(&dev->mutex);
-		dev->usb_lock = 0;
-		android_enable(dev);
-		mutex_unlock(&dev->mutex);
-	} else if (!strncmp(buff, "1", 1)){
-		mutex_lock(&dev->mutex);
-		dev->usb_lock = 1;
-		android_disable(dev);
-		mutex_unlock(&dev->mutex);
-	} else {
-		pr_warn("%s: Wrong command\n", __func__);
-		return count;
-	}
-
-	if(dev->usb_lock) {
-		power_supply_set_present(psy, 0);
-		pr_info("[%s][%d] : usb disconnect for support MDM\n",
-			__func__,__LINE__);
-	}
-
-	return count;
-}
-#endif
-
-
-static DEVICE_ATTR(bcdUSB, S_IRUGO | S_IWUSR, bcdUSB_show, NULL);
-#if defined(CONFIG_SEC_H_PROJECT) || defined(CONFIG_SEC_F_PROJECT) || defined(CONFIG_SEC_K_PROJECT)
-static DEVICE_ATTR(usb30en,S_IRUGO | S_IWUSR, usb30en_show, usb30en_store);
-static DEVICE_ATTR(ss_host_available,S_IRUGO | S_IWUSR, ss_host_available_show, NULL);
-static DEVICE_ATTR(macos,S_IRUGO | S_IWUSR, macos_show, NULL);
-#endif
-static DEVICE_ATTR(functions, S_IRUGO | S_IWUSR, functions_show,
-						 functions_store);
-static DEVICE_ATTR(enable, S_IRUGO | S_IWUSR, enable_show, enable_store);
-static DEVICE_ATTR(pm_qos, S_IRUGO | S_IWUSR,
-		pm_qos_show, pm_qos_store);
-static DEVICE_ATTR(state, S_IRUGO, state_show, NULL);
-static DEVICE_ATTR(remote_wakeup, S_IRUGO | S_IWUSR,
-		remote_wakeup_show, remote_wakeup_store);
-
-#ifdef CONFIG_USB_LOCK_SUPPORT_FOR_MDM
-static DEVICE_ATTR(usb_lock, S_IRUGO | S_IWUSR,
-		show_usb_device_lock_state, store_usb_device_lock_state);
-#endif
-
-static struct device_attribute *android_usb_attributes[] = {
-	&dev_attr_idVendor,
-	&dev_attr_idProduct,
-	&dev_attr_bcdDevice,
-	&dev_attr_bDeviceClass,
-	&dev_attr_bDeviceSubClass,
-	&dev_attr_bDeviceProtocol,
-	&dev_attr_iManufacturer,
-	&dev_attr_iProduct,
-	&dev_attr_iSerial,
-	&dev_attr_functions,
-	&dev_attr_enable,
-	&dev_attr_pm_qos,
-	&dev_attr_state,
-	&dev_attr_bcdUSB,
-#if defined(CONFIG_SEC_H_PROJECT) || defined(CONFIG_SEC_F_PROJECT) || defined(CONFIG_SEC_K_PROJECT)
-	&dev_attr_usb30en,
-	&dev_attr_ss_host_available,
-	&dev_attr_macos,
-#endif
-	&dev_attr_remote_wakeup,
-#ifdef CONFIG_USB_LOCK_SUPPORT_FOR_MDM
-	&dev_attr_usb_lock,
-#endif
-	NULL
-};
-
-/*-------------------------------------------------------------------------*/
-/* Composite driver */
-
-static int android_bind_config(struct usb_configuration *c)
-{
-	struct android_dev *dev = cdev_to_android_dev(c->cdev);
-	int ret = 0;
-
-	ret = android_bind_enabled_functions(dev, c);
-	if (ret)
-		return ret;
-
-	return 0;
-}
-
-static void android_unbind_config(struct usb_configuration *c)
-{
-	struct android_dev *dev = cdev_to_android_dev(c->cdev);
-
-	if (c->cdev->gadget->streaming_enabled) {
-		c->cdev->gadget->streaming_enabled = false;
-		pr_debug("setting streaming_enabled to false.\n");
-	}
-	android_unbind_enabled_functions(dev, c);
-}
-
-static int android_bind(struct usb_composite_dev *cdev)
-{
-	struct android_dev *dev;
-	struct usb_gadget	*gadget = cdev->gadget;
-	struct android_configuration *conf;
-	int			gcnum, id, ret;
-
-	/* Bind to the last android_dev that was probed */
-	dev = list_entry(android_dev_list.prev, struct android_dev, list_item);
-
-	dev->cdev = cdev;
-
-	printk(KERN_DEBUG "usb: %s disconnect\n", __func__);
-	/*
-	 * Start disconnected. Userspace will connect the gadget once
-	 * it is done configuring the functions.
-	 */
-	usb_gadget_disconnect(gadget);
-
-	/* Init the supported functions only once, on the first android_dev */
-	if (android_dev_count == 1) {
-		ret = android_init_functions(dev->functions, cdev);
-		if (ret)
-			return ret;
-	}
-
-	/* Allocate string descriptor numbers ... note that string
-	 * contents can be overridden by the composite_dev glue.
-	 */
-	id = usb_string_id(cdev);
-	if (id < 0)
-		return id;
-	strings_dev[STRING_MANUFACTURER_IDX].id = id;
-	device_desc.iManufacturer = id;
-
-	id = usb_string_id(cdev);
-	if (id < 0)
-		return id;
-	strings_dev[STRING_PRODUCT_IDX].id = id;
-	device_desc.iProduct = id;
-
-	/* Default strings - should be updated by userspace */
-	strlcpy(manufacturer_string, "Android",
-		sizeof(manufacturer_string) - 1);
-	strlcpy(product_string, "Android", sizeof(product_string) - 1);
-	strlcpy(serial_string, "0123456789ABCDEF", sizeof(serial_string) - 1);
-
-	id = usb_string_id(cdev);
-	if (id < 0)
-		return id;
-	strings_dev[STRING_SERIAL_IDX].id = id;
-	device_desc.iSerialNumber = id;
-
-	if (gadget_is_otg(cdev->gadget))
-		list_for_each_entry(conf, &dev->configs, list_item)
-			conf->usb_config.descriptors = otg_desc;
-
-	gcnum = usb_gadget_controller_number(gadget);
-	if (gcnum >= 0)
-		device_desc.bcdDevice = cpu_to_le16(0x0200 + gcnum);
-	else {
-		pr_warning("%s: controller '%s' not recognized\n",
-			longname, gadget->name);
-		device_desc.bcdDevice = __constant_cpu_to_le16(0x9999);
-	}
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	composite_string_index = 4;
-#endif
-	return 0;
-}
-
-static int android_usb_unbind(struct usb_composite_dev *cdev)
-{
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-
-	printk(KERN_DEBUG "usb: %s\n", __func__);
-
-	manufacturer_string[0] = '\0';
-	product_string[0] = '\0';
-	serial_string[0] = '0';
-	cancel_work_sync(&dev->work);
-	android_cleanup_functions(dev->functions);
-	return 0;
-}
-
-static struct usb_composite_driver android_usb_driver = {
-	.name		= "android_usb",
-	.dev		= &device_desc,
-	.strings	= dev_strings,
-	.unbind		= android_usb_unbind,
-#if defined(CONFIG_SEC_LT03_PROJECT) || defined(CONFIG_SEC_MONDRIAN_PROJECT)\
-	|| defined(CONFIG_SEC_KS01_PROJECT) || defined(CONFIG_SEC_PICASSO_PROJECT)\
-	|| defined(CONFIG_SEC_KACTIVE_PROJECT) || defined(CONFIG_SEC_FRESCO_PROJECT)\
-	|| defined(CONFIG_SEC_KSPORTS_PROJECT) || defined(CONFIG_SEC_JACTIVE_PROJECT)\
-	|| defined(CONFIG_SEC_S_PROJECT) || defined(CONFIG_SEC_PATEK_PROJECT)\
-	|| defined(CONFIG_SEC_CHAGALL_PROJECT) || defined(CONFIG_SEC_KLIMT_PROJECT)\
-	|| defined(CONFIG_MACH_JS01LTEDCM) ||defined(CONFIG_MACH_JSGLTE_CHN_CMCC)
-	.max_speed	= USB_SPEED_HIGH
-#else
-	.max_speed	= USB_SPEED_SUPER
-#endif
-};
-
-static int
-android_setup(struct usb_gadget *gadget, const struct usb_ctrlrequest *c)
-{
-	struct usb_composite_dev	*cdev = get_gadget_data(gadget);
-	struct android_dev		*dev = cdev_to_android_dev(cdev);
-	struct usb_request		*req = cdev->req;
-	struct android_usb_function	*f;
-	struct android_usb_function_holder *f_holder;
-	struct android_configuration	*conf;
-	int value = -EOPNOTSUPP;
-	unsigned long flags;
-	bool do_work = false;
-	bool prev_configured = false;
-
-	req->zero = 0;
-	req->complete = composite_setup_complete;
-	req->length = 0;
-	gadget->ep0->driver_data = cdev;
-
-	list_for_each_entry(conf, &dev->configs, list_item)
-		list_for_each_entry(f_holder,
-				    &conf->enabled_functions,
-				    enabled_list) {
-			f = f_holder->f;
-			if (f->ctrlrequest) {
-				value = f->ctrlrequest(f, cdev, c);
-				if (value >= 0)
-					break;
-			}
-		}
-
-
-	/*
-	 * skip the  work when 2nd set config arrives
-	 * with same value from the host.
-	 */
-	if (cdev->config)
-		prev_configured = true;
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	if (value < 0)
-		value = terminal_ctrl_request(cdev, c);
-#endif
-	/* Special case the accessory function.
-	 * It needs to handle control requests before it is enabled.
-	 */
-	if (value < 0)
-		value = acc_ctrlrequest(cdev, c);
-
-	if (value < 0)
-		value = composite_setup(gadget, c);
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	if (!dev->connected) {
-		dev->connected = 1;
-		do_work = true;
-	} else if (c->bRequest == USB_REQ_SET_CONFIGURATION &&
-						cdev->config) {
-		if (!prev_configured)
-			do_work = true;
-	}
-	spin_unlock_irqrestore(&cdev->lock, flags);
-	if (do_work)
-		schedule_work(&dev->work);
-	return value;
-}
-
-static void android_disconnect(struct usb_gadget *gadget)
-{
-	struct usb_composite_dev *cdev = get_gadget_data(gadget);
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-	unsigned long flags;
-
-	composite_disconnect(gadget);
-	/* accessory HID support can be active while the
-	   accessory function is not actually enabled,
-	   so we need to inform it when we are disconnected.
-	 */
-	acc_disconnect();
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	dev->connected = 0;
-	schedule_work(&dev->work);
-	spin_unlock_irqrestore(&cdev->lock, flags);
-}
-
-static void android_suspend(struct usb_gadget *gadget)
-{
-	struct usb_composite_dev *cdev = get_gadget_data(gadget);
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-	unsigned long flags;
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	if (!dev->suspended) {
-		dev->suspended = 1;
-		schedule_work(&dev->work);
-	}
-	spin_unlock_irqrestore(&cdev->lock, flags);
-
-	composite_suspend(gadget);
-}
-
-static void android_resume(struct usb_gadget *gadget)
-{
-	struct usb_composite_dev *cdev = get_gadget_data(gadget);
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-	unsigned long flags;
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	if (dev->suspended) {
-		dev->suspended = 0;
-		schedule_work(&dev->work);
-	}
-	spin_unlock_irqrestore(&cdev->lock, flags);
-
-	composite_resume(gadget);
-}
-
-
-static int android_create_device(struct android_dev *dev, u8 usb_core_id)
-{
-	struct device_attribute **attrs = android_usb_attributes;
-	struct device_attribute *attr;
-	char device_node_name[ANDROID_DEVICE_NODE_NAME_LENGTH];
-	int err;
-
-	/*
-	 * The primary usb core should always have usb_core_id=0, since
-	 * Android user space is currently interested in android0 events.
-	 */
-	snprintf(device_node_name, ANDROID_DEVICE_NODE_NAME_LENGTH,
-		 "android%d", usb_core_id);
-	dev->dev = device_create(android_class, NULL,
-					MKDEV(0, 0), NULL, device_node_name);
-	if (IS_ERR(dev->dev))
-		return PTR_ERR(dev->dev);
-
-	dev_set_drvdata(dev->dev, dev);
-
-	while ((attr = *attrs++)) {
-		err = device_create_file(dev->dev, attr);
-		if (err) {
-			device_destroy(android_class, dev->dev->devt);
-			return err;
-		}
-	}
-	return 0;
-}
-
-static void android_destroy_device(struct android_dev *dev)
-{
-	struct device_attribute **attrs = android_usb_attributes;
-	struct device_attribute *attr;
-
-	while ((attr = *attrs++))
-		device_remove_file(dev->dev, attr);
-	device_destroy(android_class, dev->dev->devt);
-}
-
-static struct android_dev *cdev_to_android_dev(struct usb_composite_dev *cdev)
-{
-	struct android_dev *dev = NULL;
-
-	/* Find the android dev from the list */
-	list_for_each_entry(dev, &android_dev_list, list_item) {
-		if (dev->cdev == cdev)
-			break;
-	}
-
-	return dev;
-}
-
-static struct android_configuration *alloc_android_config
-						(struct android_dev *dev)
-{
-	struct android_configuration *conf;
-
-	conf = kzalloc(sizeof(*conf), GFP_KERNEL);
-	if (!conf) {
-		pr_err("%s(): Failed to alloc memory for android conf\n",
-			__func__);
-		return ERR_PTR(-ENOMEM);
-	}
-
-	dev->configs_num++;
-	conf->usb_config.label = dev->name;
-	conf->usb_config.unbind = android_unbind_config;
-	conf->usb_config.bConfigurationValue = dev->configs_num;
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	conf->usb_config.bmAttributes
-		= USB_CONFIG_ATT_ONE | USB_CONFIG_ATT_SELFPOWER;
-	conf->usb_config.bMaxPower = 0x30; /* 96ma */
-#endif
-	INIT_LIST_HEAD(&conf->enabled_functions);
-
-	list_add_tail(&conf->list_item, &dev->configs);
-
-	return conf;
-}
-
-static void free_android_config(struct android_dev *dev,
-			     struct android_configuration *conf)
-{
-	list_del(&conf->list_item);
-	dev->configs_num--;
-	kfree(conf);
-}
-
-static int usb_diag_update_pid_and_serial_num(u32 pid, const char *snum)
-{
-	struct dload_struct local_diag_dload = { 0 };
-	int *src, *dst, i;
-
-	if (!diag_dload) {
-		pr_debug("%s: unable to update PID and serial_no\n", __func__);
-		return -ENODEV;
-	}
-
-	pr_debug("%s: dload:%pK pid:%x serial_num:%s\n",
-				__func__, diag_dload, pid, snum);
-
-	/* update pid */
-	local_diag_dload.magic_struct.pid = PID_MAGIC_ID;
-	local_diag_dload.pid = pid;
-
-	/* update serial number */
-	if (!snum) {
-		local_diag_dload.magic_struct.serial_num = 0;
-		memset(&local_diag_dload.serial_number, 0,
-				SERIAL_NUMBER_LENGTH);
-	} else {
-		local_diag_dload.magic_struct.serial_num = SERIAL_NUM_MAGIC_ID;
-		strlcpy((char *)&local_diag_dload.serial_number, snum,
-				SERIAL_NUMBER_LENGTH);
-	}
-
-	/* Copy to shared struct (accesses need to be 32 bit aligned) */
-	src = (int *)&local_diag_dload;
-	dst = (int *)diag_dload;
-
-	for (i = 0; i < sizeof(*diag_dload) / 4; i++)
-		*dst++ = *src++;
-
-	return 0;
-}
-
-static int __devinit android_probe(struct platform_device *pdev)
-{
-	struct android_usb_platform_data *pdata;
-	struct android_dev *android_dev;
-	struct resource *res;
-	int ret = 0, i, len = 0;
-
-	if (pdev->dev.of_node) {
-		dev_dbg(&pdev->dev, "device tree enabled\n");
-		pdata = devm_kzalloc(&pdev->dev, sizeof(*pdata), GFP_KERNEL);
-		if (!pdata) {
-			pr_err("unable to allocate platform data\n");
-			return -ENOMEM;
-		}
-
-		of_property_read_u32(pdev->dev.of_node,
-				"qcom,android-usb-swfi-latency",
-				&pdata->swfi_latency);
-		pdata->cdrom = of_property_read_bool(pdev->dev.of_node,
-				"qcom,android-usb-cdrom");
-		pdata->internal_ums = of_property_read_bool(pdev->dev.of_node,
-				"qcom,android-usb-internal-ums");
-		len = of_property_count_strings(pdev->dev.of_node,
-				"qcom,streaming-func");
-		if (len > MAX_STREAMING_FUNCS) {
-			pr_err("Invalid number of functions used.\n");
-			return -EINVAL;
-		}
-
-		for (i = 0; i < len; i++) {
-			const char *name = NULL;
-
-			of_property_read_string_index(pdev->dev.of_node,
-				"qcom,streaming-func", i, &name);
-			if (!name)
-				continue;
-
-			if (sizeof(name) > FUNC_NAME_LEN) {
-				pr_err("Function name is bigger than allowed.\n");
-				continue;
-			}
-
-			strlcpy(pdata->streaming_func[i], name,
-				sizeof(pdata->streaming_func[i]));
-			pr_debug("name of streaming function:%s\n",
-				pdata->streaming_func[i]);
-		}
-
-		pdata->streaming_func_count = len;
-	} else {
-		pdata = pdev->dev.platform_data;
-	}
-
-	if (!android_class) {
-		android_class = class_create(THIS_MODULE, "android_usb");
-		if (IS_ERR(android_class))
-			return PTR_ERR(android_class);
-	}
-
-	android_dev = kzalloc(sizeof(*android_dev), GFP_KERNEL);
-	if (!android_dev) {
-		pr_err("%s(): Failed to alloc memory for android_dev\n",
-			__func__);
-		ret = -ENOMEM;
-		goto err_alloc;
-	}
-
-	android_dev->name = pdev->name;
-	android_dev->disable_depth = 1;
-	android_dev->functions = supported_functions;
-	android_dev->configs_num = 0;
-	INIT_LIST_HEAD(&android_dev->configs);
-	INIT_WORK(&android_dev->work, android_work);
-#if defined(CONFIG_SEC_H_PROJECT)
-	INIT_DELAYED_WORK(&android_dev->usb_connection_work, usb_gadget_connect_work);
-#endif
-	mutex_init(&android_dev->mutex);
-
-	android_dev->pdata = pdata;
-
-	list_add_tail(&android_dev->list_item, &android_dev_list);
-	android_dev_count++;
-
-	if (pdata)
-		composite_driver.usb_core_id = pdata->usb_core_id;
-	else
-		composite_driver.usb_core_id = 0; /*To backward compatibility*/
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (res) {
-		diag_dload = devm_ioremap(&pdev->dev, res->start,
-							resource_size(res));
-		if (!diag_dload) {
-			dev_err(&pdev->dev, "ioremap failed\n");
-			ret = -ENOMEM;
-			goto err_dev;
-		}
-	} else {
-		dev_dbg(&pdev->dev, "failed to get mem resource\n");
-	}
-
-	ret = android_create_device(android_dev, composite_driver.usb_core_id);
-	if (ret) {
-		pr_err("%s(): android_create_device failed\n", __func__);
-		goto err_dev;
-	}
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	/* Create below sysfs
-	 *   /sys/class/android_usb/android0/terminal_version
-	 */
-	ret = create_terminal_attribute(&android_dev->dev);
-	if (ret) {
-		printk(KERN_ERR "usb: %s To create terminal_atttrr is failed\n",
-				__func__);
-		return ret;
-	}
-#endif
-	ret = usb_composite_probe(&android_usb_driver, android_bind);
-	if (ret) {
-		pr_err("%s(): Failed to register android "
-				 "composite driver\n", __func__);
-		goto err_probe;
-	}
-
-	/* pm qos request to prevent apps idle power collapse */
-	if (pdata && pdata->swfi_latency)
-		pm_qos_add_request(&android_dev->pm_qos_req_dma,
-			PM_QOS_CPU_DMA_LATENCY, PM_QOS_DEFAULT_VALUE);
-	strlcpy(android_dev->pm_qos, "high", sizeof(android_dev->pm_qos));
-
-#ifdef CONFIG_USB_DUN_SUPPORT
-		ret = modem_misc_register();
-		if (ret) {
-			printk(KERN_ERR "usb: %s modem misc register is failed\n",
-					 __func__);
-			goto err_probe;
-		}
-#endif
-
-	return ret;
-err_probe:
-	android_destroy_device(android_dev);
-err_dev:
-	list_del(&android_dev->list_item);
-	android_dev_count--;
-	kfree(android_dev);
-err_alloc:
-	if (list_empty(&android_dev_list)) {
-		class_destroy(android_class);
-		android_class = NULL;
-	}
-	return ret;
-}
-
-static int android_remove(struct platform_device *pdev)
-{
-	struct android_dev *dev = NULL;
-	struct android_usb_platform_data *pdata = pdev->dev.platform_data;
-	int usb_core_id = 0;
-
-	if (pdata)
-		usb_core_id = pdata->usb_core_id;
-
-	/* Find the android dev from the list */
-	list_for_each_entry(dev, &android_dev_list, list_item) {
-		if (!dev->pdata)
-			break; /*To backward compatibility*/
-		if (dev->pdata->usb_core_id == usb_core_id)
-			break;
-	}
-
-	if (dev) {
-		android_destroy_device(dev);
-		if (pdata && pdata->swfi_latency)
-			pm_qos_remove_request(&dev->pm_qos_req_dma);
-		list_del(&dev->list_item);
-		android_dev_count--;
-		kfree(dev);
-	}
-
-	if (list_empty(&android_dev_list)) {
-		class_destroy(android_class);
-		android_class = NULL;
-		usb_composite_unregister(&android_usb_driver);
-	}
-
-	return 0;
-}
-
-static const struct platform_device_id android_id_table[] __devinitconst = {
-	{
-		.name = "android_usb",
-	},
-	{
-		.name = "android_usb_hsic",
-	},
-};
-
-static struct of_device_id usb_android_dt_match[] = {
-	{	.compatible = "qcom,android-usb",
-	},
-	{}
-};
-
-static struct platform_driver android_platform_driver = {
-	.driver = {
-		.name = "android_usb",
-		.of_match_table = usb_android_dt_match,
-	},
-	.probe = android_probe,
-	.remove = android_remove,
-	.id_table = android_id_table,
-};
-
-static int __init init(void)
-{
-	int ret;
-
-	/* Override composite driver functions */
-	composite_driver.setup = android_setup;
-	composite_driver.disconnect = android_disconnect;
-	composite_driver.suspend = android_suspend;
-	composite_driver.resume = android_resume;
-
-	INIT_LIST_HEAD(&android_dev_list);
-	android_dev_count = 0;
-
-	ret = platform_driver_register(&android_platform_driver);
-	if (ret) {
-		pr_err("%s(): Failed to register android"
-				 "platform driver\n", __func__);
-	}
-
-	return ret;
-}
-module_init(init);
-
-static void __exit cleanup(void)
-{
-	platform_driver_unregister(&android_platform_driver);
-}
-module_exit(cleanup);
diff --git a/drivers/usb/gadget/android.o_shipped b/drivers/usb/gadget/android.o_shipped
new file mode 100644
index 0000000000000000000000000000000000000000..ae5093f688ede56116eb636155cff584fa18aa62
GIT binary patch
literal 625156
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

literal 0
HcmV?d00001

diff --git a/fs/f2fs/segment.c b/fs/f2fs/segment.c
deleted file mode 100644
index b892662f1a8..00000000000
--- a/fs/f2fs/segment.c
+++ /dev/null
@@ -1,3535 +0,0 @@
-/*
- * fs/f2fs/segment.c
- *
- * Copyright (c) 2012 Samsung Electronics Co., Ltd.
- *             http://www.samsung.com/
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
-#include <linux/fs.h>
-#include <linux/f2fs_fs.h>
-#include <linux/bio.h>
-#include <linux/blkdev.h>
-#include <linux/prefetch.h>
-#include <linux/kthread.h>
-#include <linux/swap.h>
-#include <linux/timer.h>
-
-#include "f2fs.h"
-#include "segment.h"
-#include "node.h"
-#include "trace.h"
-#include <trace/events/f2fs.h>
-
-#define __reverse_ffz(x) __reverse_ffs(~(x))
-
-static struct kmem_cache *discard_entry_slab;
-static struct kmem_cache *discard_cmd_slab;
-static struct kmem_cache *sit_entry_set_slab;
-static struct kmem_cache *inmem_entry_slab;
-
-/**
- * Copied from latest lib/llist.c
- * llist_for_each_entry_safe - iterate over some deleted entries of
- *                             lock-less list of given type
- *			       safe against removal of list entry
- * @pos:	the type * to use as a loop cursor.
- * @n:		another type * to use as temporary storage
- * @node:	the first entry of deleted list entries.
- * @member:	the name of the llist_node with the struct.
- *
- * In general, some entries of the lock-less list can be traversed
- * safely only after being removed from list, so start with an entry
- * instead of list head.
- *
- * If being used on entries deleted from lock-less list directly, the
- * traverse order is from the newest to the oldest added entry.  If
- * you want to traverse from the oldest to the newest, you must
- * reverse the order by yourself before traversing.
- */
-#define llist_for_each_entry_safe(pos, n, node, member)			       \
-	for (pos = llist_entry((node), typeof(*pos), member);		       \
-		&pos->member != NULL &&					       \
-		(n = llist_entry(pos->member.next, typeof(*n), member), true); \
-		pos = n)
-
-/**
- * Copied from latest lib/llist.c
- * llist_reverse_order - reverse order of a llist chain
- * @head:	first item of the list to be reversed
- *
- * Reverse the order of a chain of llist entries and return the
- * new first entry.
- */
-struct llist_node *llist_reverse_order(struct llist_node *head)
-{
-	struct llist_node *new_head = NULL;
-
-	while (head) {
-		struct llist_node *tmp = head;
-		head = head->next;
-		tmp->next = new_head;
-		new_head = tmp;
-	}
-
-	return new_head;
-}
-
-/**
- * Copied from latest linux/list.h
- * list_last_entry - get the last element from a list
- * @ptr:        the list head to take the element from.
- * @type:       the type of the struct this is embedded in.
- * @member:     the name of the list_struct within the struct.
- *
- * Note, that list is expected to be not empty.
- */
-#define list_last_entry(ptr, type, member) \
-	list_entry((ptr)->prev, type, member)
-
-static unsigned long __reverse_ulong(unsigned char *str)
-{
-	unsigned long tmp = 0;
-	int shift = 24, idx = 0;
-
-#if BITS_PER_LONG == 64
-	shift = 56;
-#endif
-	while (shift >= 0) {
-		tmp |= (unsigned long)str[idx++] << shift;
-		shift -= BITS_PER_BYTE;
-	}
-	return tmp;
-}
-
-/*
- * __reverse_ffs is copied from include/asm-generic/bitops/__ffs.h since
- * MSB and LSB are reversed in a byte by f2fs_set_bit.
- */
-static inline unsigned long __reverse_ffs(unsigned long word)
-{
-	int num = 0;
-
-#if BITS_PER_LONG == 64
-	if ((word & 0xffffffff00000000UL) == 0)
-		num += 32;
-	else
-		word >>= 32;
-#endif
-	if ((word & 0xffff0000) == 0)
-		num += 16;
-	else
-		word >>= 16;
-
-	if ((word & 0xff00) == 0)
-		num += 8;
-	else
-		word >>= 8;
-
-	if ((word & 0xf0) == 0)
-		num += 4;
-	else
-		word >>= 4;
-
-	if ((word & 0xc) == 0)
-		num += 2;
-	else
-		word >>= 2;
-
-	if ((word & 0x2) == 0)
-		num += 1;
-	return num;
-}
-
-/*
- * __find_rev_next(_zero)_bit is copied from lib/find_next_bit.c because
- * f2fs_set_bit makes MSB and LSB reversed in a byte.
- * @size must be integral times of unsigned long.
- * Example:
- *                             MSB <--> LSB
- *   f2fs_set_bit(0, bitmap) => 1000 0000
- *   f2fs_set_bit(7, bitmap) => 0000 0001
- */
-static unsigned long __find_rev_next_bit(const unsigned long *addr,
-			unsigned long size, unsigned long offset)
-{
-	const unsigned long *p = addr + BIT_WORD(offset);
-	unsigned long result = size;
-	unsigned long tmp;
-
-	if (offset >= size)
-		return size;
-
-	size -= (offset & ~(BITS_PER_LONG - 1));
-	offset %= BITS_PER_LONG;
-
-	while (1) {
-		if (*p == 0)
-			goto pass;
-
-		tmp = __reverse_ulong((unsigned char *)p);
-
-		tmp &= ~0UL >> offset;
-		if (size < BITS_PER_LONG)
-			tmp &= (~0UL << (BITS_PER_LONG - size));
-		if (tmp)
-			goto found;
-pass:
-		if (size <= BITS_PER_LONG)
-			break;
-		size -= BITS_PER_LONG;
-		offset = 0;
-		p++;
-	}
-	return result;
-found:
-	return result - size + __reverse_ffs(tmp);
-}
-
-static unsigned long __find_rev_next_zero_bit(const unsigned long *addr,
-			unsigned long size, unsigned long offset)
-{
-	const unsigned long *p = addr + BIT_WORD(offset);
-	unsigned long result = size;
-	unsigned long tmp;
-
-	if (offset >= size)
-		return size;
-
-	size -= (offset & ~(BITS_PER_LONG - 1));
-	offset %= BITS_PER_LONG;
-
-	while (1) {
-		if (*p == ~0UL)
-			goto pass;
-
-		tmp = __reverse_ulong((unsigned char *)p);
-
-		if (offset)
-			tmp |= ~0UL << (BITS_PER_LONG - offset);
-		if (size < BITS_PER_LONG)
-			tmp |= ~0UL >> size;
-		if (tmp != ~0UL)
-			goto found;
-pass:
-		if (size <= BITS_PER_LONG)
-			break;
-		size -= BITS_PER_LONG;
-		offset = 0;
-		p++;
-	}
-	return result;
-found:
-	return result - size + __reverse_ffz(tmp);
-}
-
-void register_inmem_page(struct inode *inode, struct page *page)
-{
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-	struct inmem_pages *new;
-
-	f2fs_trace_pid(page);
-
-	set_page_private(page, (unsigned long)ATOMIC_WRITTEN_PAGE);
-	SetPagePrivate(page);
-
-	new = f2fs_kmem_cache_alloc(inmem_entry_slab, GFP_NOFS);
-
-	/* add atomic page indices to the list */
-	new->page = page;
-	INIT_LIST_HEAD(&new->list);
-
-	/* increase reference count with clean state */
-	mutex_lock(&fi->inmem_lock);
-	get_page(page);
-	list_add_tail(&new->list, &fi->inmem_pages);
-	inc_page_count(F2FS_I_SB(inode), F2FS_INMEM_PAGES);
-	mutex_unlock(&fi->inmem_lock);
-
-	trace_f2fs_register_inmem_page(page, INMEM);
-}
-
-static int __revoke_inmem_pages(struct inode *inode,
-				struct list_head *head, bool drop, bool recover)
-{
-	struct f2fs_sb_info *sbi = F2FS_I_SB(inode);
-	struct inmem_pages *cur, *tmp;
-	int err = 0;
-
-	list_for_each_entry_safe(cur, tmp, head, list) {
-		struct page *page = cur->page;
-
-		if (drop)
-			trace_f2fs_commit_inmem_page(page, INMEM_DROP);
-
-		lock_page(page);
-
-		if (recover) {
-			struct dnode_of_data dn;
-			struct node_info ni;
-
-			trace_f2fs_commit_inmem_page(page, INMEM_REVOKE);
-
-			set_new_dnode(&dn, inode, NULL, NULL, 0);
-			if (get_dnode_of_data(&dn, page->index, LOOKUP_NODE)) {
-				err = -EAGAIN;
-				goto next;
-			}
-			get_node_info(sbi, dn.nid, &ni);
-			f2fs_replace_block(sbi, &dn, dn.data_blkaddr,
-					cur->old_addr, ni.version, true, true);
-			f2fs_put_dnode(&dn);
-		}
-next:
-		/* we don't need to invalidate this in the sccessful status */
-		if (drop || recover)
-			ClearPageUptodate(page);
-		set_page_private(page, 0);
-		ClearPagePrivate(page);
-		f2fs_put_page(page, 1);
-
-		list_del(&cur->list);
-		kmem_cache_free(inmem_entry_slab, cur);
-		dec_page_count(F2FS_I_SB(inode), F2FS_INMEM_PAGES);
-	}
-	return err;
-}
-
-void drop_inmem_pages(struct inode *inode)
-{
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-
-	mutex_lock(&fi->inmem_lock);
-	__revoke_inmem_pages(inode, &fi->inmem_pages, true, false);
-	mutex_unlock(&fi->inmem_lock);
-
-	clear_inode_flag(inode, FI_ATOMIC_FILE);
-	stat_dec_atomic_write(inode);
-}
-
-void drop_inmem_page(struct inode *inode, struct page *page)
-{
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-	struct f2fs_sb_info *sbi = F2FS_I_SB(inode);
-	struct list_head *head = &fi->inmem_pages;
-	struct inmem_pages *cur = NULL;
-
-	f2fs_bug_on(sbi, !IS_ATOMIC_WRITTEN_PAGE(page));
-
-	mutex_lock(&fi->inmem_lock);
-	list_for_each_entry(cur, head, list) {
-		if (cur->page == page)
-			break;
-	}
-
-	f2fs_bug_on(sbi, !cur || cur->page != page);
-	list_del(&cur->list);
-	mutex_unlock(&fi->inmem_lock);
-
-	dec_page_count(sbi, F2FS_INMEM_PAGES);
-	kmem_cache_free(inmem_entry_slab, cur);
-
-	ClearPageUptodate(page);
-	set_page_private(page, 0);
-	ClearPagePrivate(page);
-	f2fs_put_page(page, 0);
-
-	trace_f2fs_commit_inmem_page(page, INMEM_INVALIDATE);
-}
-
-static int __commit_inmem_pages(struct inode *inode,
-					struct list_head *revoke_list)
-{
-	struct f2fs_sb_info *sbi = F2FS_I_SB(inode);
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-	struct inmem_pages *cur, *tmp;
-	struct f2fs_io_info fio = {
-		.sbi = sbi,
-		.type = DATA,
-		.op = REQ_OP_WRITE,
-		.op_flags = REQ_SYNC | REQ_PRIO,
-	};
-	pgoff_t last_idx = ULONG_MAX;
-	int err = 0;
-
-	list_for_each_entry_safe(cur, tmp, &fi->inmem_pages, list) {
-		struct page *page = cur->page;
-
-		lock_page(page);
-		if (page->mapping == inode->i_mapping) {
-			trace_f2fs_commit_inmem_page(page, INMEM);
-
-			set_page_dirty(page);
-			f2fs_wait_on_page_writeback(page, DATA, true);
-			if (clear_page_dirty_for_io(page)) {
-				inode_dec_dirty_pages(inode);
-				remove_dirty_inode(inode);
-			}
-
-			fio.page = page;
-			fio.old_blkaddr = NULL_ADDR;
-			fio.encrypted_page = NULL;
-			fio.need_lock = LOCK_DONE;
-			err = do_write_data_page(&fio);
-			if (err) {
-				unlock_page(page);
-				break;
-			}
-
-			/* record old blkaddr for revoking */
-			cur->old_addr = fio.old_blkaddr;
-			last_idx = page->index;
-		}
-		unlock_page(page);
-		list_move_tail(&cur->list, revoke_list);
-	}
-
-	if (last_idx != ULONG_MAX)
-		f2fs_submit_merged_bio_cond(sbi, inode, 0, last_idx,
-							DATA, WRITE);
-
-	if (!err)
-		__revoke_inmem_pages(inode, revoke_list, false, false);
-
-	return err;
-}
-
-int commit_inmem_pages(struct inode *inode)
-{
-	struct f2fs_sb_info *sbi = F2FS_I_SB(inode);
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-	struct list_head revoke_list;
-	int err;
-
-	INIT_LIST_HEAD(&revoke_list);
-	f2fs_balance_fs(sbi, true);
-	f2fs_lock_op(sbi);
-
-	set_inode_flag(inode, FI_ATOMIC_COMMIT);
-
-	mutex_lock(&fi->inmem_lock);
-	err = __commit_inmem_pages(inode, &revoke_list);
-	if (err) {
-		int ret;
-		/*
-		 * try to revoke all committed pages, but still we could fail
-		 * due to no memory or other reason, if that happened, EAGAIN
-		 * will be returned, which means in such case, transaction is
-		 * already not integrity, caller should use journal to do the
-		 * recovery or rewrite & commit last transaction. For other
-		 * error number, revoking was done by filesystem itself.
-		 */
-		ret = __revoke_inmem_pages(inode, &revoke_list, false, true);
-		if (ret)
-			err = ret;
-
-		/* drop all uncommitted pages */
-		__revoke_inmem_pages(inode, &fi->inmem_pages, true, false);
-	}
-	mutex_unlock(&fi->inmem_lock);
-
-	clear_inode_flag(inode, FI_ATOMIC_COMMIT);
-
-	f2fs_unlock_op(sbi);
-	return err;
-}
-
-/*
- * This function balances dirty node and dentry pages.
- * In addition, it controls garbage collection.
- */
-void f2fs_balance_fs(struct f2fs_sb_info *sbi, bool need)
-{
-#ifdef CONFIG_F2FS_FAULT_INJECTION
-	if (time_to_inject(sbi, FAULT_CHECKPOINT)) {
-		f2fs_show_injection_info(FAULT_CHECKPOINT);
-		f2fs_stop_checkpoint(sbi, false);
-	}
-#endif
-
-	/* balance_fs_bg is able to be pending */
-	if (need && excess_cached_nats(sbi))
-		f2fs_balance_fs_bg(sbi);
-
-	/*
-	 * We should do GC or end up with checkpoint, if there are so many dirty
-	 * dir/node pages without enough free segments.
-	 */
-	if (has_not_enough_free_secs(sbi, 0, 0)) {
-		mutex_lock(&sbi->gc_mutex);
-		f2fs_gc(sbi, false, false, NULL_SEGNO);
-	}
-}
-
-void f2fs_balance_fs_bg(struct f2fs_sb_info *sbi)
-{
-	/* try to shrink extent cache when there is no enough memory */
-	if (!available_free_memory(sbi, EXTENT_CACHE))
-		f2fs_shrink_extent_tree(sbi, EXTENT_CACHE_SHRINK_NUMBER);
-
-	/* check the # of cached NAT entries */
-	if (!available_free_memory(sbi, NAT_ENTRIES))
-		try_to_free_nats(sbi, NAT_ENTRY_PER_BLOCK);
-
-	if (!available_free_memory(sbi, FREE_NIDS))
-		try_to_free_nids(sbi, MAX_FREE_NIDS);
-	else
-		build_free_nids(sbi, false, false);
-
-	if (!is_idle(sbi) && !excess_dirty_nats(sbi))
-		return;
-
-	/* checkpoint is the only way to shrink partial cached entries */
-	if (!available_free_memory(sbi, NAT_ENTRIES) ||
-			!available_free_memory(sbi, INO_ENTRIES) ||
-			excess_prefree_segs(sbi) ||
-			excess_dirty_nats(sbi) ||
-			f2fs_time_over(sbi, CP_TIME)) {
-		if (test_opt(sbi, DATA_FLUSH)) {
-			struct blk_plug plug;
-
-			blk_start_plug(&plug);
-			sync_dirty_inodes(sbi, FILE_INODE);
-			blk_finish_plug(&plug);
-		}
-		f2fs_sync_fs(sbi->sb, true);
-		stat_inc_bg_cp_count(sbi->stat_info);
-	}
-}
-
-static int __submit_flush_wait(struct f2fs_sb_info *sbi,
-				struct block_device *bdev)
-{
-	struct bio *bio = f2fs_bio_alloc(0);
-	int ret;
-
-	bio->bi_rw = REQ_OP_WRITE;
-	bio->bi_bdev = bdev;
-	ret = submit_bio_wait(WRITE_FLUSH, bio);
-	bio_put(bio);
-
-	trace_f2fs_issue_flush(bdev, test_opt(sbi, NOBARRIER),
-				test_opt(sbi, FLUSH_MERGE), ret);
-	return ret;
-}
-
-static int submit_flush_wait(struct f2fs_sb_info *sbi)
-{
-	int ret = __submit_flush_wait(sbi, sbi->sb->s_bdev);
-	int i;
-
-	if (!sbi->s_ndevs || ret)
-		return ret;
-
-	for (i = 1; i < sbi->s_ndevs; i++) {
-		ret = __submit_flush_wait(sbi, FDEV(i).bdev);
-		if (ret)
-			break;
-	}
-	return ret;
-}
-
-static int issue_flush_thread(void *data)
-{
-	struct f2fs_sb_info *sbi = data;
-	struct flush_cmd_control *fcc = SM_I(sbi)->fcc_info;
-	wait_queue_head_t *q = &fcc->flush_wait_queue;
-repeat:
-	if (kthread_should_stop())
-		return 0;
-
-	sb_start_intwrite(sbi->sb);
-
-	if (!llist_empty(&fcc->issue_list)) {
-		struct flush_cmd *cmd, *next;
-		int ret;
-
-		fcc->dispatch_list = llist_del_all(&fcc->issue_list);
-		fcc->dispatch_list = llist_reverse_order(fcc->dispatch_list);
-
-		ret = submit_flush_wait(sbi);
-		atomic_inc(&fcc->issued_flush);
-
-		llist_for_each_entry_safe(cmd, next,
-					  fcc->dispatch_list, llnode) {
-			cmd->ret = ret;
-			complete(&cmd->wait);
-		}
-		fcc->dispatch_list = NULL;
-	}
-
-	sb_end_intwrite(sbi->sb);
-
-	wait_event_interruptible(*q,
-		kthread_should_stop() || !llist_empty(&fcc->issue_list));
-	goto repeat;
-}
-
-int f2fs_issue_flush(struct f2fs_sb_info *sbi)
-{
-	struct flush_cmd_control *fcc = SM_I(sbi)->fcc_info;
-	struct flush_cmd cmd;
-	int ret;
-
-	if (test_opt(sbi, NOBARRIER))
-		return 0;
-
-	if (!test_opt(sbi, FLUSH_MERGE)) {
-		ret = submit_flush_wait(sbi);
-		atomic_inc(&fcc->issued_flush);
-		return ret;
-	}
-
-	if (!atomic_read(&fcc->issing_flush)) {
-		atomic_inc(&fcc->issing_flush);
-		ret = submit_flush_wait(sbi);
-		atomic_dec(&fcc->issing_flush);
-
-		atomic_inc(&fcc->issued_flush);
-		return ret;
-	}
-
-	init_completion(&cmd.wait);
-
-	atomic_inc(&fcc->issing_flush);
-	llist_add(&cmd.llnode, &fcc->issue_list);
-
-	if (!fcc->dispatch_list)
-		wake_up(&fcc->flush_wait_queue);
-
-	if (fcc->f2fs_issue_flush) {
-		wait_for_completion(&cmd.wait);
-		atomic_dec(&fcc->issing_flush);
-	} else {
-		llist_del_all(&fcc->issue_list);
-		atomic_set(&fcc->issing_flush, 0);
-	}
-
-	return cmd.ret;
-}
-
-int create_flush_cmd_control(struct f2fs_sb_info *sbi)
-{
-	dev_t dev = sbi->sb->s_bdev->bd_dev;
-	struct flush_cmd_control *fcc;
-	int err = 0;
-
-	if (SM_I(sbi)->fcc_info) {
-		fcc = SM_I(sbi)->fcc_info;
-		goto init_thread;
-	}
-
-	fcc = kzalloc(sizeof(struct flush_cmd_control), GFP_KERNEL);
-	if (!fcc)
-		return -ENOMEM;
-	atomic_set(&fcc->issued_flush, 0);
-	atomic_set(&fcc->issing_flush, 0);
-	init_waitqueue_head(&fcc->flush_wait_queue);
-	init_llist_head(&fcc->issue_list);
-	SM_I(sbi)->fcc_info = fcc;
-	if (!test_opt(sbi, FLUSH_MERGE))
-		return err;
-
-init_thread:
-	fcc->f2fs_issue_flush = kthread_run(issue_flush_thread, sbi,
-				"f2fs_flush-%u:%u", MAJOR(dev), MINOR(dev));
-	if (IS_ERR(fcc->f2fs_issue_flush)) {
-		err = PTR_ERR(fcc->f2fs_issue_flush);
-		kfree(fcc);
-		SM_I(sbi)->fcc_info = NULL;
-		return err;
-	}
-
-	return err;
-}
-
-void destroy_flush_cmd_control(struct f2fs_sb_info *sbi, bool free)
-{
-	struct flush_cmd_control *fcc = SM_I(sbi)->fcc_info;
-
-	if (fcc && fcc->f2fs_issue_flush) {
-		struct task_struct *flush_thread = fcc->f2fs_issue_flush;
-
-		fcc->f2fs_issue_flush = NULL;
-		kthread_stop(flush_thread);
-	}
-	if (free) {
-		kfree(fcc);
-		SM_I(sbi)->fcc_info = NULL;
-	}
-}
-
-static void __locate_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno,
-		enum dirty_type dirty_type)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-
-	/* need not be added */
-	if (IS_CURSEG(sbi, segno))
-		return;
-
-	if (!test_and_set_bit(segno, dirty_i->dirty_segmap[dirty_type]))
-		dirty_i->nr_dirty[dirty_type]++;
-
-	if (dirty_type == DIRTY) {
-		struct seg_entry *sentry = get_seg_entry(sbi, segno);
-		enum dirty_type t = sentry->type;
-
-		if (unlikely(t >= DIRTY)) {
-			f2fs_bug_on(sbi, 1);
-			return;
-		}
-		if (!test_and_set_bit(segno, dirty_i->dirty_segmap[t]))
-			dirty_i->nr_dirty[t]++;
-	}
-}
-
-static void __remove_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno,
-		enum dirty_type dirty_type)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-
-	if (test_and_clear_bit(segno, dirty_i->dirty_segmap[dirty_type]))
-		dirty_i->nr_dirty[dirty_type]--;
-
-	if (dirty_type == DIRTY) {
-		struct seg_entry *sentry = get_seg_entry(sbi, segno);
-		enum dirty_type t = sentry->type;
-
-		if (test_and_clear_bit(segno, dirty_i->dirty_segmap[t]))
-			dirty_i->nr_dirty[t]--;
-
-		if (get_valid_blocks(sbi, segno, true) == 0)
-			clear_bit(GET_SEC_FROM_SEG(sbi, segno),
-						dirty_i->victim_secmap);
-	}
-}
-
-/*
- * Should not occur error such as -ENOMEM.
- * Adding dirty entry into seglist is not critical operation.
- * If a given segment is one of current working segments, it won't be added.
- */
-static void locate_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned short valid_blocks;
-
-	if (segno == NULL_SEGNO || IS_CURSEG(sbi, segno))
-		return;
-
-	mutex_lock(&dirty_i->seglist_lock);
-
-	valid_blocks = get_valid_blocks(sbi, segno, false);
-
-	if (valid_blocks == 0) {
-		__locate_dirty_segment(sbi, segno, PRE);
-		__remove_dirty_segment(sbi, segno, DIRTY);
-	} else if (valid_blocks < sbi->blocks_per_seg) {
-		__locate_dirty_segment(sbi, segno, DIRTY);
-	} else {
-		/* Recovery routine with SSR needs this */
-		__remove_dirty_segment(sbi, segno, DIRTY);
-	}
-
-	mutex_unlock(&dirty_i->seglist_lock);
-}
-
-static struct discard_cmd *__create_discard_cmd(struct f2fs_sb_info *sbi,
-		struct block_device *bdev, block_t lstart,
-		block_t start, block_t len)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct list_head *pend_list;
-	struct discard_cmd *dc;
-
-	f2fs_bug_on(sbi, !len);
-
-	pend_list = &dcc->pend_list[plist_idx(len)];
-
-	dc = f2fs_kmem_cache_alloc(discard_cmd_slab, GFP_NOFS);
-	INIT_LIST_HEAD(&dc->list);
-	dc->bdev = bdev;
-	dc->lstart = lstart;
-	dc->start = start;
-	dc->len = len;
-	dc->ref = 0;
-	dc->state = D_PREP;
-	dc->error = 0;
-	init_completion(&dc->wait);
-	list_add_tail(&dc->list, pend_list);
-	atomic_inc(&dcc->discard_cmd_cnt);
-	dcc->undiscard_blks += len;
-
-	return dc;
-}
-
-static struct discard_cmd *__attach_discard_cmd(struct f2fs_sb_info *sbi,
-				struct block_device *bdev, block_t lstart,
-				block_t start, block_t len,
-				struct rb_node *parent, struct rb_node **p)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct discard_cmd *dc;
-
-	dc = __create_discard_cmd(sbi, bdev, lstart, start, len);
-
-	rb_link_node(&dc->rb_node, parent, p);
-	rb_insert_color(&dc->rb_node, &dcc->root);
-
-	return dc;
-}
-
-static void __detach_discard_cmd(struct discard_cmd_control *dcc,
-							struct discard_cmd *dc)
-{
-	if (dc->state == D_DONE)
-		atomic_dec(&dcc->issing_discard);
-
-	list_del(&dc->list);
-	rb_erase(&dc->rb_node, &dcc->root);
-	dcc->undiscard_blks -= dc->len;
-
-	kmem_cache_free(discard_cmd_slab, dc);
-
-	atomic_dec(&dcc->discard_cmd_cnt);
-}
-
-static void __remove_discard_cmd(struct f2fs_sb_info *sbi,
-							struct discard_cmd *dc)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-
-	if (dc->error == -EOPNOTSUPP)
-		dc->error = 0;
-
-	if (dc->error)
-		f2fs_msg(sbi->sb, KERN_INFO,
-				"Issue discard failed, ret: %d", dc->error);
-	__detach_discard_cmd(dcc, dc);
-}
-
-static void f2fs_submit_discard_endio(struct bio *bio, int err)
-{
-	struct discard_cmd *dc = (struct discard_cmd *)bio->bi_private;
-
-	dc->error = err;
-	dc->state = D_DONE;
-	complete(&dc->wait);
-	bio_put(bio);
-}
-
-/* copied from block/blk-lib.c in 4.10-rc1 */
-static int __blkdev_issue_discard(struct block_device *bdev, sector_t sector,
-		sector_t nr_sects, gfp_t gfp_mask, int flags,
-		struct bio **biop)
-{
-	struct request_queue *q = bdev_get_queue(bdev);
-	struct bio *bio = *biop;
-	unsigned int granularity;
-	int op = REQ_WRITE | REQ_DISCARD;
-	int alignment;
-	sector_t bs_mask;
-
-	if (!q)
-		return -ENXIO;
-
-	if (!blk_queue_discard(q))
-		return -EOPNOTSUPP;
-
-	if (flags & BLKDEV_DISCARD_SECURE) {
-		if (!blk_queue_secdiscard(q))
-			return -EOPNOTSUPP;
-		op |= REQ_SECURE;
-	}
-
-	bs_mask = (bdev_logical_block_size(bdev) >> 9) - 1;
-	if ((sector | nr_sects) & bs_mask)
-		return -EINVAL;
-
-	/* Zero-sector (unknown) and one-sector granularities are the same.  */
-	granularity = max(q->limits.discard_granularity >> 9, 1U);
-	alignment = (bdev_discard_alignment(bdev) >> 9) % granularity;
-
-	while (nr_sects) {
-		unsigned int req_sects;
-		sector_t end_sect, tmp;
-
-		/* Make sure bi_size doesn't overflow */
-		req_sects = min_t(sector_t, nr_sects, UINT_MAX >> 9);
-
-		/**
-		 * If splitting a request, and the next starting sector would be
-		 * misaligned, stop the discard at the previous aligned sector.
-		 */
-		end_sect = sector + req_sects;
-		tmp = end_sect;
-		if (req_sects < nr_sects &&
-		    sector_div(tmp, granularity) != alignment) {
-			end_sect = end_sect - alignment;
-			sector_div(end_sect, granularity);
-			end_sect = end_sect * granularity + alignment;
-			req_sects = end_sect - sector;
-		}
-
-		if (bio) {
-			int ret = submit_bio_wait(0, bio);
-			bio_put(bio);
-			if (ret)
-				return ret;
-		}
-		bio = f2fs_bio_alloc(1);
-		bio->bi_sector = sector;
-		bio->bi_bdev = bdev;
-		bio_set_op_attrs(bio, op, 0);
-
-		bio->bi_size = req_sects << 9;
-		nr_sects -= req_sects;
-		sector = end_sect;
-
-		/*
-		 * We can loop for a long time in here, if someone does
-		 * full device discards (like mkfs). Be nice and allow
-		 * us to schedule out to avoid softlocking if preempt
-		 * is disabled.
-		 */
-		cond_resched();
-	}
-
-	*biop = bio;
-	return 0;
-}
-
-static void __submit_discard_cmd(struct f2fs_sb_info *sbi,
-				struct discard_cmd *dc)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct bio *bio = NULL;
-
-	if (dc->state != D_PREP)
-		return;
-
-	trace_f2fs_issue_discard(dc->bdev, dc->start, dc->len);
-
-	dc->error = __blkdev_issue_discard(dc->bdev,
-				SECTOR_FROM_BLOCK(dc->start),
-				SECTOR_FROM_BLOCK(dc->len),
-				GFP_NOFS, 0, &bio);
-	if (!dc->error) {
-		/* should keep before submission to avoid D_DONE right away */
-		dc->state = D_SUBMIT;
-		atomic_inc(&dcc->issued_discard);
-		atomic_inc(&dcc->issing_discard);
-		if (bio) {
-			bio->bi_private = dc;
-			bio->bi_end_io = f2fs_submit_discard_endio;
-			submit_bio(REQ_SYNC, bio);
-			list_move_tail(&dc->list, &dcc->wait_list);
-		}
-	} else {
-		__remove_discard_cmd(sbi, dc);
-	}
-}
-
-static struct discard_cmd *__insert_discard_tree(struct f2fs_sb_info *sbi,
-				struct block_device *bdev, block_t lstart,
-				block_t start, block_t len,
-				struct rb_node **insert_p,
-				struct rb_node *insert_parent)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct rb_node **p = &dcc->root.rb_node;
-	struct rb_node *parent = NULL;
-	struct discard_cmd *dc = NULL;
-
-	if (insert_p && insert_parent) {
-		parent = insert_parent;
-		p = insert_p;
-		goto do_insert;
-	}
-
-	p = __lookup_rb_tree_for_insert(sbi, &dcc->root, &parent, lstart);
-do_insert:
-	dc = __attach_discard_cmd(sbi, bdev, lstart, start, len, parent, p);
-	if (!dc)
-		return NULL;
-
-	return dc;
-}
-
-static void __relocate_discard_cmd(struct discard_cmd_control *dcc,
-						struct discard_cmd *dc)
-{
-	list_move_tail(&dc->list, &dcc->pend_list[plist_idx(dc->len)]);
-}
-
-static void __punch_discard_cmd(struct f2fs_sb_info *sbi,
-				struct discard_cmd *dc, block_t blkaddr)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct discard_info di = dc->di;
-	bool modified = false;
-
-	if (dc->state == D_DONE || dc->len == 1) {
-		__remove_discard_cmd(sbi, dc);
-		return;
-	}
-
-	dcc->undiscard_blks -= di.len;
-
-	if (blkaddr > di.lstart) {
-		dc->len = blkaddr - dc->lstart;
-		dcc->undiscard_blks += dc->len;
-		__relocate_discard_cmd(dcc, dc);
-		f2fs_bug_on(sbi, !__check_rb_tree_consistence(sbi, &dcc->root));
-		modified = true;
-	}
-
-	if (blkaddr < di.lstart + di.len - 1) {
-		if (modified) {
-			__insert_discard_tree(sbi, dc->bdev, blkaddr + 1,
-					di.start + blkaddr + 1 - di.lstart,
-					di.lstart + di.len - 1 - blkaddr,
-					NULL, NULL);
-			f2fs_bug_on(sbi,
-				!__check_rb_tree_consistence(sbi, &dcc->root));
-		} else {
-			dc->lstart++;
-			dc->len--;
-			dc->start++;
-			dcc->undiscard_blks += dc->len;
-			__relocate_discard_cmd(dcc, dc);
-			f2fs_bug_on(sbi,
-				!__check_rb_tree_consistence(sbi, &dcc->root));
-		}
-	}
-}
-
-static void __update_discard_tree_range(struct f2fs_sb_info *sbi,
-				struct block_device *bdev, block_t lstart,
-				block_t start, block_t len)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct discard_cmd *prev_dc = NULL, *next_dc = NULL;
-	struct discard_cmd *dc;
-	struct discard_info di = {0};
-	struct rb_node **insert_p = NULL, *insert_parent = NULL;
-	block_t end = lstart + len;
-
-	mutex_lock(&dcc->cmd_lock);
-
-	dc = (struct discard_cmd *)__lookup_rb_tree_ret(&dcc->root,
-					NULL, lstart,
-					(struct rb_entry **)&prev_dc,
-					(struct rb_entry **)&next_dc,
-					&insert_p, &insert_parent, true);
-	if (dc)
-		prev_dc = dc;
-
-	if (!prev_dc) {
-		di.lstart = lstart;
-		di.len = next_dc ? next_dc->lstart - lstart : len;
-		di.len = min(di.len, len);
-		di.start = start;
-	}
-
-	while (1) {
-		struct rb_node *node;
-		bool merged = false;
-		struct discard_cmd *tdc = NULL;
-
-		if (prev_dc) {
-			di.lstart = prev_dc->lstart + prev_dc->len;
-			if (di.lstart < lstart)
-				di.lstart = lstart;
-			if (di.lstart >= end)
-				break;
-
-			if (!next_dc || next_dc->lstart > end)
-				di.len = end - di.lstart;
-			else
-				di.len = next_dc->lstart - di.lstart;
-			di.start = start + di.lstart - lstart;
-		}
-
-		if (!di.len)
-			goto next;
-
-		if (prev_dc && prev_dc->state == D_PREP &&
-			prev_dc->bdev == bdev &&
-			__is_discard_back_mergeable(&di, &prev_dc->di)) {
-			prev_dc->di.len += di.len;
-			dcc->undiscard_blks += di.len;
-			__relocate_discard_cmd(dcc, prev_dc);
-			f2fs_bug_on(sbi,
-				!__check_rb_tree_consistence(sbi, &dcc->root));
-			di = prev_dc->di;
-			tdc = prev_dc;
-			merged = true;
-		}
-
-		if (next_dc && next_dc->state == D_PREP &&
-			next_dc->bdev == bdev &&
-			__is_discard_front_mergeable(&di, &next_dc->di)) {
-			next_dc->di.lstart = di.lstart;
-			next_dc->di.len += di.len;
-			next_dc->di.start = di.start;
-			dcc->undiscard_blks += di.len;
-			__relocate_discard_cmd(dcc, next_dc);
-			if (tdc)
-				__remove_discard_cmd(sbi, tdc);
-			f2fs_bug_on(sbi,
-				!__check_rb_tree_consistence(sbi, &dcc->root));
-			merged = true;
-		}
-
-		if (!merged) {
-			__insert_discard_tree(sbi, bdev, di.lstart, di.start,
-							di.len, NULL, NULL);
-			f2fs_bug_on(sbi,
-				!__check_rb_tree_consistence(sbi, &dcc->root));
-		}
- next:
-		prev_dc = next_dc;
-		if (!prev_dc)
-			break;
-
-		node = rb_next(&prev_dc->rb_node);
-		next_dc = rb_entry_safe(node, struct discard_cmd, rb_node);
-	}
-
-	mutex_unlock(&dcc->cmd_lock);
-}
-
-static int __queue_discard_cmd(struct f2fs_sb_info *sbi,
-		struct block_device *bdev, block_t blkstart, block_t blklen)
-{
-	block_t lblkstart = blkstart;
-
-	trace_f2fs_queue_discard(bdev, blkstart, blklen);
-
-	if (sbi->s_ndevs) {
-		int devi = f2fs_target_device_index(sbi, blkstart);
-
-		blkstart -= FDEV(devi).start_blk;
-	}
-	__update_discard_tree_range(sbi, bdev, lblkstart, blkstart, blklen);
-	return 0;
-}
-
-static void __issue_discard_cmd(struct f2fs_sb_info *sbi, bool issue_cond)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct list_head *pend_list;
-	struct discard_cmd *dc, *tmp;
-	struct blk_plug plug;
-	int i, iter = 0;
-
-	mutex_lock(&dcc->cmd_lock);
-	blk_start_plug(&plug);
-	for (i = MAX_PLIST_NUM - 1; i >= 0; i--) {
-		pend_list = &dcc->pend_list[i];
-		list_for_each_entry_safe(dc, tmp, pend_list, list) {
-			f2fs_bug_on(sbi, dc->state != D_PREP);
-
-			if (!issue_cond || is_idle(sbi))
-				__submit_discard_cmd(sbi, dc);
-			if (issue_cond && iter++ > DISCARD_ISSUE_RATE)
-				goto out;
-		}
-	}
-out:
-	blk_finish_plug(&plug);
-	mutex_unlock(&dcc->cmd_lock);
-}
-
-static void __wait_discard_cmd(struct f2fs_sb_info *sbi, bool wait_cond)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct list_head *wait_list = &(dcc->wait_list);
-	struct discard_cmd *dc, *tmp;
-
-	mutex_lock(&dcc->cmd_lock);
-	list_for_each_entry_safe(dc, tmp, wait_list, list) {
-		if (!wait_cond || dc->state == D_DONE) {
-			if (dc->ref)
-				continue;
-			wait_for_completion_io(&dc->wait);
-			__remove_discard_cmd(sbi, dc);
-		}
-	}
-	mutex_unlock(&dcc->cmd_lock);
-}
-
-/* This should be covered by global mutex, &sit_i->sentry_lock */
-void f2fs_wait_discard_bio(struct f2fs_sb_info *sbi, block_t blkaddr)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct discard_cmd *dc;
-	bool need_wait = false;
-
-	mutex_lock(&dcc->cmd_lock);
-	dc = (struct discard_cmd *)__lookup_rb_tree(&dcc->root, NULL, blkaddr);
-	if (dc) {
-		if (dc->state == D_PREP) {
-			__punch_discard_cmd(sbi, dc, blkaddr);
-		} else {
-			dc->ref++;
-			need_wait = true;
-		}
-	}
-	mutex_unlock(&dcc->cmd_lock);
-
-	if (need_wait) {
-		wait_for_completion_io(&dc->wait);
-		mutex_lock(&dcc->cmd_lock);
-		f2fs_bug_on(sbi, dc->state != D_DONE);
-		dc->ref--;
-		if (!dc->ref)
-			__remove_discard_cmd(sbi, dc);
-		mutex_unlock(&dcc->cmd_lock);
-	}
-}
-
-/* This comes from f2fs_put_super */
-void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi)
-{
-	__issue_discard_cmd(sbi, false);
-	__wait_discard_cmd(sbi, false);
-}
-
-static int issue_discard_thread(void *data)
-{
-	struct f2fs_sb_info *sbi = data;
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	wait_queue_head_t *q = &dcc->discard_wait_queue;
-repeat:
-	if (kthread_should_stop())
-		return 0;
-
-	sb_start_intwrite(sbi->sb);
-
-	__issue_discard_cmd(sbi, true);
-	__wait_discard_cmd(sbi, true);
-
-	sb_end_intwrite(sbi->sb);
-
-	congestion_wait(BLK_RW_SYNC, HZ/50);
-
-	wait_event_interruptible(*q, kthread_should_stop() ||
-				atomic_read(&dcc->discard_cmd_cnt));
-	goto repeat;
-}
-
-#ifdef CONFIG_BLK_DEV_ZONED
-static int __f2fs_issue_discard_zone(struct f2fs_sb_info *sbi,
-		struct block_device *bdev, block_t blkstart, block_t blklen)
-{
-	sector_t sector, nr_sects;
-	block_t lblkstart = blkstart;
-	int devi = 0;
-
-	if (sbi->s_ndevs) {
-		devi = f2fs_target_device_index(sbi, blkstart);
-		blkstart -= FDEV(devi).start_blk;
-	}
-
-	/*
-	 * We need to know the type of the zone: for conventional zones,
-	 * use regular discard if the drive supports it. For sequential
-	 * zones, reset the zone write pointer.
-	 */
-	switch (get_blkz_type(sbi, bdev, blkstart)) {
-
-	case BLK_ZONE_TYPE_CONVENTIONAL:
-		if (!blk_queue_discard(bdev_get_queue(bdev)))
-			return 0;
-		return __queue_discard_cmd(sbi, bdev, lblkstart, blklen);
-	case BLK_ZONE_TYPE_SEQWRITE_REQ:
-	case BLK_ZONE_TYPE_SEQWRITE_PREF:
-		sector = SECTOR_FROM_BLOCK(blkstart);
-		nr_sects = SECTOR_FROM_BLOCK(blklen);
-
-		if (sector & (bdev_zone_size(bdev) - 1) ||
-				nr_sects != bdev_zone_size(bdev)) {
-			f2fs_msg(sbi->sb, KERN_INFO,
-				"(%d) %s: Unaligned discard attempted (block %x + %x)",
-				devi, sbi->s_ndevs ? FDEV(devi).path: "",
-				blkstart, blklen);
-			return -EIO;
-		}
-		trace_f2fs_issue_reset_zone(bdev, blkstart);
-		return blkdev_reset_zones(bdev, sector,
-					  nr_sects, GFP_NOFS);
-	default:
-		/* Unknown zone type: broken device ? */
-		return -EIO;
-	}
-}
-#endif
-
-static int __issue_discard_async(struct f2fs_sb_info *sbi,
-		struct block_device *bdev, block_t blkstart, block_t blklen)
-{
-#ifdef CONFIG_BLK_DEV_ZONED
-	if (f2fs_sb_mounted_blkzoned(sbi->sb) &&
-				bdev_zoned_model(bdev) != BLK_ZONED_NONE)
-		return __f2fs_issue_discard_zone(sbi, bdev, blkstart, blklen);
-#endif
-	return __queue_discard_cmd(sbi, bdev, blkstart, blklen);
-}
-
-static int f2fs_issue_discard(struct f2fs_sb_info *sbi,
-				block_t blkstart, block_t blklen)
-{
-	sector_t start = blkstart, len = 0;
-	struct block_device *bdev;
-	struct seg_entry *se;
-	unsigned int offset;
-	block_t i;
-	int err = 0;
-
-	bdev = f2fs_target_device(sbi, blkstart, NULL);
-
-	for (i = blkstart; i < blkstart + blklen; i++, len++) {
-		if (i != start) {
-			struct block_device *bdev2 =
-				f2fs_target_device(sbi, i, NULL);
-
-			if (bdev2 != bdev) {
-				err = __issue_discard_async(sbi, bdev,
-						start, len);
-				if (err)
-					return err;
-				bdev = bdev2;
-				start = i;
-				len = 0;
-			}
-		}
-
-		se = get_seg_entry(sbi, GET_SEGNO(sbi, i));
-		offset = GET_BLKOFF_FROM_SEG0(sbi, i);
-
-		if (!f2fs_test_and_set_bit(offset, se->discard_map))
-			sbi->discard_blks--;
-	}
-
-	if (len)
-		err = __issue_discard_async(sbi, bdev, start, len);
-	return err;
-}
-
-static bool add_discard_addrs(struct f2fs_sb_info *sbi, struct cp_control *cpc,
-							bool check_only)
-{
-	int entries = SIT_VBLOCK_MAP_SIZE / sizeof(unsigned long);
-	int max_blocks = sbi->blocks_per_seg;
-	struct seg_entry *se = get_seg_entry(sbi, cpc->trim_start);
-	unsigned long *cur_map = (unsigned long *)se->cur_valid_map;
-	unsigned long *ckpt_map = (unsigned long *)se->ckpt_valid_map;
-	unsigned long *discard_map = (unsigned long *)se->discard_map;
-	unsigned long *dmap = SIT_I(sbi)->tmp_map;
-	unsigned int start = 0, end = -1;
-	bool force = (cpc->reason & CP_DISCARD);
-	struct discard_entry *de = NULL;
-	struct list_head *head = &SM_I(sbi)->dcc_info->entry_list;
-	int i;
-
-	if (se->valid_blocks == max_blocks || !f2fs_discard_en(sbi))
-		return false;
-
-	if (!force) {
-		if (!test_opt(sbi, DISCARD) || !se->valid_blocks ||
-			SM_I(sbi)->dcc_info->nr_discards >=
-				SM_I(sbi)->dcc_info->max_discards)
-			return false;
-	}
-
-	/* SIT_VBLOCK_MAP_SIZE should be multiple of sizeof(unsigned long) */
-	for (i = 0; i < entries; i++)
-		dmap[i] = force ? ~ckpt_map[i] & ~discard_map[i] :
-				(cur_map[i] ^ ckpt_map[i]) & ckpt_map[i];
-
-	while (force || SM_I(sbi)->dcc_info->nr_discards <=
-				SM_I(sbi)->dcc_info->max_discards) {
-		start = __find_rev_next_bit(dmap, max_blocks, end + 1);
-		if (start >= max_blocks)
-			break;
-
-		end = __find_rev_next_zero_bit(dmap, max_blocks, start + 1);
-		if (force && start && end != max_blocks
-					&& (end - start) < cpc->trim_minlen)
-			continue;
-
-		if (check_only)
-			return true;
-
-		if (!de) {
-			de = f2fs_kmem_cache_alloc(discard_entry_slab,
-								GFP_F2FS_ZERO);
-			de->start_blkaddr = START_BLOCK(sbi, cpc->trim_start);
-			list_add_tail(&de->list, head);
-		}
-
-		for (i = start; i < end; i++)
-			__set_bit_le(i, (void *)de->discard_map);
-
-		SM_I(sbi)->dcc_info->nr_discards += end - start;
-	}
-	return false;
-}
-
-void release_discard_addrs(struct f2fs_sb_info *sbi)
-{
-	struct list_head *head = &(SM_I(sbi)->dcc_info->entry_list);
-	struct discard_entry *entry, *this;
-
-	/* drop caches */
-	list_for_each_entry_safe(entry, this, head, list) {
-		list_del(&entry->list);
-		kmem_cache_free(discard_entry_slab, entry);
-	}
-}
-
-/*
- * Should call clear_prefree_segments after checkpoint is done.
- */
-static void set_prefree_as_free_segments(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned int segno;
-
-	mutex_lock(&dirty_i->seglist_lock);
-	for_each_set_bit(segno, dirty_i->dirty_segmap[PRE], MAIN_SEGS(sbi))
-		__set_test_and_free(sbi, segno);
-	mutex_unlock(&dirty_i->seglist_lock);
-}
-
-void clear_prefree_segments(struct f2fs_sb_info *sbi, struct cp_control *cpc)
-{
-	struct list_head *head = &(SM_I(sbi)->dcc_info->entry_list);
-	struct discard_entry *entry, *this;
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned long *prefree_map = dirty_i->dirty_segmap[PRE];
-	unsigned int start = 0, end = -1;
-	unsigned int secno, start_segno;
-	bool force = (cpc->reason & CP_DISCARD);
-
-	mutex_lock(&dirty_i->seglist_lock);
-
-	while (1) {
-		int i;
-		start = find_next_bit(prefree_map, MAIN_SEGS(sbi), end + 1);
-		if (start >= MAIN_SEGS(sbi))
-			break;
-		end = find_next_zero_bit(prefree_map, MAIN_SEGS(sbi),
-								start + 1);
-
-		for (i = start; i < end; i++)
-			clear_bit(i, prefree_map);
-
-		dirty_i->nr_dirty[PRE] -= end - start;
-
-		if (!test_opt(sbi, DISCARD))
-			continue;
-
-		if (force && start >= cpc->trim_start &&
-					(end - 1) <= cpc->trim_end)
-				continue;
-
-		if (!test_opt(sbi, LFS) || sbi->segs_per_sec == 1) {
-			f2fs_issue_discard(sbi, START_BLOCK(sbi, start),
-				(end - start) << sbi->log_blocks_per_seg);
-			continue;
-		}
-next:
-		secno = GET_SEC_FROM_SEG(sbi, start);
-		start_segno = GET_SEG_FROM_SEC(sbi, secno);
-		if (!IS_CURSEC(sbi, secno) &&
-			!get_valid_blocks(sbi, start, true))
-			f2fs_issue_discard(sbi, START_BLOCK(sbi, start_segno),
-				sbi->segs_per_sec << sbi->log_blocks_per_seg);
-
-		start = start_segno + sbi->segs_per_sec;
-		if (start < end)
-			goto next;
-		else
-			end = start - 1;
-	}
-	mutex_unlock(&dirty_i->seglist_lock);
-
-	/* send small discards */
-	list_for_each_entry_safe(entry, this, head, list) {
-		unsigned int cur_pos = 0, next_pos, len, total_len = 0;
-		bool is_valid = test_bit_le(0, entry->discard_map);
-
-find_next:
-		if (is_valid) {
-			next_pos = find_next_zero_bit_le(entry->discard_map,
-					sbi->blocks_per_seg, cur_pos);
-			len = next_pos - cur_pos;
-
-			if (force && len < cpc->trim_minlen)
-				goto skip;
-
-			f2fs_issue_discard(sbi, entry->start_blkaddr + cur_pos,
-									len);
-			cpc->trimmed += len;
-			total_len += len;
-		} else {
-			next_pos = find_next_bit_le(entry->discard_map,
-					sbi->blocks_per_seg, cur_pos);
-		}
-skip:
-		cur_pos = next_pos;
-		is_valid = !is_valid;
-
-		if (cur_pos < sbi->blocks_per_seg)
-			goto find_next;
-
-		list_del(&entry->list);
-		SM_I(sbi)->dcc_info->nr_discards -= total_len;
-		kmem_cache_free(discard_entry_slab, entry);
-	}
-
-	wake_up(&SM_I(sbi)->dcc_info->discard_wait_queue);
-}
-
-static int create_discard_cmd_control(struct f2fs_sb_info *sbi)
-{
-	dev_t dev = sbi->sb->s_bdev->bd_dev;
-	struct discard_cmd_control *dcc;
-	int err = 0, i;
-
-	if (SM_I(sbi)->dcc_info) {
-		dcc = SM_I(sbi)->dcc_info;
-		goto init_thread;
-	}
-
-	dcc = kzalloc(sizeof(struct discard_cmd_control), GFP_KERNEL);
-	if (!dcc)
-		return -ENOMEM;
-
-	INIT_LIST_HEAD(&dcc->entry_list);
-	for (i = 0; i < MAX_PLIST_NUM; i++)
-		INIT_LIST_HEAD(&dcc->pend_list[i]);
-	INIT_LIST_HEAD(&dcc->wait_list);
-	mutex_init(&dcc->cmd_lock);
-	atomic_set(&dcc->issued_discard, 0);
-	atomic_set(&dcc->issing_discard, 0);
-	atomic_set(&dcc->discard_cmd_cnt, 0);
-	dcc->nr_discards = 0;
-	dcc->max_discards = MAIN_SEGS(sbi) << sbi->log_blocks_per_seg;
-	dcc->undiscard_blks = 0;
-	dcc->root = RB_ROOT;
-
-	init_waitqueue_head(&dcc->discard_wait_queue);
-	SM_I(sbi)->dcc_info = dcc;
-init_thread:
-	dcc->f2fs_issue_discard = kthread_run(issue_discard_thread, sbi,
-				"f2fs_discard-%u:%u", MAJOR(dev), MINOR(dev));
-	if (IS_ERR(dcc->f2fs_issue_discard)) {
-		err = PTR_ERR(dcc->f2fs_issue_discard);
-		kfree(dcc);
-		SM_I(sbi)->dcc_info = NULL;
-		return err;
-	}
-
-	return err;
-}
-
-static void destroy_discard_cmd_control(struct f2fs_sb_info *sbi)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-
-	if (!dcc)
-		return;
-
-	if (dcc->f2fs_issue_discard) {
-		struct task_struct *discard_thread = dcc->f2fs_issue_discard;
-
-		dcc->f2fs_issue_discard = NULL;
-		kthread_stop(discard_thread);
-	}
-
-	kfree(dcc);
-	SM_I(sbi)->dcc_info = NULL;
-}
-
-static bool __mark_sit_entry_dirty(struct f2fs_sb_info *sbi, unsigned int segno)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-
-	if (!__test_and_set_bit(segno, sit_i->dirty_sentries_bitmap)) {
-		sit_i->dirty_sentries++;
-		return false;
-	}
-
-	return true;
-}
-
-static void __set_sit_entry_type(struct f2fs_sb_info *sbi, int type,
-					unsigned int segno, int modified)
-{
-	struct seg_entry *se = get_seg_entry(sbi, segno);
-	se->type = type;
-	if (modified)
-		__mark_sit_entry_dirty(sbi, segno);
-}
-
-static void update_sit_entry(struct f2fs_sb_info *sbi, block_t blkaddr, int del)
-{
-	struct seg_entry *se;
-	unsigned int segno, offset;
-	long int new_vblocks;
-
-	segno = GET_SEGNO(sbi, blkaddr);
-
-	se = get_seg_entry(sbi, segno);
-	new_vblocks = se->valid_blocks + del;
-	offset = GET_BLKOFF_FROM_SEG0(sbi, blkaddr);
-
-	f2fs_bug_on(sbi, (new_vblocks >> (sizeof(unsigned short) << 3) ||
-				(new_vblocks > sbi->blocks_per_seg)));
-
-	se->valid_blocks = new_vblocks;
-	se->mtime = get_mtime(sbi);
-	SIT_I(sbi)->max_mtime = se->mtime;
-
-	/* Update valid block bitmap */
-	if (del > 0) {
-		if (f2fs_test_and_set_bit(offset, se->cur_valid_map)) {
-#ifdef CONFIG_F2FS_CHECK_FS
-			if (f2fs_test_and_set_bit(offset,
-						se->cur_valid_map_mir))
-				f2fs_bug_on(sbi, 1);
-			else
-				WARN_ON(1);
-#else
-			f2fs_bug_on(sbi, 1);
-#endif
-		}
-		if (f2fs_discard_en(sbi) &&
-			!f2fs_test_and_set_bit(offset, se->discard_map))
-			sbi->discard_blks--;
-
-		/* don't overwrite by SSR to keep node chain */
-		if (se->type == CURSEG_WARM_NODE) {
-			if (!f2fs_test_and_set_bit(offset, se->ckpt_valid_map))
-				se->ckpt_valid_blocks++;
-		}
-	} else {
-		if (!f2fs_test_and_clear_bit(offset, se->cur_valid_map)) {
-#ifdef CONFIG_F2FS_CHECK_FS
-			if (!f2fs_test_and_clear_bit(offset,
-						se->cur_valid_map_mir))
-				f2fs_bug_on(sbi, 1);
-			else
-				WARN_ON(1);
-#else
-			f2fs_bug_on(sbi, 1);
-#endif
-		}
-		if (f2fs_discard_en(sbi) &&
-			f2fs_test_and_clear_bit(offset, se->discard_map))
-			sbi->discard_blks++;
-	}
-	if (!f2fs_test_bit(offset, se->ckpt_valid_map))
-		se->ckpt_valid_blocks += del;
-
-	__mark_sit_entry_dirty(sbi, segno);
-
-	/* update total number of valid blocks to be written in ckpt area */
-	SIT_I(sbi)->written_valid_blocks += del;
-
-	if (sbi->segs_per_sec > 1)
-		get_sec_entry(sbi, segno)->valid_blocks += del;
-}
-
-void refresh_sit_entry(struct f2fs_sb_info *sbi, block_t old, block_t new)
-{
-	update_sit_entry(sbi, new, 1);
-	if (GET_SEGNO(sbi, old) != NULL_SEGNO)
-		update_sit_entry(sbi, old, -1);
-
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, old));
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, new));
-}
-
-void invalidate_blocks(struct f2fs_sb_info *sbi, block_t addr)
-{
-	unsigned int segno = GET_SEGNO(sbi, addr);
-	struct sit_info *sit_i = SIT_I(sbi);
-
-	f2fs_bug_on(sbi, addr == NULL_ADDR);
-	if (addr == NEW_ADDR)
-		return;
-
-	/* add it into sit main buffer */
-	mutex_lock(&sit_i->sentry_lock);
-
-	update_sit_entry(sbi, addr, -1);
-
-	/* add it into dirty seglist */
-	locate_dirty_segment(sbi, segno);
-
-	mutex_unlock(&sit_i->sentry_lock);
-}
-
-bool is_checkpointed_data(struct f2fs_sb_info *sbi, block_t blkaddr)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned int segno, offset;
-	struct seg_entry *se;
-	bool is_cp = false;
-
-	if (blkaddr == NEW_ADDR || blkaddr == NULL_ADDR)
-		return true;
-
-	mutex_lock(&sit_i->sentry_lock);
-
-	segno = GET_SEGNO(sbi, blkaddr);
-	se = get_seg_entry(sbi, segno);
-	offset = GET_BLKOFF_FROM_SEG0(sbi, blkaddr);
-
-	if (f2fs_test_bit(offset, se->ckpt_valid_map))
-		is_cp = true;
-
-	mutex_unlock(&sit_i->sentry_lock);
-
-	return is_cp;
-}
-
-/*
- * This function should be resided under the curseg_mutex lock
- */
-static void __add_sum_entry(struct f2fs_sb_info *sbi, int type,
-					struct f2fs_summary *sum)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	void *addr = curseg->sum_blk;
-	addr += curseg->next_blkoff * sizeof(struct f2fs_summary);
-	memcpy(addr, sum, sizeof(struct f2fs_summary));
-}
-
-/*
- * Calculate the number of current summary pages for writing
- */
-int npages_for_summary_flush(struct f2fs_sb_info *sbi, bool for_ra)
-{
-	int valid_sum_count = 0;
-	int i, sum_in_page;
-
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		if (sbi->ckpt->alloc_type[i] == SSR)
-			valid_sum_count += sbi->blocks_per_seg;
-		else {
-			if (for_ra)
-				valid_sum_count += le16_to_cpu(
-					F2FS_CKPT(sbi)->cur_data_blkoff[i]);
-			else
-				valid_sum_count += curseg_blkoff(sbi, i);
-		}
-	}
-
-	sum_in_page = (PAGE_SIZE - 2 * SUM_JOURNAL_SIZE -
-			SUM_FOOTER_SIZE) / SUMMARY_SIZE;
-	if (valid_sum_count <= sum_in_page)
-		return 1;
-	else if ((valid_sum_count - sum_in_page) <=
-		(PAGE_SIZE - SUM_FOOTER_SIZE) / SUMMARY_SIZE)
-		return 2;
-	return 3;
-}
-
-/*
- * Caller should put this summary page
- */
-struct page *get_sum_page(struct f2fs_sb_info *sbi, unsigned int segno)
-{
-	return get_meta_page(sbi, GET_SUM_BLOCK(sbi, segno));
-}
-
-void update_meta_page(struct f2fs_sb_info *sbi, void *src, block_t blk_addr)
-{
-	struct page *page = grab_meta_page(sbi, blk_addr);
-	void *dst = page_address(page);
-
-	if (src)
-		memcpy(dst, src, PAGE_SIZE);
-	else
-		memset(dst, 0, PAGE_SIZE);
-	set_page_dirty(page);
-	f2fs_put_page(page, 1);
-}
-
-static void write_sum_page(struct f2fs_sb_info *sbi,
-			struct f2fs_summary_block *sum_blk, block_t blk_addr)
-{
-	update_meta_page(sbi, (void *)sum_blk, blk_addr);
-}
-
-static void write_current_sum_page(struct f2fs_sb_info *sbi,
-						int type, block_t blk_addr)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	struct page *page = grab_meta_page(sbi, blk_addr);
-	struct f2fs_summary_block *src = curseg->sum_blk;
-	struct f2fs_summary_block *dst;
-
-	dst = (struct f2fs_summary_block *)page_address(page);
-
-	mutex_lock(&curseg->curseg_mutex);
-
-	down_read(&curseg->journal_rwsem);
-	memcpy(&dst->journal, curseg->journal, SUM_JOURNAL_SIZE);
-	up_read(&curseg->journal_rwsem);
-
-	memcpy(dst->entries, src->entries, SUM_ENTRY_SIZE);
-	memcpy(&dst->footer, &src->footer, SUM_FOOTER_SIZE);
-
-	mutex_unlock(&curseg->curseg_mutex);
-
-	set_page_dirty(page);
-	f2fs_put_page(page, 1);
-}
-
-static int is_next_segment_free(struct f2fs_sb_info *sbi, int type)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	unsigned int segno = curseg->segno + 1;
-	struct free_segmap_info *free_i = FREE_I(sbi);
-
-	if (segno < MAIN_SEGS(sbi) && segno % sbi->segs_per_sec)
-		return !test_bit(segno, free_i->free_segmap);
-	return 0;
-}
-
-/*
- * Find a new segment from the free segments bitmap to right order
- * This function should be returned with success, otherwise BUG
- */
-static void get_new_segment(struct f2fs_sb_info *sbi,
-			unsigned int *newseg, bool new_sec, int dir)
-{
-	struct free_segmap_info *free_i = FREE_I(sbi);
-	unsigned int segno, secno, zoneno;
-	unsigned int total_zones = MAIN_SECS(sbi) / sbi->secs_per_zone;
-	unsigned int hint = GET_SEC_FROM_SEG(sbi, *newseg);
-	unsigned int old_zoneno = GET_ZONE_FROM_SEG(sbi, *newseg);
-	unsigned int left_start = hint;
-	bool init = true;
-	int go_left = 0;
-	int i;
-
-	spin_lock(&free_i->segmap_lock);
-
-	if (!new_sec && ((*newseg + 1) % sbi->segs_per_sec)) {
-		segno = find_next_zero_bit(free_i->free_segmap,
-			GET_SEG_FROM_SEC(sbi, hint + 1), *newseg + 1);
-		if (segno < GET_SEG_FROM_SEC(sbi, hint + 1))
-			goto got_it;
-	}
-find_other_zone:
-	secno = find_next_zero_bit(free_i->free_secmap, MAIN_SECS(sbi), hint);
-	if (secno >= MAIN_SECS(sbi)) {
-		if (dir == ALLOC_RIGHT) {
-			secno = find_next_zero_bit(free_i->free_secmap,
-							MAIN_SECS(sbi), 0);
-			f2fs_bug_on(sbi, secno >= MAIN_SECS(sbi));
-		} else {
-			go_left = 1;
-			left_start = hint - 1;
-		}
-	}
-	if (go_left == 0)
-		goto skip_left;
-
-	while (test_bit(left_start, free_i->free_secmap)) {
-		if (left_start > 0) {
-			left_start--;
-			continue;
-		}
-		left_start = find_next_zero_bit(free_i->free_secmap,
-							MAIN_SECS(sbi), 0);
-		f2fs_bug_on(sbi, left_start >= MAIN_SECS(sbi));
-		break;
-	}
-	secno = left_start;
-skip_left:
-	hint = secno;
-	segno = GET_SEG_FROM_SEC(sbi, secno);
-	zoneno = GET_ZONE_FROM_SEC(sbi, secno);
-
-	/* give up on finding another zone */
-	if (!init)
-		goto got_it;
-	if (sbi->secs_per_zone == 1)
-		goto got_it;
-	if (zoneno == old_zoneno)
-		goto got_it;
-	if (dir == ALLOC_LEFT) {
-		if (!go_left && zoneno + 1 >= total_zones)
-			goto got_it;
-		if (go_left && zoneno == 0)
-			goto got_it;
-	}
-	for (i = 0; i < NR_CURSEG_TYPE; i++)
-		if (CURSEG_I(sbi, i)->zone == zoneno)
-			break;
-
-	if (i < NR_CURSEG_TYPE) {
-		/* zone is in user, try another */
-		if (go_left)
-			hint = zoneno * sbi->secs_per_zone - 1;
-		else if (zoneno + 1 >= total_zones)
-			hint = 0;
-		else
-			hint = (zoneno + 1) * sbi->secs_per_zone;
-		init = false;
-		goto find_other_zone;
-	}
-got_it:
-	/* set it as dirty segment in free segmap */
-	f2fs_bug_on(sbi, test_bit(segno, free_i->free_segmap));
-	__set_inuse(sbi, segno);
-	*newseg = segno;
-	spin_unlock(&free_i->segmap_lock);
-}
-
-static void reset_curseg(struct f2fs_sb_info *sbi, int type, int modified)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	struct summary_footer *sum_footer;
-
-	curseg->segno = curseg->next_segno;
-	curseg->zone = GET_ZONE_FROM_SEG(sbi, curseg->segno);
-	curseg->next_blkoff = 0;
-	curseg->next_segno = NULL_SEGNO;
-
-	sum_footer = &(curseg->sum_blk->footer);
-	memset(sum_footer, 0, sizeof(struct summary_footer));
-	if (IS_DATASEG(type))
-		SET_SUM_TYPE(sum_footer, SUM_TYPE_DATA);
-	if (IS_NODESEG(type))
-		SET_SUM_TYPE(sum_footer, SUM_TYPE_NODE);
-	__set_sit_entry_type(sbi, type, curseg->segno, modified);
-}
-
-static unsigned int __get_next_segno(struct f2fs_sb_info *sbi, int type)
-{
-	/* if segs_per_sec is large than 1, we need to keep original policy. */
-	if (sbi->segs_per_sec != 1)
-		return CURSEG_I(sbi, type)->segno;
-
-	if (type == CURSEG_HOT_DATA || IS_NODESEG(type))
-		return 0;
-
-	if (SIT_I(sbi)->last_victim[ALLOC_NEXT])
-		return SIT_I(sbi)->last_victim[ALLOC_NEXT];
-	return CURSEG_I(sbi, type)->segno;
-}
-
-/*
- * Allocate a current working segment.
- * This function always allocates a free segment in LFS manner.
- */
-static void new_curseg(struct f2fs_sb_info *sbi, int type, bool new_sec)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	unsigned int segno = curseg->segno;
-	int dir = ALLOC_LEFT;
-
-	write_sum_page(sbi, curseg->sum_blk,
-				GET_SUM_BLOCK(sbi, segno));
-	if (type == CURSEG_WARM_DATA || type == CURSEG_COLD_DATA)
-		dir = ALLOC_RIGHT;
-
-	if (test_opt(sbi, NOHEAP))
-		dir = ALLOC_RIGHT;
-
-	segno = __get_next_segno(sbi, type);
-	get_new_segment(sbi, &segno, new_sec, dir);
-	curseg->next_segno = segno;
-	reset_curseg(sbi, type, 1);
-	curseg->alloc_type = LFS;
-}
-
-static void __next_free_blkoff(struct f2fs_sb_info *sbi,
-			struct curseg_info *seg, block_t start)
-{
-	struct seg_entry *se = get_seg_entry(sbi, seg->segno);
-	int entries = SIT_VBLOCK_MAP_SIZE / sizeof(unsigned long);
-	unsigned long *target_map = SIT_I(sbi)->tmp_map;
-	unsigned long *ckpt_map = (unsigned long *)se->ckpt_valid_map;
-	unsigned long *cur_map = (unsigned long *)se->cur_valid_map;
-	int i, pos;
-
-	for (i = 0; i < entries; i++)
-		target_map[i] = ckpt_map[i] | cur_map[i];
-
-	pos = __find_rev_next_zero_bit(target_map, sbi->blocks_per_seg, start);
-
-	seg->next_blkoff = pos;
-}
-
-/*
- * If a segment is written by LFS manner, next block offset is just obtained
- * by increasing the current block offset. However, if a segment is written by
- * SSR manner, next block offset obtained by calling __next_free_blkoff
- */
-static void __refresh_next_blkoff(struct f2fs_sb_info *sbi,
-				struct curseg_info *seg)
-{
-	if (seg->alloc_type == SSR)
-		__next_free_blkoff(sbi, seg, seg->next_blkoff + 1);
-	else
-		seg->next_blkoff++;
-}
-
-/*
- * This function always allocates a used segment(from dirty seglist) by SSR
- * manner, so it should recover the existing segment information of valid blocks
- */
-static void change_curseg(struct f2fs_sb_info *sbi, int type, bool reuse)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	unsigned int new_segno = curseg->next_segno;
-	struct f2fs_summary_block *sum_node;
-	struct page *sum_page;
-
-	write_sum_page(sbi, curseg->sum_blk,
-				GET_SUM_BLOCK(sbi, curseg->segno));
-	__set_test_and_inuse(sbi, new_segno);
-
-	mutex_lock(&dirty_i->seglist_lock);
-	__remove_dirty_segment(sbi, new_segno, PRE);
-	__remove_dirty_segment(sbi, new_segno, DIRTY);
-	mutex_unlock(&dirty_i->seglist_lock);
-
-	reset_curseg(sbi, type, 1);
-	curseg->alloc_type = SSR;
-	__next_free_blkoff(sbi, curseg, 0);
-
-	if (reuse) {
-		sum_page = get_sum_page(sbi, new_segno);
-		sum_node = (struct f2fs_summary_block *)page_address(sum_page);
-		memcpy(curseg->sum_blk, sum_node, SUM_ENTRY_SIZE);
-		f2fs_put_page(sum_page, 1);
-	}
-}
-
-static int get_ssr_segment(struct f2fs_sb_info *sbi, int type)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	const struct victim_selection *v_ops = DIRTY_I(sbi)->v_ops;
-	unsigned segno = NULL_SEGNO;
-	int i, cnt;
-	bool reversed = false;
-
-	/* need_SSR() already forces to do this */
-	if (v_ops->get_victim(sbi, &segno, BG_GC, type, SSR)) {
-		curseg->next_segno = segno;
-		return 1;
-	}
-
-	/* For node segments, let's do SSR more intensively */
-	if (IS_NODESEG(type)) {
-		if (type >= CURSEG_WARM_NODE) {
-			reversed = true;
-			i = CURSEG_COLD_NODE;
-		} else {
-			i = CURSEG_HOT_NODE;
-		}
-		cnt = NR_CURSEG_NODE_TYPE;
-	} else {
-		if (type >= CURSEG_WARM_DATA) {
-			reversed = true;
-			i = CURSEG_COLD_DATA;
-		} else {
-			i = CURSEG_HOT_DATA;
-		}
-		cnt = NR_CURSEG_DATA_TYPE;
-	}
-
-	for (; cnt-- > 0; reversed ? i-- : i++) {
-		if (i == type)
-			continue;
-		if (v_ops->get_victim(sbi, &segno, BG_GC, i, SSR)) {
-			curseg->next_segno = segno;
-			return 1;
-		}
-	}
-	return 0;
-}
-
-/*
- * flush out current segment and replace it with new segment
- * This function should be returned with success, otherwise BUG
- */
-static void allocate_segment_by_default(struct f2fs_sb_info *sbi,
-						int type, bool force)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-
-	if (force)
-		new_curseg(sbi, type, true);
-	else if (!is_set_ckpt_flags(sbi, CP_CRC_RECOVERY_FLAG) &&
-					type == CURSEG_WARM_NODE)
-		new_curseg(sbi, type, false);
-	else if (curseg->alloc_type == LFS && is_next_segment_free(sbi, type))
-		new_curseg(sbi, type, false);
-	else if (need_SSR(sbi) && get_ssr_segment(sbi, type))
-		change_curseg(sbi, type, true);
-	else
-		new_curseg(sbi, type, false);
-
-	stat_inc_seg_type(sbi, curseg);
-}
-
-void allocate_new_segments(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *curseg;
-	unsigned int old_segno;
-	int i;
-
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		curseg = CURSEG_I(sbi, i);
-		old_segno = curseg->segno;
-		SIT_I(sbi)->s_ops->allocate_segment(sbi, i, true);
-		locate_dirty_segment(sbi, old_segno);
-	}
-}
-
-static const struct segment_allocation default_salloc_ops = {
-	.allocate_segment = allocate_segment_by_default,
-};
-
-bool exist_trim_candidates(struct f2fs_sb_info *sbi, struct cp_control *cpc)
-{
-	__u64 trim_start = cpc->trim_start;
-	bool has_candidate = false;
-
-	mutex_lock(&SIT_I(sbi)->sentry_lock);
-	for (; cpc->trim_start <= cpc->trim_end; cpc->trim_start++) {
-		if (add_discard_addrs(sbi, cpc, true)) {
-			has_candidate = true;
-			break;
-		}
-	}
-	mutex_unlock(&SIT_I(sbi)->sentry_lock);
-
-	cpc->trim_start = trim_start;
-	return has_candidate;
-}
-
-int f2fs_trim_fs(struct f2fs_sb_info *sbi, struct fstrim_range *range)
-{
-	__u64 start = F2FS_BYTES_TO_BLK(range->start);
-	__u64 end = start + F2FS_BYTES_TO_BLK(range->len) - 1;
-	unsigned int start_segno, end_segno;
-	struct cp_control cpc;
-	int err = 0;
-
-	if (start >= MAX_BLKADDR(sbi) || range->len < sbi->blocksize)
-		return -EINVAL;
-
-	cpc.trimmed = 0;
-	if (end <= MAIN_BLKADDR(sbi))
-		goto out;
-
-	if (is_sbi_flag_set(sbi, SBI_NEED_FSCK)) {
-		f2fs_msg(sbi->sb, KERN_WARNING,
-			"Found FS corruption, run fsck to fix.");
-		goto out;
-	}
-
-	/* start/end segment number in main_area */
-	start_segno = (start <= MAIN_BLKADDR(sbi)) ? 0 : GET_SEGNO(sbi, start);
-	end_segno = (end >= MAX_BLKADDR(sbi)) ? MAIN_SEGS(sbi) - 1 :
-						GET_SEGNO(sbi, end);
-	cpc.reason = CP_DISCARD;
-	cpc.trim_minlen = max_t(__u64, 1, F2FS_BYTES_TO_BLK(range->minlen));
-
-	/* do checkpoint to issue discard commands safely */
-	for (; start_segno <= end_segno; start_segno = cpc.trim_end + 1) {
-		cpc.trim_start = start_segno;
-
-		if (sbi->discard_blks == 0)
-			break;
-		else if (sbi->discard_blks < BATCHED_TRIM_BLOCKS(sbi))
-			cpc.trim_end = end_segno;
-		else
-			cpc.trim_end = min_t(unsigned int,
-				rounddown(start_segno +
-				BATCHED_TRIM_SEGMENTS(sbi),
-				sbi->segs_per_sec) - 1, end_segno);
-
-		mutex_lock(&sbi->gc_mutex);
-		err = write_checkpoint(sbi, &cpc);
-		mutex_unlock(&sbi->gc_mutex);
-		if (err)
-			break;
-
-		schedule();
-	}
-out:
-	range->len = F2FS_BLK_TO_BYTES(cpc.trimmed);
-	return err;
-}
-
-static bool __has_curseg_space(struct f2fs_sb_info *sbi, int type)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	if (curseg->next_blkoff < sbi->blocks_per_seg)
-		return true;
-	return false;
-}
-
-static int __get_segment_type_2(struct page *page, enum page_type p_type)
-{
-	if (p_type == DATA)
-		return CURSEG_HOT_DATA;
-	else
-		return CURSEG_HOT_NODE;
-}
-
-static int __get_segment_type_4(struct page *page, enum page_type p_type)
-{
-	if (p_type == DATA) {
-		struct inode *inode = page->mapping->host;
-
-		if (S_ISDIR(inode->i_mode))
-			return CURSEG_HOT_DATA;
-		else
-			return CURSEG_COLD_DATA;
-	} else {
-		if (IS_DNODE(page) && is_cold_node(page))
-			return CURSEG_WARM_NODE;
-		else
-			return CURSEG_COLD_NODE;
-	}
-}
-
-static int __get_segment_type_6(struct page *page, enum page_type p_type)
-{
-	if (p_type == DATA) {
-		struct inode *inode = page->mapping->host;
-
-		if (is_cold_data(page) || file_is_cold(inode))
-			return CURSEG_COLD_DATA;
-		if (is_inode_flag_set(inode, FI_HOT_DATA))
-			return CURSEG_HOT_DATA;
-		return CURSEG_WARM_DATA;
-	} else {
-		if (IS_DNODE(page))
-			return is_cold_node(page) ? CURSEG_WARM_NODE :
-						CURSEG_HOT_NODE;
-		return CURSEG_COLD_NODE;
-	}
-}
-
-static int __get_segment_type(struct page *page, enum page_type p_type)
-{
-	switch (F2FS_P_SB(page)->active_logs) {
-	case 2:
-		return __get_segment_type_2(page, p_type);
-	case 4:
-		return __get_segment_type_4(page, p_type);
-	}
-	/* NR_CURSEG_TYPE(6) logs by default */
-	f2fs_bug_on(F2FS_P_SB(page),
-		F2FS_P_SB(page)->active_logs != NR_CURSEG_TYPE);
-	return __get_segment_type_6(page, p_type);
-}
-
-void allocate_data_block(struct f2fs_sb_info *sbi, struct page *page,
-		block_t old_blkaddr, block_t *new_blkaddr,
-		struct f2fs_summary *sum, int type)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-
-	mutex_lock(&curseg->curseg_mutex);
-	mutex_lock(&sit_i->sentry_lock);
-
-	*new_blkaddr = NEXT_FREE_BLKADDR(sbi, curseg);
-
-	f2fs_wait_discard_bio(sbi, *new_blkaddr);
-
-	/*
-	 * __add_sum_entry should be resided under the curseg_mutex
-	 * because, this function updates a summary entry in the
-	 * current summary block.
-	 */
-	__add_sum_entry(sbi, type, sum);
-
-	__refresh_next_blkoff(sbi, curseg);
-
-	stat_inc_block_count(sbi, curseg);
-
-	if (!__has_curseg_space(sbi, type))
-		sit_i->s_ops->allocate_segment(sbi, type, false);
-	/*
-	 * SIT information should be updated after segment allocation,
-	 * since we need to keep dirty segments precisely under SSR.
-	 */
-	refresh_sit_entry(sbi, old_blkaddr, *new_blkaddr);
-
-	mutex_unlock(&sit_i->sentry_lock);
-
-	if (page && IS_NODESEG(type))
-		fill_node_footer_blkaddr(page, NEXT_FREE_BLKADDR(sbi, curseg));
-
-	mutex_unlock(&curseg->curseg_mutex);
-}
-
-static void do_write_page(struct f2fs_summary *sum, struct f2fs_io_info *fio)
-{
-	int type = __get_segment_type(fio->page, fio->type);
-	int err;
-
-	if (fio->type == NODE || fio->type == DATA)
-		mutex_lock(&fio->sbi->wio_mutex[fio->type]);
-reallocate:
-	allocate_data_block(fio->sbi, fio->page, fio->old_blkaddr,
-					&fio->new_blkaddr, sum, type);
-
-	/* writeout dirty page into bdev */
-	err = f2fs_submit_page_mbio(fio);
-	if (err == -EAGAIN) {
-		fio->old_blkaddr = fio->new_blkaddr;
-		goto reallocate;
-	}
-
-	if (fio->type == NODE || fio->type == DATA)
-		mutex_unlock(&fio->sbi->wio_mutex[fio->type]);
-}
-
-void write_meta_page(struct f2fs_sb_info *sbi, struct page *page)
-{
-	struct f2fs_io_info fio = {
-		.sbi = sbi,
-		.type = META,
-		.op = REQ_OP_WRITE,
-		.op_flags = REQ_SYNC | REQ_NOIDLE | REQ_META | REQ_PRIO,
-		.old_blkaddr = page->index,
-		.new_blkaddr = page->index,
-		.page = page,
-		.encrypted_page = NULL,
-	};
-
-	if (unlikely(page->index >= MAIN_BLKADDR(sbi)))
-		fio.op_flags &= ~REQ_META;
-
-	set_page_writeback(page);
-	f2fs_submit_page_mbio(&fio);
-}
-
-void write_node_page(unsigned int nid, struct f2fs_io_info *fio)
-{
-	struct f2fs_summary sum;
-
-	set_summary(&sum, nid, 0, 0);
-	do_write_page(&sum, fio);
-}
-
-void write_data_page(struct dnode_of_data *dn, struct f2fs_io_info *fio)
-{
-	struct f2fs_sb_info *sbi = fio->sbi;
-	struct f2fs_summary sum;
-	struct node_info ni;
-
-	f2fs_bug_on(sbi, dn->data_blkaddr == NULL_ADDR);
-	get_node_info(sbi, dn->nid, &ni);
-	set_summary(&sum, dn->nid, dn->ofs_in_node, ni.version);
-	do_write_page(&sum, fio);
-	f2fs_update_data_blkaddr(dn, fio->new_blkaddr);
-}
-
-int rewrite_data_page(struct f2fs_io_info *fio)
-{
-	fio->new_blkaddr = fio->old_blkaddr;
-	stat_inc_inplace_blocks(fio->sbi);
-	return f2fs_submit_page_bio(fio);
-}
-
-void __f2fs_replace_block(struct f2fs_sb_info *sbi, struct f2fs_summary *sum,
-				block_t old_blkaddr, block_t new_blkaddr,
-				bool recover_curseg, bool recover_newaddr)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct curseg_info *curseg;
-	unsigned int segno, old_cursegno;
-	struct seg_entry *se;
-	int type;
-	unsigned short old_blkoff;
-
-	segno = GET_SEGNO(sbi, new_blkaddr);
-	se = get_seg_entry(sbi, segno);
-	type = se->type;
-
-	if (!recover_curseg) {
-		/* for recovery flow */
-		if (se->valid_blocks == 0 && !IS_CURSEG(sbi, segno)) {
-			if (old_blkaddr == NULL_ADDR)
-				type = CURSEG_COLD_DATA;
-			else
-				type = CURSEG_WARM_DATA;
-		}
-	} else {
-		if (!IS_CURSEG(sbi, segno))
-			type = CURSEG_WARM_DATA;
-	}
-
-	curseg = CURSEG_I(sbi, type);
-
-	mutex_lock(&curseg->curseg_mutex);
-	mutex_lock(&sit_i->sentry_lock);
-
-	old_cursegno = curseg->segno;
-	old_blkoff = curseg->next_blkoff;
-
-	/* change the current segment */
-	if (segno != curseg->segno) {
-		curseg->next_segno = segno;
-		change_curseg(sbi, type, true);
-	}
-
-	curseg->next_blkoff = GET_BLKOFF_FROM_SEG0(sbi, new_blkaddr);
-	__add_sum_entry(sbi, type, sum);
-
-	if (!recover_curseg || recover_newaddr)
-		update_sit_entry(sbi, new_blkaddr, 1);
-	if (GET_SEGNO(sbi, old_blkaddr) != NULL_SEGNO)
-		update_sit_entry(sbi, old_blkaddr, -1);
-
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, old_blkaddr));
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, new_blkaddr));
-
-	locate_dirty_segment(sbi, old_cursegno);
-
-	if (recover_curseg) {
-		if (old_cursegno != curseg->segno) {
-			curseg->next_segno = old_cursegno;
-			change_curseg(sbi, type, true);
-		}
-		curseg->next_blkoff = old_blkoff;
-	}
-
-	mutex_unlock(&sit_i->sentry_lock);
-	mutex_unlock(&curseg->curseg_mutex);
-}
-
-void f2fs_replace_block(struct f2fs_sb_info *sbi, struct dnode_of_data *dn,
-				block_t old_addr, block_t new_addr,
-				unsigned char version, bool recover_curseg,
-				bool recover_newaddr)
-{
-	struct f2fs_summary sum;
-
-	set_summary(&sum, dn->nid, dn->ofs_in_node, version);
-
-	__f2fs_replace_block(sbi, &sum, old_addr, new_addr,
-					recover_curseg, recover_newaddr);
-
-	f2fs_update_data_blkaddr(dn, new_addr);
-}
-
-void f2fs_wait_on_page_writeback(struct page *page,
-				enum page_type type, bool ordered)
-{
-	if (PageWriteback(page)) {
-		struct f2fs_sb_info *sbi = F2FS_P_SB(page);
-
-		f2fs_submit_merged_bio_cond(sbi, page->mapping->host,
-						0, page->index, type, WRITE);
-		if (ordered)
-			wait_on_page_writeback(page);
-		else
-			/* wait_for_stable_page(page) doesn't support */
-			wait_on_page_writeback(page);
-	}
-}
-
-void f2fs_wait_on_encrypted_page_writeback(struct f2fs_sb_info *sbi,
-							block_t blkaddr)
-{
-	struct page *cpage;
-
-	if (blkaddr == NEW_ADDR || blkaddr == NULL_ADDR)
-		return;
-
-	cpage = find_lock_page(META_MAPPING(sbi), blkaddr);
-	if (cpage) {
-		f2fs_wait_on_page_writeback(cpage, DATA, true);
-		f2fs_put_page(cpage, 1);
-	}
-}
-
-static int read_compacted_summaries(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
-	struct curseg_info *seg_i;
-	unsigned char *kaddr;
-	struct page *page;
-	block_t start;
-	int i, j, offset;
-
-	start = start_sum_block(sbi);
-
-	page = get_meta_page(sbi, start++);
-	kaddr = (unsigned char *)page_address(page);
-
-	/* Step 1: restore nat cache */
-	seg_i = CURSEG_I(sbi, CURSEG_HOT_DATA);
-	memcpy(seg_i->journal, kaddr, SUM_JOURNAL_SIZE);
-
-	/* Step 2: restore sit cache */
-	seg_i = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	memcpy(seg_i->journal, kaddr + SUM_JOURNAL_SIZE, SUM_JOURNAL_SIZE);
-	offset = 2 * SUM_JOURNAL_SIZE;
-
-	/* Step 3: restore summary entries */
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		unsigned short blk_off;
-		unsigned int segno;
-
-		seg_i = CURSEG_I(sbi, i);
-		segno = le32_to_cpu(ckpt->cur_data_segno[i]);
-		blk_off = le16_to_cpu(ckpt->cur_data_blkoff[i]);
-		seg_i->next_segno = segno;
-		reset_curseg(sbi, i, 0);
-		seg_i->alloc_type = ckpt->alloc_type[i];
-		seg_i->next_blkoff = blk_off;
-
-		if (seg_i->alloc_type == SSR)
-			blk_off = sbi->blocks_per_seg;
-
-		for (j = 0; j < blk_off; j++) {
-			struct f2fs_summary *s;
-			s = (struct f2fs_summary *)(kaddr + offset);
-			seg_i->sum_blk->entries[j] = *s;
-			offset += SUMMARY_SIZE;
-			if (offset + SUMMARY_SIZE <= PAGE_SIZE -
-						SUM_FOOTER_SIZE)
-				continue;
-
-			f2fs_put_page(page, 1);
-			page = NULL;
-
-			page = get_meta_page(sbi, start++);
-			kaddr = (unsigned char *)page_address(page);
-			offset = 0;
-		}
-	}
-	f2fs_put_page(page, 1);
-	return 0;
-}
-
-static int read_normal_summaries(struct f2fs_sb_info *sbi, int type)
-{
-	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
-	struct f2fs_summary_block *sum;
-	struct curseg_info *curseg;
-	struct page *new;
-	unsigned short blk_off;
-	unsigned int segno = 0;
-	block_t blk_addr = 0;
-
-	/* get segment number and block addr */
-	if (IS_DATASEG(type)) {
-		segno = le32_to_cpu(ckpt->cur_data_segno[type]);
-		blk_off = le16_to_cpu(ckpt->cur_data_blkoff[type -
-							CURSEG_HOT_DATA]);
-		if (__exist_node_summaries(sbi))
-			blk_addr = sum_blk_addr(sbi, NR_CURSEG_TYPE, type);
-		else
-			blk_addr = sum_blk_addr(sbi, NR_CURSEG_DATA_TYPE, type);
-	} else {
-		segno = le32_to_cpu(ckpt->cur_node_segno[type -
-							CURSEG_HOT_NODE]);
-		blk_off = le16_to_cpu(ckpt->cur_node_blkoff[type -
-							CURSEG_HOT_NODE]);
-		if (__exist_node_summaries(sbi))
-			blk_addr = sum_blk_addr(sbi, NR_CURSEG_NODE_TYPE,
-							type - CURSEG_HOT_NODE);
-		else
-			blk_addr = GET_SUM_BLOCK(sbi, segno);
-	}
-
-	new = get_meta_page(sbi, blk_addr);
-	sum = (struct f2fs_summary_block *)page_address(new);
-
-	if (IS_NODESEG(type)) {
-		if (__exist_node_summaries(sbi)) {
-			struct f2fs_summary *ns = &sum->entries[0];
-			int i;
-			for (i = 0; i < sbi->blocks_per_seg; i++, ns++) {
-				ns->version = 0;
-				ns->ofs_in_node = 0;
-			}
-		} else {
-			int err;
-
-			err = restore_node_summary(sbi, segno, sum);
-			if (err) {
-				f2fs_put_page(new, 1);
-				return err;
-			}
-		}
-	}
-
-	/* set uncompleted segment to curseg */
-	curseg = CURSEG_I(sbi, type);
-	mutex_lock(&curseg->curseg_mutex);
-
-	/* update journal info */
-	down_write(&curseg->journal_rwsem);
-	memcpy(curseg->journal, &sum->journal, SUM_JOURNAL_SIZE);
-	up_write(&curseg->journal_rwsem);
-
-	memcpy(curseg->sum_blk->entries, sum->entries, SUM_ENTRY_SIZE);
-	memcpy(&curseg->sum_blk->footer, &sum->footer, SUM_FOOTER_SIZE);
-	curseg->next_segno = segno;
-	reset_curseg(sbi, type, 0);
-	curseg->alloc_type = ckpt->alloc_type[type];
-	curseg->next_blkoff = blk_off;
-	mutex_unlock(&curseg->curseg_mutex);
-	f2fs_put_page(new, 1);
-	return 0;
-}
-
-static int restore_curseg_summaries(struct f2fs_sb_info *sbi)
-{
-	int type = CURSEG_HOT_DATA;
-	int err;
-
-	if (is_set_ckpt_flags(sbi, CP_COMPACT_SUM_FLAG)) {
-		int npages = npages_for_summary_flush(sbi, true);
-
-		if (npages >= 2)
-			ra_meta_pages(sbi, start_sum_block(sbi), npages,
-							META_CP, true);
-
-		/* restore for compacted data summary */
-		if (read_compacted_summaries(sbi))
-			return -EINVAL;
-		type = CURSEG_HOT_NODE;
-	}
-
-	if (__exist_node_summaries(sbi))
-		ra_meta_pages(sbi, sum_blk_addr(sbi, NR_CURSEG_TYPE, type),
-					NR_CURSEG_TYPE - type, META_CP, true);
-
-	for (; type <= CURSEG_COLD_NODE; type++) {
-		err = read_normal_summaries(sbi, type);
-		if (err)
-			return err;
-	}
-
-	return 0;
-}
-
-static void write_compacted_summaries(struct f2fs_sb_info *sbi, block_t blkaddr)
-{
-	struct page *page;
-	unsigned char *kaddr;
-	struct f2fs_summary *summary;
-	struct curseg_info *seg_i;
-	int written_size = 0;
-	int i, j;
-
-	page = grab_meta_page(sbi, blkaddr++);
-	kaddr = (unsigned char *)page_address(page);
-
-	/* Step 1: write nat cache */
-	seg_i = CURSEG_I(sbi, CURSEG_HOT_DATA);
-	memcpy(kaddr, seg_i->journal, SUM_JOURNAL_SIZE);
-	written_size += SUM_JOURNAL_SIZE;
-
-	/* Step 2: write sit cache */
-	seg_i = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	memcpy(kaddr + written_size, seg_i->journal, SUM_JOURNAL_SIZE);
-	written_size += SUM_JOURNAL_SIZE;
-
-	/* Step 3: write summary entries */
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		unsigned short blkoff;
-		seg_i = CURSEG_I(sbi, i);
-		if (sbi->ckpt->alloc_type[i] == SSR)
-			blkoff = sbi->blocks_per_seg;
-		else
-			blkoff = curseg_blkoff(sbi, i);
-
-		for (j = 0; j < blkoff; j++) {
-			if (!page) {
-				page = grab_meta_page(sbi, blkaddr++);
-				kaddr = (unsigned char *)page_address(page);
-				written_size = 0;
-			}
-			summary = (struct f2fs_summary *)(kaddr + written_size);
-			*summary = seg_i->sum_blk->entries[j];
-			written_size += SUMMARY_SIZE;
-
-			if (written_size + SUMMARY_SIZE <= PAGE_SIZE -
-							SUM_FOOTER_SIZE)
-				continue;
-
-			set_page_dirty(page);
-			f2fs_put_page(page, 1);
-			page = NULL;
-		}
-	}
-	if (page) {
-		set_page_dirty(page);
-		f2fs_put_page(page, 1);
-	}
-}
-
-static void write_normal_summaries(struct f2fs_sb_info *sbi,
-					block_t blkaddr, int type)
-{
-	int i, end;
-	if (IS_DATASEG(type))
-		end = type + NR_CURSEG_DATA_TYPE;
-	else
-		end = type + NR_CURSEG_NODE_TYPE;
-
-	for (i = type; i < end; i++)
-		write_current_sum_page(sbi, i, blkaddr + (i - type));
-}
-
-void write_data_summaries(struct f2fs_sb_info *sbi, block_t start_blk)
-{
-	if (is_set_ckpt_flags(sbi, CP_COMPACT_SUM_FLAG))
-		write_compacted_summaries(sbi, start_blk);
-	else
-		write_normal_summaries(sbi, start_blk, CURSEG_HOT_DATA);
-}
-
-void write_node_summaries(struct f2fs_sb_info *sbi, block_t start_blk)
-{
-	write_normal_summaries(sbi, start_blk, CURSEG_HOT_NODE);
-}
-
-int lookup_journal_in_cursum(struct f2fs_journal *journal, int type,
-					unsigned int val, int alloc)
-{
-	int i;
-
-	if (type == NAT_JOURNAL) {
-		for (i = 0; i < nats_in_cursum(journal); i++) {
-			if (le32_to_cpu(nid_in_journal(journal, i)) == val)
-				return i;
-		}
-		if (alloc && __has_cursum_space(journal, 1, NAT_JOURNAL))
-			return update_nats_in_cursum(journal, 1);
-	} else if (type == SIT_JOURNAL) {
-		for (i = 0; i < sits_in_cursum(journal); i++)
-			if (le32_to_cpu(segno_in_journal(journal, i)) == val)
-				return i;
-		if (alloc && __has_cursum_space(journal, 1, SIT_JOURNAL))
-			return update_sits_in_cursum(journal, 1);
-	}
-	return -1;
-}
-
-static struct page *get_current_sit_page(struct f2fs_sb_info *sbi,
-					unsigned int segno)
-{
-	return get_meta_page(sbi, current_sit_addr(sbi, segno));
-}
-
-static struct page *get_next_sit_page(struct f2fs_sb_info *sbi,
-					unsigned int start)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct page *src_page, *dst_page;
-	pgoff_t src_off, dst_off;
-	void *src_addr, *dst_addr;
-
-	src_off = current_sit_addr(sbi, start);
-	dst_off = next_sit_addr(sbi, src_off);
-
-	/* get current sit block page without lock */
-	src_page = get_meta_page(sbi, src_off);
-	dst_page = grab_meta_page(sbi, dst_off);
-	f2fs_bug_on(sbi, PageDirty(src_page));
-
-	src_addr = page_address(src_page);
-	dst_addr = page_address(dst_page);
-	memcpy(dst_addr, src_addr, PAGE_SIZE);
-
-	set_page_dirty(dst_page);
-	f2fs_put_page(src_page, 1);
-
-	set_to_next_sit(sit_i, start);
-
-	return dst_page;
-}
-
-static struct sit_entry_set *grab_sit_entry_set(void)
-{
-	struct sit_entry_set *ses =
-			f2fs_kmem_cache_alloc(sit_entry_set_slab, GFP_NOFS);
-
-	ses->entry_cnt = 0;
-	INIT_LIST_HEAD(&ses->set_list);
-	return ses;
-}
-
-static void release_sit_entry_set(struct sit_entry_set *ses)
-{
-	list_del(&ses->set_list);
-	kmem_cache_free(sit_entry_set_slab, ses);
-}
-
-static void adjust_sit_entry_set(struct sit_entry_set *ses,
-						struct list_head *head)
-{
-	struct sit_entry_set *next = ses;
-
-	if (list_is_last(&ses->set_list, head))
-		return;
-
-	list_for_each_entry_continue(next, head, set_list)
-		if (ses->entry_cnt <= next->entry_cnt)
-			break;
-
-	list_move_tail(&ses->set_list, &next->set_list);
-}
-
-static void add_sit_entry(unsigned int segno, struct list_head *head)
-{
-	struct sit_entry_set *ses;
-	unsigned int start_segno = START_SEGNO(segno);
-
-	list_for_each_entry(ses, head, set_list) {
-		if (ses->start_segno == start_segno) {
-			ses->entry_cnt++;
-			adjust_sit_entry_set(ses, head);
-			return;
-		}
-	}
-
-	ses = grab_sit_entry_set();
-
-	ses->start_segno = start_segno;
-	ses->entry_cnt++;
-	list_add(&ses->set_list, head);
-}
-
-static void add_sits_in_set(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_sm_info *sm_info = SM_I(sbi);
-	struct list_head *set_list = &sm_info->sit_entry_set;
-	unsigned long *bitmap = SIT_I(sbi)->dirty_sentries_bitmap;
-	unsigned int segno;
-
-	for_each_set_bit(segno, bitmap, MAIN_SEGS(sbi))
-		add_sit_entry(segno, set_list);
-}
-
-static void remove_sits_in_journal(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	struct f2fs_journal *journal = curseg->journal;
-	int i;
-
-	down_write(&curseg->journal_rwsem);
-	for (i = 0; i < sits_in_cursum(journal); i++) {
-		unsigned int segno;
-		bool dirtied;
-
-		segno = le32_to_cpu(segno_in_journal(journal, i));
-		dirtied = __mark_sit_entry_dirty(sbi, segno);
-
-		if (!dirtied)
-			add_sit_entry(segno, &SM_I(sbi)->sit_entry_set);
-	}
-	update_sits_in_cursum(journal, -i);
-	up_write(&curseg->journal_rwsem);
-}
-
-/*
- * CP calls this function, which flushes SIT entries including sit_journal,
- * and moves prefree segs to free segs.
- */
-void flush_sit_entries(struct f2fs_sb_info *sbi, struct cp_control *cpc)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned long *bitmap = sit_i->dirty_sentries_bitmap;
-	struct curseg_info *curseg = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	struct f2fs_journal *journal = curseg->journal;
-	struct sit_entry_set *ses, *tmp;
-	struct list_head *head = &SM_I(sbi)->sit_entry_set;
-	bool to_journal = true;
-	struct seg_entry *se;
-
-	mutex_lock(&sit_i->sentry_lock);
-
-	if (!sit_i->dirty_sentries)
-		goto out;
-
-	/*
-	 * add and account sit entries of dirty bitmap in sit entry
-	 * set temporarily
-	 */
-	add_sits_in_set(sbi);
-
-	/*
-	 * if there are no enough space in journal to store dirty sit
-	 * entries, remove all entries from journal and add and account
-	 * them in sit entry set.
-	 */
-	if (!__has_cursum_space(journal, sit_i->dirty_sentries, SIT_JOURNAL))
-		remove_sits_in_journal(sbi);
-
-	/*
-	 * there are two steps to flush sit entries:
-	 * #1, flush sit entries to journal in current cold data summary block.
-	 * #2, flush sit entries to sit page.
-	 */
-	list_for_each_entry_safe(ses, tmp, head, set_list) {
-		struct page *page = NULL;
-		struct f2fs_sit_block *raw_sit = NULL;
-		unsigned int start_segno = ses->start_segno;
-		unsigned int end = min(start_segno + SIT_ENTRY_PER_BLOCK,
-						(unsigned long)MAIN_SEGS(sbi));
-		unsigned int segno = start_segno;
-
-		if (to_journal &&
-			!__has_cursum_space(journal, ses->entry_cnt, SIT_JOURNAL))
-			to_journal = false;
-
-		if (to_journal) {
-			down_write(&curseg->journal_rwsem);
-		} else {
-			page = get_next_sit_page(sbi, start_segno);
-			raw_sit = page_address(page);
-		}
-
-		/* flush dirty sit entries in region of current sit set */
-		for_each_set_bit_from(segno, bitmap, end) {
-			int offset, sit_offset;
-
-			se = get_seg_entry(sbi, segno);
-
-			/* add discard candidates */
-			if (!(cpc->reason & CP_DISCARD)) {
-				cpc->trim_start = segno;
-				add_discard_addrs(sbi, cpc, false);
-			}
-
-			if (to_journal) {
-				offset = lookup_journal_in_cursum(journal,
-							SIT_JOURNAL, segno, 1);
-				f2fs_bug_on(sbi, offset < 0);
-				segno_in_journal(journal, offset) =
-							cpu_to_le32(segno);
-				seg_info_to_raw_sit(se,
-					&sit_in_journal(journal, offset));
-			} else {
-				sit_offset = SIT_ENTRY_OFFSET(sit_i, segno);
-				seg_info_to_raw_sit(se,
-						&raw_sit->entries[sit_offset]);
-			}
-
-			__clear_bit(segno, bitmap);
-			sit_i->dirty_sentries--;
-			ses->entry_cnt--;
-		}
-
-		if (to_journal)
-			up_write(&curseg->journal_rwsem);
-		else
-			f2fs_put_page(page, 1);
-
-		f2fs_bug_on(sbi, ses->entry_cnt);
-		release_sit_entry_set(ses);
-	}
-
-	f2fs_bug_on(sbi, !list_empty(head));
-	f2fs_bug_on(sbi, sit_i->dirty_sentries);
-out:
-	if (cpc->reason & CP_DISCARD) {
-		__u64 trim_start = cpc->trim_start;
-
-		for (; cpc->trim_start <= cpc->trim_end; cpc->trim_start++)
-			add_discard_addrs(sbi, cpc, false);
-
-		cpc->trim_start = trim_start;
-	}
-	mutex_unlock(&sit_i->sentry_lock);
-
-	set_prefree_as_free_segments(sbi);
-}
-
-static int build_sit_info(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_super_block *raw_super = F2FS_RAW_SUPER(sbi);
-	struct sit_info *sit_i;
-	unsigned int sit_segs, start;
-	char *src_bitmap;
-	unsigned int bitmap_size;
-
-	/* allocate memory for SIT information */
-	sit_i = kzalloc(sizeof(struct sit_info), GFP_KERNEL);
-	if (!sit_i)
-		return -ENOMEM;
-
-	SM_I(sbi)->sit_info = sit_i;
-
-	sit_i->sentries = f2fs_kvzalloc(MAIN_SEGS(sbi) *
-					sizeof(struct seg_entry), GFP_KERNEL);
-	if (!sit_i->sentries)
-		return -ENOMEM;
-
-	bitmap_size = f2fs_bitmap_size(MAIN_SEGS(sbi));
-	sit_i->dirty_sentries_bitmap = f2fs_kvzalloc(bitmap_size, GFP_KERNEL);
-	if (!sit_i->dirty_sentries_bitmap)
-		return -ENOMEM;
-
-	for (start = 0; start < MAIN_SEGS(sbi); start++) {
-		sit_i->sentries[start].cur_valid_map
-			= kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-		sit_i->sentries[start].ckpt_valid_map
-			= kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-		if (!sit_i->sentries[start].cur_valid_map ||
-				!sit_i->sentries[start].ckpt_valid_map)
-			return -ENOMEM;
-
-#ifdef CONFIG_F2FS_CHECK_FS
-		sit_i->sentries[start].cur_valid_map_mir
-			= kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-		if (!sit_i->sentries[start].cur_valid_map_mir)
-			return -ENOMEM;
-#endif
-
-		if (f2fs_discard_en(sbi)) {
-			sit_i->sentries[start].discard_map
-				= kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-			if (!sit_i->sentries[start].discard_map)
-				return -ENOMEM;
-		}
-	}
-
-	sit_i->tmp_map = kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-	if (!sit_i->tmp_map)
-		return -ENOMEM;
-
-	if (sbi->segs_per_sec > 1) {
-		sit_i->sec_entries = f2fs_kvzalloc(MAIN_SECS(sbi) *
-					sizeof(struct sec_entry), GFP_KERNEL);
-		if (!sit_i->sec_entries)
-			return -ENOMEM;
-	}
-
-	/* get information related with SIT */
-	sit_segs = le32_to_cpu(raw_super->segment_count_sit) >> 1;
-
-	/* setup SIT bitmap from ckeckpoint pack */
-	bitmap_size = __bitmap_size(sbi, SIT_BITMAP);
-	src_bitmap = __bitmap_ptr(sbi, SIT_BITMAP);
-
-	sit_i->sit_bitmap = kmemdup(src_bitmap, bitmap_size, GFP_KERNEL);
-	if (!sit_i->sit_bitmap)
-		return -ENOMEM;
-
-#ifdef CONFIG_F2FS_CHECK_FS
-	sit_i->sit_bitmap_mir = kmemdup(src_bitmap, bitmap_size, GFP_KERNEL);
-	if (!sit_i->sit_bitmap_mir)
-		return -ENOMEM;
-#endif
-
-	/* init SIT information */
-	sit_i->s_ops = &default_salloc_ops;
-
-	sit_i->sit_base_addr = le32_to_cpu(raw_super->sit_blkaddr);
-	sit_i->sit_blocks = sit_segs << sbi->log_blocks_per_seg;
-	sit_i->written_valid_blocks = 0;
-	sit_i->bitmap_size = bitmap_size;
-	sit_i->dirty_sentries = 0;
-	sit_i->sents_per_block = SIT_ENTRY_PER_BLOCK;
-	sit_i->elapsed_time = le64_to_cpu(sbi->ckpt->elapsed_time);
-	sit_i->mounted_time = CURRENT_TIME_SEC.tv_sec;
-	mutex_init(&sit_i->sentry_lock);
-	return 0;
-}
-
-static int build_free_segmap(struct f2fs_sb_info *sbi)
-{
-	struct free_segmap_info *free_i;
-	unsigned int bitmap_size, sec_bitmap_size;
-
-	/* allocate memory for free segmap information */
-	free_i = kzalloc(sizeof(struct free_segmap_info), GFP_KERNEL);
-	if (!free_i)
-		return -ENOMEM;
-
-	SM_I(sbi)->free_info = free_i;
-
-	bitmap_size = f2fs_bitmap_size(MAIN_SEGS(sbi));
-	free_i->free_segmap = f2fs_kvmalloc(bitmap_size, GFP_KERNEL);
-	if (!free_i->free_segmap)
-		return -ENOMEM;
-
-	sec_bitmap_size = f2fs_bitmap_size(MAIN_SECS(sbi));
-	free_i->free_secmap = f2fs_kvmalloc(sec_bitmap_size, GFP_KERNEL);
-	if (!free_i->free_secmap)
-		return -ENOMEM;
-
-	/* set all segments as dirty temporarily */
-	memset(free_i->free_segmap, 0xff, bitmap_size);
-	memset(free_i->free_secmap, 0xff, sec_bitmap_size);
-
-	/* init free segmap information */
-	free_i->start_segno = GET_SEGNO_FROM_SEG0(sbi, MAIN_BLKADDR(sbi));
-	free_i->free_segments = 0;
-	free_i->free_sections = 0;
-	spin_lock_init(&free_i->segmap_lock);
-	return 0;
-}
-
-static int build_curseg(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *array;
-	int i;
-
-	array = kcalloc(NR_CURSEG_TYPE, sizeof(*array), GFP_KERNEL);
-	if (!array)
-		return -ENOMEM;
-
-	SM_I(sbi)->curseg_array = array;
-
-	for (i = 0; i < NR_CURSEG_TYPE; i++) {
-		mutex_init(&array[i].curseg_mutex);
-		array[i].sum_blk = kzalloc(PAGE_SIZE, GFP_KERNEL);
-		if (!array[i].sum_blk)
-			return -ENOMEM;
-		init_rwsem(&array[i].journal_rwsem);
-		array[i].journal = kzalloc(sizeof(struct f2fs_journal),
-							GFP_KERNEL);
-		if (!array[i].journal)
-			return -ENOMEM;
-		array[i].segno = NULL_SEGNO;
-		array[i].next_blkoff = 0;
-	}
-	return restore_curseg_summaries(sbi);
-}
-
-static void build_sit_entries(struct f2fs_sb_info *sbi)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct curseg_info *curseg = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	struct f2fs_journal *journal = curseg->journal;
-	struct seg_entry *se;
-	struct f2fs_sit_entry sit;
-	int sit_blk_cnt = SIT_BLK_CNT(sbi);
-	unsigned int i, start, end;
-	unsigned int readed, start_blk = 0;
-
-	do {
-		readed = ra_meta_pages(sbi, start_blk, BIO_MAX_PAGES,
-							META_SIT, true);
-
-		start = start_blk * sit_i->sents_per_block;
-		end = (start_blk + readed) * sit_i->sents_per_block;
-
-		for (; start < end && start < MAIN_SEGS(sbi); start++) {
-			struct f2fs_sit_block *sit_blk;
-			struct page *page;
-
-			se = &sit_i->sentries[start];
-			page = get_current_sit_page(sbi, start);
-			sit_blk = (struct f2fs_sit_block *)page_address(page);
-			sit = sit_blk->entries[SIT_ENTRY_OFFSET(sit_i, start)];
-			f2fs_put_page(page, 1);
-
-			check_block_count(sbi, start, &sit);
-			seg_info_from_raw_sit(se, &sit);
-
-			/* build discard map only one time */
-			if (f2fs_discard_en(sbi)) {
-				if (is_set_ckpt_flags(sbi, CP_TRIMMED_FLAG)) {
-					memset(se->discard_map, 0xff,
-						SIT_VBLOCK_MAP_SIZE);
-				} else {
-					memcpy(se->discard_map,
-						se->cur_valid_map,
-						SIT_VBLOCK_MAP_SIZE);
-					sbi->discard_blks +=
-						sbi->blocks_per_seg -
-						se->valid_blocks;
-				}
-			}
-
-			if (sbi->segs_per_sec > 1)
-				get_sec_entry(sbi, start)->valid_blocks +=
-							se->valid_blocks;
-		}
-		start_blk += readed;
-	} while (start_blk < sit_blk_cnt);
-
-	down_read(&curseg->journal_rwsem);
-	for (i = 0; i < sits_in_cursum(journal); i++) {
-		unsigned int old_valid_blocks;
-
-		start = le32_to_cpu(segno_in_journal(journal, i));
-		se = &sit_i->sentries[start];
-		sit = sit_in_journal(journal, i);
-
-		old_valid_blocks = se->valid_blocks;
-
-		check_block_count(sbi, start, &sit);
-		seg_info_from_raw_sit(se, &sit);
-
-		if (f2fs_discard_en(sbi)) {
-			if (is_set_ckpt_flags(sbi, CP_TRIMMED_FLAG)) {
-				memset(se->discard_map, 0xff,
-							SIT_VBLOCK_MAP_SIZE);
-			} else {
-				memcpy(se->discard_map, se->cur_valid_map,
-							SIT_VBLOCK_MAP_SIZE);
-				sbi->discard_blks += old_valid_blocks -
-							se->valid_blocks;
-			}
-		}
-
-		if (sbi->segs_per_sec > 1)
-			get_sec_entry(sbi, start)->valid_blocks +=
-				se->valid_blocks - old_valid_blocks;
-	}
-	up_read(&curseg->journal_rwsem);
-}
-
-static void init_free_segmap(struct f2fs_sb_info *sbi)
-{
-	unsigned int start;
-	int type;
-
-	for (start = 0; start < MAIN_SEGS(sbi); start++) {
-		struct seg_entry *sentry = get_seg_entry(sbi, start);
-		if (!sentry->valid_blocks)
-			__set_free(sbi, start);
-		else
-			SIT_I(sbi)->written_valid_blocks +=
-						sentry->valid_blocks;
-	}
-
-	/* set use the current segments */
-	for (type = CURSEG_HOT_DATA; type <= CURSEG_COLD_NODE; type++) {
-		struct curseg_info *curseg_t = CURSEG_I(sbi, type);
-		__set_test_and_inuse(sbi, curseg_t->segno);
-	}
-}
-
-static void init_dirty_segmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	struct free_segmap_info *free_i = FREE_I(sbi);
-	unsigned int segno = 0, offset = 0;
-	unsigned short valid_blocks;
-
-	while (1) {
-		/* find dirty segment based on free segmap */
-		segno = find_next_inuse(free_i, MAIN_SEGS(sbi), offset);
-		if (segno >= MAIN_SEGS(sbi))
-			break;
-		offset = segno + 1;
-		valid_blocks = get_valid_blocks(sbi, segno, false);
-		if (valid_blocks == sbi->blocks_per_seg || !valid_blocks)
-			continue;
-		if (valid_blocks > sbi->blocks_per_seg) {
-			f2fs_bug_on(sbi, 1);
-			continue;
-		}
-		mutex_lock(&dirty_i->seglist_lock);
-		__locate_dirty_segment(sbi, segno, DIRTY);
-		mutex_unlock(&dirty_i->seglist_lock);
-	}
-}
-
-static int init_victim_secmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned int bitmap_size = f2fs_bitmap_size(MAIN_SECS(sbi));
-
-	dirty_i->victim_secmap = f2fs_kvzalloc(bitmap_size, GFP_KERNEL);
-	if (!dirty_i->victim_secmap)
-		return -ENOMEM;
-	return 0;
-}
-
-static int build_dirty_segmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i;
-	unsigned int bitmap_size, i;
-
-	/* allocate memory for dirty segments list information */
-	dirty_i = kzalloc(sizeof(struct dirty_seglist_info), GFP_KERNEL);
-	if (!dirty_i)
-		return -ENOMEM;
-
-	SM_I(sbi)->dirty_info = dirty_i;
-	mutex_init(&dirty_i->seglist_lock);
-
-	bitmap_size = f2fs_bitmap_size(MAIN_SEGS(sbi));
-
-	for (i = 0; i < NR_DIRTY_TYPE; i++) {
-		dirty_i->dirty_segmap[i] = f2fs_kvzalloc(bitmap_size, GFP_KERNEL);
-		if (!dirty_i->dirty_segmap[i])
-			return -ENOMEM;
-	}
-
-	init_dirty_segmap(sbi);
-	return init_victim_secmap(sbi);
-}
-
-/*
- * Update min, max modified time for cost-benefit GC algorithm
- */
-static void init_min_max_mtime(struct f2fs_sb_info *sbi)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned int segno;
-
-	mutex_lock(&sit_i->sentry_lock);
-
-	sit_i->min_mtime = LLONG_MAX;
-
-	for (segno = 0; segno < MAIN_SEGS(sbi); segno += sbi->segs_per_sec) {
-		unsigned int i;
-		unsigned long long mtime = 0;
-
-		for (i = 0; i < sbi->segs_per_sec; i++)
-			mtime += get_seg_entry(sbi, segno + i)->mtime;
-
-		mtime = div_u64(mtime, sbi->segs_per_sec);
-
-		if (sit_i->min_mtime > mtime)
-			sit_i->min_mtime = mtime;
-	}
-	sit_i->max_mtime = get_mtime(sbi);
-	mutex_unlock(&sit_i->sentry_lock);
-}
-
-int build_segment_manager(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_super_block *raw_super = F2FS_RAW_SUPER(sbi);
-	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
-	struct f2fs_sm_info *sm_info;
-	int err;
-
-	sm_info = kzalloc(sizeof(struct f2fs_sm_info), GFP_KERNEL);
-	if (!sm_info)
-		return -ENOMEM;
-
-	/* init sm info */
-	sbi->sm_info = sm_info;
-	sm_info->seg0_blkaddr = le32_to_cpu(raw_super->segment0_blkaddr);
-	sm_info->main_blkaddr = le32_to_cpu(raw_super->main_blkaddr);
-	sm_info->segment_count = le32_to_cpu(raw_super->segment_count);
-	sm_info->reserved_segments = le32_to_cpu(ckpt->rsvd_segment_count);
-	sm_info->ovp_segments = le32_to_cpu(ckpt->overprov_segment_count);
-	sm_info->main_segments = le32_to_cpu(raw_super->segment_count_main);
-	sm_info->ssa_blkaddr = le32_to_cpu(raw_super->ssa_blkaddr);
-	sm_info->rec_prefree_segments = sm_info->main_segments *
-					DEF_RECLAIM_PREFREE_SEGMENTS / 100;
-	if (sm_info->rec_prefree_segments > DEF_MAX_RECLAIM_PREFREE_SEGMENTS)
-		sm_info->rec_prefree_segments = DEF_MAX_RECLAIM_PREFREE_SEGMENTS;
-
-	if (!test_opt(sbi, LFS))
-		sm_info->ipu_policy = 1 << F2FS_IPU_FSYNC;
-	sm_info->min_ipu_util = DEF_MIN_IPU_UTIL;
-	sm_info->min_fsync_blocks = DEF_MIN_FSYNC_BLOCKS;
-	sm_info->min_hot_blocks = DEF_MIN_HOT_BLOCKS;
-
-	sm_info->trim_sections = DEF_BATCHED_TRIM_SECTIONS;
-
-	INIT_LIST_HEAD(&sm_info->sit_entry_set);
-
-	if (!f2fs_readonly(sbi->sb)) {
-		err = create_flush_cmd_control(sbi);
-		if (err)
-			return err;
-	}
-
-	err = create_discard_cmd_control(sbi);
-	if (err)
-		return err;
-
-	err = build_sit_info(sbi);
-	if (err)
-		return err;
-	err = build_free_segmap(sbi);
-	if (err)
-		return err;
-	err = build_curseg(sbi);
-	if (err)
-		return err;
-
-	/* reinit free segmap based on SIT */
-	build_sit_entries(sbi);
-
-	init_free_segmap(sbi);
-	err = build_dirty_segmap(sbi);
-	if (err)
-		return err;
-
-	init_min_max_mtime(sbi);
-	return 0;
-}
-
-static void discard_dirty_segmap(struct f2fs_sb_info *sbi,
-		enum dirty_type dirty_type)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-
-	mutex_lock(&dirty_i->seglist_lock);
-	f2fs_kvfree(dirty_i->dirty_segmap[dirty_type]);
-	dirty_i->nr_dirty[dirty_type] = 0;
-	mutex_unlock(&dirty_i->seglist_lock);
-}
-
-static void destroy_victim_secmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	f2fs_kvfree(dirty_i->victim_secmap);
-}
-
-static void destroy_dirty_segmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	int i;
-
-	if (!dirty_i)
-		return;
-
-	/* discard pre-free/dirty segments list */
-	for (i = 0; i < NR_DIRTY_TYPE; i++)
-		discard_dirty_segmap(sbi, i);
-
-	destroy_victim_secmap(sbi);
-	SM_I(sbi)->dirty_info = NULL;
-	kfree(dirty_i);
-}
-
-static void destroy_curseg(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *array = SM_I(sbi)->curseg_array;
-	int i;
-
-	if (!array)
-		return;
-	SM_I(sbi)->curseg_array = NULL;
-	for (i = 0; i < NR_CURSEG_TYPE; i++) {
-		kfree(array[i].sum_blk);
-		kfree(array[i].journal);
-	}
-	kfree(array);
-}
-
-static void destroy_free_segmap(struct f2fs_sb_info *sbi)
-{
-	struct free_segmap_info *free_i = SM_I(sbi)->free_info;
-	if (!free_i)
-		return;
-	SM_I(sbi)->free_info = NULL;
-	f2fs_kvfree(free_i->free_segmap);
-	f2fs_kvfree(free_i->free_secmap);
-	kfree(free_i);
-}
-
-static void destroy_sit_info(struct f2fs_sb_info *sbi)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned int start;
-
-	if (!sit_i)
-		return;
-
-	if (sit_i->sentries) {
-		for (start = 0; start < MAIN_SEGS(sbi); start++) {
-			kfree(sit_i->sentries[start].cur_valid_map);
-#ifdef CONFIG_F2FS_CHECK_FS
-			kfree(sit_i->sentries[start].cur_valid_map_mir);
-#endif
-			kfree(sit_i->sentries[start].ckpt_valid_map);
-			kfree(sit_i->sentries[start].discard_map);
-		}
-	}
-	kfree(sit_i->tmp_map);
-
-	f2fs_kvfree(sit_i->sentries);
-	f2fs_kvfree(sit_i->sec_entries);
-	f2fs_kvfree(sit_i->dirty_sentries_bitmap);
-
-	SM_I(sbi)->sit_info = NULL;
-	kfree(sit_i->sit_bitmap);
-#ifdef CONFIG_F2FS_CHECK_FS
-	kfree(sit_i->sit_bitmap_mir);
-#endif
-	kfree(sit_i);
-}
-
-void destroy_segment_manager(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_sm_info *sm_info = SM_I(sbi);
-
-	if (!sm_info)
-		return;
-	destroy_flush_cmd_control(sbi, true);
-	destroy_discard_cmd_control(sbi);
-	destroy_dirty_segmap(sbi);
-	destroy_curseg(sbi);
-	destroy_free_segmap(sbi);
-	destroy_sit_info(sbi);
-	sbi->sm_info = NULL;
-	kfree(sm_info);
-}
-
-int __init create_segment_manager_caches(void)
-{
-	discard_entry_slab = f2fs_kmem_cache_create("discard_entry",
-			sizeof(struct discard_entry));
-	if (!discard_entry_slab)
-		goto fail;
-
-	discard_cmd_slab = f2fs_kmem_cache_create("discard_cmd",
-			sizeof(struct discard_cmd));
-	if (!discard_cmd_slab)
-		goto destroy_discard_entry;
-
-	sit_entry_set_slab = f2fs_kmem_cache_create("sit_entry_set",
-			sizeof(struct sit_entry_set));
-	if (!sit_entry_set_slab)
-		goto destroy_discard_cmd;
-
-	inmem_entry_slab = f2fs_kmem_cache_create("inmem_page_entry",
-			sizeof(struct inmem_pages));
-	if (!inmem_entry_slab)
-		goto destroy_sit_entry_set;
-	return 0;
-
-destroy_sit_entry_set:
-	kmem_cache_destroy(sit_entry_set_slab);
-destroy_discard_cmd:
-	kmem_cache_destroy(discard_cmd_slab);
-destroy_discard_entry:
-	kmem_cache_destroy(discard_entry_slab);
-fail:
-	return -ENOMEM;
-}
-
-void destroy_segment_manager_caches(void)
-{
-	kmem_cache_destroy(sit_entry_set_slab);
-	kmem_cache_destroy(discard_cmd_slab);
-	kmem_cache_destroy(discard_entry_slab);
-	kmem_cache_destroy(inmem_entry_slab);
-}
diff --git a/fs/f2fs/segment.o_shipped b/fs/f2fs/segment.o_shipped
new file mode 100644
index 0000000000000000000000000000000000000000..bbd531df4677aa285658bb5d0148a7a35bffac8c
GIT binary patch
literal 62296
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%0D(;D|
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

literal 0
HcmV?d00001

diff --git a/sound/soc/codecs/wcd9320.c b/sound/soc/codecs/wcd9320.c
deleted file mode 100644
index 392d52f4cb6..00000000000
--- a/sound/soc/codecs/wcd9320.c
+++ /dev/null
@@ -1,7861 +0,0 @@
-/* Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-#include <linux/module.h>
-#include <linux/init.h>
-#include <linux/firmware.h>
-#include <linux/slab.h>
-#include <linux/platform_device.h>
-#include <linux/device.h>
-#include <linux/printk.h>
-#include <linux/ratelimit.h>
-#include <linux/debugfs.h>
-#include <linux/wait.h>
-#include <linux/mfd/wcd9xxx/core.h>
-#include <linux/mfd/wcd9xxx/wcd9xxx_registers.h>
-#include <linux/mfd/wcd9xxx/wcd9320_registers.h>
-#include <linux/mfd/wcd9xxx/pdata.h>
-#include <linux/regulator/consumer.h>
-#include <sound/pcm.h>
-#include <sound/pcm_params.h>
-#include <sound/soc.h>
-#include <sound/soc-dapm.h>
-#include <sound/tlv.h>
-#include <linux/bitops.h>
-#include <linux/delay.h>
-#include <linux/pm_runtime.h>
-#include <linux/kernel.h>
-#include <linux/gpio.h>
-#include <linux/pm_qos.h>
-#include <linux/pm.h>
-#include <mach/cpuidle.h>
-#include "wcd9320.h"
-#include "wcd9xxx-resmgr.h"
-#include "wcd9xxx-common.h"
-#include "wcdcal-hwdep.h"
-
-#ifdef CONFIG_BOEFFLA_SOUND
-#include "boeffla_sound.h"
-#endif
-
-#if defined(CONFIG_SND_SOC_ES705)
-#include "audience/es705-export.h"
-#elif defined(CONFIG_SND_SOC_ES325)
-#include "es325-export.h"
-#endif
-
-#if defined(CONFIG_SND_SOC_ES705)
-
-#define CONFIG_SND_SOC_ESXXX
-#define REMOTE_ROUTE_ENABLE_CB  es705_remote_route_enable
-#define SLIM_GET_CHANNEL_MAP_CB es705_slim_get_channel_map
-#define SLIM_SET_CHANNEL_MAP_CB es705_slim_set_channel_map
-#define SLIM_HW_PARAMS_CB       es705_slim_hw_params
-#define REMOTE_CFG_SLIM_RX_CB	es705_remote_cfg_slim_rx
-#define REMOTE_CLOSE_SLIM_RX_CB	es705_remote_close_slim_rx
-#define REMOTE_CFG_SLIM_TX_CB	es705_remote_cfg_slim_tx
-#define REMOTE_CLOSE_SLIM_TX_CB	es705_remote_close_slim_tx
-#define REMOTE_ADD_CODEC_CONTROLS_CB	es705_remote_add_codec_controls
-#endif
-
-#define TAIKO_MAD_SLIMBUS_TX_PORT 12
-#define TAIKO_MAD_AUDIO_FIRMWARE_PATH "wcd9320/wcd9320_mad_audio.bin"
-#define TAIKO_VALIDATE_RX_SBPORT_RANGE(port) ((port >= 16) && (port <= 22))
-#define TAIKO_CONVERT_RX_SBPORT_ID(port) (port - 16) /* RX1 port ID = 0 */
-
-#define TAIKO_HPH_PA_SETTLE_COMP_ON 3000
-#define TAIKO_HPH_PA_SETTLE_COMP_OFF 13000
-
-#define DAPM_MICBIAS2_EXTERNAL_STANDALONE "MIC BIAS2 External Standalone"
-#define DAPM_MICBIAS3_EXTERNAL_STANDALONE "MIC BIAS3 External Standalone"
-
-/* RX_HPH_CNP_WG_TIME increases by 0.24ms */
-#define TAIKO_WG_TIME_FACTOR_US	240
-
-static atomic_t kp_taiko_priv;
-static int spkr_drv_wrnd_param_set(const char *val,
-				   const struct kernel_param *kp);
-static int spkr_drv_wrnd = 1;
-
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-static int sub_mic_rec_delay = 0;
-#endif
-
-static struct kernel_param_ops spkr_drv_wrnd_param_ops = {
-	.set = spkr_drv_wrnd_param_set,
-	.get = param_get_int,
-};
-
-static struct afe_param_slimbus_slave_port_cfg taiko_slimbus_slave_port_cfg = {
-	.minor_version = 1,
-	.slimbus_dev_id = AFE_SLIMBUS_DEVICE_1,
-	.slave_dev_pgd_la = 0,
-	.slave_dev_intfdev_la = 0,
-	.bit_width = 16,
-	.data_format = 0,
-	.num_channels = 1
-};
-
-static struct afe_param_cdc_reg_cfg audio_reg_cfg[] = {
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_MAD_MAIN_CTL_1),
-		HW_MAD_AUDIO_ENABLE, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_MAD_AUDIO_CTL_3),
-		HW_MAD_AUDIO_SLEEP_TIME, 0xF, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_MAD_AUDIO_CTL_4),
-		HW_MAD_TX_AUDIO_SWITCH_OFF, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_DESTN3),
-		MAD_AUDIO_INT_DEST_SELECT_REG, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_MASK3),
-		MAD_AUDIO_INT_MASK_REG, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_STATUS3),
-		MAD_AUDIO_INT_STATUS_REG, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_CLEAR3),
-		MAD_AUDIO_INT_CLEAR_REG, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_SB_PGD_PORT_TX_BASE),
-		SB_PGD_PORT_TX_WATERMARK_N, 0x1E, 8, 0x1
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_SB_PGD_PORT_TX_BASE),
-		SB_PGD_PORT_TX_ENABLE_N, 0x1, 8, 0x1
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_SB_PGD_PORT_RX_BASE),
-		SB_PGD_PORT_RX_WATERMARK_N, 0x1E, 8, 0x1
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_SB_PGD_PORT_RX_BASE),
-		SB_PGD_PORT_RX_ENABLE_N, 0x1, 8, 0x1
-	},
-	{	1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_ANC1_IIR_B1_CTL),
-		AANC_FF_GAIN_ADAPTIVE, 0x4, 8, 0
-	},
-	{	1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_ANC1_IIR_B1_CTL),
-		AANC_FFGAIN_ADAPTIVE_EN, 0x8, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_ANC1_GAIN_CTL),
-		AANC_GAIN_CONTROL, 0xFF, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_DESTN3),
-		MAD_CLIP_INT_DEST_SELECT_REG, 0x8, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_MASK3),
-		MAD_CLIP_INT_MASK_REG, 0x8, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_STATUS3),
-		MAD_CLIP_INT_STATUS_REG, 0x8, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_CLEAR3),
-		MAD_CLIP_INT_CLEAR_REG, 0x8, 8, 0
-	},
-};
-
-static struct afe_param_cdc_reg_cfg clip_reg_cfg[] = {
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_B1_CTL),
-		SPKR_CLIP_PIPE_BANK_SEL, 0x3, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL0),
-		SPKR_CLIPDET_VAL0, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL1),
-		SPKR_CLIPDET_VAL1, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL2),
-		SPKR_CLIPDET_VAL2, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL3),
-		SPKR_CLIPDET_VAL3, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL4),
-		SPKR_CLIPDET_VAL4, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL5),
-		SPKR_CLIPDET_VAL5, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL6),
-		SPKR_CLIPDET_VAL6, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL7),
-		SPKR_CLIPDET_VAL7, 0xff, 8, 0
-	},
-};
-
-static struct afe_param_cdc_reg_cfg_data taiko_audio_reg_cfg = {
-	.num_registers = ARRAY_SIZE(audio_reg_cfg),
-	.reg_data = audio_reg_cfg,
-};
-
-static struct afe_param_cdc_reg_cfg_data taiko_clip_reg_cfg = {
-	.num_registers = ARRAY_SIZE(clip_reg_cfg),
-	.reg_data = clip_reg_cfg,
-};
-
-static struct afe_param_id_cdc_aanc_version taiko_cdc_aanc_version = {
-	.cdc_aanc_minor_version = AFE_API_VERSION_CDC_AANC_VERSION,
-	.aanc_hw_version        = AANC_HW_BLOCK_VERSION_2,
-};
-
-static struct afe_param_id_clip_bank_sel clip_bank_sel = {
-	.minor_version = AFE_API_VERSION_CLIP_BANK_SEL_CFG,
-	.num_banks = AFE_CLIP_MAX_BANKS,
-	.bank_map = {0, 1, 2, 3},
-};
-
-module_param_cb(spkr_drv_wrnd, &spkr_drv_wrnd_param_ops, &spkr_drv_wrnd, 0644);
-MODULE_PARM_DESC(spkr_drv_wrnd,
-	       "Run software workaround to avoid leakage on the speaker drive");
-
-#define WCD9320_RATES (SNDRV_PCM_RATE_8000 | SNDRV_PCM_RATE_16000 |\
-			SNDRV_PCM_RATE_32000 | SNDRV_PCM_RATE_48000 |\
-			SNDRV_PCM_RATE_96000 | SNDRV_PCM_RATE_192000)
-
-#define NUM_DECIMATORS 10
-#define NUM_INTERPOLATORS 7
-#define BITS_PER_REG 8
-#define TAIKO_TX_PORT_NUMBER	16
-#define TAIKO_RX_PORT_START_NUMBER	16
-
-#define TAIKO_I2S_MASTER_MODE_MASK 0x08
-
-#define TAIKO_SLIM_CLOSE_TIMEOUT 1000
-#define TAIKO_SLIM_IRQ_OVERFLOW (1 << 0)
-#define TAIKO_SLIM_IRQ_UNDERFLOW (1 << 1)
-#define TAIKO_SLIM_IRQ_PORT_CLOSED (1 << 2)
-#define TAIKO_MCLK_CLK_12P288MHZ 12288000
-#define TAIKO_MCLK_CLK_9P6MHZ 9600000
-
-#define TAIKO_FORMATS_S16_S24_LE (SNDRV_PCM_FMTBIT_S16_LE | \
-			SNDRV_PCM_FORMAT_S24_LE)
-
-#define TAIKO_FORMATS (SNDRV_PCM_FMTBIT_S16_LE)
-
-#define TAIKO_SLIM_PGD_PORT_INT_TX_EN0 (TAIKO_SLIM_PGD_PORT_INT_EN0 + 2)
-
-enum {
-	AIF1_PB = 0,
-	AIF1_CAP,
-	AIF2_PB,
-	AIF2_CAP,
-	AIF3_PB,
-	AIF3_CAP,
-	AIF4_VIFEED,
-	AIF4_MAD_TX,
-	NUM_CODEC_DAIS,
-};
-
-enum {
-	RX_MIX1_INP_SEL_ZERO = 0,
-	RX_MIX1_INP_SEL_SRC1,
-	RX_MIX1_INP_SEL_SRC2,
-	RX_MIX1_INP_SEL_IIR1,
-	RX_MIX1_INP_SEL_IIR2,
-	RX_MIX1_INP_SEL_RX1,
-	RX_MIX1_INP_SEL_RX2,
-	RX_MIX1_INP_SEL_RX3,
-	RX_MIX1_INP_SEL_RX4,
-	RX_MIX1_INP_SEL_RX5,
-	RX_MIX1_INP_SEL_RX6,
-	RX_MIX1_INP_SEL_RX7,
-	RX_MIX1_INP_SEL_AUXRX,
-};
-
-#define TAIKO_COMP_DIGITAL_GAIN_OFFSET 3
-
-static const DECLARE_TLV_DB_SCALE(digital_gain, 0, 1, 0);
-static const DECLARE_TLV_DB_SCALE(line_gain, 0, 7, 1);
-static const DECLARE_TLV_DB_SCALE(analog_gain, 0, 25, 1);
-static struct snd_soc_dai_driver taiko_dai[];
-static const DECLARE_TLV_DB_SCALE(aux_pga_gain, 0, 2, 0);
-
-/* Codec supports 2 IIR filters */
-enum {
-	IIR1 = 0,
-	IIR2,
-	IIR_MAX,
-};
-/* Codec supports 5 bands */
-enum {
-	BAND1 = 0,
-	BAND2,
-	BAND3,
-	BAND4,
-	BAND5,
-	BAND_MAX,
-};
-
-enum {
-	COMPANDER_0,
-	COMPANDER_1,
-	COMPANDER_2,
-	COMPANDER_MAX,
-};
-
-enum {
-	COMPANDER_FS_8KHZ = 0,
-	COMPANDER_FS_16KHZ,
-	COMPANDER_FS_32KHZ,
-	COMPANDER_FS_48KHZ,
-	COMPANDER_FS_96KHZ,
-	COMPANDER_FS_192KHZ,
-	COMPANDER_FS_MAX,
-};
-
-struct comp_sample_dependent_params {
-	u32 peak_det_timeout;
-	u32 rms_meter_div_fact;
-	u32 rms_meter_resamp_fact;
-};
-
-struct hpf_work {
-	struct taiko_priv *taiko;
-	u32 decimator;
-	u8 tx_hpf_cut_of_freq;
-	struct delayed_work dwork;
-};
-
-static struct hpf_work tx_hpf_work[NUM_DECIMATORS];
-
-static const struct wcd9xxx_ch taiko_rx_chs[TAIKO_RX_MAX] = {
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER, 0),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 1, 1),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 2, 2),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 3, 3),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 4, 4),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 5, 5),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 6, 6),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 7, 7),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 8, 8),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 9, 9),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 10, 10),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 11, 11),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 12, 12),
-};
-
-static const struct wcd9xxx_ch taiko_tx_chs[TAIKO_TX_MAX] = {
-	WCD9XXX_CH(0, 0),
-	WCD9XXX_CH(1, 1),
-	WCD9XXX_CH(2, 2),
-	WCD9XXX_CH(3, 3),
-	WCD9XXX_CH(4, 4),
-	WCD9XXX_CH(5, 5),
-	WCD9XXX_CH(6, 6),
-	WCD9XXX_CH(7, 7),
-	WCD9XXX_CH(8, 8),
-	WCD9XXX_CH(9, 9),
-	WCD9XXX_CH(10, 10),
-	WCD9XXX_CH(11, 11),
-	WCD9XXX_CH(12, 12),
-	WCD9XXX_CH(13, 13),
-	WCD9XXX_CH(14, 14),
-	WCD9XXX_CH(15, 15),
-};
-
-static const u32 vport_check_table[NUM_CODEC_DAIS] = {
-	0,					/* AIF1_PB */
-	(1 << AIF2_CAP) | (1 << AIF3_CAP),	/* AIF1_CAP */
-	0,					/* AIF2_PB */
-	(1 << AIF1_CAP) | (1 << AIF3_CAP),	/* AIF2_CAP */
-	0,					/* AIF2_PB */
-	(1 << AIF1_CAP) | (1 << AIF2_CAP),	/* AIF2_CAP */
-};
-
-static const u32 vport_i2s_check_table[NUM_CODEC_DAIS] = {
-	0,	/* AIF1_PB */
-	0,	/* AIF1_CAP */
-	0,	/* AIF2_PB */
-	0,	/* AIF2_CAP */
-};
-
-struct taiko_priv {
-	struct snd_soc_codec *codec;
-	u32 adc_count;
-	u32 rx_bias_count;
-	s32 dmic_1_2_clk_cnt;
-	s32 dmic_3_4_clk_cnt;
-	s32 dmic_5_6_clk_cnt;
-	s32 ldo_h_users;
-	s32 micb_2_users;
-
-	u32 anc_slot;
-	bool anc_func;
-
-	/*track taiko interface type*/
-	u8 intf_type;
-
-	/* num of slim ports required */
-	struct wcd9xxx_codec_dai_data  dai[NUM_CODEC_DAIS];
-
-	/*compander*/
-	int comp_enabled[COMPANDER_MAX];
-	u32 comp_fs[COMPANDER_MAX];
-
-	/* Maintain the status of AUX PGA */
-	int aux_pga_cnt;
-	u8 aux_l_gain;
-	u8 aux_r_gain;
-
-	bool spkr_pa_widget_on;
-	struct regulator *spkdrv_reg;
-
-	bool mbhc_started;
-
-	struct afe_param_cdc_slimbus_slave_cfg slimbus_slave_cfg;
-
-	/* resmgr module */
-	struct wcd9xxx_resmgr resmgr;
-	/* mbhc module */
-	struct wcd9xxx_mbhc mbhc;
-
-	/* class h specific data */
-	struct wcd9xxx_clsh_cdc_data clsh_d;
-
-	int (*machine_codec_event_cb)(struct snd_soc_codec *codec,
-			enum wcd9xxx_codec_event);
-
-	/*
-	 * list used to save/restore registers at start and
-	 * end of impedance measurement
-	 */
-	struct list_head reg_save_restore;
-	struct pm_qos_request pm_qos_req;
-	/* cal info for codec */
-	struct fw_info *fw_data;
-};
-
-static const u32 comp_shift[] = {
-	4, /* Compander 0's clock source is on interpolator 7 */
-	0,
-	2,
-};
-
-static const int comp_rx_path[] = {
-	COMPANDER_1,
-	COMPANDER_1,
-	COMPANDER_2,
-	COMPANDER_2,
-	COMPANDER_2,
-	COMPANDER_2,
-	COMPANDER_0,
-	COMPANDER_MAX,
-};
-
-static const struct comp_sample_dependent_params comp_samp_params[] = {
-	{
-		/* 8 Khz */
-		.peak_det_timeout = 0x06,
-		.rms_meter_div_fact = 0x09,
-		.rms_meter_resamp_fact = 0x06,
-	},
-	{
-		/* 16 Khz */
-		.peak_det_timeout = 0x07,
-		.rms_meter_div_fact = 0x0A,
-		.rms_meter_resamp_fact = 0x0C,
-	},
-	{
-		/* 32 Khz */
-		.peak_det_timeout = 0x08,
-		.rms_meter_div_fact = 0x0B,
-		.rms_meter_resamp_fact = 0x1E,
-	},
-	{
-		/* 48 Khz */
-		.peak_det_timeout = 0x09,
-		.rms_meter_div_fact = 0x0B,
-		.rms_meter_resamp_fact = 0x28,
-	},
-	{
-		/* 96 Khz */
-		.peak_det_timeout = 0x0A,
-		.rms_meter_div_fact = 0x0C,
-		.rms_meter_resamp_fact = 0x50,
-	},
-	{
-		/* 192 Khz */
-		.peak_det_timeout = 0x0B,
-		.rms_meter_div_fact = 0xC,
-		.rms_meter_resamp_fact = 0x50,
-	},
-};
-
-static unsigned short rx_digital_gain_reg[] = {
-	TAIKO_A_CDC_RX1_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX2_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX3_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX4_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX5_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX6_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL,
-};
-
-
-static unsigned short tx_digital_gain_reg[] = {
-	TAIKO_A_CDC_TX1_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX2_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX3_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX4_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX5_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX6_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX7_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX8_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX9_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX10_VOL_CTL_GAIN,
-};
-
-static int spkr_drv_wrnd_param_set(const char *val,
-				   const struct kernel_param *kp)
-{
-	struct snd_soc_codec *codec;
-	int ret, old;
-	struct taiko_priv *priv;
-
-	priv = (struct taiko_priv *)atomic_read(&kp_taiko_priv);
-	if (!priv) {
-		pr_debug("%s: codec isn't yet registered\n", __func__);
-		return 0;
-	}
-
-	codec = priv->codec;
-	mutex_lock(&codec->mutex);
-	old = spkr_drv_wrnd;
-	ret = param_set_int(val, kp);
-	if (ret) {
-		mutex_unlock(&codec->mutex);
-		return ret;
-	}
-
-	pr_debug("%s: spkr_drv_wrnd %d -> %d\n", __func__, old, spkr_drv_wrnd);
-	if ((old == -1 || old == 0) && spkr_drv_wrnd == 1) {
-		WCD9XXX_BG_CLK_LOCK(&priv->resmgr);
-		wcd9xxx_resmgr_get_bandgap(&priv->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		WCD9XXX_BG_CLK_UNLOCK(&priv->resmgr);
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80, 0x80);
-	} else if (old == 1 && spkr_drv_wrnd == 0) {
-		WCD9XXX_BG_CLK_LOCK(&priv->resmgr);
-		wcd9xxx_resmgr_put_bandgap(&priv->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		WCD9XXX_BG_CLK_UNLOCK(&priv->resmgr);
-		if (!priv->spkr_pa_widget_on)
-			snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80,
-					    0x00);
-	}
-	mutex_unlock(&codec->mutex);
-
-	return 0;
-}
-
-static int taiko_get_anc_slot(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	ucontrol->value.integer.value[0] = taiko->anc_slot;
-	return 0;
-}
-
-static int taiko_put_anc_slot(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	taiko->anc_slot = ucontrol->value.integer.value[0];
-	return 0;
-}
-
-static int taiko_get_anc_func(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	ucontrol->value.integer.value[0] = (taiko->anc_func == true ? 1 : 0);
-	return 0;
-}
-
-static int taiko_put_anc_func(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	struct snd_soc_dapm_context *dapm = &codec->dapm;
-
-	mutex_lock(&dapm->codec->mutex);
-	taiko->anc_func = (!ucontrol->value.integer.value[0] ? false : true);
-
-	dev_dbg(codec->dev, "%s: anc_func %x", __func__, taiko->anc_func);
-
-	if (taiko->anc_func == true) {
-		snd_soc_dapm_enable_pin(dapm, "ANC HPHR");
-		snd_soc_dapm_enable_pin(dapm, "ANC HPHL");
-		snd_soc_dapm_enable_pin(dapm, "ANC HEADPHONE");
-		snd_soc_dapm_enable_pin(dapm, "ANC EAR PA");
-		snd_soc_dapm_enable_pin(dapm, "ANC EAR");
-		snd_soc_dapm_disable_pin(dapm, "HPHR");
-		snd_soc_dapm_disable_pin(dapm, "HPHL");
-		snd_soc_dapm_disable_pin(dapm, "HEADPHONE");
-		snd_soc_dapm_disable_pin(dapm, "EAR PA");
-		snd_soc_dapm_disable_pin(dapm, "EAR");
-	} else {
-		snd_soc_dapm_disable_pin(dapm, "ANC HPHR");
-		snd_soc_dapm_disable_pin(dapm, "ANC HPHL");
-		snd_soc_dapm_disable_pin(dapm, "ANC HEADPHONE");
-		snd_soc_dapm_disable_pin(dapm, "ANC EAR PA");
-		snd_soc_dapm_disable_pin(dapm, "ANC EAR");
-		snd_soc_dapm_enable_pin(dapm, "HPHR");
-		snd_soc_dapm_enable_pin(dapm, "HPHL");
-		snd_soc_dapm_enable_pin(dapm, "HEADPHONE");
-		snd_soc_dapm_enable_pin(dapm, "EAR PA");
-		snd_soc_dapm_enable_pin(dapm, "EAR");
-	}
-	snd_soc_dapm_sync(dapm);
-	mutex_unlock(&dapm->codec->mutex);
-	return 0;
-}
-
-static int taiko_get_iir_enable_audio_mixer(
-					struct snd_kcontrol *kcontrol,
-					struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	int iir_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->reg;
-	int band_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->shift;
-
-	ucontrol->value.integer.value[0] =
-		(snd_soc_read(codec, (TAIKO_A_CDC_IIR1_CTL + 16 * iir_idx)) &
-		(1 << band_idx)) != 0;
-
-	pr_debug("%s: IIR #%d band #%d enable %d\n", __func__,
-		iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[0]);
-	return 0;
-}
-
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-static int taiko_get_sub_mic_delay_set(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	return 0;
-}
-
-static int taiko_put_sub_mic_delay_set(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	sub_mic_rec_delay = ucontrol->value.integer.value[0];
-	pr_info("%s : sub_mic_rec_delay : %d\n",  __func__, sub_mic_rec_delay);
-
-	return 0;
-}
-#endif
-
-static int taiko_put_iir_enable_audio_mixer(
-					struct snd_kcontrol *kcontrol,
-					struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	int iir_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->reg;
-	int band_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->shift;
-	int value = ucontrol->value.integer.value[0];
-
-	/* Mask first 5 bits, 6-8 are reserved */
-	snd_soc_update_bits(codec, (TAIKO_A_CDC_IIR1_CTL + 16 * iir_idx),
-		(1 << band_idx), (value << band_idx));
-
-	pr_debug("%s: IIR #%d band #%d enable %d\n", __func__,
-		iir_idx, band_idx,
-		((snd_soc_read(codec, (TAIKO_A_CDC_IIR1_CTL + 16 * iir_idx)) &
-		(1 << band_idx)) != 0));
-	return 0;
-}
-static uint32_t get_iir_band_coeff(struct snd_soc_codec *codec,
-				int iir_idx, int band_idx,
-				int coeff_idx)
-{
-	uint32_t value = 0;
-
-	/* Address does not automatically update if reading */
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B1_CTL + 16 * iir_idx),
-		((band_idx * BAND_MAX + coeff_idx)
-		* sizeof(uint32_t)) & 0x7F);
-
-	value |= snd_soc_read(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx));
-
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B1_CTL + 16 * iir_idx),
-		((band_idx * BAND_MAX + coeff_idx)
-		* sizeof(uint32_t) + 1) & 0x7F);
-
-	value |= (snd_soc_read(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx)) << 8);
-
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B1_CTL + 16 * iir_idx),
-		((band_idx * BAND_MAX + coeff_idx)
-		* sizeof(uint32_t) + 2) & 0x7F);
-
-	value |= (snd_soc_read(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx)) << 16);
-
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B1_CTL + 16 * iir_idx),
-		((band_idx * BAND_MAX + coeff_idx)
-		* sizeof(uint32_t) + 3) & 0x7F);
-
-	/* Mask bits top 2 bits since they are reserved */
-	value |= ((snd_soc_read(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx)) & 0x3F) << 24);
-
-	return value;
-}
-
-static int taiko_get_iir_band_audio_mixer(
-					struct snd_kcontrol *kcontrol,
-					struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	int iir_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->reg;
-	int band_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->shift;
-
-	ucontrol->value.integer.value[0] =
-		get_iir_band_coeff(codec, iir_idx, band_idx, 0);
-	ucontrol->value.integer.value[1] =
-		get_iir_band_coeff(codec, iir_idx, band_idx, 1);
-	ucontrol->value.integer.value[2] =
-		get_iir_band_coeff(codec, iir_idx, band_idx, 2);
-	ucontrol->value.integer.value[3] =
-		get_iir_band_coeff(codec, iir_idx, band_idx, 3);
-	ucontrol->value.integer.value[4] =
-		get_iir_band_coeff(codec, iir_idx, band_idx, 4);
-
-	pr_debug("%s: IIR #%d band #%d b0 = 0x%x\n"
-		"%s: IIR #%d band #%d b1 = 0x%x\n"
-		"%s: IIR #%d band #%d b2 = 0x%x\n"
-		"%s: IIR #%d band #%d a1 = 0x%x\n"
-		"%s: IIR #%d band #%d a2 = 0x%x\n",
-		__func__, iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[0],
-		__func__, iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[1],
-		__func__, iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[2],
-		__func__, iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[3],
-		__func__, iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[4]);
-	return 0;
-}
-
-static void set_iir_band_coeff(struct snd_soc_codec *codec,
-				int iir_idx, int band_idx,
-				uint32_t value)
-{
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx),
-		(value & 0xFF));
-
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx),
-		(value >> 8) & 0xFF);
-
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx),
-		(value >> 16) & 0xFF);
-
-	/* Mask top 2 bits, 7-8 are reserved */
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx),
-		(value >> 24) & 0x3F);
-}
-
-static int taiko_put_iir_band_audio_mixer(
-					struct snd_kcontrol *kcontrol,
-					struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	int iir_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->reg;
-	int band_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->shift;
-
-	/* Mask top bit it is reserved */
-	/* Updates addr automatically for each B2 write */
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B1_CTL + 16 * iir_idx),
-		(band_idx * BAND_MAX * sizeof(uint32_t)) & 0x7F);
-
-	set_iir_band_coeff(codec, iir_idx, band_idx,
-				ucontrol->value.integer.value[0]);
-	set_iir_band_coeff(codec, iir_idx, band_idx,
-				ucontrol->value.integer.value[1]);
-	set_iir_band_coeff(codec, iir_idx, band_idx,
-				ucontrol->value.integer.value[2]);
-	set_iir_band_coeff(codec, iir_idx, band_idx,
-				ucontrol->value.integer.value[3]);
-	set_iir_band_coeff(codec, iir_idx, band_idx,
-				ucontrol->value.integer.value[4]);
-
-	pr_debug("%s: IIR #%d band #%d b0 = 0x%x\n"
-		"%s: IIR #%d band #%d b1 = 0x%x\n"
-		"%s: IIR #%d band #%d b2 = 0x%x\n"
-		"%s: IIR #%d band #%d a1 = 0x%x\n"
-		"%s: IIR #%d band #%d a2 = 0x%x\n",
-		__func__, iir_idx, band_idx,
-		get_iir_band_coeff(codec, iir_idx, band_idx, 0),
-		__func__, iir_idx, band_idx,
-		get_iir_band_coeff(codec, iir_idx, band_idx, 1),
-		__func__, iir_idx, band_idx,
-		get_iir_band_coeff(codec, iir_idx, band_idx, 2),
-		__func__, iir_idx, band_idx,
-		get_iir_band_coeff(codec, iir_idx, band_idx, 3),
-		__func__, iir_idx, band_idx,
-		get_iir_band_coeff(codec, iir_idx, band_idx, 4));
-	return 0;
-}
-
-static int taiko_get_compander(struct snd_kcontrol *kcontrol,
-			       struct snd_ctl_elem_value *ucontrol)
-{
-
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	int comp = ((struct soc_multi_mixer_control *)
-		    kcontrol->private_value)->shift;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	ucontrol->value.integer.value[0] = taiko->comp_enabled[comp];
-	return 0;
-}
-
-static int taiko_set_compander(struct snd_kcontrol *kcontrol,
-			       struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	int comp = ((struct soc_multi_mixer_control *)
-		    kcontrol->private_value)->shift;
-	int value = ucontrol->value.integer.value[0];
-
-	pr_debug("%s: Compander %d enable current %d, new %d\n",
-		 __func__, comp, taiko->comp_enabled[comp], value);
-	taiko->comp_enabled[comp] = value;
-
-	if (comp == COMPANDER_1 &&
-			taiko->comp_enabled[comp] == 1) {
-		/* Wavegen to 5 msec */
-		snd_soc_write(codec, TAIKO_A_RX_HPH_CNP_WG_CTL, 0xDA);
-		snd_soc_write(codec, TAIKO_A_RX_HPH_CNP_WG_TIME, 0x15);
-		snd_soc_write(codec, TAIKO_A_RX_HPH_BIAS_WG_OCP, 0x2A);
-
-		/* Enable Chopper */
-		snd_soc_update_bits(codec,
-			TAIKO_A_RX_HPH_CHOP_CTL, 0x80, 0x80);
-
-		snd_soc_write(codec, TAIKO_A_NCP_DTEST, 0x20);
-		pr_debug("%s: Enabled Chopper and set wavegen to 5 msec\n",
-				__func__);
-	} else if (comp == COMPANDER_1 &&
-			taiko->comp_enabled[comp] == 0) {
-		/* Wavegen to 20 msec */
-		snd_soc_write(codec, TAIKO_A_RX_HPH_CNP_WG_CTL, 0xDB);
-		snd_soc_write(codec, TAIKO_A_RX_HPH_CNP_WG_TIME, 0x58);
-		snd_soc_write(codec, TAIKO_A_RX_HPH_BIAS_WG_OCP, 0x1A);
-
-		/* Disable CHOPPER block */
-		snd_soc_update_bits(codec,
-			TAIKO_A_RX_HPH_CHOP_CTL, 0x80, 0x00);
-
-		snd_soc_write(codec, TAIKO_A_NCP_DTEST, 0x10);
-		pr_debug("%s: Disabled Chopper and set wavegen to 20 msec\n",
-				__func__);
-	}
-	return 0;
-}
-
-static int taiko_config_gain_compander(struct snd_soc_codec *codec,
-				       int comp, bool enable)
-{
-	int ret = 0;
-
-	switch (comp) {
-	case COMPANDER_0:
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_GAIN,
-				    1 << 2, !enable << 2);
-		break;
-	case COMPANDER_1:
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_L_GAIN,
-				    1 << 5, !enable << 5);
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_R_GAIN,
-				    1 << 5, !enable << 5);
-		break;
-	case COMPANDER_2:
-		snd_soc_update_bits(codec, TAIKO_A_RX_LINE_1_GAIN,
-				    1 << 5, !enable << 5);
-		snd_soc_update_bits(codec, TAIKO_A_RX_LINE_3_GAIN,
-				    1 << 5, !enable << 5);
-		snd_soc_update_bits(codec, TAIKO_A_RX_LINE_2_GAIN,
-				    1 << 5, !enable << 5);
-		snd_soc_update_bits(codec, TAIKO_A_RX_LINE_4_GAIN,
-				    1 << 5, !enable << 5);
-		break;
-	default:
-		WARN_ON(1);
-		ret = -EINVAL;
-	}
-
-	return ret;
-}
-
-static void taiko_discharge_comp(struct snd_soc_codec *codec, int comp)
-{
-	/* Level meter DIV Factor to 5*/
-	snd_soc_update_bits(codec, TAIKO_A_CDC_COMP0_B2_CTL + (comp * 8), 0xF0,
-			    0x05 << 4);
-	/* RMS meter Sampling to 0x01 */
-	snd_soc_write(codec, TAIKO_A_CDC_COMP0_B3_CTL + (comp * 8), 0x01);
-
-	/* Worst case timeout for compander CnP sleep timeout */
-	usleep_range(3000, 3000);
-}
-
-static enum wcd9xxx_buck_volt taiko_codec_get_buck_mv(
-	struct snd_soc_codec *codec)
-{
-	int buck_volt = WCD9XXX_CDC_BUCK_UNSUPPORTED;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	struct wcd9xxx_pdata *pdata = taiko->resmgr.pdata;
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(pdata->regulator); i++) {
-		if (!strncmp(pdata->regulator[i].name,
-					 WCD9XXX_SUPPLY_BUCK_NAME,
-					 sizeof(WCD9XXX_SUPPLY_BUCK_NAME))) {
-			if ((pdata->regulator[i].min_uV ==
-					WCD9XXX_CDC_BUCK_MV_1P8) ||
-				(pdata->regulator[i].min_uV ==
-					WCD9XXX_CDC_BUCK_MV_2P15))
-				buck_volt = pdata->regulator[i].min_uV;
-			break;
-		}
-	}
-	return buck_volt;
-}
-
-static int taiko_config_compander(struct snd_soc_dapm_widget *w,
-				  struct snd_kcontrol *kcontrol, int event)
-{
-	int mask, enable_mask;
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	const int comp = w->shift;
-	const u32 rate = taiko->comp_fs[comp];
-	const struct comp_sample_dependent_params *comp_params =
-	    &comp_samp_params[rate];
-	enum wcd9xxx_buck_volt buck_mv;
-
-	pr_debug("%s: %s event %d compander %d, enabled %d", __func__,
-		 w->name, event, comp, taiko->comp_enabled[comp]);
-
-	if (!taiko->comp_enabled[comp])
-		return 0;
-
-	/* Compander 0 has single channel */
-	mask = (comp == COMPANDER_0 ? 0x01 : 0x03);
-	enable_mask = (comp == COMPANDER_0 ? 0x02 : 0x03);
-	buck_mv = taiko_codec_get_buck_mv(codec);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		/* Set compander Sample rate */
-		snd_soc_update_bits(codec,
-				    TAIKO_A_CDC_COMP0_FS_CFG + (comp * 8),
-				    0x07, rate);
-		/* Set the static gain offset */
-		if (comp == COMPANDER_1
-			&& buck_mv == WCD9XXX_CDC_BUCK_MV_1P8) {
-			snd_soc_update_bits(codec,
-					TAIKO_A_CDC_COMP0_B4_CTL + (comp * 8),
-					0x80, 0x80);
-		} else {
-			snd_soc_update_bits(codec,
-					TAIKO_A_CDC_COMP0_B4_CTL + (comp * 8),
-					0x80, 0x00);
-		}
-		/* Enable RX interpolation path compander clocks */
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RX_B2_CTL,
-				    mask << comp_shift[comp],
-				    mask << comp_shift[comp]);
-		/* Toggle compander reset bits */
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_OTHR_RESET_B2_CTL,
-				    mask << comp_shift[comp],
-				    mask << comp_shift[comp]);
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_OTHR_RESET_B2_CTL,
-				    mask << comp_shift[comp], 0);
-
-		/* Set gain source to compander */
-		taiko_config_gain_compander(codec, comp, true);
-
-		/* Compander enable */
-		snd_soc_update_bits(codec, TAIKO_A_CDC_COMP0_B1_CTL +
-				    (comp * 8), enable_mask, enable_mask);
-
-		taiko_discharge_comp(codec, comp);
-
-		/* Set sample rate dependent paramater */
-		snd_soc_write(codec, TAIKO_A_CDC_COMP0_B3_CTL + (comp * 8),
-			      comp_params->rms_meter_resamp_fact);
-		snd_soc_update_bits(codec,
-				    TAIKO_A_CDC_COMP0_B2_CTL + (comp * 8),
-				    0xF0, comp_params->rms_meter_div_fact << 4);
-		snd_soc_update_bits(codec,
-					TAIKO_A_CDC_COMP0_B2_CTL + (comp * 8),
-					0x0F, comp_params->peak_det_timeout);
-		break;
-	case SND_SOC_DAPM_PRE_PMD:
-		/* Disable compander */
-		snd_soc_update_bits(codec,
-				    TAIKO_A_CDC_COMP0_B1_CTL + (comp * 8),
-				    enable_mask, 0x00);
-
-		/* Toggle compander reset bits */
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_OTHR_RESET_B2_CTL,
-				    mask << comp_shift[comp],
-				    mask << comp_shift[comp]);
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_OTHR_RESET_B2_CTL,
-				    mask << comp_shift[comp], 0);
-
-		/* Turn off the clock for compander in pair */
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RX_B2_CTL,
-				    mask << comp_shift[comp], 0);
-
-		/* Set gain source to register */
-		taiko_config_gain_compander(codec, comp, false);
-		break;
-	}
-	return 0;
-}
-
-
-
-static const char *const taiko_anc_func_text[] = {"OFF", "ON"};
-static const struct soc_enum taiko_anc_func_enum =
-		SOC_ENUM_SINGLE_EXT(2, taiko_anc_func_text);
-
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-static const char *const taiko_sub_mic_delay_text[] = {"OFF", "ON"};
-static const struct soc_enum taiko_sub_mic_delay_enum =
-		SOC_ENUM_SINGLE_EXT(2, taiko_sub_mic_delay_text);
-#endif
-
-static const char *const tabla_ear_pa_gain_text[] = {"POS_6_DB", "POS_2_DB"};
-static const struct soc_enum tabla_ear_pa_gain_enum[] = {
-		SOC_ENUM_SINGLE_EXT(2, tabla_ear_pa_gain_text),
-};
-
-/*cut of frequency for high pass filter*/
-static const char * const cf_text[] = {
-	"MIN_3DB_4Hz", "MIN_3DB_75Hz", "MIN_3DB_150Hz"
-};
-
-static const struct soc_enum cf_dec1_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX1_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec2_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX2_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec3_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX3_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec4_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX4_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec5_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX5_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec6_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX6_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec7_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX7_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec8_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX8_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec9_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX9_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec10_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX10_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_rxmix1_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX1_B4_CTL, 0, 3, cf_text);
-
-static const struct soc_enum cf_rxmix2_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX2_B4_CTL, 0, 3, cf_text);
-
-static const struct soc_enum cf_rxmix3_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX3_B4_CTL, 0, 3, cf_text);
-
-static const struct soc_enum cf_rxmix4_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX4_B4_CTL, 0, 3, cf_text);
-
-static const struct soc_enum cf_rxmix5_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX5_B4_CTL, 0, 3, cf_text)
-;
-static const struct soc_enum cf_rxmix6_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX6_B4_CTL, 0, 3, cf_text);
-
-static const struct soc_enum cf_rxmix7_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX7_B4_CTL, 0, 3, cf_text);
-
-static const char * const class_h_dsm_text[] = {
-	"ZERO", "DSM_HPHL_RX1", "DSM_SPKR_RX7"
-};
-
-static const struct soc_enum class_h_dsm_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_CLSH_CTL, 4, 3, class_h_dsm_text);
-
-static const struct snd_kcontrol_new class_h_dsm_mux =
-	SOC_DAPM_ENUM("CLASS_H_DSM MUX Mux", class_h_dsm_enum);
-
-static const char *const taiko_conn_mad_text[] = {
-	"ADC_MB", "ADC1", "ADC2", "ADC3", "ADC4", "ADC5", "ADC6", "NOTUSED1",
-	"DMIC1", "DMIC2", "DMIC3", "DMIC4", "DMIC5", "DMIC6", "NOTUSED2",
-	"NOTUSED3"};
-
-static const struct soc_enum taiko_conn_mad_enum =
-	SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(taiko_conn_mad_text),
-			taiko_conn_mad_text);
-
-
-static int taiko_mad_input_get(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	u8 taiko_mad_input;
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-
-	taiko_mad_input = snd_soc_read(codec, TAIKO_A_CDC_CONN_MAD);
-
-	taiko_mad_input = taiko_mad_input & 0x0F;
-
-	ucontrol->value.integer.value[0] = taiko_mad_input;
-
-	pr_debug("%s: taiko_mad_input = %s\n", __func__,
-			taiko_conn_mad_text[taiko_mad_input]);
-
-	return 0;
-}
-
-static int taiko_mad_input_put(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	u8 taiko_mad_input;
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_card *card = codec->card;
-	char mad_amic_input_widget[6];
-	u32 adc;
-	const char *mad_input_widget;
-	u32  mic_bias_found = 0;
-	u32 i;
-	int ret = 0;
-
-	taiko_mad_input = ucontrol->value.integer.value[0];
-
-	pr_debug("%s: taiko_mad_input = %s\n", __func__,
-			taiko_conn_mad_text[taiko_mad_input]);
-
-	if (!strcmp(taiko_conn_mad_text[taiko_mad_input], "NOTUSED1") ||
-		!strcmp(taiko_conn_mad_text[taiko_mad_input], "NOTUSED2") ||
-		!strcmp(taiko_conn_mad_text[taiko_mad_input], "NOTUSED3") ||
-		!strcmp(taiko_conn_mad_text[taiko_mad_input], "ADC_MB")) {
-		pr_info("%s: taiko mad input is set to unsupported input = %s\n",
-				__func__, taiko_conn_mad_text[taiko_mad_input]);
-		return -EINVAL;
-	}
-
-	if (strnstr(taiko_conn_mad_text[taiko_mad_input],
-				"ADC", sizeof("ADC"))) {
-		ret = kstrtouint(strpbrk(taiko_conn_mad_text[taiko_mad_input]
-					, "123456"), 10, &adc);
-		if ((ret < 0) || (adc > 6)) {
-			pr_err("%s: Invalid ADC = %s\n", __func__,
-				taiko_conn_mad_text[taiko_mad_input]);
-			ret =  -EINVAL;
-		}
-
-		snprintf(mad_amic_input_widget, 6, "%s%u", "AMIC", adc);
-
-		mad_input_widget = mad_amic_input_widget;
-		pr_debug("%s: taiko amic input widget = %s\n", __func__,
-			  mad_amic_input_widget);
-	} else {
-		/* DMIC type input widget*/
-		mad_input_widget = taiko_conn_mad_text[taiko_mad_input];
-	}
-
-	pr_debug("%s: taiko input widget = %s\n", __func__, mad_input_widget);
-
-	for (i = 0; i < card->num_dapm_routes; i++) {
-
-		if (!strncmp(card->dapm_routes[i].sink,
-				mad_input_widget, strlen(mad_input_widget))) {
-
-			if (strnstr(card->dapm_routes[i].source,
-				"MIC BIAS1", sizeof("MIC BIAS1"))) {
-				mic_bias_found = 1;
-				break;
-			} else if (strnstr(card->dapm_routes[i].source,
-				"MIC BIAS2", sizeof("MIC BIAS2"))) {
-				mic_bias_found = 2;
-				break;
-			} else if (strnstr(card->dapm_routes[i].source,
-				"MIC BIAS3", sizeof("MIC BIAS3"))) {
-				mic_bias_found = 3;
-				break;
-			} else if (strnstr(card->dapm_routes[i].source,
-				"MIC BIAS4", sizeof("MIC BIAS4"))) {
-				mic_bias_found = 4;
-				break;
-			}
-		}
-	}
-
-	if (mic_bias_found) {
-		pr_debug("%s: source mic bias = %s. sink = %s\n", __func__,
-				card->dapm_routes[i].source,
-				card->dapm_routes[i].sink);
-
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CONN_MAD,
-					0x0F, taiko_mad_input);
-		snd_soc_update_bits(codec, TAIKO_A_MAD_ANA_CTRL,
-					0x07, mic_bias_found);
-		return 0;
-	} else {
-		pr_err("%s: mic bias source not found for input = %s\n",
-				__func__, mad_input_widget);
-		return -EINVAL;
-	}
-}
-
-
-static const struct snd_kcontrol_new taiko_snd_controls[] = {
-
-	SOC_SINGLE_S8_TLV("RX1 Digital Volume", TAIKO_A_CDC_RX1_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX2 Digital Volume", TAIKO_A_CDC_RX2_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX3 Digital Volume", TAIKO_A_CDC_RX3_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX4 Digital Volume", TAIKO_A_CDC_RX4_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX5 Digital Volume", TAIKO_A_CDC_RX5_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX6 Digital Volume", TAIKO_A_CDC_RX6_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX7 Digital Volume", TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-
-	SOC_SINGLE_S8_TLV("DEC1 Volume", TAIKO_A_CDC_TX1_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC2 Volume", TAIKO_A_CDC_TX2_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC3 Volume", TAIKO_A_CDC_TX3_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC4 Volume", TAIKO_A_CDC_TX4_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC5 Volume", TAIKO_A_CDC_TX5_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC6 Volume", TAIKO_A_CDC_TX6_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC7 Volume", TAIKO_A_CDC_TX7_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC8 Volume", TAIKO_A_CDC_TX8_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC9 Volume", TAIKO_A_CDC_TX9_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC10 Volume", TAIKO_A_CDC_TX10_VOL_CTL_GAIN, -84,
-		40, digital_gain),
-
-	SOC_SINGLE_S8_TLV("IIR1 INP1 Volume", TAIKO_A_CDC_IIR1_GAIN_B1_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR1 INP2 Volume", TAIKO_A_CDC_IIR1_GAIN_B2_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR1 INP3 Volume", TAIKO_A_CDC_IIR1_GAIN_B3_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR1 INP4 Volume", TAIKO_A_CDC_IIR1_GAIN_B4_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR2 INP1 Volume", TAIKO_A_CDC_IIR2_GAIN_B1_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR2 INP2 Volume", TAIKO_A_CDC_IIR2_GAIN_B2_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR2 INP3 Volume", TAIKO_A_CDC_IIR2_GAIN_B3_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR2 INP4 Volume", TAIKO_A_CDC_IIR2_GAIN_B4_CTL, -84,
-		40, digital_gain),
-
-	SOC_SINGLE_EXT("ANC Slot", SND_SOC_NOPM, 0, 100, 0, taiko_get_anc_slot,
-		taiko_put_anc_slot),
-	SOC_ENUM_EXT("ANC Function", taiko_anc_func_enum, taiko_get_anc_func,
-		taiko_put_anc_func),
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-        SOC_ENUM_EXT("SUB_MIC_REC_DELAY", taiko_sub_mic_delay_enum, taiko_get_sub_mic_delay_set,
-            taiko_put_sub_mic_delay_set),
-#endif
-
-	SOC_ENUM("TX1 HPF cut off", cf_dec1_enum),
-	SOC_ENUM("TX2 HPF cut off", cf_dec2_enum),
-	SOC_ENUM("TX3 HPF cut off", cf_dec3_enum),
-	SOC_ENUM("TX4 HPF cut off", cf_dec4_enum),
-	SOC_ENUM("TX5 HPF cut off", cf_dec5_enum),
-	SOC_ENUM("TX6 HPF cut off", cf_dec6_enum),
-	SOC_ENUM("TX7 HPF cut off", cf_dec7_enum),
-	SOC_ENUM("TX8 HPF cut off", cf_dec8_enum),
-	SOC_ENUM("TX9 HPF cut off", cf_dec9_enum),
-	SOC_ENUM("TX10 HPF cut off", cf_dec10_enum),
-
-	SOC_SINGLE("TX1 HPF Switch", TAIKO_A_CDC_TX1_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX2 HPF Switch", TAIKO_A_CDC_TX2_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX3 HPF Switch", TAIKO_A_CDC_TX3_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX4 HPF Switch", TAIKO_A_CDC_TX4_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX5 HPF Switch", TAIKO_A_CDC_TX5_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX6 HPF Switch", TAIKO_A_CDC_TX6_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX7 HPF Switch", TAIKO_A_CDC_TX7_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX8 HPF Switch", TAIKO_A_CDC_TX8_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX9 HPF Switch", TAIKO_A_CDC_TX9_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX10 HPF Switch", TAIKO_A_CDC_TX10_MUX_CTL, 3, 1, 0),
-
-	SOC_SINGLE("RX1 HPF Switch", TAIKO_A_CDC_RX1_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX2 HPF Switch", TAIKO_A_CDC_RX2_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX3 HPF Switch", TAIKO_A_CDC_RX3_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX4 HPF Switch", TAIKO_A_CDC_RX4_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX5 HPF Switch", TAIKO_A_CDC_RX5_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX6 HPF Switch", TAIKO_A_CDC_RX6_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX7 HPF Switch", TAIKO_A_CDC_RX7_B5_CTL, 2, 1, 0),
-
-	SOC_ENUM("RX1 HPF cut off", cf_rxmix1_enum),
-	SOC_ENUM("RX2 HPF cut off", cf_rxmix2_enum),
-	SOC_ENUM("RX3 HPF cut off", cf_rxmix3_enum),
-	SOC_ENUM("RX4 HPF cut off", cf_rxmix4_enum),
-	SOC_ENUM("RX5 HPF cut off", cf_rxmix5_enum),
-	SOC_ENUM("RX6 HPF cut off", cf_rxmix6_enum),
-	SOC_ENUM("RX7 HPF cut off", cf_rxmix7_enum),
-
-	SOC_SINGLE_EXT("IIR1 Enable Band1", IIR1, BAND1, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR1 Enable Band2", IIR1, BAND2, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR1 Enable Band3", IIR1, BAND3, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR1 Enable Band4", IIR1, BAND4, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR1 Enable Band5", IIR1, BAND5, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR2 Enable Band1", IIR2, BAND1, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR2 Enable Band2", IIR2, BAND2, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR2 Enable Band3", IIR2, BAND3, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR2 Enable Band4", IIR2, BAND4, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR2 Enable Band5", IIR2, BAND5, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-
-	SOC_SINGLE_MULTI_EXT("IIR1 Band1", IIR1, BAND1, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR1 Band2", IIR1, BAND2, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR1 Band3", IIR1, BAND3, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR1 Band4", IIR1, BAND4, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR1 Band5", IIR1, BAND5, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR2 Band1", IIR2, BAND1, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR2 Band2", IIR2, BAND2, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR2 Band3", IIR2, BAND3, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR2 Band4", IIR2, BAND4, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR2 Band5", IIR2, BAND5, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-
-	SOC_SINGLE_EXT("COMP0 Switch", SND_SOC_NOPM, COMPANDER_0, 1, 0,
-		       taiko_get_compander, taiko_set_compander),
-	SOC_SINGLE_EXT("COMP1 Switch", SND_SOC_NOPM, COMPANDER_1, 1, 0,
-		       taiko_get_compander, taiko_set_compander),
-	SOC_SINGLE_EXT("COMP2 Switch", SND_SOC_NOPM, COMPANDER_2, 1, 0,
-		       taiko_get_compander, taiko_set_compander),
-
-	SOC_ENUM_EXT("MAD Input", taiko_conn_mad_enum,
-			taiko_mad_input_get, taiko_mad_input_put),
-
-};
-
-static int taiko_pa_gain_get(struct snd_kcontrol *kcontrol,
-				struct snd_ctl_elem_value *ucontrol)
-{
-	u8 ear_pa_gain;
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-
-	ear_pa_gain = snd_soc_read(codec, TAIKO_A_RX_EAR_GAIN);
-
-	ear_pa_gain = ear_pa_gain >> 5;
-
-	ucontrol->value.integer.value[0] = ear_pa_gain;
-
-	pr_debug("%s: ear_pa_gain = 0x%x\n", __func__, ear_pa_gain);
-
-	return 0;
-}
-
-static int taiko_pa_gain_put(struct snd_kcontrol *kcontrol,
-				struct snd_ctl_elem_value *ucontrol)
-{
-	u8 ear_pa_gain;
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-
-	pr_debug("%s: ucontrol->value.integer.value[0]  = %ld\n", __func__,
-			ucontrol->value.integer.value[0]);
-
-	ear_pa_gain =  ucontrol->value.integer.value[0] << 5;
-
-	snd_soc_update_bits(codec, TAIKO_A_RX_EAR_GAIN, 0xE0, ear_pa_gain);
-	return 0;
-}
-
-static const char * const taiko_1_x_ear_pa_gain_text[] = {
-	"POS_6_DB", "UNDEFINED_1", "UNDEFINED_2", "UNDEFINED_3", "POS_2_DB",
-	"NEG_2P5_DB", "UNDEFINED_4", "NEG_12_DB"
-};
-
-static const struct soc_enum taiko_1_x_ear_pa_gain_enum =
-	SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(taiko_1_x_ear_pa_gain_text),
-			taiko_1_x_ear_pa_gain_text);
-
-static const struct snd_kcontrol_new taiko_1_x_analog_gain_controls[] = {
-
-	SOC_ENUM_EXT("EAR PA Gain", taiko_1_x_ear_pa_gain_enum,
-		taiko_pa_gain_get, taiko_pa_gain_put),
-
-	SOC_SINGLE_TLV("HPHL Volume", TAIKO_A_RX_HPH_L_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("HPHR Volume", TAIKO_A_RX_HPH_R_GAIN, 0, 20, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("LINEOUT1 Volume", TAIKO_A_RX_LINE_1_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT2 Volume", TAIKO_A_RX_LINE_2_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT3 Volume", TAIKO_A_RX_LINE_3_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT4 Volume", TAIKO_A_RX_LINE_4_GAIN, 0, 20, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("SPK DRV Volume", TAIKO_A_SPKR_DRV_GAIN, 3, 7, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("ADC1 Volume", TAIKO_A_TX_1_2_EN, 5, 3, 0, analog_gain),
-	SOC_SINGLE_TLV("ADC2 Volume", TAIKO_A_TX_1_2_EN, 1, 3, 0, analog_gain),
-	SOC_SINGLE_TLV("ADC3 Volume", TAIKO_A_TX_3_4_EN, 5, 3, 0, analog_gain),
-	SOC_SINGLE_TLV("ADC4 Volume", TAIKO_A_TX_3_4_EN, 1, 3, 0, analog_gain),
-	SOC_SINGLE_TLV("ADC5 Volume", TAIKO_A_TX_5_6_EN, 5, 3, 0, analog_gain),
-	SOC_SINGLE_TLV("ADC6 Volume", TAIKO_A_TX_5_6_EN, 1, 3, 0, analog_gain),
-};
-
-static const char * const taiko_2_x_ear_pa_gain_text[] = {
-	"POS_6_DB", "POS_4P5_DB", "POS_3_DB", "POS_1P5_DB",
-	"POS_0_DB", "NEG_2P5_DB", "UNDEFINED", "NEG_12_DB"
-};
-
-static const struct soc_enum taiko_2_x_ear_pa_gain_enum =
-	SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(taiko_2_x_ear_pa_gain_text),
-			taiko_2_x_ear_pa_gain_text);
-
-static const struct snd_kcontrol_new taiko_2_x_analog_gain_controls[] = {
-
-	SOC_ENUM_EXT("EAR PA Gain", taiko_2_x_ear_pa_gain_enum,
-		taiko_pa_gain_get, taiko_pa_gain_put),
-
-	SOC_SINGLE_TLV("HPHL Volume", TAIKO_A_RX_HPH_L_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("HPHR Volume", TAIKO_A_RX_HPH_R_GAIN, 0, 20, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("LINEOUT1 Volume", TAIKO_A_RX_LINE_1_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT2 Volume", TAIKO_A_RX_LINE_2_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT3 Volume", TAIKO_A_RX_LINE_3_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT4 Volume", TAIKO_A_RX_LINE_4_GAIN, 0, 20, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("SPK DRV Volume", TAIKO_A_SPKR_DRV_GAIN, 3, 8, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("ADC1 Volume", TAIKO_A_CDC_TX_1_GAIN, 2, 19, 0,
-			analog_gain),
-	SOC_SINGLE_TLV("ADC2 Volume", TAIKO_A_CDC_TX_2_GAIN, 2, 19, 0,
-			analog_gain),
-	SOC_SINGLE_TLV("ADC3 Volume", TAIKO_A_CDC_TX_3_GAIN, 2, 19, 0,
-			analog_gain),
-	SOC_SINGLE_TLV("ADC4 Volume", TAIKO_A_CDC_TX_4_GAIN, 2, 19, 0,
-			analog_gain),
-	SOC_SINGLE_TLV("ADC5 Volume", TAIKO_A_CDC_TX_5_GAIN, 2, 19, 0,
-			analog_gain),
-	SOC_SINGLE_TLV("ADC6 Volume", TAIKO_A_CDC_TX_6_GAIN, 2, 19, 0,
-			analog_gain),
-};
-
-#if defined(CONFIG_MACH_KLTE_JPN) || defined(CONFIG_MACH_KLTE_KOR)
-extern unsigned int system_rev;
-#endif
-
-static int taiko_hph_impedance_get(struct snd_kcontrol *kcontrol,
-				   struct snd_ctl_elem_value *ucontrol)
-{
-#if defined(CONFIG_MACH_KLTE_KOR)
-	if (system_rev >= 13) {
-		uint32_t zl, zr;
-		bool hphr;
-		struct soc_multi_mixer_control *mc;
-		struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-		struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-
-		mc = (struct soc_multi_mixer_control *)(kcontrol->private_value);
-
-		hphr = mc->shift;
-		wcd9xxx_mbhc_get_impedance(&priv->mbhc, &zl, &zr);
-		pr_debug("%s: zl %u, zr %u\n", __func__, zl, zr);
-		ucontrol->value.integer.value[0] = hphr ? zr : zl;
-	}
-#elif defined(CONFIG_MACH_KLTE_JPN)
-	if (system_rev >= 11) {
-		uint32_t zl, zr;
-		bool hphr;
-		struct soc_multi_mixer_control *mc;
-		struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-		struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-
-		mc = (struct soc_multi_mixer_control *)(kcontrol->private_value);
-
-		hphr = mc->shift;
-		wcd9xxx_mbhc_get_impedance(&priv->mbhc, &zl, &zr);
-		pr_debug("%s: zl %u, zr %u\n", __func__, zl, zr);
-		ucontrol->value.integer.value[0] = hphr ? zr : zl;
-	}
-#else
-#if !defined(CONFIG_SAMSUNG_JACK) && !defined(CONFIG_MUIC_DET_JACK)
-	uint32_t zl, zr;
-	bool hphr;
-	struct soc_multi_mixer_control *mc;
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-
-	mc = (struct soc_multi_mixer_control *)(kcontrol->private_value);
-
-	hphr = mc->shift;
-	wcd9xxx_mbhc_get_impedance(&priv->mbhc, &zl, &zr);
-	pr_debug("%s: zl %u, zr %u\n", __func__, zl, zr);
-	ucontrol->value.integer.value[0] = hphr ? zr : zl;
-#endif
-#endif
-	ucontrol->value.integer.value[0] = 0;
-	return 0;
-}
-
-static const struct snd_kcontrol_new impedance_detect_controls[] = {
-	SOC_SINGLE_EXT("HPHL Impedance", 0, 0, UINT_MAX, 0,
-		       taiko_hph_impedance_get, NULL),
-	SOC_SINGLE_EXT("HPHR Impedance", 0, 1, UINT_MAX, 0,
-		       taiko_hph_impedance_get, NULL),
-};
-
-static const char * const rx_mix1_text[] = {
-	"ZERO", "SRC1", "SRC2", "IIR1", "IIR2", "RX1", "RX2", "RX3", "RX4",
-		"RX5", "RX6", "RX7"
-};
-
-static const char * const rx_mix2_text[] = {
-	"ZERO", "SRC1", "SRC2", "IIR1", "IIR2"
-};
-
-static const char * const rx_rdac5_text[] = {
-	"DEM4", "DEM3_INV"
-};
-
-static const char * const rx_rdac7_text[] = {
-	"DEM6", "DEM5_INV"
-};
-
-
-static const char * const sb_tx1_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC1"
-};
-
-static const char * const sb_tx2_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC2"
-};
-
-static const char * const sb_tx3_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC3"
-};
-
-static const char * const sb_tx4_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC4"
-};
-
-static const char * const sb_tx5_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC5"
-};
-
-static const char * const sb_tx6_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC6"
-};
-
-static const char * const sb_tx7_to_tx10_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC1", "DEC2", "DEC3", "DEC4", "DEC5", "DEC6", "DEC7", "DEC8",
-		"DEC9", "DEC10"
-};
-
-static const char * const dec1_mux_text[] = {
-	"ZERO", "DMIC1", "ADC6",
-};
-
-static const char * const dec2_mux_text[] = {
-	"ZERO", "DMIC2", "ADC5",
-};
-
-static const char * const dec3_mux_text[] = {
-	"ZERO", "DMIC3", "ADC4",
-};
-
-static const char * const dec4_mux_text[] = {
-	"ZERO", "DMIC4", "ADC3",
-};
-
-static const char * const dec5_mux_text[] = {
-	"ZERO", "DMIC5", "ADC2",
-};
-
-static const char * const dec6_mux_text[] = {
-	"ZERO", "DMIC6", "ADC1",
-};
-
-static const char * const dec7_mux_text[] = {
-	"ZERO", "DMIC1", "DMIC6", "ADC1", "ADC6", "ANC1_FB", "ANC2_FB",
-};
-
-static const char * const dec8_mux_text[] = {
-	"ZERO", "DMIC2", "DMIC5", "ADC2", "ADC5",
-};
-
-static const char * const dec9_mux_text[] = {
-	"ZERO", "DMIC4", "DMIC5", "ADC2", "ADC3", "ADCMB", "ANC1_FB", "ANC2_FB",
-};
-
-static const char * const dec10_mux_text[] = {
-	"ZERO", "DMIC3", "DMIC6", "ADC1", "ADC4", "ADCMB", "ANC1_FB", "ANC2_FB",
-};
-
-static const char * const anc_mux_text[] = {
-	"ZERO", "ADC1", "ADC2", "ADC3", "ADC4", "ADC5", "ADC6", "ADC_MB",
-		"RSVD_1", "DMIC1", "DMIC2", "DMIC3", "DMIC4", "DMIC5", "DMIC6"
-};
-
-static const char * const anc1_fb_mux_text[] = {
-	"ZERO", "EAR_HPH_L", "EAR_LINE_1",
-};
-
-static const char * const iir_inp1_text[] = {
-	"ZERO", "DEC1", "DEC2", "DEC3", "DEC4", "DEC5", "DEC6", "DEC7", "DEC8",
-	"DEC9", "DEC10", "RX1", "RX2", "RX3", "RX4", "RX5", "RX6", "RX7"
-};
-
-static const struct soc_enum rx_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX1_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX1_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx_mix1_inp3_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX1_B2_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx2_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX2_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx2_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX2_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx3_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX3_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx3_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX3_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx4_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX4_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx4_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX4_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx5_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX5_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx5_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX5_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx6_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX6_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx6_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX6_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx7_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX7_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx7_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX7_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx1_mix2_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX1_B3_CTL, 0, 5, rx_mix2_text);
-
-static const struct soc_enum rx1_mix2_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX1_B3_CTL, 3, 5, rx_mix2_text);
-
-static const struct soc_enum rx2_mix2_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX2_B3_CTL, 0, 5, rx_mix2_text);
-
-static const struct soc_enum rx2_mix2_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX2_B3_CTL, 3, 5, rx_mix2_text);
-
-static const struct soc_enum rx7_mix2_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX7_B3_CTL, 0, 5, rx_mix2_text);
-
-static const struct soc_enum rx7_mix2_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX7_B3_CTL, 3, 5, rx_mix2_text);
-
-static const struct soc_enum rx_rdac5_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_MISC, 2, 2, rx_rdac5_text);
-
-static const struct soc_enum rx_rdac7_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_MISC, 1, 2, rx_rdac7_text);
-
-static const struct soc_enum sb_tx1_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B1_CTL, 0, 9, sb_tx1_mux_text);
-
-static const struct soc_enum sb_tx2_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B2_CTL, 0, 9, sb_tx2_mux_text);
-
-static const struct soc_enum sb_tx3_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B3_CTL, 0, 9, sb_tx3_mux_text);
-
-static const struct soc_enum sb_tx4_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B4_CTL, 0, 9, sb_tx4_mux_text);
-
-static const struct soc_enum sb_tx5_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B5_CTL, 0, 9, sb_tx5_mux_text);
-
-static const struct soc_enum sb_tx6_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B6_CTL, 0, 9, sb_tx6_mux_text);
-
-static const struct soc_enum sb_tx7_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B7_CTL, 0, 18,
-			sb_tx7_to_tx10_mux_text);
-
-static const struct soc_enum sb_tx8_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B8_CTL, 0, 18,
-			sb_tx7_to_tx10_mux_text);
-
-static const struct soc_enum sb_tx9_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B9_CTL, 0, 18,
-			sb_tx7_to_tx10_mux_text);
-
-static const struct soc_enum sb_tx10_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B10_CTL, 0, 18,
-			sb_tx7_to_tx10_mux_text);
-
-static const struct soc_enum dec1_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B1_CTL, 0, 3, dec1_mux_text);
-
-static const struct soc_enum dec2_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B1_CTL, 2, 3, dec2_mux_text);
-
-static const struct soc_enum dec3_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B1_CTL, 4, 3, dec3_mux_text);
-
-static const struct soc_enum dec4_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B1_CTL, 6, 3, dec4_mux_text);
-
-static const struct soc_enum dec5_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B2_CTL, 0, 3, dec5_mux_text);
-
-static const struct soc_enum dec6_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B2_CTL, 2, 3, dec6_mux_text);
-
-static const struct soc_enum dec7_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B2_CTL, 4, 7, dec7_mux_text);
-
-static const struct soc_enum dec8_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B3_CTL, 0, 7, dec8_mux_text);
-
-static const struct soc_enum dec9_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B3_CTL, 3, 8, dec9_mux_text);
-
-static const struct soc_enum dec10_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B4_CTL, 0, 8, dec10_mux_text);
-
-static const struct soc_enum anc1_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_ANC_B1_CTL, 0, 16, anc_mux_text);
-
-static const struct soc_enum anc2_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_ANC_B1_CTL, 4, 16, anc_mux_text);
-
-static const struct soc_enum anc1_fb_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_ANC_B2_CTL, 0, 3, anc1_fb_mux_text);
-
-static const struct soc_enum iir1_inp1_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_EQ1_B1_CTL, 0, 18, iir_inp1_text);
-
-static const struct soc_enum iir2_inp1_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_EQ2_B1_CTL, 0, 18, iir_inp1_text);
-
-static const struct snd_kcontrol_new rx_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX1 MIX1 INP1 Mux", rx_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX1 MIX1 INP2 Mux", rx_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx_mix1_inp3_mux =
-	SOC_DAPM_ENUM("RX1 MIX1 INP3 Mux", rx_mix1_inp3_chain_enum);
-
-static const struct snd_kcontrol_new rx2_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX2 MIX1 INP1 Mux", rx2_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx2_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX2 MIX1 INP2 Mux", rx2_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx3_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX3 MIX1 INP1 Mux", rx3_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx3_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX3 MIX1 INP2 Mux", rx3_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx4_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX4 MIX1 INP1 Mux", rx4_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx4_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX4 MIX1 INP2 Mux", rx4_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx5_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX5 MIX1 INP1 Mux", rx5_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx5_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX5 MIX1 INP2 Mux", rx5_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx6_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX6 MIX1 INP1 Mux", rx6_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx6_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX6 MIX1 INP2 Mux", rx6_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx7_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX7 MIX1 INP1 Mux", rx7_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx7_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX7 MIX1 INP2 Mux", rx7_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx1_mix2_inp1_mux =
-	SOC_DAPM_ENUM("RX1 MIX2 INP1 Mux", rx1_mix2_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx1_mix2_inp2_mux =
-	SOC_DAPM_ENUM("RX1 MIX2 INP2 Mux", rx1_mix2_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx2_mix2_inp1_mux =
-	SOC_DAPM_ENUM("RX2 MIX2 INP1 Mux", rx2_mix2_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx2_mix2_inp2_mux =
-	SOC_DAPM_ENUM("RX2 MIX2 INP2 Mux", rx2_mix2_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx7_mix2_inp1_mux =
-	SOC_DAPM_ENUM("RX7 MIX2 INP1 Mux", rx7_mix2_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx7_mix2_inp2_mux =
-	SOC_DAPM_ENUM("RX7 MIX2 INP2 Mux", rx7_mix2_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx_dac5_mux =
-	SOC_DAPM_ENUM("RDAC5 MUX Mux", rx_rdac5_enum);
-
-static const struct snd_kcontrol_new rx_dac7_mux =
-	SOC_DAPM_ENUM("RDAC7 MUX Mux", rx_rdac7_enum);
-
-static const struct snd_kcontrol_new sb_tx1_mux =
-	SOC_DAPM_ENUM("SLIM TX1 MUX Mux", sb_tx1_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx2_mux =
-	SOC_DAPM_ENUM("SLIM TX2 MUX Mux", sb_tx2_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx3_mux =
-	SOC_DAPM_ENUM("SLIM TX3 MUX Mux", sb_tx3_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx4_mux =
-	SOC_DAPM_ENUM("SLIM TX4 MUX Mux", sb_tx4_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx5_mux =
-	SOC_DAPM_ENUM("SLIM TX5 MUX Mux", sb_tx5_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx6_mux =
-	SOC_DAPM_ENUM("SLIM TX6 MUX Mux", sb_tx6_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx7_mux =
-	SOC_DAPM_ENUM("SLIM TX7 MUX Mux", sb_tx7_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx8_mux =
-	SOC_DAPM_ENUM("SLIM TX8 MUX Mux", sb_tx8_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx9_mux =
-	SOC_DAPM_ENUM("SLIM TX9 MUX Mux", sb_tx9_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx10_mux =
-	SOC_DAPM_ENUM("SLIM TX10 MUX Mux", sb_tx10_mux_enum);
-
-
-static int wcd9320_put_dec_enum(struct snd_kcontrol *kcontrol,
-			      struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_dapm_widget_list *wlist = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_dapm_widget *w = wlist->widgets[0];
-	struct snd_soc_codec *codec = w->codec;
-	struct soc_enum *e = (struct soc_enum *)kcontrol->private_value;
-	unsigned int dec_mux, decimator;
-	char *dec_name = NULL;
-	char *widget_name = NULL;
-	char *temp;
-	u16 tx_mux_ctl_reg;
-	u8 adc_dmic_sel = 0x0;
-	int ret = 0;
-
-	if (ucontrol->value.enumerated.item[0] > e->max - 1)
-		return -EINVAL;
-
-	dec_mux = ucontrol->value.enumerated.item[0];
-
-	widget_name = kstrndup(w->name, 15, GFP_KERNEL);
-	if (!widget_name)
-		return -ENOMEM;
-	temp = widget_name;
-
-	dec_name = strsep(&widget_name, " ");
-	widget_name = temp;
-	if (!dec_name) {
-		pr_err("%s: Invalid decimator = %s\n", __func__, w->name);
-		ret =  -EINVAL;
-		goto out;
-	}
-
-	ret = kstrtouint(strpbrk(dec_name, "123456789"), 10, &decimator);
-	if (ret < 0) {
-		pr_err("%s: Invalid decimator = %s\n", __func__, dec_name);
-		ret =  -EINVAL;
-		goto out;
-	}
-
-	dev_dbg(w->dapm->dev, "%s(): widget = %s decimator = %u dec_mux = %u\n"
-		, __func__, w->name, decimator, dec_mux);
-
-
-	switch (decimator) {
-	case 1:
-	case 2:
-	case 3:
-	case 4:
-	case 5:
-	case 6:
-		if (dec_mux == 1)
-			adc_dmic_sel = 0x1;
-		else
-			adc_dmic_sel = 0x0;
-		break;
-	case 7:
-	case 8:
-	case 9:
-	case 10:
-		if ((dec_mux == 1) || (dec_mux == 2))
-			adc_dmic_sel = 0x1;
-		else
-			adc_dmic_sel = 0x0;
-		break;
-	default:
-		pr_err("%s: Invalid Decimator = %u\n", __func__, decimator);
-		ret = -EINVAL;
-		goto out;
-	}
-
-	tx_mux_ctl_reg = TAIKO_A_CDC_TX1_MUX_CTL + 8 * (decimator - 1);
-
-	snd_soc_update_bits(codec, tx_mux_ctl_reg, 0x1, adc_dmic_sel);
-
-	ret = snd_soc_dapm_put_enum_double(kcontrol, ucontrol);
-
-out:
-	kfree(widget_name);
-	return ret;
-}
-
-#define WCD9320_DEC_ENUM(xname, xenum) \
-{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
-	.info = snd_soc_info_enum_double, \
-	.get = snd_soc_dapm_get_enum_double, \
-	.put = wcd9320_put_dec_enum, \
-	.private_value = (unsigned long)&xenum }
-
-static const struct snd_kcontrol_new dec1_mux =
-	WCD9320_DEC_ENUM("DEC1 MUX Mux", dec1_mux_enum);
-
-static const struct snd_kcontrol_new dec2_mux =
-	WCD9320_DEC_ENUM("DEC2 MUX Mux", dec2_mux_enum);
-
-static const struct snd_kcontrol_new dec3_mux =
-	WCD9320_DEC_ENUM("DEC3 MUX Mux", dec3_mux_enum);
-
-static const struct snd_kcontrol_new dec4_mux =
-	WCD9320_DEC_ENUM("DEC4 MUX Mux", dec4_mux_enum);
-
-static const struct snd_kcontrol_new dec5_mux =
-	WCD9320_DEC_ENUM("DEC5 MUX Mux", dec5_mux_enum);
-
-static const struct snd_kcontrol_new dec6_mux =
-	WCD9320_DEC_ENUM("DEC6 MUX Mux", dec6_mux_enum);
-
-static const struct snd_kcontrol_new dec7_mux =
-	WCD9320_DEC_ENUM("DEC7 MUX Mux", dec7_mux_enum);
-
-static const struct snd_kcontrol_new dec8_mux =
-	WCD9320_DEC_ENUM("DEC8 MUX Mux", dec8_mux_enum);
-
-static const struct snd_kcontrol_new dec9_mux =
-	WCD9320_DEC_ENUM("DEC9 MUX Mux", dec9_mux_enum);
-
-static const struct snd_kcontrol_new dec10_mux =
-	WCD9320_DEC_ENUM("DEC10 MUX Mux", dec10_mux_enum);
-
-static const struct snd_kcontrol_new iir1_inp1_mux =
-	SOC_DAPM_ENUM("IIR1 INP1 Mux", iir1_inp1_mux_enum);
-
-static const struct snd_kcontrol_new iir2_inp1_mux =
-	SOC_DAPM_ENUM("IIR2 INP1 Mux", iir2_inp1_mux_enum);
-
-static const struct snd_kcontrol_new anc1_mux =
-	SOC_DAPM_ENUM("ANC1 MUX Mux", anc1_mux_enum);
-
-static const struct snd_kcontrol_new anc2_mux =
-	SOC_DAPM_ENUM("ANC2 MUX Mux", anc2_mux_enum);
-
-static const struct snd_kcontrol_new anc1_fb_mux =
-	SOC_DAPM_ENUM("ANC1 FB MUX Mux", anc1_fb_mux_enum);
-
-static const struct snd_kcontrol_new dac1_switch[] = {
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_RX_EAR_EN, 5, 1, 0)
-};
-static const struct snd_kcontrol_new hphl_switch[] = {
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_RX_HPH_L_DAC_CTL, 6, 1, 0)
-};
-
-static const struct snd_kcontrol_new hphl_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_L Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					7, 1, 0),
-};
-
-static const struct snd_kcontrol_new hphr_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_R Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					6, 1, 0),
-};
-
-static const struct snd_kcontrol_new ear_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_L Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					5, 1, 0),
-};
-static const struct snd_kcontrol_new lineout1_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_L Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					4, 1, 0),
-};
-
-static const struct snd_kcontrol_new lineout2_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_R Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					3, 1, 0),
-};
-
-static const struct snd_kcontrol_new lineout3_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_L Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					2, 1, 0),
-};
-
-static const struct snd_kcontrol_new lineout4_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_R Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					1, 1, 0),
-};
-
-static const struct snd_kcontrol_new lineout3_ground_switch =
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_RX_LINE_3_DAC_CTL, 6, 1, 0);
-
-static const struct snd_kcontrol_new lineout4_ground_switch =
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_RX_LINE_4_DAC_CTL, 6, 1, 0);
-
-static const struct snd_kcontrol_new aif4_mad_switch =
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_CDC_CLK_OTHR_CTL, 4, 1, 0);
-
-static const struct snd_kcontrol_new aif4_vi_switch =
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_SPKR_PROT_EN, 3, 1, 0);
-/* virtual port entries */
-static int slim_tx_mixer_get(struct snd_kcontrol *kcontrol,
-			     struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_dapm_widget_list *wlist = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_dapm_widget *widget = wlist->widgets[0];
-
-	ucontrol->value.integer.value[0] = widget->value;
-	return 0;
-}
-
-static int slim_tx_mixer_put(struct snd_kcontrol *kcontrol,
-			     struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_dapm_widget_list *wlist = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_dapm_widget *widget = wlist->widgets[0];
-	struct snd_soc_codec *codec = widget->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-	struct soc_multi_mixer_control *mixer =
-		((struct soc_multi_mixer_control *)kcontrol->private_value);
-	u32 dai_id = widget->shift;
-	u32 port_id = mixer->shift;
-	u32 enable = ucontrol->value.integer.value[0];
-	u32 vtable = vport_check_table[dai_id];
-
-
-	pr_debug("%s: wname %s cname %s value %u shift %d item %ld\n", __func__,
-		widget->name, ucontrol->id.name, widget->value, widget->shift,
-		ucontrol->value.integer.value[0]);
-
-	mutex_lock(&codec->mutex);
-
-	if (taiko_p->intf_type != WCD9XXX_INTERFACE_TYPE_SLIMBUS) {
-		if (dai_id != AIF1_CAP) {
-			dev_err(codec->dev, "%s: invalid AIF for I2C mode\n",
-				__func__);
-			mutex_unlock(&codec->mutex);
-			return -EINVAL;
-		}
-	}
-		switch (dai_id) {
-		case AIF1_CAP:
-		case AIF2_CAP:
-		case AIF3_CAP:
-			/* only add to the list if value not set
-			 */
-			if (enable && !(widget->value & 1 << port_id)) {
-
-				if (taiko_p->intf_type ==
-					WCD9XXX_INTERFACE_TYPE_SLIMBUS)
-					vtable = vport_check_table[dai_id];
-				if (taiko_p->intf_type ==
-					WCD9XXX_INTERFACE_TYPE_I2C)
-					vtable = vport_i2s_check_table[dai_id];
-
-				if (wcd9xxx_tx_vport_validation(
-						vtable,
-						port_id,
-						taiko_p->dai, NUM_CODEC_DAIS)) {
-					dev_dbg(codec->dev, "%s: TX%u is used by other virtual port\n",
-						__func__, port_id + 1);
-					mutex_unlock(&codec->mutex);
-					return 0;
-				}
-				widget->value |= 1 << port_id;
-				list_add_tail(&core->tx_chs[port_id].list,
-				      &taiko_p->dai[dai_id].wcd9xxx_ch_list
-					      );
-			} else if (!enable && (widget->value & 1 << port_id)) {
-				widget->value &= ~(1 << port_id);
-				list_del_init(&core->tx_chs[port_id].list);
-			} else {
-				if (enable)
-					dev_dbg(codec->dev, "%s: TX%u port is used by\n"
-						"this virtual port\n",
-						__func__, port_id + 1);
-				else
-					dev_dbg(codec->dev, "%s: TX%u port is not used by\n"
-						"this virtual port\n",
-						__func__, port_id + 1);
-				/* avoid update power function */
-				mutex_unlock(&codec->mutex);
-				return 0;
-			}
-			break;
-		default:
-			pr_err("Unknown AIF %d\n", dai_id);
-			mutex_unlock(&codec->mutex);
-			return -EINVAL;
-		}
-	pr_debug("%s: name %s sname %s updated value %u shift %d\n", __func__,
-		widget->name, widget->sname, widget->value, widget->shift);
-
-	snd_soc_dapm_mixer_update_power(widget, kcontrol, enable);
-
-	mutex_unlock(&codec->mutex);
-	return 0;
-}
-
-static int slim_rx_mux_get(struct snd_kcontrol *kcontrol,
-			   struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_dapm_widget_list *wlist = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_dapm_widget *widget = wlist->widgets[0];
-
-	ucontrol->value.enumerated.item[0] = widget->value;
-	return 0;
-}
-
-static const char *const slim_rx_mux_text[] = {
-	"ZERO", "AIF1_PB", "AIF2_PB", "AIF3_PB"
-};
-
-static int slim_rx_mux_put(struct snd_kcontrol *kcontrol,
-			   struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_dapm_widget_list *wlist = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_dapm_widget *widget = wlist->widgets[0];
-	struct snd_soc_codec *codec = widget->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-	struct soc_enum *e = (struct soc_enum *)kcontrol->private_value;
-	u32 port_id = widget->shift;
-
-	pr_debug("%s: wname %s cname %s value %u shift %d item %ld\n", __func__,
-		widget->name, ucontrol->id.name, widget->value, widget->shift,
-		ucontrol->value.integer.value[0]);
-
-	widget->value = ucontrol->value.enumerated.item[0];
-
-	mutex_lock(&codec->mutex);
-
-	if (taiko_p->intf_type != WCD9XXX_INTERFACE_TYPE_SLIMBUS) {
-		if (widget->value > 2) {
-			dev_err(codec->dev, "%s: invalid AIF for I2C mode\n",
-				__func__);
-			goto err;
-		}
-	}
-	/* value need to match the Virtual port and AIF number
-	 */
-	switch (widget->value) {
-	case 0:
-		list_del_init(&core->rx_chs[port_id].list);
-	break;
-	case 1:
-		if (wcd9xxx_rx_vport_validation(port_id +
-			TAIKO_RX_PORT_START_NUMBER,
-			&taiko_p->dai[AIF1_PB].wcd9xxx_ch_list)) {
-			dev_dbg(codec->dev, "%s: RX%u is used by current requesting AIF_PB itself\n",
-				__func__, port_id + 1);
-			goto rtn;
-		}
-		list_add_tail(&core->rx_chs[port_id].list,
-			      &taiko_p->dai[AIF1_PB].wcd9xxx_ch_list);
-	break;
-	case 2:
-		if (wcd9xxx_rx_vport_validation(port_id +
-			TAIKO_RX_PORT_START_NUMBER,
-			&taiko_p->dai[AIF2_PB].wcd9xxx_ch_list)) {
-			dev_dbg(codec->dev, "%s: RX%u is used by current requesting AIF_PB itself\n",
-				__func__, port_id + 1);
-			goto rtn;
-		}
-		list_add_tail(&core->rx_chs[port_id].list,
-			      &taiko_p->dai[AIF2_PB].wcd9xxx_ch_list);
-	break;
-	case 3:
-		if (wcd9xxx_rx_vport_validation(port_id +
-			TAIKO_RX_PORT_START_NUMBER,
-			&taiko_p->dai[AIF3_PB].wcd9xxx_ch_list)) {
-			dev_dbg(codec->dev, "%s: RX%u is used by current requesting AIF_PB itself\n",
-				__func__, port_id + 1);
-			goto rtn;
-		}
-		list_add_tail(&core->rx_chs[port_id].list,
-			      &taiko_p->dai[AIF3_PB].wcd9xxx_ch_list);
-	break;
-	default:
-		pr_err("Unknown AIF %d\n", widget->value);
-		goto err;
-	}
-rtn:
-	snd_soc_dapm_mux_update_power(widget, kcontrol, 1, widget->value, e);
-
-	mutex_unlock(&codec->mutex);
-	return 0;
-err:
-	mutex_unlock(&codec->mutex);
-	return -EINVAL;
-}
-
-static const struct soc_enum slim_rx_mux_enum =
-	SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(slim_rx_mux_text), slim_rx_mux_text);
-
-static const struct snd_kcontrol_new slim_rx_mux[TAIKO_RX_MAX] = {
-	SOC_DAPM_ENUM_EXT("SLIM RX1 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX2 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX3 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX4 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX5 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX6 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX7 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-};
-
-static const struct snd_kcontrol_new aif_cap_mixer[] = {
-	SOC_SINGLE_EXT("SLIM TX1", SND_SOC_NOPM, TAIKO_TX1, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX2", SND_SOC_NOPM, TAIKO_TX2, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX3", SND_SOC_NOPM, TAIKO_TX3, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX4", SND_SOC_NOPM, TAIKO_TX4, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX5", SND_SOC_NOPM, TAIKO_TX5, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX6", SND_SOC_NOPM, TAIKO_TX6, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX7", SND_SOC_NOPM, TAIKO_TX7, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX8", SND_SOC_NOPM, TAIKO_TX8, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX9", SND_SOC_NOPM, TAIKO_TX9, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX10", SND_SOC_NOPM, TAIKO_TX10, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-};
-
-static void taiko_codec_enable_adc_block(struct snd_soc_codec *codec,
-					 int enable)
-{
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %d\n", __func__, enable);
-
-	if (enable) {
-		taiko->adc_count++;
-		snd_soc_update_bits(codec, WCD9XXX_A_CDC_CLK_OTHR_CTL,
-						0x2, 0x2);
-	} else {
-		taiko->adc_count--;
-		if (!taiko->adc_count)
-			snd_soc_update_bits(codec, WCD9XXX_A_CDC_CLK_OTHR_CTL,
-					    0x2, 0x0);
-	}
-}
-
-static int taiko_codec_enable_adc(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	u16 adc_reg;
-	u8 init_bit_shift;
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-
-	pr_debug("%s %d\n", __func__, event);
-
-	if (TAIKO_IS_1_0(core->version)) {
-		if (w->reg == TAIKO_A_TX_1_2_EN) {
-			adc_reg = TAIKO_A_TX_1_2_TEST_CTL;
-		} else if (w->reg == TAIKO_A_TX_3_4_EN) {
-			adc_reg = TAIKO_A_TX_3_4_TEST_CTL;
-		} else if (w->reg == TAIKO_A_TX_5_6_EN) {
-			adc_reg = TAIKO_A_TX_5_6_TEST_CTL;
-		} else {
-			pr_err("%s: Error, invalid adc register\n", __func__);
-			return -EINVAL;
-		}
-
-		if (w->shift == 3) {
-			init_bit_shift = 6;
-		} else if  (w->shift == 7) {
-			init_bit_shift = 7;
-		} else {
-			pr_err("%s: Error, invalid init bit postion adc register\n",
-			       __func__);
-			return -EINVAL;
-		}
-	} else {
-		switch (w->reg) {
-		case TAIKO_A_CDC_TX_1_GAIN:
-			adc_reg = TAIKO_A_TX_1_2_TEST_CTL;
-			init_bit_shift = 7;
-			break;
-		case TAIKO_A_CDC_TX_2_GAIN:
-			adc_reg = TAIKO_A_TX_1_2_TEST_CTL;
-			init_bit_shift = 6;
-			break;
-		case TAIKO_A_CDC_TX_3_GAIN:
-			adc_reg = TAIKO_A_TX_3_4_TEST_CTL;
-			init_bit_shift = 7;
-			break;
-		case TAIKO_A_CDC_TX_4_GAIN:
-			adc_reg = TAIKO_A_TX_3_4_TEST_CTL;
-			init_bit_shift = 6;
-			break;
-		case TAIKO_A_CDC_TX_5_GAIN:
-			adc_reg = TAIKO_A_TX_5_6_TEST_CTL;
-			init_bit_shift = 7;
-			break;
-		case TAIKO_A_CDC_TX_6_GAIN:
-			adc_reg = TAIKO_A_TX_5_6_TEST_CTL;
-			init_bit_shift = 6;
-			break;
-		default:
-			pr_err("%s: Error, invalid adc register\n", __func__);
-			return -EINVAL;
-		}
-	}
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-		if ((sub_mic_rec_delay == 1) && ((w->reg) == TAIKO_A_CDC_TX_3_GAIN))
-				usleep_range(400000, 400000);
-#endif
-		taiko_codec_enable_adc_block(codec, 1);
-		snd_soc_update_bits(codec, adc_reg, 1 << init_bit_shift,
-				1 << init_bit_shift);
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		snd_soc_update_bits(codec, adc_reg, 1 << init_bit_shift, 0x00);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		taiko_codec_enable_adc_block(codec, 0);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_aux_pga(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s: %d\n", __func__, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		WCD9XXX_BG_CLK_LOCK(&taiko->resmgr);
-		wcd9xxx_resmgr_get_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		/* AUX PGA requires RCO or MCLK */
-		wcd9xxx_resmgr_get_clk_block(&taiko->resmgr, WCD9XXX_CLK_RCO);
-		wcd9xxx_resmgr_enable_rx_bias(&taiko->resmgr, 1);
-		WCD9XXX_BG_CLK_UNLOCK(&taiko->resmgr);
-		break;
-
-	case SND_SOC_DAPM_POST_PMD:
-		WCD9XXX_BG_CLK_LOCK(&taiko->resmgr);
-		wcd9xxx_resmgr_enable_rx_bias(&taiko->resmgr, 0);
-		wcd9xxx_resmgr_put_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		wcd9xxx_resmgr_put_clk_block(&taiko->resmgr, WCD9XXX_CLK_RCO);
-		WCD9XXX_BG_CLK_UNLOCK(&taiko->resmgr);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_lineout(struct snd_soc_dapm_widget *w,
-		struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	u16 lineout_gain_reg;
-
-	pr_debug("%s %d %s\n", __func__, event, w->name);
-
-	switch (w->shift) {
-	case 0:
-		lineout_gain_reg = TAIKO_A_RX_LINE_1_GAIN;
-		break;
-	case 1:
-		lineout_gain_reg = TAIKO_A_RX_LINE_2_GAIN;
-		break;
-	case 2:
-		lineout_gain_reg = TAIKO_A_RX_LINE_3_GAIN;
-		break;
-	case 3:
-		lineout_gain_reg = TAIKO_A_RX_LINE_4_GAIN;
-		break;
-	default:
-		pr_err("%s: Error, incorrect lineout register value\n",
-			__func__);
-		return -EINVAL;
-	}
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		snd_soc_update_bits(codec, lineout_gain_reg, 0x40, 0x40);
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		wcd9xxx_clsh_fsm(codec, &taiko->clsh_d,
-						 WCD9XXX_CLSH_STATE_LO,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-		pr_debug("%s: sleeping 5 ms after %s PA turn on\n",
-				__func__, w->name);
-		/* Wait for CnP time after PA enable */
-		usleep_range(5000, 5100);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		wcd9xxx_clsh_fsm(codec, &taiko->clsh_d,
-						 WCD9XXX_CLSH_STATE_LO,
-						 WCD9XXX_CLSH_REQ_DISABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-		snd_soc_update_bits(codec, lineout_gain_reg, 0x40, 0x00);
-		pr_debug("%s: sleeping 5 ms after %s PA turn off\n",
-				__func__, w->name);
-		/* Wait for CnP time after PA disable */
-		usleep_range(5000, 5100);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_spk_pa(struct snd_soc_dapm_widget *w,
-				     struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s: %d %s\n", __func__, event, w->name);
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		taiko->spkr_pa_widget_on = true;
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80, 0x80);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		taiko->spkr_pa_widget_on = false;
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80, 0x00);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_dmic(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	u8  dmic_clk_en;
-	u16 dmic_clk_reg;
-	s32 *dmic_clk_cnt;
-	unsigned int dmic;
-	int ret;
-
-	ret = kstrtouint(strpbrk(w->name, "123456"), 10, &dmic);
-	if (ret < 0) {
-		pr_err("%s: Invalid DMIC line on the codec\n", __func__);
-		return -EINVAL;
-	}
-
-	switch (dmic) {
-	case 1:
-	case 2:
-		dmic_clk_en = 0x01;
-		dmic_clk_cnt = &(taiko->dmic_1_2_clk_cnt);
-		dmic_clk_reg = TAIKO_A_CDC_CLK_DMIC_B1_CTL;
-		pr_debug("%s() event %d DMIC%d dmic_1_2_clk_cnt %d\n",
-			__func__, event,  dmic, *dmic_clk_cnt);
-
-		break;
-
-	case 3:
-	case 4:
-		dmic_clk_en = 0x10;
-		dmic_clk_cnt = &(taiko->dmic_3_4_clk_cnt);
-		dmic_clk_reg = TAIKO_A_CDC_CLK_DMIC_B1_CTL;
-
-		pr_debug("%s() event %d DMIC%d dmic_3_4_clk_cnt %d\n",
-			__func__, event,  dmic, *dmic_clk_cnt);
-		break;
-
-	case 5:
-	case 6:
-		dmic_clk_en = 0x01;
-		dmic_clk_cnt = &(taiko->dmic_5_6_clk_cnt);
-		dmic_clk_reg = TAIKO_A_CDC_CLK_DMIC_B2_CTL;
-
-		pr_debug("%s() event %d DMIC%d dmic_5_6_clk_cnt %d\n",
-			__func__, event,  dmic, *dmic_clk_cnt);
-
-		break;
-
-	default:
-		pr_err("%s: Invalid DMIC Selection\n", __func__);
-		return -EINVAL;
-	}
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-
-		(*dmic_clk_cnt)++;
-		if (*dmic_clk_cnt == 1)
-			snd_soc_update_bits(codec, dmic_clk_reg,
-					dmic_clk_en, dmic_clk_en);
-
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-
-		(*dmic_clk_cnt)--;
-		if (*dmic_clk_cnt  == 0)
-			snd_soc_update_bits(codec, dmic_clk_reg,
-					dmic_clk_en, 0);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_config_mad(struct snd_soc_codec *codec)
-{
-	int ret;
-	const struct firmware *fw;
-	struct mad_audio_cal *mad_cal;
-	struct firmware_cal *hwdep_cal = NULL;
-	const void *data;
-	const char *filename = TAIKO_MAD_AUDIO_FIRMWARE_PATH;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	size_t cal_size;
-
-	pr_debug("%s: enter\n", __func__);
-	/* wakeup for codec calibration access */
-	pm_qos_add_request(&taiko->pm_qos_req,
-			   PM_QOS_CPU_DMA_LATENCY,
-			   PM_QOS_DEFAULT_VALUE);
-	pm_qos_update_request(&taiko->pm_qos_req,
-			      msm_cpuidle_get_deep_idle_latency());
-	if (!taiko->fw_data) {
-		dev_err(codec->dev, "%s: invalid cal data\n",
-				 __func__);
-		return -ENODEV;
-	}
-	hwdep_cal = wcdcal_get_fw_cal(taiko->fw_data, WCD9XXX_MAD_CAL);
-	if (hwdep_cal) {
-		data = hwdep_cal->data;
-		cal_size = hwdep_cal->size;
-		dev_dbg(codec->dev, "%s: using hwdep calibration\n",
-				__func__);
-	} else {
-		ret = request_firmware(&fw, filename, codec->dev);
-		if (ret != 0) {
-			pr_err("Failed to acquire MAD firwmare data %s: %d\n",
-				filename, ret);
-			return -ENODEV;
-		}
-		if (!fw) {
-			dev_err(codec->dev, "failed to get mad fw");
-			return -ENODEV;
-		}
-		data = fw->data;
-		cal_size = fw->size;
-		dev_dbg(codec->dev, "%s: using request_firmware calibration\n",
-				__func__);
-	}
-	if (cal_size < sizeof(struct mad_audio_cal)) {
-		pr_err("%s: incorrect hwdep cal size %zu\n",
-			__func__, cal_size);
-		ret = -ENOMEM;
-		goto err;
-	}
-
-	mad_cal = (struct mad_audio_cal *)(data);
-	if (!mad_cal) {
-		dev_err(codec->dev, "%s: Invalid calibration data\n",
-				__func__);
-		ret =  -EINVAL;
-		goto err;
-	}
-
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_MAIN_CTL_2,
-		      mad_cal->microphone_info.cycle_time);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_MAIN_CTL_1, 0xFF << 3,
-			    ((uint16_t)mad_cal->microphone_info.settle_time)
-			    << 3);
-
-	/* Audio */
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_8,
-		      mad_cal->audio_info.rms_omit_samples);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_1,
-			    0x07 << 4, mad_cal->audio_info.rms_comp_time << 4);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_2, 0x03 << 2,
-			    mad_cal->audio_info.detection_mechanism << 2);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_7,
-		      mad_cal->audio_info.rms_diff_threshold & 0x3F);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_5,
-		      mad_cal->audio_info.rms_threshold_lsb);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_6,
-		      mad_cal->audio_info.rms_threshold_msb);
-
-
-	/* Beacon */
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_BEACON_CTL_8,
-		      mad_cal->beacon_info.rms_omit_samples);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_BEACON_CTL_1,
-			    0x07 << 4, mad_cal->beacon_info.rms_comp_time);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_BEACON_CTL_2, 0x03 << 2,
-			    mad_cal->beacon_info.detection_mechanism << 2);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_BEACON_CTL_7,
-		      mad_cal->beacon_info.rms_diff_threshold & 0x1F);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_BEACON_CTL_5,
-		      mad_cal->beacon_info.rms_threshold_lsb);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_BEACON_CTL_6,
-		      mad_cal->beacon_info.rms_threshold_msb);
-
-	/* Ultrasound */
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_BEACON_CTL_1,
-			    0x07 << 4, mad_cal->beacon_info.rms_comp_time);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_ULTR_CTL_2, 0x03 << 2,
-			    mad_cal->ultrasound_info.detection_mechanism);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_ULTR_CTL_7,
-		      mad_cal->ultrasound_info.rms_diff_threshold & 0x1F);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_ULTR_CTL_5,
-		      mad_cal->ultrasound_info.rms_threshold_lsb);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_ULTR_CTL_6,
-		      mad_cal->ultrasound_info.rms_threshold_msb);
-
-	pr_debug("%s: leave ret %d\n", __func__, ret);
-	pm_qos_update_request(&taiko->pm_qos_req,
-			      PM_QOS_DEFAULT_VALUE);
-	pm_qos_remove_request(&taiko->pm_qos_req);
-err:
-	if (!hwdep_cal)
-		release_firmware(fw);
-	return ret;
-}
-
-static int taiko_codec_enable_mad(struct snd_soc_dapm_widget *w,
-				  struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	int ret = 0;
-
-	pr_debug("%s %d\n", __func__, event);
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		ret = taiko_codec_config_mad(codec);
-		if (ret) {
-			pr_err("%s: Failed to config MAD\n", __func__);
-			break;
-		}
-		break;
-	}
-	return ret;
-}
-
-static int taiko_codec_enable_micbias(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	u16 micb_int_reg = 0, micb_ctl_reg = 0;
-	u8 cfilt_sel_val = 0;
-	char *internal1_text = "Internal1";
-	char *internal2_text = "Internal2";
-	char *internal3_text = "Internal3";
-	enum wcd9xxx_notify_event e_post_off, e_pre_on, e_post_on;
-
-	pr_debug("%s: w->name %s event %d\n", __func__, w->name, event);
-	if (strnstr(w->name, "MIC BIAS1", sizeof("MIC BIAS1"))) {
-		micb_ctl_reg = TAIKO_A_MICB_1_CTL;
-		micb_int_reg = TAIKO_A_MICB_1_INT_RBIAS;
-		cfilt_sel_val = taiko->resmgr.pdata->micbias.bias1_cfilt_sel;
-		e_pre_on = WCD9XXX_EVENT_PRE_MICBIAS_1_ON;
-		e_post_on = WCD9XXX_EVENT_POST_MICBIAS_1_ON;
-		e_post_off = WCD9XXX_EVENT_POST_MICBIAS_1_OFF;
-	} else if (strnstr(w->name, "MIC BIAS2", sizeof("MIC BIAS2"))) {
-		micb_ctl_reg = TAIKO_A_MICB_2_CTL;
-		micb_int_reg = TAIKO_A_MICB_2_INT_RBIAS;
-		cfilt_sel_val = taiko->resmgr.pdata->micbias.bias2_cfilt_sel;
-		e_pre_on = WCD9XXX_EVENT_PRE_MICBIAS_2_ON;
-		e_post_on = WCD9XXX_EVENT_POST_MICBIAS_2_ON;
-		e_post_off = WCD9XXX_EVENT_POST_MICBIAS_2_OFF;
-	} else if (strnstr(w->name, "MIC BIAS3", sizeof("MIC BIAS3"))) {
-		micb_ctl_reg = TAIKO_A_MICB_3_CTL;
-		micb_int_reg = TAIKO_A_MICB_3_INT_RBIAS;
-		cfilt_sel_val = taiko->resmgr.pdata->micbias.bias3_cfilt_sel;
-		e_pre_on = WCD9XXX_EVENT_PRE_MICBIAS_3_ON;
-		e_post_on = WCD9XXX_EVENT_POST_MICBIAS_3_ON;
-		e_post_off = WCD9XXX_EVENT_POST_MICBIAS_3_OFF;
-	} else if (strnstr(w->name, "MIC BIAS4", sizeof("MIC BIAS4"))) {
-		micb_ctl_reg = TAIKO_A_MICB_4_CTL;
-		micb_int_reg = taiko->resmgr.reg_addr->micb_4_int_rbias;
-		cfilt_sel_val = taiko->resmgr.pdata->micbias.bias4_cfilt_sel;
-		e_pre_on = WCD9XXX_EVENT_PRE_MICBIAS_4_ON;
-		e_post_on = WCD9XXX_EVENT_POST_MICBIAS_4_ON;
-		e_post_off = WCD9XXX_EVENT_POST_MICBIAS_4_OFF;
-	} else {
-		pr_err("%s: Error, invalid micbias %s\n", __func__, w->name);
-		return -EINVAL;
-	}
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		/* Let MBHC module know so micbias switch to be off */
-		wcd9xxx_resmgr_notifier_call(&taiko->resmgr, e_pre_on);
-
-		/* Get cfilt */
-		wcd9xxx_resmgr_cfilt_get(&taiko->resmgr, cfilt_sel_val);
-
-		if (strnstr(w->name, internal1_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0xE0, 0xE0);
-		else if (strnstr(w->name, internal2_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0x1C, 0x1C);
-		else if (strnstr(w->name, internal3_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0x3, 0x3);
-
-		if (taiko->mbhc_started && micb_ctl_reg == TAIKO_A_MICB_2_CTL) {
-			if (++taiko->micb_2_users == 1) {
-				if (taiko->resmgr.pdata->
-				    micbias.bias2_is_headset_only)
-					wcd9xxx_resmgr_add_cond_update_bits(
-							 &taiko->resmgr,
-							 WCD9XXX_COND_HPH_MIC,
-							 micb_ctl_reg, w->shift,
-							 false);
-				else
-					snd_soc_update_bits(codec, micb_ctl_reg,
-							    1 << w->shift,
-							    1 << w->shift);
-			}
-			pr_debug("%s: micb_2_users %d\n", __func__,
-				 taiko->micb_2_users);
-		} else {
-			snd_soc_update_bits(codec, micb_ctl_reg, 1 << w->shift,
-					    1 << w->shift);
-		}
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		usleep_range(20000, 20000);
-		/* Let MBHC module know so micbias is on */
-		wcd9xxx_resmgr_notifier_call(&taiko->resmgr, e_post_on);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		if (taiko->mbhc_started && micb_ctl_reg == TAIKO_A_MICB_2_CTL) {
-			if (--taiko->micb_2_users == 0) {
-				if (taiko->resmgr.pdata->
-				    micbias.bias2_is_headset_only)
-					wcd9xxx_resmgr_rm_cond_update_bits(
-							&taiko->resmgr,
-							WCD9XXX_COND_HPH_MIC,
-							micb_ctl_reg, 7, false);
-				else
-					snd_soc_update_bits(codec, micb_ctl_reg,
-							    1 << w->shift, 0);
-			}
-			pr_debug("%s: micb_2_users %d\n", __func__,
-				 taiko->micb_2_users);
-			WARN(taiko->micb_2_users < 0,
-			     "Unexpected micbias users %d\n",
-			     taiko->micb_2_users);
-		} else {
-			snd_soc_update_bits(codec, micb_ctl_reg, 1 << w->shift,
-					    0);
-		}
-
-		/* Let MBHC module know so micbias switch to be off */
-		wcd9xxx_resmgr_notifier_call(&taiko->resmgr, e_post_off);
-
-		if (strnstr(w->name, internal1_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0x80, 0x00);
-		else if (strnstr(w->name, internal2_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0x10, 0x00);
-		else if (strnstr(w->name, internal3_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0x2, 0x0);
-
-		/* Put cfilt */
-		wcd9xxx_resmgr_cfilt_put(&taiko->resmgr, cfilt_sel_val);
-		break;
-	}
-
-	return 0;
-}
-
-/* called under codec_resource_lock acquisition */
-static int taiko_enable_mbhc_micbias(struct snd_soc_codec *codec, bool enable,
-				     enum wcd9xxx_micbias_num micb_num)
-{
-	int rc;
-	const char *micbias;
-
-	if (micb_num != MBHC_MICBIAS3 &&
-	    micb_num != MBHC_MICBIAS2)
-		return -EINVAL;
-
-	micbias = (micb_num == MBHC_MICBIAS3) ?
-			DAPM_MICBIAS3_EXTERNAL_STANDALONE :
-			DAPM_MICBIAS2_EXTERNAL_STANDALONE;
-
-	if (enable)
-		rc = snd_soc_dapm_force_enable_pin(&codec->dapm,
-					     micbias);
-	else
-		rc = snd_soc_dapm_disable_pin(&codec->dapm,
-					     micbias);
-	if (!rc)
-		snd_soc_dapm_sync(&codec->dapm);
-	pr_debug("%s: leave ret %d\n", __func__, rc);
-	return rc;
-}
-
-static void tx_hpf_corner_freq_callback(struct work_struct *work)
-{
-	struct delayed_work *hpf_delayed_work;
-	struct hpf_work *hpf_work;
-	struct taiko_priv *taiko;
-	struct snd_soc_codec *codec;
-	u16 tx_mux_ctl_reg;
-	u8 hpf_cut_of_freq;
-
-	hpf_delayed_work = to_delayed_work(work);
-	hpf_work = container_of(hpf_delayed_work, struct hpf_work, dwork);
-	taiko = hpf_work->taiko;
-	codec = hpf_work->taiko->codec;
-	hpf_cut_of_freq = hpf_work->tx_hpf_cut_of_freq;
-
-	tx_mux_ctl_reg = TAIKO_A_CDC_TX1_MUX_CTL +
-			(hpf_work->decimator - 1) * 8;
-
-	pr_debug("%s(): decimator %u hpf_cut_of_freq 0x%x\n", __func__,
-		hpf_work->decimator, (unsigned int)hpf_cut_of_freq);
-
-	snd_soc_update_bits(codec, tx_mux_ctl_reg, 0x30, hpf_cut_of_freq << 4);
-}
-
-#define  TX_MUX_CTL_CUT_OFF_FREQ_MASK	0x30
-#define  CF_MIN_3DB_4HZ			0x0
-#define  CF_MIN_3DB_75HZ		0x1
-#define  CF_MIN_3DB_150HZ		0x2
-
-static int taiko_codec_enable_dec(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	unsigned int decimator;
-	char *dec_name = NULL;
-	char *widget_name = NULL;
-	char *temp;
-	int ret = 0;
-	u16 dec_reset_reg, tx_vol_ctl_reg, tx_mux_ctl_reg;
-	u8 dec_hpf_cut_of_freq;
-	int offset;
-
-
-	pr_debug("%s %d\n", __func__, event);
-
-	widget_name = kstrndup(w->name, 15, GFP_KERNEL);
-	if (!widget_name)
-		return -ENOMEM;
-	temp = widget_name;
-
-	dec_name = strsep(&widget_name, " ");
-	widget_name = temp;
-	if (!dec_name) {
-		pr_err("%s: Invalid decimator = %s\n", __func__, w->name);
-		ret =  -EINVAL;
-		goto out;
-	}
-
-	ret = kstrtouint(strpbrk(dec_name, "123456789"), 10, &decimator);
-	if (ret < 0) {
-		pr_err("%s: Invalid decimator = %s\n", __func__, dec_name);
-		ret =  -EINVAL;
-		goto out;
-	}
-
-	pr_debug("%s(): widget = %s dec_name = %s decimator = %u\n", __func__,
-			w->name, dec_name, decimator);
-
-	if (w->reg == TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL) {
-		dec_reset_reg = TAIKO_A_CDC_CLK_TX_RESET_B1_CTL;
-		offset = 0;
-	} else if (w->reg == TAIKO_A_CDC_CLK_TX_CLK_EN_B2_CTL) {
-		dec_reset_reg = TAIKO_A_CDC_CLK_TX_RESET_B2_CTL;
-		offset = 8;
-	} else {
-		pr_err("%s: Error, incorrect dec\n", __func__);
-		return -EINVAL;
-	}
-
-	tx_vol_ctl_reg = TAIKO_A_CDC_TX1_VOL_CTL_CFG + 8 * (decimator - 1);
-	tx_mux_ctl_reg = TAIKO_A_CDC_TX1_MUX_CTL + 8 * (decimator - 1);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-
-		/* Enableable TX digital mute */
-		snd_soc_update_bits(codec, tx_vol_ctl_reg, 0x01, 0x01);
-
-		snd_soc_update_bits(codec, dec_reset_reg, 1 << w->shift,
-			1 << w->shift);
-		snd_soc_update_bits(codec, dec_reset_reg, 1 << w->shift, 0x0);
-
-		dec_hpf_cut_of_freq = snd_soc_read(codec, tx_mux_ctl_reg);
-
-		dec_hpf_cut_of_freq = (dec_hpf_cut_of_freq & 0x30) >> 4;
-
-		tx_hpf_work[decimator - 1].tx_hpf_cut_of_freq =
-			dec_hpf_cut_of_freq;
-
-		if ((dec_hpf_cut_of_freq != CF_MIN_3DB_150HZ)) {
-
-			/* set cut of freq to CF_MIN_3DB_150HZ (0x1); */
-			snd_soc_update_bits(codec, tx_mux_ctl_reg, 0x30,
-					    CF_MIN_3DB_150HZ << 4);
-		}
-
-		/* enable HPF */
-		snd_soc_update_bits(codec, tx_mux_ctl_reg , 0x08, 0x00);
-
-		break;
-
-	case SND_SOC_DAPM_POST_PMU:
-
-		/* Disable TX digital mute */
-		snd_soc_update_bits(codec, tx_vol_ctl_reg, 0x01, 0x00);
-
-		if (tx_hpf_work[decimator - 1].tx_hpf_cut_of_freq !=
-				CF_MIN_3DB_150HZ) {
-
-			schedule_delayed_work(&tx_hpf_work[decimator - 1].dwork,
-					msecs_to_jiffies(300));
-		}
-		/* apply the digital gain after the decimator is enabled*/
-		if ((w->shift + offset) < ARRAY_SIZE(tx_digital_gain_reg))
-			snd_soc_write(codec,
-				  tx_digital_gain_reg[w->shift + offset],
-				  snd_soc_read(codec,
-				  tx_digital_gain_reg[w->shift + offset])
-				  );
-
-		break;
-
-	case SND_SOC_DAPM_PRE_PMD:
-
-		snd_soc_update_bits(codec, tx_vol_ctl_reg, 0x01, 0x01);
-		cancel_delayed_work_sync(&tx_hpf_work[decimator - 1].dwork);
-		break;
-
-	case SND_SOC_DAPM_POST_PMD:
-
-		snd_soc_update_bits(codec, tx_mux_ctl_reg, 0x08, 0x08);
-		snd_soc_update_bits(codec, tx_mux_ctl_reg, 0x30,
-			(tx_hpf_work[decimator - 1].tx_hpf_cut_of_freq) << 4);
-
-		break;
-	}
-out:
-	kfree(widget_name);
-	return ret;
-}
-
-static int taiko_codec_enable_vdd_spkr(struct snd_soc_dapm_widget *w,
-				       struct snd_kcontrol *kcontrol, int event)
-{
-	int ret = 0;
-	struct snd_soc_codec *codec = w->codec;
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-	struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s: %d %s\n", __func__, event, w->name);
-
-	WARN_ONCE(!priv->spkdrv_reg, "SPKDRV supply %s isn't defined\n",
-		  WCD9XXX_VDD_SPKDRV_NAME);
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		if (priv->spkdrv_reg) {
-			ret = regulator_enable(priv->spkdrv_reg);
-			if (ret)
-				pr_err("%s: Failed to enable spkdrv_reg %s\n",
-				       __func__, WCD9XXX_VDD_SPKDRV_NAME);
-		}
-		if (spkr_drv_wrnd > 0) {
-			WARN_ON(!(snd_soc_read(codec, TAIKO_A_SPKR_DRV_EN) &
-				  0x80));
-			snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80,
-					    0x00);
-		}
-		if (TAIKO_IS_1_0(core->version))
-			snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_DBG_PWRSTG,
-					    0x24, 0x00);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		if (TAIKO_IS_1_0(core->version))
-			snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_DBG_PWRSTG,
-					    0x24, 0x24);
-		if (spkr_drv_wrnd > 0) {
-			WARN_ON(!!(snd_soc_read(codec, TAIKO_A_SPKR_DRV_EN) &
-				   0x80));
-			snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80,
-					    0x80);
-		}
-		if (priv->spkdrv_reg) {
-			ret = regulator_disable(priv->spkdrv_reg);
-			if (ret)
-				pr_err("%s: Failed to disable spkdrv_reg %s\n",
-				       __func__, WCD9XXX_VDD_SPKDRV_NAME);
-		}
-		break;
-	}
-
-	return ret;
-}
-
-static int taiko_codec_enable_interpolator(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-
-	pr_debug("%s %d %s\n", __func__, event, w->name);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RX_RESET_CTL,
-			1 << w->shift, 1 << w->shift);
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RX_RESET_CTL,
-			1 << w->shift, 0x0);
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		/* apply the digital gain after the interpolator is enabled*/
-		if ((w->shift) < ARRAY_SIZE(rx_digital_gain_reg))
-			snd_soc_write(codec,
-				  rx_digital_gain_reg[w->shift],
-				  snd_soc_read(codec,
-				  rx_digital_gain_reg[w->shift])
-				  );
-		break;
-	}
-	return 0;
-}
-
-/* called under codec_resource_lock acquisition */
-static int __taiko_codec_enable_ldo_h(struct snd_soc_dapm_widget *w,
-				      struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s: enter\n", __func__);
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		/*
-		 * ldo_h_users is protected by codec->mutex, don't need
-		 * additional mutex
-		 */
-		if (++priv->ldo_h_users == 1) {
-			WCD9XXX_BG_CLK_LOCK(&priv->resmgr);
-			wcd9xxx_resmgr_get_bandgap(&priv->resmgr,
-						   WCD9XXX_BANDGAP_AUDIO_MODE);
-			wcd9xxx_resmgr_get_clk_block(&priv->resmgr,
-						     WCD9XXX_CLK_RCO);
-			snd_soc_update_bits(codec, TAIKO_A_LDO_H_MODE_1, 1 << 7,
-					    1 << 7);
-			wcd9xxx_resmgr_put_clk_block(&priv->resmgr,
-						     WCD9XXX_CLK_RCO);
-			WCD9XXX_BG_CLK_UNLOCK(&priv->resmgr);
-			pr_debug("%s: ldo_h_users %d\n", __func__,
-				 priv->ldo_h_users);
-			/* LDO enable requires 1ms to settle down */
-			usleep_range(1000, 1000);
-		}
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		if (--priv->ldo_h_users == 0) {
-			WCD9XXX_BG_CLK_LOCK(&priv->resmgr);
-			wcd9xxx_resmgr_get_clk_block(&priv->resmgr,
-						     WCD9XXX_CLK_RCO);
-			snd_soc_update_bits(codec, TAIKO_A_LDO_H_MODE_1, 1 << 7,
-					    0);
-			wcd9xxx_resmgr_put_clk_block(&priv->resmgr,
-						     WCD9XXX_CLK_RCO);
-			wcd9xxx_resmgr_put_bandgap(&priv->resmgr,
-						   WCD9XXX_BANDGAP_AUDIO_MODE);
-			WCD9XXX_BG_CLK_UNLOCK(&priv->resmgr);
-			pr_debug("%s: ldo_h_users %d\n", __func__,
-				 priv->ldo_h_users);
-		}
-		WARN(priv->ldo_h_users < 0, "Unexpected ldo_h users %d\n",
-		     priv->ldo_h_users);
-		break;
-	}
-	pr_debug("%s: leave\n", __func__);
-	return 0;
-}
-
-static int taiko_codec_enable_ldo_h(struct snd_soc_dapm_widget *w,
-				    struct snd_kcontrol *kcontrol, int event)
-{
-	int rc;
-	rc = __taiko_codec_enable_ldo_h(w, kcontrol, event);
-	return rc;
-}
-
-static int taiko_codec_enable_rx_bias(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %d\n", __func__, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		wcd9xxx_resmgr_enable_rx_bias(&taiko->resmgr, 1);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		wcd9xxx_resmgr_enable_rx_bias(&taiko->resmgr, 0);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_hphl_dac_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	/* uint32_t impedl, impedr; */
-	/* int ret = 0; */
-
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RDAC_CLK_EN_CTL,
-							0x02, 0x02);
-		wcd9xxx_clsh_fsm(codec, &taiko_p->clsh_d,
-						 WCD9XXX_CLSH_STATE_HPHL,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_PRE_DAC);
-
-		/*ret = wcd9xxx_mbhc_get_impedance(&taiko_p->mbhc,
-					&impedl, &impedr);
-		if (!ret) */
-		wcd9xxx_clsh_imped_config(codec, 0);
-		/* else
-			dev_err(codec->dev, "Failed to get mbhc impedance %d\n",
-						ret); */
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RDAC_CLK_EN_CTL,
-							0x02, 0x00);
-	}
-	return 0;
-}
-
-static int taiko_hphr_dac_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RDAC_CLK_EN_CTL,
-							0x04, 0x04);
-		snd_soc_update_bits(codec, w->reg, 0x40, 0x40);
-		wcd9xxx_clsh_fsm(codec, &taiko_p->clsh_d,
-						 WCD9XXX_CLSH_STATE_HPHR,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_PRE_DAC);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RDAC_CLK_EN_CTL,
-							0x04, 0x00);
-		snd_soc_update_bits(codec, w->reg, 0x40, 0x00);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_anc(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	const char *filename;
-	const struct firmware *fw;
-	int i;
-	int ret =0;
-	int num_anc_slots;
-	struct wcd9xxx_anc_header *anc_head;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	struct firmware_cal *hwdep_cal = NULL;
-	u32 anc_writes_size = 0;
-	int anc_size_remaining;
-	u32 *anc_ptr;
-	u16 reg;
-	u8 mask, val, old_val;
-	size_t cal_size;
-	const void *data;
-
-
-	if (taiko->anc_func == 0)
-		return 0;
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		filename = "wcd9320/wcd9320_anc.bin";
-		hwdep_cal = wcdcal_get_fw_cal(taiko->fw_data, WCD9XXX_ANC_CAL);
-		if (hwdep_cal) {
-			data = hwdep_cal->data;
-			cal_size = hwdep_cal->size;
-			dev_dbg(codec->dev, "%s: using hwdep calibration\n",
-				__func__);
-		} else {
-			ret = request_firmware(&fw, filename, codec->dev);
-			if (ret != 0) {
-				dev_err(codec->dev, "Failed to acquire ANC data: %d\n",
-					ret);
-				return -ENODEV;
-			}
-			if (!fw) {
-				dev_err(codec->dev, "failed to get anc fw");
-				return -ENODEV;
-			}
-			data = fw->data;
-			cal_size = fw->size;
-			dev_dbg(codec->dev, "%s: using request_firmware calibration\n",
-					 __func__);
-
-		}
-
-		if (cal_size < sizeof(struct wcd9xxx_anc_header)) {
-			dev_err(codec->dev, "Not enough data\n");
-			goto err;
-		}
-
-		/* First number is the number of register writes */
-		anc_head = (struct wcd9xxx_anc_header *)(data);
-		anc_ptr = (u32 *)(data +
-				  sizeof(struct wcd9xxx_anc_header));
-		anc_size_remaining = cal_size -
-				     sizeof(struct wcd9xxx_anc_header);
-		num_anc_slots = anc_head->num_anc_slots;
-
-		if (taiko->anc_slot >= num_anc_slots) {
-			dev_err(codec->dev, "Invalid ANC slot selected\n");
-			ret = -EINVAL;
-			goto err;
-		}
-		for (i = 0; i < num_anc_slots; i++) {
-			if (anc_size_remaining < TAIKO_PACKED_REG_SIZE) {
-				dev_err(codec->dev, "Invalid register format\n");
-				ret = -EINVAL;
-				goto err;
-			}
-			anc_writes_size = (u32)(*anc_ptr);
-			anc_size_remaining -= sizeof(u32);
-			anc_ptr += 1;
-
-			if (anc_writes_size * TAIKO_PACKED_REG_SIZE
-				> anc_size_remaining) {
-				dev_err(codec->dev, "Invalid register format\n");
-				ret = -EINVAL;
-				goto err;
-			}
-
-			if (taiko->anc_slot == i)
-				break;
-
-			anc_size_remaining -= (anc_writes_size *
-				TAIKO_PACKED_REG_SIZE);
-			anc_ptr += anc_writes_size;
-		}
-		if (i == num_anc_slots) {
-			dev_err(codec->dev, "Selected ANC slot not present\n");
-			ret = -EINVAL;
-			goto err;
-		}
-		for (i = 0; i < anc_writes_size; i++) {
-			TAIKO_CODEC_UNPACK_ENTRY(anc_ptr[i], reg,
-				mask, val);
-			old_val = snd_soc_read(codec, reg);
-			snd_soc_write(codec, reg, (old_val & ~mask) |
-				(val & mask));
-		}
-		if (!hwdep_cal)
-			release_firmware(fw);
-		break;
-	case SND_SOC_DAPM_PRE_PMD:
-		msleep(40);
-		snd_soc_update_bits(codec, TAIKO_A_CDC_ANC1_B1_CTL, 0x01, 0x00);
-		snd_soc_update_bits(codec, TAIKO_A_CDC_ANC2_B1_CTL, 0x02, 0x00);
-		msleep(20);
-		snd_soc_write(codec, TAIKO_A_CDC_CLK_ANC_RESET_CTL, 0x0F);
-		snd_soc_write(codec, TAIKO_A_CDC_CLK_ANC_CLK_EN_CTL, 0);
-		snd_soc_write(codec, TAIKO_A_CDC_CLK_ANC_RESET_CTL, 0xFF);
-		break;
-	}
-	return 0;
-err:
-	if (!hwdep_cal)
-		release_firmware(fw);
-	return ret;
-
-}
-
-static int taiko_hph_pa_event(struct snd_soc_dapm_widget *w,
-			      struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	enum wcd9xxx_notify_event e_pre_on, e_post_off;
-	u8 req_clsh_state;
-	u32 pa_settle_time = TAIKO_HPH_PA_SETTLE_COMP_OFF;
-
-	pr_debug("%s: %s event = %d\n", __func__, w->name, event);
-	if (w->shift == 5) {
-		e_pre_on = WCD9XXX_EVENT_PRE_HPHL_PA_ON;
-		e_post_off = WCD9XXX_EVENT_POST_HPHL_PA_OFF;
-		req_clsh_state = WCD9XXX_CLSH_STATE_HPHL;
-	} else if (w->shift == 4) {
-		e_pre_on = WCD9XXX_EVENT_PRE_HPHR_PA_ON;
-		e_post_off = WCD9XXX_EVENT_POST_HPHR_PA_OFF;
-		req_clsh_state = WCD9XXX_CLSH_STATE_HPHR;
-	} else {
-		pr_err("%s: Invalid w->shift %d\n", __func__, w->shift);
-		return -EINVAL;
-	}
-
-	if (taiko->comp_enabled[COMPANDER_1])
-		pa_settle_time = TAIKO_HPH_PA_SETTLE_COMP_ON;
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		/* Let MBHC module know PA is turning on */
-		wcd9xxx_resmgr_notifier_call(&taiko->resmgr, e_pre_on);
-		break;
-
-	case SND_SOC_DAPM_POST_PMU:
-		usleep_range(pa_settle_time, pa_settle_time + 1000);
-		pr_debug("%s: sleep %d us after %s PA enable\n", __func__,
-				pa_settle_time, w->name);
-		wcd9xxx_clsh_fsm(codec, &taiko->clsh_d,
-						 req_clsh_state,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-
-		break;
-
-	case SND_SOC_DAPM_POST_PMD:
-		usleep_range(pa_settle_time, pa_settle_time + 1000);
-		pr_debug("%s: sleep %d us after %s PA disable\n", __func__,
-				pa_settle_time, w->name);
-
-		/* Let MBHC module know PA turned off */
-		wcd9xxx_resmgr_notifier_call(&taiko->resmgr, e_post_off);
-
-		wcd9xxx_clsh_fsm(codec, &taiko->clsh_d,
-						 req_clsh_state,
-						 WCD9XXX_CLSH_REQ_DISABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_anc_hph(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	int ret = 0;
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		ret = taiko_hph_pa_event(w, kcontrol, event);
-		if (w->shift == 4) {
-			ret |= taiko_codec_enable_anc(w, kcontrol, event);
-			msleep(50);
-		}
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		if (w->shift == 4) {
-			snd_soc_update_bits(codec,
-					TAIKO_A_RX_HPH_CNP_EN, 0x30, 0x30);
-			msleep(30);
-		}
-		ret = taiko_hph_pa_event(w, kcontrol, event);
-		break;
-	case SND_SOC_DAPM_PRE_PMD:
-		if (w->shift == 5) {
-			snd_soc_update_bits(codec,
-					TAIKO_A_RX_HPH_CNP_EN, 0x30, 0x00);
-			msleep(40);
-			snd_soc_update_bits(codec,
-					TAIKO_A_TX_7_MBHC_EN, 0x80, 00);
-			ret |= taiko_codec_enable_anc(w, kcontrol, event);
-		}
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		ret = taiko_hph_pa_event(w, kcontrol, event);
-		break;
-	}
-	return ret;
-}
-
-static const struct snd_soc_dapm_widget taiko_dapm_i2s_widgets[] = {
-	SND_SOC_DAPM_SUPPLY("RX_I2S_CLK", TAIKO_A_CDC_CLK_RX_I2S_CTL,
-	4, 0, NULL, 0),
-	SND_SOC_DAPM_SUPPLY("TX_I2S_CLK", TAIKO_A_CDC_CLK_TX_I2S_CTL, 4,
-	0, NULL, 0),
-};
-
-static int taiko_lineout_dac_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		wcd9xxx_clsh_fsm(codec, &taiko->clsh_d,
-						 WCD9XXX_CLSH_STATE_LO,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_PRE_DAC);
-		snd_soc_update_bits(codec, w->reg, 0x40, 0x40);
-		break;
-
-	case SND_SOC_DAPM_POST_PMD:
-		snd_soc_update_bits(codec, w->reg, 0x40, 0x00);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_spk_dac_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-	return 0;
-}
-
-static const struct snd_soc_dapm_route audio_i2s_map[] = {
-	{"SLIM RX1", NULL, "RX_I2S_CLK"},
-	{"SLIM RX2", NULL, "RX_I2S_CLK"},
-	{"SLIM RX3", NULL, "RX_I2S_CLK"},
-	{"SLIM RX4", NULL, "RX_I2S_CLK"},
-
-	{"SLIM TX7 MUX", NULL, "TX_I2S_CLK"},
-	{"SLIM TX8 MUX", NULL, "TX_I2S_CLK"},
-	{"SLIM TX9 MUX", NULL, "TX_I2S_CLK"},
-	{"SLIM TX10 MUX", NULL, "TX_I2S_CLK"},
-};
-
-static const struct snd_soc_dapm_route audio_i2s_map_1_0[] = {
-	{"RX_I2S_CLK", NULL, "CDC_CONN"},
-};
-
-static const struct snd_soc_dapm_route audio_i2s_map_2_0[] = {
-	{"RX_I2S_CLK", NULL, "CDC_I2S_RX_CONN"},
-};
-
-static const struct snd_soc_dapm_route audio_map[] = {
-	/* SLIMBUS Connections */
-	{"AIF1 CAP", NULL, "AIF1_CAP Mixer"},
-	{"AIF2 CAP", NULL, "AIF2_CAP Mixer"},
-	{"AIF3 CAP", NULL, "AIF3_CAP Mixer"},
-	/* VI Feedback */
-	{"AIF4 VI", NULL, "VIONOFF"},
-	{"VIONOFF", "Switch", "VIINPUT"},
-
-	/* MAD */
-	{"AIF4 MAD", NULL, "CDC_CONN"},
-	{"MADONOFF", "Switch", "MADINPUT"},
-	{"AIF4 MAD", NULL, "MADONOFF"},
-
-	/* SLIM_MIXER("AIF1_CAP Mixer"),*/
-	{"AIF1_CAP Mixer", "SLIM TX1", "SLIM TX1 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX2", "SLIM TX2 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX3", "SLIM TX3 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX4", "SLIM TX4 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX5", "SLIM TX5 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX6", "SLIM TX6 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX7", "SLIM TX7 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX8", "SLIM TX8 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX9", "SLIM TX9 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX10", "SLIM TX10 MUX"},
-	/* SLIM_MIXER("AIF2_CAP Mixer"),*/
-	{"AIF2_CAP Mixer", "SLIM TX1", "SLIM TX1 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX2", "SLIM TX2 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX3", "SLIM TX3 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX4", "SLIM TX4 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX5", "SLIM TX5 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX6", "SLIM TX6 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX7", "SLIM TX7 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX8", "SLIM TX8 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX9", "SLIM TX9 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX10", "SLIM TX10 MUX"},
-	/* SLIM_MIXER("AIF3_CAP Mixer"),*/
-	{"AIF3_CAP Mixer", "SLIM TX1", "SLIM TX1 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX2", "SLIM TX2 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX3", "SLIM TX3 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX4", "SLIM TX4 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX5", "SLIM TX5 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX6", "SLIM TX6 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX7", "SLIM TX7 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX8", "SLIM TX8 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX9", "SLIM TX9 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX10", "SLIM TX10 MUX"},
-
-	{"SLIM TX1 MUX", "DEC1", "DEC1 MUX"},
-
-	{"SLIM TX2 MUX", "DEC2", "DEC2 MUX"},
-
-	{"SLIM TX3 MUX", "DEC3", "DEC3 MUX"},
-	{"SLIM TX3 MUX", "RMIX1", "RX1 MIX1"},
-	{"SLIM TX3 MUX", "RMIX2", "RX2 MIX1"},
-	{"SLIM TX3 MUX", "RMIX3", "RX3 MIX1"},
-	{"SLIM TX3 MUX", "RMIX4", "RX4 MIX1"},
-	{"SLIM TX3 MUX", "RMIX5", "RX5 MIX1"},
-	{"SLIM TX3 MUX", "RMIX6", "RX6 MIX1"},
-	{"SLIM TX3 MUX", "RMIX7", "RX7 MIX1"},
-
-	{"SLIM TX4 MUX", "DEC4", "DEC4 MUX"},
-
-	{"SLIM TX5 MUX", "DEC5", "DEC5 MUX"},
-	{"SLIM TX5 MUX", "RMIX1", "RX1 MIX1"},
-	{"SLIM TX5 MUX", "RMIX2", "RX2 MIX1"},
-	{"SLIM TX5 MUX", "RMIX3", "RX3 MIX1"},
-	{"SLIM TX5 MUX", "RMIX4", "RX4 MIX1"},
-	{"SLIM TX5 MUX", "RMIX5", "RX5 MIX1"},
-	{"SLIM TX5 MUX", "RMIX6", "RX6 MIX1"},
-	{"SLIM TX5 MUX", "RMIX7", "RX7 MIX1"},
-
-	{"SLIM TX6 MUX", "DEC6", "DEC6 MUX"},
-
-	{"SLIM TX7 MUX", "DEC1", "DEC1 MUX"},
-	{"SLIM TX7 MUX", "DEC2", "DEC2 MUX"},
-	{"SLIM TX7 MUX", "DEC3", "DEC3 MUX"},
-	{"SLIM TX7 MUX", "DEC4", "DEC4 MUX"},
-	{"SLIM TX7 MUX", "DEC5", "DEC5 MUX"},
-	{"SLIM TX7 MUX", "DEC6", "DEC6 MUX"},
-	{"SLIM TX7 MUX", "DEC7", "DEC7 MUX"},
-	{"SLIM TX7 MUX", "DEC8", "DEC8 MUX"},
-	{"SLIM TX7 MUX", "DEC9", "DEC9 MUX"},
-	{"SLIM TX7 MUX", "DEC10", "DEC10 MUX"},
-	{"SLIM TX7 MUX", "RMIX1", "RX1 MIX1"},
-	{"SLIM TX7 MUX", "RMIX2", "RX2 MIX1"},
-	{"SLIM TX7 MUX", "RMIX3", "RX3 MIX1"},
-	{"SLIM TX7 MUX", "RMIX4", "RX4 MIX1"},
-	{"SLIM TX7 MUX", "RMIX5", "RX5 MIX1"},
-	{"SLIM TX7 MUX", "RMIX6", "RX6 MIX1"},
-	{"SLIM TX7 MUX", "RMIX7", "RX7 MIX1"},
-
-	{"SLIM TX8 MUX", "DEC1", "DEC1 MUX"},
-	{"SLIM TX8 MUX", "DEC2", "DEC2 MUX"},
-	{"SLIM TX8 MUX", "DEC3", "DEC3 MUX"},
-	{"SLIM TX8 MUX", "DEC4", "DEC4 MUX"},
-	{"SLIM TX8 MUX", "DEC5", "DEC5 MUX"},
-	{"SLIM TX8 MUX", "DEC6", "DEC6 MUX"},
-	{"SLIM TX8 MUX", "DEC7", "DEC7 MUX"},
-	{"SLIM TX8 MUX", "DEC8", "DEC8 MUX"},
-	{"SLIM TX8 MUX", "DEC9", "DEC9 MUX"},
-	{"SLIM TX8 MUX", "DEC10", "DEC10 MUX"},
-
-	{"SLIM TX9 MUX", "DEC1", "DEC1 MUX"},
-	{"SLIM TX9 MUX", "DEC2", "DEC2 MUX"},
-	{"SLIM TX9 MUX", "DEC3", "DEC3 MUX"},
-	{"SLIM TX9 MUX", "DEC4", "DEC4 MUX"},
-	{"SLIM TX9 MUX", "DEC5", "DEC5 MUX"},
-	{"SLIM TX9 MUX", "DEC6", "DEC6 MUX"},
-	{"SLIM TX9 MUX", "DEC7", "DEC7 MUX"},
-	{"SLIM TX9 MUX", "DEC8", "DEC8 MUX"},
-	{"SLIM TX9 MUX", "DEC9", "DEC9 MUX"},
-	{"SLIM TX9 MUX", "DEC10", "DEC10 MUX"},
-
-	{"SLIM TX10 MUX", "DEC1", "DEC1 MUX"},
-	{"SLIM TX10 MUX", "DEC2", "DEC2 MUX"},
-	{"SLIM TX10 MUX", "DEC3", "DEC3 MUX"},
-	{"SLIM TX10 MUX", "DEC4", "DEC4 MUX"},
-	{"SLIM TX10 MUX", "DEC5", "DEC5 MUX"},
-	{"SLIM TX10 MUX", "DEC6", "DEC6 MUX"},
-	{"SLIM TX10 MUX", "DEC7", "DEC7 MUX"},
-	{"SLIM TX10 MUX", "DEC8", "DEC8 MUX"},
-	{"SLIM TX10 MUX", "DEC9", "DEC9 MUX"},
-	{"SLIM TX10 MUX", "DEC10", "DEC10 MUX"},
-
-	/* Earpiece (RX MIX1) */
-	{"EAR", NULL, "EAR PA"},
-	{"EAR PA", NULL, "EAR_PA_MIXER"},
-	{"EAR_PA_MIXER", NULL, "DAC1"},
-	{"DAC1", NULL, "RX_BIAS"},
-
-	{"ANC EAR", NULL, "ANC EAR PA"},
-	{"ANC EAR PA", NULL, "EAR_PA_MIXER"},
-	{"ANC1 FB MUX", "EAR_HPH_L", "RX1 MIX2"},
-	{"ANC1 FB MUX", "EAR_LINE_1", "RX2 MIX2"},
-
-	/* Headset (RX MIX1 and RX MIX2) */
-	{"HEADPHONE", NULL, "HPHL"},
-	{"HEADPHONE", NULL, "HPHR"},
-
-	{"HPHL", NULL, "HPHL_PA_MIXER"},
-	{"HPHL_PA_MIXER", NULL, "HPHL DAC"},
-	{"HPHL DAC", NULL, "RX_BIAS"},
-
-	{"HPHR", NULL, "HPHR_PA_MIXER"},
-	{"HPHR_PA_MIXER", NULL, "HPHR DAC"},
-	{"HPHR DAC", NULL, "RX_BIAS"},
-
-	{"ANC HEADPHONE", NULL, "ANC HPHL"},
-	{"ANC HEADPHONE", NULL, "ANC HPHR"},
-
-	{"ANC HPHL", NULL, "HPHL_PA_MIXER"},
-	{"ANC HPHR", NULL, "HPHR_PA_MIXER"},
-
-	{"ANC1 MUX", "ADC1", "ADC1"},
-	{"ANC1 MUX", "ADC2", "ADC2"},
-	{"ANC1 MUX", "ADC3", "ADC3"},
-	{"ANC1 MUX", "ADC4", "ADC4"},
-	{"ANC1 MUX", "DMIC1", "DMIC1"},
-	{"ANC1 MUX", "DMIC2", "DMIC2"},
-	{"ANC1 MUX", "DMIC3", "DMIC3"},
-	{"ANC1 MUX", "DMIC4", "DMIC4"},
-	{"ANC1 MUX", "DMIC5", "DMIC5"},
-	{"ANC1 MUX", "DMIC6", "DMIC6"},
-	{"ANC2 MUX", "ADC1", "ADC1"},
-	{"ANC2 MUX", "ADC2", "ADC2"},
-	{"ANC2 MUX", "ADC3", "ADC3"},
-	{"ANC2 MUX", "ADC4", "ADC4"},
-
-	{"ANC HPHR", NULL, "CDC_CONN"},
-
-	{"DAC1", "Switch", "CLASS_H_DSM MUX"},
-	{"HPHL DAC", "Switch", "CLASS_H_DSM MUX"},
-	{"HPHR DAC", NULL, "RX2 CHAIN"},
-
-	{"LINEOUT1", NULL, "LINEOUT1 PA"},
-	{"LINEOUT2", NULL, "LINEOUT2 PA"},
-	{"LINEOUT3", NULL, "LINEOUT3 PA"},
-	{"LINEOUT4", NULL, "LINEOUT4 PA"},
-	{"SPK_OUT", NULL, "SPK PA"},
-
-	{"LINEOUT1 PA", NULL, "LINEOUT1_PA_MIXER"},
-	{"LINEOUT1_PA_MIXER", NULL, "LINEOUT1 DAC"},
-
-	{"LINEOUT2 PA", NULL, "LINEOUT2_PA_MIXER"},
-	{"LINEOUT2_PA_MIXER", NULL, "LINEOUT2 DAC"},
-
-	{"LINEOUT3 PA", NULL, "LINEOUT3_PA_MIXER"},
-	{"LINEOUT3_PA_MIXER", NULL, "LINEOUT3 DAC"},
-
-	{"LINEOUT4 PA", NULL, "LINEOUT4_PA_MIXER"},
-	{"LINEOUT4_PA_MIXER", NULL, "LINEOUT4 DAC"},
-
-	{"LINEOUT1 DAC", NULL, "RX3 MIX1"},
-
-	{"RDAC5 MUX", "DEM3_INV", "RX3 MIX1"},
-	{"RDAC5 MUX", "DEM4", "RX4 MIX1"},
-
-	{"LINEOUT3 DAC", NULL, "RDAC5 MUX"},
-
-	{"LINEOUT2 DAC", NULL, "RX5 MIX1"},
-
-	{"RDAC7 MUX", "DEM5_INV", "RX5 MIX1"},
-	{"RDAC7 MUX", "DEM6", "RX6 MIX1"},
-
-	{"LINEOUT4 DAC", NULL, "RDAC7 MUX"},
-
-	{"SPK PA", NULL, "SPK DAC"},
-	{"SPK DAC", NULL, "RX7 MIX2"},
-	{"SPK DAC", NULL, "VDD_SPKDRV"},
-
-	{"CLASS_H_DSM MUX", "DSM_HPHL_RX1", "RX1 CHAIN"},
-
-	{"RX1 CHAIN", NULL, "RX1 MIX2"},
-	{"RX2 CHAIN", NULL, "RX2 MIX2"},
-
-	{"RX1 MIX2", NULL, "ANC1 MUX"},
-	{"RX2 MIX2", NULL, "ANC2 MUX"},
-
-	{"LINEOUT1 DAC", NULL, "RX_BIAS"},
-	{"LINEOUT2 DAC", NULL, "RX_BIAS"},
-	{"LINEOUT3 DAC", NULL, "RX_BIAS"},
-	{"LINEOUT4 DAC", NULL, "RX_BIAS"},
-	{"SPK DAC", NULL, "RX_BIAS"},
-
-	{"RX7 MIX1", NULL, "COMP0_CLK"},
-	{"RX1 MIX1", NULL, "COMP1_CLK"},
-	{"RX2 MIX1", NULL, "COMP1_CLK"},
-	{"RX3 MIX1", NULL, "COMP2_CLK"},
-	{"RX5 MIX1", NULL, "COMP2_CLK"},
-
-	{"RX1 MIX1", NULL, "RX1 MIX1 INP1"},
-	{"RX1 MIX1", NULL, "RX1 MIX1 INP2"},
-	{"RX1 MIX1", NULL, "RX1 MIX1 INP3"},
-	{"RX2 MIX1", NULL, "RX2 MIX1 INP1"},
-	{"RX2 MIX1", NULL, "RX2 MIX1 INP2"},
-	{"RX3 MIX1", NULL, "RX3 MIX1 INP1"},
-	{"RX3 MIX1", NULL, "RX3 MIX1 INP2"},
-	{"RX4 MIX1", NULL, "RX4 MIX1 INP1"},
-	{"RX4 MIX1", NULL, "RX4 MIX1 INP2"},
-	{"RX5 MIX1", NULL, "RX5 MIX1 INP1"},
-	{"RX5 MIX1", NULL, "RX5 MIX1 INP2"},
-	{"RX6 MIX1", NULL, "RX6 MIX1 INP1"},
-	{"RX6 MIX1", NULL, "RX6 MIX1 INP2"},
-	{"RX7 MIX1", NULL, "RX7 MIX1 INP1"},
-	{"RX7 MIX1", NULL, "RX7 MIX1 INP2"},
-	{"RX1 MIX2", NULL, "RX1 MIX1"},
-	{"RX1 MIX2", NULL, "RX1 MIX2 INP1"},
-	{"RX1 MIX2", NULL, "RX1 MIX2 INP2"},
-	{"RX2 MIX2", NULL, "RX2 MIX1"},
-	{"RX2 MIX2", NULL, "RX2 MIX2 INP1"},
-	{"RX2 MIX2", NULL, "RX2 MIX2 INP2"},
-	{"RX7 MIX2", NULL, "RX7 MIX1"},
-	{"RX7 MIX2", NULL, "RX7 MIX2 INP1"},
-	{"RX7 MIX2", NULL, "RX7 MIX2 INP2"},
-
-	/* SLIM_MUX("AIF1_PB", "AIF1 PB"),*/
-	{"SLIM RX1 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX2 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX3 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX4 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX5 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX6 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX7 MUX", "AIF1_PB", "AIF1 PB"},
-	/* SLIM_MUX("AIF2_PB", "AIF2 PB"),*/
-	{"SLIM RX1 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX2 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX3 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX4 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX5 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX6 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX7 MUX", "AIF2_PB", "AIF2 PB"},
-	/* SLIM_MUX("AIF3_PB", "AIF3 PB"),*/
-	{"SLIM RX1 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX2 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX3 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX4 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX5 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX6 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX7 MUX", "AIF3_PB", "AIF3 PB"},
-
-	{"SLIM RX1", NULL, "SLIM RX1 MUX"},
-	{"SLIM RX2", NULL, "SLIM RX2 MUX"},
-	{"SLIM RX3", NULL, "SLIM RX3 MUX"},
-	{"SLIM RX4", NULL, "SLIM RX4 MUX"},
-	{"SLIM RX5", NULL, "SLIM RX5 MUX"},
-	{"SLIM RX6", NULL, "SLIM RX6 MUX"},
-	{"SLIM RX7", NULL, "SLIM RX7 MUX"},
-
-	{"RX1 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX1 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX1 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX1 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX1 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX1 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX1 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX1 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX1 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX1 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX1 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX1 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX1 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX1 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX1 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX1 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX1 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX1 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX1 MIX1 INP3", "RX1", "SLIM RX1"},
-	{"RX1 MIX1 INP3", "RX2", "SLIM RX2"},
-	{"RX1 MIX1 INP3", "RX3", "SLIM RX3"},
-	{"RX1 MIX1 INP3", "RX4", "SLIM RX4"},
-	{"RX1 MIX1 INP3", "RX5", "SLIM RX5"},
-	{"RX1 MIX1 INP3", "RX6", "SLIM RX6"},
-	{"RX1 MIX1 INP3", "RX7", "SLIM RX7"},
-	{"RX2 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX2 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX2 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX2 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX2 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX2 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX2 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX2 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX2 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX2 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX2 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX2 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX2 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX2 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX2 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX2 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX2 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX2 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX3 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX3 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX3 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX3 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX3 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX3 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX3 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX3 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX3 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX3 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX3 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX3 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX3 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX3 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX3 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX3 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX3 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX3 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX4 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX4 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX4 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX4 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX4 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX4 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX4 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX4 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX4 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX4 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX4 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX4 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX4 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX4 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX4 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX4 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX4 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX4 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX5 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX5 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX5 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX5 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX5 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX5 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX5 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX5 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX5 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX5 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX5 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX5 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX5 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX5 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX5 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX5 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX5 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX5 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX6 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX6 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX6 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX6 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX6 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX6 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX6 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX6 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX6 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX6 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX6 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX6 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX6 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX6 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX6 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX6 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX6 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX6 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX7 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX7 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX7 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX7 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX7 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX7 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX7 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX7 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX7 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX7 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX7 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX7 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX7 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX7 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX7 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX7 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX7 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX7 MIX1 INP2", "IIR2", "IIR2"},
-
-	/* IIR1, IIR2 inputs to Second RX Mixer on RX1, RX2 and RX7 chains. */
-	{"RX1 MIX2 INP1", "IIR1", "IIR1"},
-	{"RX1 MIX2 INP2", "IIR1", "IIR1"},
-	{"RX2 MIX2 INP1", "IIR1", "IIR1"},
-	{"RX2 MIX2 INP2", "IIR1", "IIR1"},
-	{"RX7 MIX2 INP1", "IIR1", "IIR1"},
-	{"RX7 MIX2 INP2", "IIR1", "IIR1"},
-	{"RX1 MIX2 INP1", "IIR2", "IIR2"},
-	{"RX1 MIX2 INP2", "IIR2", "IIR2"},
-	{"RX2 MIX2 INP1", "IIR2", "IIR2"},
-	{"RX2 MIX2 INP2", "IIR2", "IIR2"},
-	{"RX7 MIX2 INP1", "IIR2", "IIR2"},
-	{"RX7 MIX2 INP2", "IIR2", "IIR2"},
-
-	/* Decimator Inputs */
-	{"DEC1 MUX", "DMIC1", "DMIC1"},
-	{"DEC1 MUX", "ADC6", "ADC6"},
-	{"DEC1 MUX", NULL, "CDC_CONN"},
-	{"DEC2 MUX", "DMIC2", "DMIC2"},
-	{"DEC2 MUX", "ADC5", "ADC5"},
-	{"DEC2 MUX", NULL, "CDC_CONN"},
-	{"DEC3 MUX", "DMIC3", "DMIC3"},
-	{"DEC3 MUX", "ADC4", "ADC4"},
-	{"DEC3 MUX", NULL, "CDC_CONN"},
-	{"DEC4 MUX", "DMIC4", "DMIC4"},
-	{"DEC4 MUX", "ADC3", "ADC3"},
-	{"DEC4 MUX", NULL, "CDC_CONN"},
-	{"DEC5 MUX", "DMIC5", "DMIC5"},
-	{"DEC5 MUX", "ADC2", "ADC2"},
-	{"DEC5 MUX", NULL, "CDC_CONN"},
-	{"DEC6 MUX", "DMIC6", "DMIC6"},
-	{"DEC6 MUX", "ADC1", "ADC1"},
-	{"DEC6 MUX", NULL, "CDC_CONN"},
-	{"DEC7 MUX", "DMIC1", "DMIC1"},
-	{"DEC7 MUX", "DMIC6", "DMIC6"},
-	{"DEC7 MUX", "ADC1", "ADC1"},
-	{"DEC7 MUX", "ADC6", "ADC6"},
-	{"DEC7 MUX", NULL, "CDC_CONN"},
-	{"DEC8 MUX", "DMIC2", "DMIC2"},
-	{"DEC8 MUX", "DMIC5", "DMIC5"},
-	{"DEC8 MUX", "ADC2", "ADC2"},
-	{"DEC8 MUX", "ADC5", "ADC5"},
-	{"DEC8 MUX", NULL, "CDC_CONN"},
-	{"DEC9 MUX", "DMIC4", "DMIC4"},
-	{"DEC9 MUX", "DMIC5", "DMIC5"},
-	{"DEC9 MUX", "ADC2", "ADC2"},
-	{"DEC9 MUX", "ADC3", "ADC3"},
-	{"DEC9 MUX", NULL, "CDC_CONN"},
-	{"DEC10 MUX", "DMIC3", "DMIC3"},
-	{"DEC10 MUX", "DMIC6", "DMIC6"},
-	{"DEC10 MUX", "ADC1", "ADC1"},
-	{"DEC10 MUX", "ADC4", "ADC4"},
-	{"DEC10 MUX", NULL, "CDC_CONN"},
-
-	/* ADC Connections */
-	{"ADC1", NULL, "AMIC1"},
-	{"ADC2", NULL, "AMIC2"},
-	{"ADC3", NULL, "AMIC3"},
-	{"ADC4", NULL, "AMIC4"},
-	{"ADC5", NULL, "AMIC5"},
-	{"ADC6", NULL, "AMIC6"},
-
-	/* AUX PGA Connections */
-	{"EAR_PA_MIXER", "AUX_PGA_L Switch", "AUX_PGA_Left"},
-	{"HPHL_PA_MIXER", "AUX_PGA_L Switch", "AUX_PGA_Left"},
-	{"HPHR_PA_MIXER", "AUX_PGA_R Switch", "AUX_PGA_Right"},
-	{"LINEOUT1_PA_MIXER", "AUX_PGA_L Switch", "AUX_PGA_Left"},
-	{"LINEOUT2_PA_MIXER", "AUX_PGA_R Switch", "AUX_PGA_Right"},
-	{"LINEOUT3_PA_MIXER", "AUX_PGA_L Switch", "AUX_PGA_Left"},
-	{"LINEOUT4_PA_MIXER", "AUX_PGA_R Switch", "AUX_PGA_Right"},
-	{"AUX_PGA_Left", NULL, "AMIC5"},
-	{"AUX_PGA_Right", NULL, "AMIC6"},
-
-	{"IIR1", NULL, "IIR1 INP1 MUX"},
-	{"IIR1 INP1 MUX", "DEC1", "DEC1 MUX"},
-	{"IIR1 INP1 MUX", "DEC2", "DEC2 MUX"},
-	{"IIR1 INP1 MUX", "DEC3", "DEC3 MUX"},
-	{"IIR1 INP1 MUX", "DEC4", "DEC4 MUX"},
-	{"IIR1 INP1 MUX", "DEC5", "DEC5 MUX"},
-	{"IIR1 INP1 MUX", "DEC6", "DEC6 MUX"},
-	{"IIR1 INP1 MUX", "DEC7", "DEC7 MUX"},
-	{"IIR1 INP1 MUX", "DEC8", "DEC8 MUX"},
-	{"IIR1 INP1 MUX", "DEC9", "DEC9 MUX"},
-	{"IIR1 INP1 MUX", "DEC10", "DEC10 MUX"},
-	{"IIR1 INP1 MUX", "RX1", "SLIM RX1"},
-	{"IIR1 INP1 MUX", "RX2", "SLIM RX2"},
-	{"IIR1 INP1 MUX", "RX3", "SLIM RX3"},
-	{"IIR1 INP1 MUX", "RX4", "SLIM RX4"},
-	{"IIR1 INP1 MUX", "RX5", "SLIM RX5"},
-	{"IIR1 INP1 MUX", "RX6", "SLIM RX6"},
-	{"IIR1 INP1 MUX", "RX7", "SLIM RX7"},
-
-	{"IIR2", NULL, "IIR2 INP1 MUX"},
-	{"IIR2 INP1 MUX", "DEC1", "DEC1 MUX"},
-	{"IIR2 INP1 MUX", "DEC2", "DEC2 MUX"},
-	{"IIR2 INP1 MUX", "DEC3", "DEC3 MUX"},
-	{"IIR2 INP1 MUX", "DEC4", "DEC4 MUX"},
-	{"IIR2 INP1 MUX", "DEC5", "DEC5 MUX"},
-	{"IIR2 INP1 MUX", "DEC6", "DEC6 MUX"},
-	{"IIR2 INP1 MUX", "DEC7", "DEC7 MUX"},
-	{"IIR2 INP1 MUX", "DEC8", "DEC8 MUX"},
-	{"IIR2 INP1 MUX", "DEC9", "DEC9 MUX"},
-	{"IIR2 INP1 MUX", "DEC10", "DEC10 MUX"},
-	{"IIR2 INP1 MUX", "RX1", "SLIM RX1"},
-	{"IIR2 INP1 MUX", "RX2", "SLIM RX2"},
-	{"IIR2 INP1 MUX", "RX3", "SLIM RX3"},
-	{"IIR2 INP1 MUX", "RX4", "SLIM RX4"},
-	{"IIR2 INP1 MUX", "RX5", "SLIM RX5"},
-	{"IIR2 INP1 MUX", "RX6", "SLIM RX6"},
-	{"IIR2 INP1 MUX", "RX7", "SLIM RX7"},
-
-	{"MIC BIAS1 Internal1", NULL, "LDO_H"},
-	{"MIC BIAS1 Internal2", NULL, "LDO_H"},
-	{"MIC BIAS1 External", NULL, "LDO_H"},
-	{"MIC BIAS2 Internal1", NULL, "LDO_H"},
-	{"MIC BIAS2 Internal2", NULL, "LDO_H"},
-	{"MIC BIAS2 Internal3", NULL, "LDO_H"},
-	{"MIC BIAS2 External", NULL, "LDO_H"},
-	{"MIC BIAS3 Internal1", NULL, "LDO_H"},
-	{"MIC BIAS3 Internal2", NULL, "LDO_H"},
-	{"MIC BIAS3 External", NULL, "LDO_H"},
-	{"MIC BIAS4 External", NULL, "LDO_H"},
-	{"Main Mic Bias", NULL, "LDO_H"},
-	{DAPM_MICBIAS2_EXTERNAL_STANDALONE, NULL, "LDO_H Standalone"},
-	{DAPM_MICBIAS3_EXTERNAL_STANDALONE, NULL, "LDO_H Standalone"},
-	{"Ear Mic Bias", NULL, "LDO_H"},
-};
-
-static int taiko_readable(struct snd_soc_codec *ssc, unsigned int reg)
-{
-	return taiko_reg_readable[reg];
-}
-
-static bool taiko_is_digital_gain_register(unsigned int reg)
-{
-	bool rtn = false;
-	switch (reg) {
-	case TAIKO_A_CDC_RX1_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX2_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX3_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX4_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX5_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX6_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_TX1_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX2_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX3_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX4_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX5_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX6_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX7_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX8_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX9_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX10_VOL_CTL_GAIN:
-		rtn = true;
-		break;
-	default:
-		break;
-	}
-	return rtn;
-}
-
-static int taiko_volatile(struct snd_soc_codec *ssc, unsigned int reg)
-{
-	int i;
-
-	/* Registers lower than 0x100 are top level registers which can be
-	 * written by the Taiko core driver.
-	 */
-
-	if ((reg >= TAIKO_A_CDC_MBHC_EN_CTL) || (reg < 0x100))
-		return 1;
-
-	/* IIR Coeff registers are not cacheable */
-	if ((reg >= TAIKO_A_CDC_IIR1_COEF_B1_CTL) &&
-		(reg <= TAIKO_A_CDC_IIR2_COEF_B2_CTL))
-		return 1;
-
-	/* ANC filter registers are not cacheable */
-	if ((reg >= TAIKO_A_CDC_ANC1_IIR_B1_CTL) &&
-		(reg <= TAIKO_A_CDC_ANC1_LPF_B2_CTL))
-		return 1;
-	if ((reg >= TAIKO_A_CDC_ANC2_IIR_B1_CTL) &&
-		(reg <= TAIKO_A_CDC_ANC2_LPF_B2_CTL))
-		return 1;
-
-	/* Digital gain register is not cacheable so we have to write
-	 * the setting even it is the same
-	 */
-	if (taiko_is_digital_gain_register(reg))
-		return 1;
-
-	/* HPH status registers */
-	if (reg == TAIKO_A_RX_HPH_L_STATUS || reg == TAIKO_A_RX_HPH_R_STATUS)
-		return 1;
-
-	/* HPH PA Enable */
-	if (reg == TAIKO_A_RX_HPH_CNP_EN)
-		return 1;
-
-	if (reg == TAIKO_A_MBHC_INSERT_DET_STATUS)
-		return 1;
-
-	switch (reg) {
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL0:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL1:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL2:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL3:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL4:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL5:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL6:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL7:
-	case TAIKO_A_CDC_VBAT_GAIN_MON_VAL:
-		return 1;
-	}
-
-	for (i = 0; i < ARRAY_SIZE(audio_reg_cfg); i++)
-		if (audio_reg_cfg[i].reg_logical_addr -
-		    TAIKO_REGISTER_START_OFFSET == reg)
-			return 1;
-
-	return 0;
-}
-
-#ifdef CONFIG_BOEFFLA_SOUND
-int taiko_write(struct snd_soc_codec *codec, unsigned int reg,
-	unsigned int value)
-#else
-static int taiko_write(struct snd_soc_codec *codec, unsigned int reg,
-	unsigned int value)
-#endif	
-{
-	int ret;
-	struct wcd9xxx *wcd9xxx = codec->control_data;
-
-	if (reg == SND_SOC_NOPM)
-		return 0;
-
-	BUG_ON(reg > TAIKO_MAX_REGISTER);
-	
-#ifdef CONFIG_BOEFFLA_SOUND
-	// Boeffla Sound write hook
-	value = boeffla_sound_hook_taiko_write(reg, value);
-#endif
-
-	if (!taiko_volatile(codec, reg)) {
-		ret = snd_soc_cache_write(codec, reg, value);
-		if (ret != 0)
-			dev_err(codec->dev, "Cache write to %x failed: %d\n",
-				reg, ret);
-	}
-
-	return wcd9xxx_reg_write(&wcd9xxx->core_res, reg, value);
-}
-#ifdef CONFIG_BOEFFLA_SOUND
-EXPORT_SYMBOL(taiko_write);
-#endif
-
-#ifdef CONFIG_BOEFFLA_SOUND
-int taiko_write_no_hook(struct snd_soc_codec *codec, unsigned int reg,
-	unsigned int value)
-{
-	int ret;
-	struct wcd9xxx *wcd9xxx = codec->control_data;
-
-	if (reg == SND_SOC_NOPM)
-		return 0;
-
-	BUG_ON(reg > TAIKO_MAX_REGISTER);
-	
-	if (!taiko_volatile(codec, reg)) {
-		ret = snd_soc_cache_write(codec, reg, value);
-		if (ret != 0)
-			dev_err(codec->dev, "Cache write to %x failed: %d\n",
-				reg, ret);
-	}
-
-	return wcd9xxx_reg_write(&wcd9xxx->core_res, reg, value);
-}
-EXPORT_SYMBOL(taiko_write_no_hook);
-#endif
-
-#ifdef CONFIG_BOEFFLA_SOUND
-unsigned int taiko_read(struct snd_soc_codec *codec,
-				unsigned int reg)
-#else
-static unsigned int taiko_read(struct snd_soc_codec *codec,
-				unsigned int reg)
-#endif
-{
-	unsigned int val;
-	int ret;
-
-	struct wcd9xxx *wcd9xxx = codec->control_data;
-
-	if (reg == SND_SOC_NOPM)
-		return 0;
-
-	BUG_ON(reg > TAIKO_MAX_REGISTER);
-
-	if (!taiko_volatile(codec, reg) && taiko_readable(codec, reg) &&
-		reg < codec->driver->reg_cache_size) {
-		ret = snd_soc_cache_read(codec, reg, &val);
-		if (ret >= 0) {
-			return val;
-		} else
-			dev_err(codec->dev, "Cache read from %x failed: %d\n",
-				reg, ret);
-	}
-
-	val = wcd9xxx_reg_read(&wcd9xxx->core_res, reg);
-	return val;
-}
-#ifdef CONFIG_BOEFFLA_SOUND
-EXPORT_SYMBOL(taiko_read);
-#endif
-
-#ifdef CONFIG_SND_SOC_ES325
-static int taiko_startup(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-	struct wcd9xxx *taiko_core = dev_get_drvdata(dai->codec->dev->parent);
-	pr_debug("%s(): substream = %s  stream = %d\n" , __func__,
-		 substream->name, substream->stream);
-	if ((taiko_core != NULL) &&
-	    (taiko_core->dev != NULL) &&
-	    (taiko_core->dev->parent != NULL)) {
-		es325_wrapper_wakeup(dai);
-	}
-
-	return 0;
-}
-#else
-static int taiko_startup(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-//	struct wcd9xxx *taiko_core = dev_get_drvdata(dai->codec->dev->parent);
-	pr_debug("%s(): substream = %s  stream = %d\n" , __func__,
-		 substream->name, substream->stream);
-	return 0;
-}
-#endif
-
-static void taiko_shutdown(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-	struct wcd9xxx *taiko_core = dev_get_drvdata(dai->codec->dev->parent);
-	pr_debug("%s(): substream = %s  stream = %d\n" , __func__,
-		 substream->name, substream->stream);
-	if ((taiko_core != NULL) &&
-	    (taiko_core->dev != NULL) &&
-	    (taiko_core->dev->parent != NULL)) {
-#ifdef CONFIG_SND_SOC_ES325
-		es325_wrapper_sleep(dai->id);
-#endif
-	}
-}
-
-static int taiko_prepare(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-	int paths, i;
-	struct snd_soc_dapm_widget_list *wlist;
-	struct snd_soc_codec *codec = dai->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	int found_hs_pa = 0;
-
-	if (substream->stream)
-		return 0;
-
-	pr_debug("%s(): substream = %s. stream = %d. dai->name = %s."
-		" dai->driver->name = %s. dai stream_name = %s\n",
-		__func__, substream->name, substream->stream,
-		dai->name, dai->driver->name,
-		substream->stream ? dai->driver->capture.stream_name :
-		dai->driver->playback.stream_name);
-
-	pr_debug("%s(): dai AIF widget = %s. dai playback stream_name = %s.\n"
-		"  rate = %u. bit_width = %u.  hs compander_enabled = %u\n",
-		__func__, dai->playback_aif ? dai->playback_aif->name : "NULL",
-		dai->driver->playback.stream_name, taiko_p->dai[dai->id].rate,
-			taiko_p->dai[dai->id].bit_width,
-			taiko_p->comp_enabled[COMPANDER_1]);
-
-	if ((!(taiko_p->dai[dai->id].rate == 192000 ||
-		 taiko_p->dai[dai->id].rate == 96000)) ||
-	    !(taiko_p->dai[dai->id].bit_width == 24) ||
-	    !(taiko_p->comp_enabled[COMPANDER_1])) {
-
-		taiko_p->clsh_d.hs_perf_mode_enabled = false;
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_CHOP_CTL, 0x20, 0x20);
-
-		dev_dbg(dai->dev ,"%s(): high performnce mode not needed\n",
-				__func__);
-		return 0;
-	}
-
-	paths = snd_soc_dapm_codec_dai_get_playback_connected_widgets(dai, &wlist);
-
-	if (!paths) {
-		dev_err(dai->dev, "%s(): found no audio playback paths\n",
-			__func__);
-		return 0;
-	}
-
-	for (i = 0; i < wlist->num_widgets; i++) {
-		dev_dbg(dai->dev, " dai stream_name = %s, widget name = %s\n",
-			dai->driver->playback.stream_name, wlist->widgets[i]->name);
-
-		if (!strcmp(wlist->widgets[i]->name, "HPHL") ||
-		    !strcmp(wlist->widgets[i]->name, "HPHR")) {
-			found_hs_pa = 1;
-			break;
-		}
-	}
-
-	kfree(wlist);
-
-	if (!found_hs_pa)
-		return 0;
-
-	pr_debug("%s(): rate = %u. bit_width = %u.  hs compander_enabled = %u",
-			__func__, taiko_p->dai[dai->id].rate,
-			taiko_p->dai[dai->id].bit_width,
-			taiko_p->comp_enabled[COMPANDER_1]);
-
-	if ((taiko_p->dai[dai->id].rate == 192000 ||
-		taiko_p->dai[dai->id].rate == 96000) &&
-	    (taiko_p->dai[dai->id].bit_width == 24) &&
-	    (taiko_p->comp_enabled[COMPANDER_1])) {
-
-		pr_debug("%s(): HS peformance mode enabled", __func__);
-		taiko_p->clsh_d.hs_perf_mode_enabled = true;
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_CHOP_CTL, 0x20, 0x00);
-	} else {
-		taiko_p->clsh_d.hs_perf_mode_enabled = false;
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_CHOP_CTL, 0x20, 0x20);
-	}
-
-	return 0;
-}
-
-int taiko_mclk_enable(struct snd_soc_codec *codec, int mclk_enable, bool dapm)
-{
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s: mclk_enable = %u, dapm = %d\n", __func__, mclk_enable,
-		 dapm);
-
-	WCD9XXX_BG_CLK_LOCK(&taiko->resmgr);
-	if (mclk_enable) {
-		wcd9xxx_resmgr_get_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		wcd9xxx_resmgr_get_clk_block(&taiko->resmgr, WCD9XXX_CLK_MCLK);
-	} else {
-		/* Put clock and BG */
-		wcd9xxx_resmgr_put_clk_block(&taiko->resmgr, WCD9XXX_CLK_MCLK);
-		wcd9xxx_resmgr_put_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-	}
-	WCD9XXX_BG_CLK_UNLOCK(&taiko->resmgr);
-
-	return 0;
-}
-
-static int taiko_set_dai_sysclk(struct snd_soc_dai *dai,
-		int clk_id, unsigned int freq, int dir)
-{
-	pr_debug("%s\n", __func__);
-	return 0;
-}
-
-static int taiko_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
-{
-	u8 val = 0;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(dai->codec);
-
-	pr_debug("%s\n", __func__);
-	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
-	case SND_SOC_DAIFMT_CBS_CFS:
-		/* CPU is master */
-		if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_I2C) {
-			if (dai->id == AIF1_CAP)
-				snd_soc_update_bits(dai->codec,
-					TAIKO_A_CDC_CLK_TX_I2S_CTL,
-					TAIKO_I2S_MASTER_MODE_MASK, 0);
-			else if (dai->id == AIF1_PB)
-				snd_soc_update_bits(dai->codec,
-					TAIKO_A_CDC_CLK_RX_I2S_CTL,
-					TAIKO_I2S_MASTER_MODE_MASK, 0);
-		}
-		break;
-	case SND_SOC_DAIFMT_CBM_CFM:
-	/* CPU is slave */
-		if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_I2C) {
-			val = TAIKO_I2S_MASTER_MODE_MASK;
-			if (dai->id == AIF1_CAP)
-				snd_soc_update_bits(dai->codec,
-					TAIKO_A_CDC_CLK_TX_I2S_CTL, val, val);
-			else if (dai->id == AIF1_PB)
-				snd_soc_update_bits(dai->codec,
-					TAIKO_A_CDC_CLK_RX_I2S_CTL, val, val);
-		}
-		break;
-	default:
-		return -EINVAL;
-	}
-	return 0;
-}
-
-static int taiko_set_channel_map(struct snd_soc_dai *dai,
-				unsigned int tx_num, unsigned int *tx_slot,
-				unsigned int rx_num, unsigned int *rx_slot)
-
-{
-	struct wcd9xxx_codec_dai_data *dai_data = NULL;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(dai->codec);
-	struct wcd9xxx *core = dev_get_drvdata(dai->codec->dev->parent);
-	if (!tx_slot && !rx_slot) {
-		pr_err("%s: Invalid\n", __func__);
-		return -EINVAL;
-	}
-	pr_debug("%s(): dai_name = %s DAI-ID %x tx_ch %d rx_ch %d\n"
-		 "taiko->intf_type %d\n",
-		 __func__, dai->name, dai->id, tx_num, rx_num,
-		 taiko->intf_type);
-
-	if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_SLIMBUS) {
-		wcd9xxx_init_slimslave(core, core->slim->laddr,
-					   tx_num, tx_slot, rx_num, rx_slot);
-		/*Reserve tx11 and tx12 for VI feedback path*/
-		dai_data = &taiko->dai[AIF4_VIFEED];
-		if (dai_data) {
-			list_add_tail(&core->tx_chs[TAIKO_TX11].list,
-			&dai_data->wcd9xxx_ch_list);
-			list_add_tail(&core->tx_chs[TAIKO_TX12].list,
-			&dai_data->wcd9xxx_ch_list);
-		}
-	}
-	return 0;
-}
-
-static int taiko_get_channel_map(struct snd_soc_dai *dai,
-				 unsigned int *tx_num, unsigned int *tx_slot,
-				 unsigned int *rx_num, unsigned int *rx_slot)
-
-{
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(dai->codec);
-	u32 i = 0;
-	struct wcd9xxx_ch *ch;
-
-	switch (dai->id) {
-	case AIF1_PB:
-	case AIF2_PB:
-	case AIF3_PB:
-		if (!rx_slot || !rx_num) {
-			pr_err("%s: Invalid rx_slot %d or rx_num %d\n",
-				 __func__, (u32) rx_slot, (u32) rx_num);
-			return -EINVAL;
-		}
-		list_for_each_entry(ch, &taiko_p->dai[dai->id].wcd9xxx_ch_list,
-				    list) {
-			pr_debug("%s: slot_num %u ch->ch_num %d\n",
-				 __func__, i, ch->ch_num);
-			rx_slot[i++] = ch->ch_num;
-		}
-		pr_debug("%s: rx_num %d\n", __func__, i);
-		*rx_num = i;
-		break;
-	case AIF1_CAP:
-	case AIF2_CAP:
-	case AIF3_CAP:
-	case AIF4_VIFEED:
-	case AIF4_MAD_TX:
-		if (!tx_slot || !tx_num) {
-			pr_err("%s: Invalid tx_slot %d or tx_num %d\n",
-				 __func__, (u32) tx_slot, (u32) tx_num);
-			return -EINVAL;
-		}
-		list_for_each_entry(ch, &taiko_p->dai[dai->id].wcd9xxx_ch_list,
-				    list) {
-			pr_debug("%s: slot_num %u ch->ch_num %d\n",
-				 __func__, i,  ch->ch_num);
-			tx_slot[i++] = ch->ch_num;
-		}
-		pr_debug("%s: tx_num %d\n", __func__, i);
-		*tx_num = i;
-		break;
-
-	default:
-		pr_err("%s: Invalid DAI ID %x\n", __func__, dai->id);
-		break;
-	}
-
-	return 0;
-}
-
-static int taiko_set_interpolator_rate(struct snd_soc_dai *dai,
-	u8 rx_fs_rate_reg_val, u32 compander_fs, u32 sample_rate)
-{
-	u32 j;
-	u8 rx_mix1_inp;
-	u16 rx_mix_1_reg_1, rx_mix_1_reg_2;
-	u16 rx_fs_reg;
-	u8 rx_mix_1_reg_1_val, rx_mix_1_reg_2_val;
-	struct snd_soc_codec *codec = dai->codec;
-	struct wcd9xxx_ch *ch;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	list_for_each_entry(ch, &taiko->dai[dai->id].wcd9xxx_ch_list, list) {
-		/* for RX port starting from 16 instead of 10 like tabla */
-		rx_mix1_inp = ch->port + RX_MIX1_INP_SEL_RX1 -
-			      TAIKO_TX_PORT_NUMBER;
-		if ((rx_mix1_inp < RX_MIX1_INP_SEL_RX1) ||
-			(rx_mix1_inp > RX_MIX1_INP_SEL_RX7)) {
-			pr_err("%s: Invalid TAIKO_RX%u port. Dai ID is %d\n",
-				__func__,  rx_mix1_inp - 5 , dai->id);
-			return -EINVAL;
-		}
-
-		rx_mix_1_reg_1 = TAIKO_A_CDC_CONN_RX1_B1_CTL;
-
-		for (j = 0; j < NUM_INTERPOLATORS; j++) {
-			rx_mix_1_reg_2 = rx_mix_1_reg_1 + 1;
-
-			rx_mix_1_reg_1_val = snd_soc_read(codec,
-							  rx_mix_1_reg_1);
-			rx_mix_1_reg_2_val = snd_soc_read(codec,
-							  rx_mix_1_reg_2);
-
-			if (((rx_mix_1_reg_1_val & 0x0F) == rx_mix1_inp) ||
-			    (((rx_mix_1_reg_1_val >> 4) & 0x0F)
-				== rx_mix1_inp) ||
-			    ((rx_mix_1_reg_2_val & 0x0F) == rx_mix1_inp)) {
-
-				rx_fs_reg = TAIKO_A_CDC_RX1_B5_CTL + 8 * j;
-
-				pr_debug("%s: AIF_PB DAI(%d) connected to RX%u\n",
-					__func__, dai->id, j + 1);
-
-				pr_debug("%s: set RX%u sample rate to %u\n",
-					__func__, j + 1, sample_rate);
-
-				snd_soc_update_bits(codec, rx_fs_reg,
-						0xE0, rx_fs_rate_reg_val);
-
-				if (comp_rx_path[j] < COMPANDER_MAX)
-					taiko->comp_fs[comp_rx_path[j]]
-					= compander_fs;
-			}
-			if (j < 2)
-				rx_mix_1_reg_1 += 3;
-			else
-				rx_mix_1_reg_1 += 2;
-		}
-	}
-	return 0;
-}
-
-static int taiko_set_decimator_rate(struct snd_soc_dai *dai,
-	u8 tx_fs_rate_reg_val, u32 sample_rate)
-{
-	struct snd_soc_codec *codec = dai->codec;
-	struct wcd9xxx_ch *ch;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	u32 tx_port;
-	u16 tx_port_reg, tx_fs_reg;
-	u8 tx_port_reg_val;
-	s8 decimator;
-
-	list_for_each_entry(ch, &taiko->dai[dai->id].wcd9xxx_ch_list, list) {
-
-		tx_port = ch->port + 1;
-		pr_debug("%s: dai->id = %d, tx_port = %d",
-			__func__, dai->id, tx_port);
-
-		if ((tx_port < 1) || (tx_port > NUM_DECIMATORS)) {
-			pr_err("%s: Invalid SLIM TX%u port. DAI ID is %d\n",
-				__func__, tx_port, dai->id);
-			return -EINVAL;
-		}
-
-		tx_port_reg = TAIKO_A_CDC_CONN_TX_SB_B1_CTL + (tx_port - 1);
-		tx_port_reg_val =  snd_soc_read(codec, tx_port_reg);
-
-		decimator = 0;
-
-		if ((tx_port >= 1) && (tx_port <= 6)) {
-
-			tx_port_reg_val =  tx_port_reg_val & 0x0F;
-			if (tx_port_reg_val == 0x8)
-				decimator = tx_port;
-
-		} else if ((tx_port >= 7) && (tx_port <= NUM_DECIMATORS)) {
-
-			tx_port_reg_val =  tx_port_reg_val & 0x1F;
-
-			if ((tx_port_reg_val >= 0x8) &&
-			    (tx_port_reg_val <= 0x11)) {
-
-				decimator = (tx_port_reg_val - 0x8) + 1;
-			}
-		}
-
-		if (decimator) { /* SLIM_TX port has a DEC as input */
-
-			tx_fs_reg = TAIKO_A_CDC_TX1_CLK_FS_CTL +
-				    8 * (decimator - 1);
-
-			pr_debug("%s: set DEC%u (-> SLIM_TX%u) rate to %u\n",
-				__func__, decimator, tx_port, sample_rate);
-
-			snd_soc_update_bits(codec, tx_fs_reg, 0x07,
-					    tx_fs_rate_reg_val);
-
-		} else {
-			if ((tx_port_reg_val >= 0x1) &&
-			    (tx_port_reg_val <= 0x7)) {
-
-				pr_debug("%s: RMIX%u going to SLIM TX%u\n",
-					__func__, tx_port_reg_val, tx_port);
-
-			} else if  ((tx_port_reg_val >= 0x8) &&
-				    (tx_port_reg_val <= 0x11)) {
-
-				pr_err("%s: ERROR: Should not be here\n",
-				       __func__);
-				pr_err("%s: ERROR: DEC connected to SLIM TX%u\n",
-					__func__, tx_port);
-				return -EINVAL;
-
-			} else if (tx_port_reg_val == 0) {
-				pr_debug("%s: no signal to SLIM TX%u\n",
-					__func__, tx_port);
-			} else {
-				pr_err("%s: ERROR: wrong signal to SLIM TX%u\n",
-					__func__, tx_port);
-				pr_err("%s: ERROR: wrong signal = %u\n",
-					__func__, tx_port_reg_val);
-				return -EINVAL;
-			}
-		}
-	}
-	return 0;
-}
-
-static void taiko_set_rxsb_port_format(struct snd_pcm_hw_params *params,
-				       struct snd_soc_dai *dai)
-{
-	struct snd_soc_codec *codec = dai->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	struct wcd9xxx_codec_dai_data *cdc_dai;
-	struct wcd9xxx_ch *ch;
-	int port;
-	u8 bit_sel;
-	u16 sb_ctl_reg, field_shift;
-
-	switch (params_format(params)) {
-	case SNDRV_PCM_FORMAT_S16_LE:
-		bit_sel = 0x2;
-		taiko_p->dai[dai->id].bit_width = 16;
-		break;
-	case SNDRV_PCM_FORMAT_S24_LE:
-		bit_sel = 0x0;
-		taiko_p->dai[dai->id].bit_width = 24;
-		break;
-	default:
-		dev_err(codec->dev, "Invalid format\n");
-		return;
-	}
-
-	cdc_dai = &taiko_p->dai[dai->id];
-
-	list_for_each_entry(ch, &cdc_dai->wcd9xxx_ch_list, list) {
-		port = wcd9xxx_get_slave_port(ch->ch_num);
-
-		if (IS_ERR_VALUE(port) ||
-		    !TAIKO_VALIDATE_RX_SBPORT_RANGE(port)) {
-			dev_warn(codec->dev,
-				 "%s: invalid port ID %d returned for RX DAI\n",
-				 __func__, port);
-			return;
-		}
-
-		port = TAIKO_CONVERT_RX_SBPORT_ID(port);
-
-		if (port <= 3) {
-			sb_ctl_reg = TAIKO_A_CDC_CONN_RX_SB_B1_CTL;
-			field_shift = port << 1;
-		} else if (port <= 6) {
-			sb_ctl_reg = TAIKO_A_CDC_CONN_RX_SB_B2_CTL;
-			field_shift = (port - 4) << 1;
-		} else { /* should not happen */
-			dev_warn(codec->dev,
-				 "%s: bad port ID %d\n", __func__, port);
-			return;
-		}
-
-		dev_dbg(codec->dev, "%s: sb_ctl_reg %x field_shift %x\n",
-			__func__, sb_ctl_reg, field_shift);
-		snd_soc_update_bits(codec, sb_ctl_reg, 0x3 << field_shift,
-				    bit_sel << field_shift);
-	}
-}
-
-static int taiko_hw_params(struct snd_pcm_substream *substream,
-			    struct snd_pcm_hw_params *params,
-			    struct snd_soc_dai *dai)
-{
-	struct snd_soc_codec *codec = dai->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(dai->codec);
-	u8 tx_fs_rate, rx_fs_rate;
-	u32 compander_fs;
-	int ret;
-
-	pr_info("%s: dai_name = %s DAI-ID %x rate %d num_ch %d\n", __func__,
-		 dai->name, dai->id, params_rate(params),
-		 params_channels(params));
-
-	switch (params_rate(params)) {
-	case 8000:
-		tx_fs_rate = 0x00;
-		rx_fs_rate = 0x00;
-		compander_fs = COMPANDER_FS_8KHZ;
-		break;
-	case 16000:
-		tx_fs_rate = 0x01;
-		rx_fs_rate = 0x20;
-		compander_fs = COMPANDER_FS_16KHZ;
-		break;
-	case 32000:
-		tx_fs_rate = 0x02;
-		rx_fs_rate = 0x40;
-		compander_fs = COMPANDER_FS_32KHZ;
-		break;
-	case 48000:
-		tx_fs_rate = 0x03;
-		rx_fs_rate = 0x60;
-		compander_fs = COMPANDER_FS_48KHZ;
-		break;
-	case 96000:
-		tx_fs_rate = 0x04;
-		rx_fs_rate = 0x80;
-		compander_fs = COMPANDER_FS_96KHZ;
-		break;
-	case 192000:
-		tx_fs_rate = 0x05;
-		rx_fs_rate = 0xA0;
-		compander_fs = COMPANDER_FS_192KHZ;
-		break;
-	default:
-		pr_err("%s: Invalid sampling rate %d\n", __func__,
-			params_rate(params));
-		return -EINVAL;
-	}
-
-	switch (substream->stream) {
-	case SNDRV_PCM_STREAM_CAPTURE:
-		if (dai->id != AIF4_VIFEED) {
-			ret = taiko_set_decimator_rate(dai, tx_fs_rate,
-							   params_rate(params));
-			if (ret < 0) {
-				pr_err("%s: set decimator rate failed %d\n",
-					__func__, ret);
-				return ret;
-			}
-		}
-
-		if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_I2C) {
-			switch (params_format(params)) {
-			case SNDRV_PCM_FORMAT_S16_LE:
-				snd_soc_update_bits(codec,
-					TAIKO_A_CDC_CLK_TX_I2S_CTL,
-					0x20, 0x20);
-				break;
-			case SNDRV_PCM_FORMAT_S32_LE:
-				snd_soc_update_bits(codec,
-					TAIKO_A_CDC_CLK_TX_I2S_CTL,
-					0x20, 0x00);
-				break;
-			default:
-				pr_err("invalid format\n");
-				break;
-			}
-			snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_TX_I2S_CTL,
-					    0x07, tx_fs_rate);
-		} else {
-			taiko->dai[dai->id].rate   = params_rate(params);
-		}
-		break;
-
-	case SNDRV_PCM_STREAM_PLAYBACK:
-		ret = taiko_set_interpolator_rate(dai, rx_fs_rate,
-						  compander_fs,
-						  params_rate(params));
-		if (ret < 0) {
-			pr_err("%s: set decimator rate failed %d\n", __func__,
-				ret);
-			return ret;
-		}
-		if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_I2C) {
-			switch (params_format(params)) {
-			case SNDRV_PCM_FORMAT_S16_LE:
-				snd_soc_update_bits(codec,
-					TAIKO_A_CDC_CLK_RX_I2S_CTL,
-					0x20, 0x20);
-				break;
-			case SNDRV_PCM_FORMAT_S32_LE:
-				snd_soc_update_bits(codec,
-					TAIKO_A_CDC_CLK_RX_I2S_CTL,
-					0x20, 0x00);
-				break;
-			default:
-				pr_err("invalid format\n");
-				break;
-			}
-			snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RX_I2S_CTL,
-					    0x03, (rx_fs_rate >> 0x05));
-		} else {
-			taiko_set_rxsb_port_format(params, dai);
-			taiko->dai[dai->id].rate   = params_rate(params);
-		}
-		break;
-	default:
-		pr_err("%s: Invalid stream type %d\n", __func__,
-			substream->stream);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-#if defined(CONFIG_SND_SOC_ESXXX)
-int (*remote_route_enable)(struct snd_soc_dai *dai) = REMOTE_ROUTE_ENABLE_CB;
-int (*slim_get_channel_map)(struct snd_soc_dai *dai,
-		unsigned int *tx_num, unsigned int *tx_slot,
-		unsigned int *rx_num, unsigned int *rx_slot)
-			= SLIM_GET_CHANNEL_MAP_CB;
-int (*slim_set_channel_map)(struct snd_soc_dai *dai,
-		unsigned int tx_num, unsigned int *tx_slot,
-		unsigned int rx_num, unsigned int *rx_slot)
-			= SLIM_SET_CHANNEL_MAP_CB;
-int (*slim_hw_params)(struct snd_pcm_substream *substream,
-		struct snd_pcm_hw_params *params,
-		struct snd_soc_dai *dai)
-		= SLIM_HW_PARAMS_CB;
-int (*remote_cfg_slim_rx)(int dai_id)	=	REMOTE_CFG_SLIM_RX_CB;
-int (*remote_close_slim_rx)(int dai_id)	=	REMOTE_CLOSE_SLIM_RX_CB;
-int (*remote_cfg_slim_tx)(int dai_id)	=	REMOTE_CFG_SLIM_TX_CB;
-int (*remote_close_slim_tx)(int dai_id)	=	REMOTE_CLOSE_SLIM_TX_CB;
-int (*remote_add_codec_controls)(struct snd_soc_codec *codec)
-		= REMOTE_ADD_CODEC_CONTROLS_CB;
-
-static int taiko_esxxx_startup(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-	taiko_startup(substream, dai);
-/*
-	if (es705_remote_route_enable(dai))
-		es705_slim_startup(substream, dai);
-*/
-
-	return 0;
-}
-
-static void taiko_esxxx_shutdown(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-	taiko_shutdown(substream, dai);
-
-/*
-	if (es705_remote_route_enable(dai))
-		es705_slim_shutdown(substream, dai);
-*/
-}
-
-static int taiko_esxxx_hw_params(struct snd_pcm_substream *substream,
-		struct snd_pcm_hw_params *params,
-		struct snd_soc_dai *dai)
-{
-	int rc = 0;
-	pr_info("%s: dai_name = %s DAI-ID %x rate %d num_ch %d\n", __func__,
-			dai->name, dai->id, params_rate(params),
-			params_channels(params));
-
-	rc = taiko_hw_params(substream, params, dai);
-
-	if (remote_route_enable(dai))
-		rc = slim_hw_params(substream, params, dai);
-
-	return rc;
-}
-static int taiko_esxxx_set_channel_map(struct snd_soc_dai *dai,
-				unsigned int tx_num, unsigned int *tx_slot,
-				unsigned int rx_num, unsigned int *rx_slot)
-
-{
-	unsigned int taiko_tx_num = 0;
-	unsigned int taiko_tx_slot[6];
-	unsigned int taiko_rx_num = 0;
-	unsigned int taiko_rx_slot[6];
-	int rc = 0;
-	pr_info("%s(): dai_name = %s DAI-ID %x tx_ch %d rx_ch %d\n",
-			__func__, dai->name, dai->id, tx_num, rx_num);
-
-	if (remote_route_enable(dai)) {
-		rc = taiko_get_channel_map(dai, &taiko_tx_num, taiko_tx_slot,
-					&taiko_rx_num, taiko_rx_slot);
-
-		rc = taiko_set_channel_map(dai, tx_num, taiko_tx_slot, rx_num, taiko_rx_slot);
-
-		rc = slim_set_channel_map(dai, tx_num, tx_slot, rx_num,
-					rx_slot);
-	} else
-		rc = taiko_set_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-
-	return rc;
-}
-
-static int taiko_esxxx_get_channel_map(struct snd_soc_dai *dai,
-				unsigned int *tx_num, unsigned int *tx_slot,
-				unsigned int *rx_num, unsigned int *rx_slot)
-
-{
-	int rc = 0;
-
-	pr_info("%s(): dai_name = %s DAI-ID %d tx_ch %d rx_ch %d\n",
-			__func__, dai->name, dai->id, *tx_num, *rx_num);
-
-	if (remote_route_enable(dai))
-		rc = slim_get_channel_map(dai, tx_num, tx_slot, rx_num,
-					rx_slot);
-	else
-		rc = taiko_get_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-
-	return rc;
-}
-static struct snd_soc_dai_ops taiko_dai_ops = {
-	.startup = taiko_esxxx_startup, /* taiko_startup, */
-	.shutdown = taiko_esxxx_shutdown, /* taiko_shutdown, */
-	.prepare = taiko_prepare,
-	.hw_params = taiko_esxxx_hw_params, /* taiko_hw_params, */
-	.set_sysclk = taiko_set_dai_sysclk,
-	.set_fmt = taiko_set_dai_fmt,
-	.set_channel_map = taiko_esxxx_set_channel_map,
-			/* taiko_set_channel_map, */
-	.get_channel_map = taiko_esxxx_get_channel_map,
-			/* taiko_get_channel_map, */
-};
-#elif defined(CONFIG_SND_SOC_ES325)
-static int taiko_es325_hw_params(struct snd_pcm_substream *substream,
-		struct snd_pcm_hw_params *params,
-		struct snd_soc_dai *dai)
-{
-	int rc = 0;
-	dev_info(dai->dev,"%s: dai_name = %s DAI-ID %x rate %d num_ch %d\n", __func__,
-			dai->name, dai->id, params_rate(params),
-			params_channels(params));
-
-	rc = taiko_hw_params(substream, params, dai);
-
-	if (es325_remote_route_enable(dai))
-		rc = es325_slim_hw_params(substream, params, dai);
-
-	return rc;
-}
-
-#define SLIM_BUGFIX
-static int taiko_es325_set_channel_map(struct snd_soc_dai *dai,
-				unsigned int tx_num, unsigned int *tx_slot,
-				unsigned int rx_num, unsigned int *rx_slot)
-
-{
-#if !defined(SLIM_BUGFIX)
-	unsigned int taiko_tx_num = 0;
-#endif
-	unsigned int taiko_tx_slot[6];
-#if !defined(SLIM_BUGFIX)
-	unsigned int taiko_rx_num = 0;
-#endif
-	unsigned int taiko_rx_slot[6];
-#if defined(SLIM_BUGFIX)
-	unsigned int temp_tx_num = 0;
-	unsigned int temp_rx_num = 0;
-#endif
-	int rc = 0;
-
-	if (es325_remote_route_enable(dai)) {
-#if defined(SLIM_BUGFIX)
-		rc = taiko_get_channel_map(dai, &temp_tx_num, taiko_tx_slot,
-					&temp_rx_num, taiko_rx_slot);
-#else
-		rc = taiko_get_channel_map(dai, &taiko_tx_num, taiko_tx_slot,
-					&taiko_rx_num, taiko_rx_slot);
-#endif
-
-		rc = taiko_set_channel_map(dai, tx_num, taiko_tx_slot, rx_num, taiko_rx_slot);
-
-		rc = es325_slim_set_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-	} else
-		rc = taiko_set_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-
-	return rc;
-}
-
-static int taiko_es325_get_channel_map(struct snd_soc_dai *dai,
-				unsigned int *tx_num, unsigned int *tx_slot,
-				unsigned int *rx_num, unsigned int *rx_slot)
-
-{
-	int rc = 0;
-
-	if (es325_remote_route_enable(dai))
-		rc = es325_slim_get_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-	else
-		rc = taiko_get_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-
-	return rc;
-}
-
-static struct snd_soc_dai_ops taiko_dai_ops = {
-	.startup = taiko_startup,
-	.shutdown = taiko_shutdown,
-	.prepare = taiko_prepare,
-	.hw_params = taiko_es325_hw_params, /* tabla_hw_params, */
-	.set_sysclk = taiko_set_dai_sysclk,
-	.set_fmt = taiko_set_dai_fmt,
-	.set_channel_map = taiko_set_channel_map, /* tabla_set_channel_map, */
-	.get_channel_map = taiko_es325_get_channel_map, /* tabla_get_channel_map, */
-};
-
-static struct snd_soc_dai_ops taiko_es325_dai_ops = {
-	.startup = taiko_startup,
-	.hw_params = taiko_es325_hw_params,
-	.set_channel_map = taiko_es325_set_channel_map,
-	.get_channel_map = taiko_es325_get_channel_map,
-};
-#else
-static struct snd_soc_dai_ops taiko_dai_ops = {
-	.startup = taiko_startup,
-	.shutdown = taiko_shutdown,
-	.prepare = taiko_prepare,
-	.hw_params = taiko_hw_params,
-	.set_sysclk = taiko_set_dai_sysclk,
-	.set_fmt = taiko_set_dai_fmt,
-	.set_channel_map = taiko_set_channel_map,
-	.get_channel_map = taiko_get_channel_map,
-};
-#endif
-
-static struct snd_soc_dai_driver taiko_dai[] = {
-	{
-		.name = "taiko_rx1",
-		.id = AIF1_PB,
-		.playback = {
-			.stream_name = "AIF1 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS_S16_S24_LE,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_tx1",
-		.id = AIF1_CAP,
-		.capture = {
-			.stream_name = "AIF1 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 4,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_rx2",
-		.id = AIF2_PB,
-		.playback = {
-			.stream_name = "AIF2 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS_S16_S24_LE,
-			.rate_min = 8000,
-			.rate_max = 192000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_tx2",
-		.id = AIF2_CAP,
-		.capture = {
-			.stream_name = "AIF2 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 8,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_tx3",
-		.id = AIF3_CAP,
-		.capture = {
-			.stream_name = "AIF3 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 48000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_rx3",
-		.id = AIF3_PB,
-		.playback = {
-			.stream_name = "AIF3 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS_S16_S24_LE,
-			.rate_min = 8000,
-			.rate_max = 192000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_vifeedback",
-		.id = AIF4_VIFEED,
-		.capture = {
-			.stream_name = "VIfeed",
-			.rates = SNDRV_PCM_RATE_48000,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 48000,
-			.rate_min = 48000,
-			.channels_min = 2,
-			.channels_max = 2,
-	 },
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_mad1",
-		.id = AIF4_MAD_TX,
-		.capture = {
-			.stream_name = "AIF4 MAD TX",
-			.rates = SNDRV_PCM_RATE_16000,
-			.formats = TAIKO_FORMATS,
-			.rate_min = 16000,
-			.rate_max = 16000,
-			.channels_min = 1,
-			.channels_max = 1,
-		},
-		.ops = &taiko_dai_ops,
-	},
-#ifdef CONFIG_SND_SOC_ES325
-	{
-		.name = "taiko_es325_rx1",
-		.id = AIF1_PB + ES325_DAI_ID_OFFSET,
-		.playback = {
-			.stream_name = "AIF1 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_es325_dai_ops,
-	},
-	{
-		.name = "taiko_es325_tx1",
-		.id = AIF1_CAP + ES325_DAI_ID_OFFSET,
-		.capture = {
-			.stream_name = "AIF1 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_es325_dai_ops,
-	},
-	{
-		.name = "taiko_es325_rx2",
-		.id = AIF2_PB + ES325_DAI_ID_OFFSET,
-		.playback = {
-			.stream_name = "AIF2 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_es325_dai_ops,
-	},
-#endif
-};
-
-static struct snd_soc_dai_driver taiko_i2s_dai[] = {
-	{
-		.name = "taiko_i2s_rx1",
-		.id = AIF1_PB,
-		.playback = {
-			.stream_name = "AIF1 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 4,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_i2s_tx1",
-		.id = AIF1_CAP,
-		.capture = {
-			.stream_name = "AIF1 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 4,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_i2s_rx2",
-		.id = AIF1_PB,
-		.playback = {
-			.stream_name = "AIF2 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 4,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_i2s_tx2",
-		.id = AIF1_CAP,
-		.capture = {
-			.stream_name = "AIF2 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 4,
-		},
-		.ops = &taiko_dai_ops,
-	},
-};
-
-static int taiko_codec_enable_slim_chmask(struct wcd9xxx_codec_dai_data *dai,
-					  bool up)
-{
-	int ret = 0;
-	struct wcd9xxx_ch *ch;
-
-	if (up) {
-		list_for_each_entry(ch, &dai->wcd9xxx_ch_list, list) {
-			ret = wcd9xxx_get_slave_port(ch->ch_num);
-			if (ret < 0) {
-				pr_err("%s: Invalid slave port ID: %d\n",
-				       __func__, ret);
-				ret = -EINVAL;
-			} else {
-				set_bit(ret, &dai->ch_mask);
-			}
-		}
-	} else {
-		ret = wait_event_timeout(dai->dai_wait, (dai->ch_mask == 0),
-					 msecs_to_jiffies(
-						     TAIKO_SLIM_CLOSE_TIMEOUT));
-		if (!ret) {
-			pr_err("%s: Slim close tx/rx wait timeout\n", __func__);
-			ret = -ETIMEDOUT;
-		} else {
-			ret = 0;
-		}
-	}
-	return ret;
-}
-
-static void taiko_codec_enable_int_port(struct wcd9xxx_codec_dai_data *dai,
-					  struct snd_soc_codec *codec)
-{
-	struct wcd9xxx_ch *ch;
-	int port_num = 0;
-	unsigned short reg = 0;
-	u8 val = 0;
-	if (!dai || !codec) {
-		pr_err("%s: Invalid params\n", __func__);
-		return;
-	}
-	list_for_each_entry(ch, &dai->wcd9xxx_ch_list, list) {
-		if (ch->port >= TAIKO_RX_PORT_START_NUMBER) {
-			port_num = ch->port - TAIKO_RX_PORT_START_NUMBER;
-			reg = TAIKO_SLIM_PGD_PORT_INT_EN0 + (port_num / 8);
-			val = wcd9xxx_interface_reg_read(codec->control_data,
-				reg);
-			if (!(val & (1 << (port_num % 8)))) {
-				val |= (1 << (port_num % 8));
-				wcd9xxx_interface_reg_write(
-					codec->control_data, reg, val);
-				val = wcd9xxx_interface_reg_read(
-					codec->control_data, reg);
-			}
-		} else {
-			port_num = ch->port;
-			reg = TAIKO_SLIM_PGD_PORT_INT_TX_EN0 + (port_num / 8);
-			val = wcd9xxx_interface_reg_read(codec->control_data,
-				reg);
-			if (!(val & (1 << (port_num % 8)))) {
-				val |= (1 << (port_num % 8));
-				wcd9xxx_interface_reg_write(codec->control_data,
-					reg, val);
-				val = wcd9xxx_interface_reg_read(
-					codec->control_data, reg);
-			}
-		}
-	}
-}
-
-static int taiko_codec_enable_slimrx(struct snd_soc_dapm_widget *w,
-				     struct snd_kcontrol *kcontrol,
-				     int event)
-{
-	struct wcd9xxx *core;
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	int ret = 0;
-	struct wcd9xxx_codec_dai_data *dai;
-
-	core = dev_get_drvdata(codec->dev->parent);
-
-	pr_debug("%s: event called! codec name %s num_dai %d\n"
-		"stream name %s event %d\n",
-		__func__, w->codec->name, w->codec->num_dai, w->sname, event);
-
-	/* Execute the callback only if interface type is slimbus */
-	if (taiko_p->intf_type != WCD9XXX_INTERFACE_TYPE_SLIMBUS)
-		return 0;
-
-	dai = &taiko_p->dai[w->shift];
-	pr_debug("%s: w->name %s w->shift %d event %d\n",
-		 __func__, w->name, w->shift, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		dai->bus_down_in_recovery = false;
-		taiko_codec_enable_int_port(dai, codec);
-		(void) taiko_codec_enable_slim_chmask(dai, true);
-#if defined(CONFIG_SND_SOC_ESXXX)
-		ret = remote_cfg_slim_rx(w->shift);
-#elif defined(CONFIG_SND_SOC_ES325)
-		ret = es325_remote_cfg_slim_rx(w->shift);
-#endif
-		ret = wcd9xxx_cfg_slim_sch_rx(core, &dai->wcd9xxx_ch_list,
-					      dai->rate, dai->bit_width,
-					      &dai->grph);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-#if defined(CONFIG_SND_SOC_ESXXX)
-		ret = remote_close_slim_rx(w->shift);
-#elif defined(CONFIG_SND_SOC_ES325)
-		ret = es325_remote_close_slim_rx(w->shift);
-#endif
-		ret = wcd9xxx_close_slim_sch_rx(core, &dai->wcd9xxx_ch_list,
-						dai->grph);
-		if (!dai->bus_down_in_recovery)
-			ret = taiko_codec_enable_slim_chmask(dai, false);
-
-		if (ret < 0) {
-			ret = wcd9xxx_disconnect_port(core,
-						      &dai->wcd9xxx_ch_list,
-						      dai->grph);
-			pr_debug("%s: Disconnect RX port, ret = %d\n",
-				 __func__, ret);
-		}
-		dai->bus_down_in_recovery = false;
-		break;
-	}
-	return ret;
-}
-
-static int taiko_codec_enable_slimvi_feedback(struct snd_soc_dapm_widget *w,
-				struct snd_kcontrol *kcontrol,
-				int event)
-{
-	struct wcd9xxx *core = NULL;
-	struct snd_soc_codec *codec = NULL;
-	struct taiko_priv *taiko_p = NULL;
-	u32 ret = 0;
-	struct wcd9xxx_codec_dai_data *dai = NULL;
-
-	if (!w || !w->codec) {
-		pr_err("%s invalid params\n", __func__);
-		return -EINVAL;
-	}
-	codec = w->codec;
-	taiko_p = snd_soc_codec_get_drvdata(codec);
-	core = dev_get_drvdata(codec->dev->parent);
-
-	pr_debug("%s: event called! codec name %s num_dai %d stream name %s\n",
-		__func__, w->codec->name, w->codec->num_dai, w->sname);
-
-	/* Execute the callback only if interface type is slimbus */
-	if (taiko_p->intf_type != WCD9XXX_INTERFACE_TYPE_SLIMBUS) {
-		pr_err("%s Interface is not correct", __func__);
-		return 0;
-	}
-
-	pr_debug("%s(): w->name %s event %d w->shift %d\n",
-		__func__, w->name, event, w->shift);
-	if (w->shift != AIF4_VIFEED) {
-		pr_err("%s Error in enabling the tx path\n", __func__);
-		ret = -EINVAL;
-		goto out_vi;
-	}
-	dai = &taiko_p->dai[w->shift];
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		/*Enable V&I sensing*/
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_PROT_EN,
-				0x88, 0x88);
-		/*Enable spkr VI clocks*/
-		snd_soc_update_bits(codec,
-		TAIKO_A_CDC_CLK_TX_CLK_EN_B2_CTL, 0xC, 0xC);
-		taiko_codec_enable_int_port(dai, codec);
-		dai->bus_down_in_recovery = false;
-		(void) taiko_codec_enable_slim_chmask(dai, true);
-		ret = wcd9xxx_cfg_slim_sch_tx(core, &dai->wcd9xxx_ch_list,
-					dai->rate, dai->bit_width,
-					&dai->grph);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		ret = wcd9xxx_close_slim_sch_tx(core, &dai->wcd9xxx_ch_list,
-						dai->grph);
-		if (ret)
-			pr_err("%s error in close_slim_sch_tx %d\n",
-				__func__, ret);
-		ret = taiko_codec_enable_slim_chmask(dai, false);
-		if (ret < 0) {
-			ret = wcd9xxx_disconnect_port(core,
-						      &dai->wcd9xxx_ch_list,
-						      dai->grph);
-			pr_debug("%s: Disconnect RX port, ret = %d\n",
-				 __func__, ret);
-		}
-
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_TX_CLK_EN_B2_CTL,
-				0xC, 0x0);
-		/*Disable V&I sensing*/
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_PROT_EN,
-				0x88, 0x00);
-
-		dai->bus_down_in_recovery = false;
-		break;
-	}
-out_vi:
-	return ret;
-}
-
-static int taiko_codec_enable_slimtx(struct snd_soc_dapm_widget *w,
-				     struct snd_kcontrol *kcontrol,
-				     int event)
-{
-	struct wcd9xxx *core;
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	u32  ret = 0;
-	struct wcd9xxx_codec_dai_data *dai;
-
-	core = dev_get_drvdata(codec->dev->parent);
-
-	pr_debug("%s: event called! codec name %s num_dai %d stream name %s\n",
-		__func__, w->codec->name, w->codec->num_dai, w->sname);
-
-	/* Execute the callback only if interface type is slimbus */
-	if (taiko_p->intf_type != WCD9XXX_INTERFACE_TYPE_SLIMBUS)
-		return 0;
-
-	pr_debug("%s(): w->name %s event %d w->shift %d\n",
-		__func__, w->name, event, w->shift);
-
-	dai = &taiko_p->dai[w->shift];
-
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		taiko_codec_enable_int_port(dai, codec);
-		dai->bus_down_in_recovery = false;
-		(void) taiko_codec_enable_slim_chmask(dai, true);
-		ret = wcd9xxx_cfg_slim_sch_tx(core, &dai->wcd9xxx_ch_list,
-					      dai->rate, dai->bit_width,
-					      &dai->grph);
-#if defined(CONFIG_SND_SOC_ESXXX)
-			ret = remote_cfg_slim_tx(w->shift);
-#elif defined(CONFIG_SND_SOC_ES325)
-		ret = es325_remote_cfg_slim_tx(w->shift);
-#endif
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-#if defined(CONFIG_SND_SOC_ESXXX)
-		ret = remote_close_slim_tx(w->shift);
-#elif defined(CONFIG_SND_SOC_ES325)
-		ret = es325_remote_close_slim_tx(w->shift);
-#endif
-		ret = wcd9xxx_close_slim_sch_tx(core, &dai->wcd9xxx_ch_list,
-						dai->grph);
-		if (!dai->bus_down_in_recovery)
-			ret = taiko_codec_enable_slim_chmask(dai, false);
-
-		if (ret < 0) {
-			ret = wcd9xxx_disconnect_port(core,
-						      &dai->wcd9xxx_ch_list,
-						      dai->grph);
-			pr_debug("%s: Disconnect RX port, ret = %d\n",
-				 __func__, ret);
-		}
-
-		dai->bus_down_in_recovery = false;
-		break;
-	}
-	return ret;
-}
-
-static int taiko_codec_enable_ear_pa(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		wcd9xxx_clsh_fsm(codec, &taiko_p->clsh_d,
-						 WCD9XXX_CLSH_STATE_EAR,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-
-		usleep_range(5000, 5000);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		wcd9xxx_clsh_fsm(codec, &taiko_p->clsh_d,
-						 WCD9XXX_CLSH_STATE_EAR,
-						 WCD9XXX_CLSH_REQ_DISABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-		usleep_range(5000, 5000);
-	}
-	return 0;
-}
-
-static int taiko_codec_ear_dac_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		wcd9xxx_clsh_fsm(codec, &taiko_p->clsh_d,
-						 WCD9XXX_CLSH_STATE_EAR,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_PRE_DAC);
-		break;
-	}
-
-	return 0;
-}
-
-static int taiko_codec_dsm_mux_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	u8 reg_val, zoh_mux_val = 0x00;
-
-	pr_debug("%s: event = %d\n", __func__, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		reg_val = snd_soc_read(codec, TAIKO_A_CDC_CONN_CLSH_CTL);
-
-		if ((reg_val & 0x30) == 0x10)
-			zoh_mux_val = 0x04;
-		else if ((reg_val & 0x30) == 0x20)
-			zoh_mux_val = 0x08;
-
-		if (zoh_mux_val != 0x00)
-			snd_soc_update_bits(codec,
-					TAIKO_A_CDC_CONN_CLSH_CTL,
-					0x0C, zoh_mux_val);
-		break;
-
-	case SND_SOC_DAPM_POST_PMD:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CONN_CLSH_CTL,
-							0x0C, 0x00);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_anc_ear(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	int ret = 0;
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		ret = taiko_codec_enable_anc(w, kcontrol, event);
-		msleep(50);
-		snd_soc_update_bits(codec, TAIKO_A_RX_EAR_EN, 0x10, 0x10);
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		ret = taiko_codec_enable_ear_pa(w, kcontrol, event);
-		break;
-	case SND_SOC_DAPM_PRE_PMD:
-		snd_soc_update_bits(codec, TAIKO_A_RX_EAR_EN, 0x10, 0x00);
-		msleep(40);
-		ret |= taiko_codec_enable_anc(w, kcontrol, event);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		ret = taiko_codec_enable_ear_pa(w, kcontrol, event);
-		break;
-	}
-	return ret;
-}
-#if 0
-static int taiko_codec_set_iir_gain(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	int value = 0;
-
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		value = snd_soc_read(codec, TAIKO_A_CDC_IIR1_GAIN_B1_CTL);
-		snd_soc_write(codec, TAIKO_A_CDC_IIR1_GAIN_B1_CTL, value);
-		break;
-	default:
-		pr_info("%s: event = %d not expected\n", __func__, event);
-		break;
-	}
-	return 0;
-}
-#endif
-
-/* Todo: Have seperate dapm widgets for I2S and Slimbus.
- * Might Need to have callbacks registered only for slimbus
- */
-static const struct snd_soc_dapm_widget taiko_dapm_widgets[] = {
-	/*RX stuff */
-	SND_SOC_DAPM_OUTPUT("EAR"),
-
-	SND_SOC_DAPM_PGA_E("EAR PA", TAIKO_A_RX_EAR_EN, 4, 0, NULL, 0,
-			taiko_codec_enable_ear_pa, SND_SOC_DAPM_POST_PMU |
-			SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MIXER_E("DAC1", TAIKO_A_RX_EAR_EN, 6, 0, dac1_switch,
-		ARRAY_SIZE(dac1_switch), taiko_codec_ear_dac_event,
-		SND_SOC_DAPM_PRE_PMU),
-
-	SND_SOC_DAPM_AIF_IN_E("AIF1 PB", "AIF1 Playback", 0, SND_SOC_NOPM,
-				AIF1_PB, 0, taiko_codec_enable_slimrx,
-				SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_AIF_IN_E("AIF2 PB", "AIF2 Playback", 0, SND_SOC_NOPM,
-				AIF2_PB, 0, taiko_codec_enable_slimrx,
-				SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_AIF_IN_E("AIF3 PB", "AIF3 Playback", 0, SND_SOC_NOPM,
-				AIF3_PB, 0, taiko_codec_enable_slimrx,
-				SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX("SLIM RX1 MUX", SND_SOC_NOPM, TAIKO_RX1, 0,
-				&slim_rx_mux[TAIKO_RX1]),
-	SND_SOC_DAPM_MUX("SLIM RX2 MUX", SND_SOC_NOPM, TAIKO_RX2, 0,
-				&slim_rx_mux[TAIKO_RX2]),
-	SND_SOC_DAPM_MUX("SLIM RX3 MUX", SND_SOC_NOPM, TAIKO_RX3, 0,
-				&slim_rx_mux[TAIKO_RX3]),
-	SND_SOC_DAPM_MUX("SLIM RX4 MUX", SND_SOC_NOPM, TAIKO_RX4, 0,
-				&slim_rx_mux[TAIKO_RX4]),
-	SND_SOC_DAPM_MUX("SLIM RX5 MUX", SND_SOC_NOPM, TAIKO_RX5, 0,
-				&slim_rx_mux[TAIKO_RX5]),
-	SND_SOC_DAPM_MUX("SLIM RX6 MUX", SND_SOC_NOPM, TAIKO_RX6, 0,
-				&slim_rx_mux[TAIKO_RX6]),
-	SND_SOC_DAPM_MUX("SLIM RX7 MUX", SND_SOC_NOPM, TAIKO_RX7, 0,
-				&slim_rx_mux[TAIKO_RX7]),
-
-	SND_SOC_DAPM_MIXER("SLIM RX1", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX2", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX3", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX4", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX5", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX6", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX7", SND_SOC_NOPM, 0, 0, NULL, 0),
-
-	/* Headphone */
-	SND_SOC_DAPM_OUTPUT("HEADPHONE"),
-	SND_SOC_DAPM_PGA_E("HPHL", TAIKO_A_RX_HPH_CNP_EN, 5, 0, NULL, 0,
-		taiko_hph_pa_event, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MIXER_E("HPHL DAC", TAIKO_A_RX_HPH_L_DAC_CTL, 7, 0,
-		hphl_switch, ARRAY_SIZE(hphl_switch), taiko_hphl_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_PGA_E("HPHR", TAIKO_A_RX_HPH_CNP_EN, 4, 0, NULL, 0,
-		taiko_hph_pa_event, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU |	SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_DAC_E("HPHR DAC", NULL, TAIKO_A_RX_HPH_R_DAC_CTL, 7, 0,
-		taiko_hphr_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	/* Speaker */
-	SND_SOC_DAPM_OUTPUT("LINEOUT1"),
-	SND_SOC_DAPM_OUTPUT("LINEOUT2"),
-	SND_SOC_DAPM_OUTPUT("LINEOUT3"),
-	SND_SOC_DAPM_OUTPUT("LINEOUT4"),
-	SND_SOC_DAPM_OUTPUT("SPK_OUT"),
-
-	SND_SOC_DAPM_PGA_E("LINEOUT1 PA", TAIKO_A_RX_LINE_CNP_EN, 0, 0, NULL,
-			0, taiko_codec_enable_lineout, SND_SOC_DAPM_PRE_PMU |
-			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_PGA_E("LINEOUT2 PA", TAIKO_A_RX_LINE_CNP_EN, 1, 0, NULL,
-			0, taiko_codec_enable_lineout, SND_SOC_DAPM_PRE_PMU |
-			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_PGA_E("LINEOUT3 PA", TAIKO_A_RX_LINE_CNP_EN, 2, 0, NULL,
-			0, taiko_codec_enable_lineout, SND_SOC_DAPM_PRE_PMU |
-			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_PGA_E("LINEOUT4 PA", TAIKO_A_RX_LINE_CNP_EN, 3, 0, NULL,
-			0, taiko_codec_enable_lineout, SND_SOC_DAPM_PRE_PMU |
-			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_PGA_E("SPK PA", SND_SOC_NOPM, 0, 0 , NULL,
-			   0, taiko_codec_enable_spk_pa,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_DAC_E("LINEOUT1 DAC", NULL, TAIKO_A_RX_LINE_1_DAC_CTL, 7, 0
-		, taiko_lineout_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_DAC_E("LINEOUT2 DAC", NULL, TAIKO_A_RX_LINE_2_DAC_CTL, 7, 0
-		, taiko_lineout_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_DAC_E("LINEOUT3 DAC", NULL, TAIKO_A_RX_LINE_3_DAC_CTL, 7, 0
-		, taiko_lineout_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_SWITCH("LINEOUT3 DAC GROUND", SND_SOC_NOPM, 0, 0,
-				&lineout3_ground_switch),
-	SND_SOC_DAPM_DAC_E("LINEOUT4 DAC", NULL, TAIKO_A_RX_LINE_4_DAC_CTL, 7, 0
-		, taiko_lineout_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_SWITCH("LINEOUT4 DAC GROUND", SND_SOC_NOPM, 0, 0,
-				&lineout4_ground_switch),
-
-	SND_SOC_DAPM_DAC_E("SPK DAC", NULL, SND_SOC_NOPM, 0, 0,
-			   taiko_spk_dac_event,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_SUPPLY("VDD_SPKDRV", SND_SOC_NOPM, 0, 0,
-			    taiko_codec_enable_vdd_spkr,
-			    SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MIXER("RX1 MIX1", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("RX2 MIX1", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("RX7 MIX1", SND_SOC_NOPM, 0, 0, NULL, 0),
-
-	SND_SOC_DAPM_MIXER_E("RX1 MIX2", TAIKO_A_CDC_CLK_RX_B1_CTL, 0, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_MIXER_E("RX2 MIX2", TAIKO_A_CDC_CLK_RX_B1_CTL, 1, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-
-	SND_SOC_DAPM_MIXER_E("RX3 MIX1", TAIKO_A_CDC_CLK_RX_B1_CTL, 2, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_MIXER_E("RX4 MIX1", TAIKO_A_CDC_CLK_RX_B1_CTL, 3, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_MIXER_E("RX5 MIX1", TAIKO_A_CDC_CLK_RX_B1_CTL, 4, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_MIXER_E("RX6 MIX1", TAIKO_A_CDC_CLK_RX_B1_CTL, 5, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_MIXER_E("RX7 MIX2", TAIKO_A_CDC_CLK_RX_B1_CTL, 6, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-
-	SND_SOC_DAPM_MIXER("RX1 CHAIN", TAIKO_A_CDC_RX1_B6_CTL, 5, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("RX2 CHAIN", TAIKO_A_CDC_RX2_B6_CTL, 5, 0, NULL, 0),
-
-	SND_SOC_DAPM_MUX("RX1 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX1 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX1 MIX1 INP3", SND_SOC_NOPM, 0, 0,
-		&rx_mix1_inp3_mux),
-	SND_SOC_DAPM_MUX("RX2 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx2_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX2 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx2_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX3 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx3_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX3 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx3_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX4 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx4_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX4 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx4_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX5 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx5_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX5 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx5_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX6 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx6_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX6 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx6_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX7 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx7_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX7 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx7_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX1 MIX2 INP1", SND_SOC_NOPM, 0, 0,
-		&rx1_mix2_inp1_mux),
-	SND_SOC_DAPM_MUX("RX1 MIX2 INP2", SND_SOC_NOPM, 0, 0,
-		&rx1_mix2_inp2_mux),
-	SND_SOC_DAPM_MUX("RX2 MIX2 INP1", SND_SOC_NOPM, 0, 0,
-		&rx2_mix2_inp1_mux),
-	SND_SOC_DAPM_MUX("RX2 MIX2 INP2", SND_SOC_NOPM, 0, 0,
-		&rx2_mix2_inp2_mux),
-	SND_SOC_DAPM_MUX("RX7 MIX2 INP1", SND_SOC_NOPM, 0, 0,
-		&rx7_mix2_inp1_mux),
-	SND_SOC_DAPM_MUX("RX7 MIX2 INP2", SND_SOC_NOPM, 0, 0,
-		&rx7_mix2_inp2_mux),
-
-	SND_SOC_DAPM_MUX("RDAC5 MUX", SND_SOC_NOPM, 0, 0,
-		&rx_dac5_mux),
-	SND_SOC_DAPM_MUX("RDAC7 MUX", SND_SOC_NOPM, 0, 0,
-		&rx_dac7_mux),
-
-	SND_SOC_DAPM_MUX_E("CLASS_H_DSM MUX", SND_SOC_NOPM, 0, 0,
-		&class_h_dsm_mux, taiko_codec_dsm_mux_event,
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_SUPPLY("RX_BIAS", SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_rx_bias, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_SUPPLY("CDC_I2S_RX_CONN", WCD9XXX_A_CDC_CLK_OTHR_CTL, 5, 0,
-			    NULL, 0),
-
-	/* TX */
-
-	SND_SOC_DAPM_SUPPLY("CDC_CONN", WCD9XXX_A_CDC_CLK_OTHR_CTL, 2, 0, NULL,
-		0),
-
-	SND_SOC_DAPM_SUPPLY("LDO_H", SND_SOC_NOPM, 7, 0,
-			    taiko_codec_enable_ldo_h,
-			    SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-	/*
-	 * DAPM 'LDO_H Standalone' is to be powered by mbhc driver after
-	 * acquring codec_resource lock.
-	 * So call __taiko_codec_enable_ldo_h instead and avoid deadlock.
-	 */
-	SND_SOC_DAPM_SUPPLY("LDO_H Standalone", SND_SOC_NOPM, 7, 0,
-			    __taiko_codec_enable_ldo_h,
-			    SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_SUPPLY("COMP0_CLK", SND_SOC_NOPM, 0, 0,
-		taiko_config_compander, SND_SOC_DAPM_PRE_PMU |
-			SND_SOC_DAPM_PRE_PMD),
-	SND_SOC_DAPM_SUPPLY("COMP1_CLK", SND_SOC_NOPM, 1, 0,
-		taiko_config_compander, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_PRE_PMD),
-	SND_SOC_DAPM_SUPPLY("COMP2_CLK", SND_SOC_NOPM, 2, 0,
-		taiko_config_compander, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_PRE_PMD),
-
-
-	SND_SOC_DAPM_INPUT("AMIC1"),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS1 External", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS1 Internal1", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS1 Internal2", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("Main Mic Bias", 0, 0, 0,
-				0, SND_SOC_DAPM_PRE_PMU |SND_SOC_DAPM_POST_PMU |
-				SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_INPUT("AMIC3"),
-
-	SND_SOC_DAPM_INPUT("AMIC4"),
-#if defined(CONFIG_LDO_SUBMIC_BIAS)
-	SND_SOC_DAPM_MICBIAS_E("Sub Mic Bias", 0, 0, 0,
-				0, SND_SOC_DAPM_PRE_PMU |SND_SOC_DAPM_POST_PMU |
-				SND_SOC_DAPM_POST_PMD),
-#endif
-
-	SND_SOC_DAPM_INPUT("AMIC5"),
-
-	SND_SOC_DAPM_INPUT("AMIC6"),
-
-	SND_SOC_DAPM_MUX_E("DEC1 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 0, 0,
-		&dec1_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC2 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 1, 0,
-		&dec2_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC3 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 2, 0,
-		&dec3_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC4 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 3, 0,
-		&dec4_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC5 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 4, 0,
-		&dec5_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC6 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 5, 0,
-		&dec6_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC7 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 6, 0,
-		&dec7_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC8 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 7, 0,
-		&dec8_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC9 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B2_CTL, 0, 0,
-		&dec9_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC10 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B2_CTL, 1, 0,
-		&dec10_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX("ANC1 MUX", SND_SOC_NOPM, 0, 0, &anc1_mux),
-	SND_SOC_DAPM_MUX("ANC2 MUX", SND_SOC_NOPM, 0, 0, &anc2_mux),
-
-	SND_SOC_DAPM_OUTPUT("ANC HEADPHONE"),
-	SND_SOC_DAPM_PGA_E("ANC HPHL", SND_SOC_NOPM, 5, 0, NULL, 0,
-		taiko_codec_enable_anc_hph,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_PRE_PMD |
-		SND_SOC_DAPM_POST_PMD | SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_PGA_E("ANC HPHR", SND_SOC_NOPM, 4, 0, NULL, 0,
-		taiko_codec_enable_anc_hph, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_OUTPUT("ANC EAR"),
-	SND_SOC_DAPM_PGA_E("ANC EAR PA", SND_SOC_NOPM, 0, 0, NULL, 0,
-		taiko_codec_enable_anc_ear,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_PRE_PMD |
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MUX("ANC1 FB MUX", SND_SOC_NOPM, 0, 0, &anc1_fb_mux),
-
-	SND_SOC_DAPM_INPUT("AMIC2"),
-	SND_SOC_DAPM_MICBIAS_E(DAPM_MICBIAS2_EXTERNAL_STANDALONE, SND_SOC_NOPM,
-			       7, 0, taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS2 External", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS2 Internal1", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU |
-			       SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS2 Internal2", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS2 Internal3", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E(DAPM_MICBIAS3_EXTERNAL_STANDALONE, SND_SOC_NOPM,
-			       7, 0, taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS3 External", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS3 Internal1", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU |
-			       SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS3 Internal2", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU |
-			       SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS4 External", SND_SOC_NOPM, 7,
-			       0, taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("Ear Mic Bias", 0, 0, 0,
-				0, SND_SOC_DAPM_PRE_PMU |SND_SOC_DAPM_POST_PMU |
-				SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_AIF_OUT_E("AIF1 CAP", "AIF1 Capture", 0, SND_SOC_NOPM,
-		AIF1_CAP, 0, taiko_codec_enable_slimtx,
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_AIF_OUT_E("AIF2 CAP", "AIF2 Capture", 0, SND_SOC_NOPM,
-		AIF2_CAP, 0, taiko_codec_enable_slimtx,
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_AIF_OUT_E("AIF3 CAP", "AIF3 Capture", 0, SND_SOC_NOPM,
-		AIF3_CAP, 0, taiko_codec_enable_slimtx,
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_AIF_OUT_E("AIF4 VI", "VIfeed", 0, SND_SOC_NOPM,
-		AIF4_VIFEED, 0, taiko_codec_enable_slimvi_feedback,
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_AIF_OUT_E("AIF4 MAD", "AIF4 MAD TX", 0,
-			       SND_SOC_NOPM, 0, 0,
-			       taiko_codec_enable_mad, SND_SOC_DAPM_PRE_PMU),
-	SND_SOC_DAPM_SWITCH("MADONOFF", SND_SOC_NOPM, 0, 0,
-			    &aif4_mad_switch),
-	SND_SOC_DAPM_INPUT("MADINPUT"),
-
-	SND_SOC_DAPM_MIXER("AIF1_CAP Mixer", SND_SOC_NOPM, AIF1_CAP, 0,
-		aif_cap_mixer, ARRAY_SIZE(aif_cap_mixer)),
-
-	SND_SOC_DAPM_MIXER("AIF2_CAP Mixer", SND_SOC_NOPM, AIF2_CAP, 0,
-		aif_cap_mixer, ARRAY_SIZE(aif_cap_mixer)),
-
-	SND_SOC_DAPM_MIXER("AIF3_CAP Mixer", SND_SOC_NOPM, AIF3_CAP, 0,
-		aif_cap_mixer, ARRAY_SIZE(aif_cap_mixer)),
-
-	SND_SOC_DAPM_MUX("SLIM TX1 MUX", SND_SOC_NOPM, TAIKO_TX1, 0,
-		&sb_tx1_mux),
-	SND_SOC_DAPM_MUX("SLIM TX2 MUX", SND_SOC_NOPM, TAIKO_TX2, 0,
-		&sb_tx2_mux),
-	SND_SOC_DAPM_MUX("SLIM TX3 MUX", SND_SOC_NOPM, TAIKO_TX3, 0,
-		&sb_tx3_mux),
-	SND_SOC_DAPM_MUX("SLIM TX4 MUX", SND_SOC_NOPM, TAIKO_TX4, 0,
-		&sb_tx4_mux),
-	SND_SOC_DAPM_MUX("SLIM TX5 MUX", SND_SOC_NOPM, TAIKO_TX5, 0,
-		&sb_tx5_mux),
-	SND_SOC_DAPM_MUX("SLIM TX6 MUX", SND_SOC_NOPM, TAIKO_TX6, 0,
-		&sb_tx6_mux),
-	SND_SOC_DAPM_MUX("SLIM TX7 MUX", SND_SOC_NOPM, TAIKO_TX7, 0,
-		&sb_tx7_mux),
-	SND_SOC_DAPM_MUX("SLIM TX8 MUX", SND_SOC_NOPM, TAIKO_TX8, 0,
-		&sb_tx8_mux),
-	SND_SOC_DAPM_MUX("SLIM TX9 MUX", SND_SOC_NOPM, TAIKO_TX9, 0,
-		&sb_tx9_mux),
-	SND_SOC_DAPM_MUX("SLIM TX10 MUX", SND_SOC_NOPM, TAIKO_TX10, 0,
-		&sb_tx10_mux),
-
-	/* Digital Mic Inputs */
-	SND_SOC_DAPM_ADC_E("DMIC1", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_ADC_E("DMIC2", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_ADC_E("DMIC3", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_ADC_E("DMIC4", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_ADC_E("DMIC5", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("DMIC6", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	/* Sidetone */
-	SND_SOC_DAPM_MUX("IIR1 INP1 MUX", SND_SOC_NOPM, 0, 0, &iir1_inp1_mux),
-	SND_SOC_DAPM_MIXER("IIR1", TAIKO_A_CDC_CLK_SD_CTL, 0, 0, NULL, 0),
-
-	SND_SOC_DAPM_MUX("IIR2 INP1 MUX", SND_SOC_NOPM, 0, 0, &iir2_inp1_mux),
-	SND_SOC_DAPM_MIXER("IIR2", TAIKO_A_CDC_CLK_SD_CTL, 1, 0, NULL, 0),
-
-	/* AUX PGA */
-	SND_SOC_DAPM_ADC_E("AUX_PGA_Left", NULL, TAIKO_A_RX_AUX_SW_CTL, 7, 0,
-		taiko_codec_enable_aux_pga, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_ADC_E("AUX_PGA_Right", NULL, TAIKO_A_RX_AUX_SW_CTL, 6, 0,
-		taiko_codec_enable_aux_pga, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	/* Lineout, ear and HPH PA Mixers */
-
-	SND_SOC_DAPM_MIXER("EAR_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		ear_pa_mix, ARRAY_SIZE(ear_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("HPHL_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		hphl_pa_mix, ARRAY_SIZE(hphl_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("HPHR_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		hphr_pa_mix, ARRAY_SIZE(hphr_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("LINEOUT1_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		lineout1_pa_mix, ARRAY_SIZE(lineout1_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("LINEOUT2_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		lineout2_pa_mix, ARRAY_SIZE(lineout2_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("LINEOUT3_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		lineout3_pa_mix, ARRAY_SIZE(lineout3_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("LINEOUT4_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		lineout4_pa_mix, ARRAY_SIZE(lineout4_pa_mix)),
-	SND_SOC_DAPM_SWITCH("VIONOFF", SND_SOC_NOPM, 0, 0,
-			    &aif4_vi_switch),
-	SND_SOC_DAPM_INPUT("VIINPUT"),
-
-};
-
-static irqreturn_t taiko_slimbus_irq(int irq, void *data)
-{
-	struct taiko_priv *priv = data;
-	struct snd_soc_codec *codec = priv->codec;
-	unsigned long status = 0;
-	int i, j, port_id, k;
-	u32 bit;
-	u8 val, int_val = 0;
-	bool tx, cleared;
-	unsigned short reg = 0;
-
-	for (i = TAIKO_SLIM_PGD_PORT_INT_STATUS_RX_0, j = 0;
-	     i <= TAIKO_SLIM_PGD_PORT_INT_STATUS_TX_1; i++, j++) {
-		val = wcd9xxx_interface_reg_read(codec->control_data, i);
-		status |= ((u32)val << (8 * j));
-	}
-
-	for_each_set_bit(j, &status, 32) {
-		tx = (j >= 16 ? true : false);
-		port_id = (tx ? j - 16 : j);
-		val = wcd9xxx_interface_reg_read(codec->control_data,
-					TAIKO_SLIM_PGD_PORT_INT_RX_SOURCE0 + j);
-		if (val & TAIKO_SLIM_IRQ_OVERFLOW)
-			pr_err_ratelimited(
-			   "%s: overflow error on %s port %d, value %x\n",
-			   __func__, (tx ? "TX" : "RX"), port_id, val);
-		if (val & TAIKO_SLIM_IRQ_UNDERFLOW)
-			pr_err_ratelimited(
-			   "%s: underflow error on %s port %d, value %x\n",
-			   __func__, (tx ? "TX" : "RX"), port_id, val);
-		if ((val & TAIKO_SLIM_IRQ_OVERFLOW) ||
-			(val & TAIKO_SLIM_IRQ_UNDERFLOW)) {
-			if (!tx)
-				reg = TAIKO_SLIM_PGD_PORT_INT_EN0 +
-					(port_id / 8);
-			else
-				reg = TAIKO_SLIM_PGD_PORT_INT_TX_EN0 +
-					(port_id / 8);
-			int_val = wcd9xxx_interface_reg_read(
-				codec->control_data, reg);
-			if (int_val & (1 << (port_id % 8))) {
-				int_val = int_val ^ (1 << (port_id % 8));
-				wcd9xxx_interface_reg_write(codec->control_data,
-					reg, int_val);
-			}
-		}
-		if (val & TAIKO_SLIM_IRQ_PORT_CLOSED) {
-			/*
-			 * INT SOURCE register starts from RX to TX
-			 * but port number in the ch_mask is in opposite way
-			 */
-			bit = (tx ? j - 16 : j + 16);
-			pr_debug("%s: %s port %d closed value %x, bit %u\n",
-				 __func__, (tx ? "TX" : "RX"), port_id, val,
-				 bit);
-			for (k = 0, cleared = false; k < NUM_CODEC_DAIS; k++) {
-				pr_debug("%s: priv->dai[%d].ch_mask = 0x%lx\n",
-					 __func__, k, priv->dai[k].ch_mask);
-				if (test_and_clear_bit(bit,
-						       &priv->dai[k].ch_mask)) {
-					cleared = true;
-					if (!priv->dai[k].ch_mask)
-						wake_up(&priv->dai[k].dai_wait);
-					/*
-					 * There are cases when multiple DAIs
-					 * might be using the same slimbus
-					 * channel. Hence don't break here.
-					 */
-				}
-			}
-			WARN(!cleared,
-			     "Couldn't find slimbus %s port %d for closing\n",
-			     (tx ? "TX" : "RX"), port_id);
-		}
-		wcd9xxx_interface_reg_write(codec->control_data,
-					    TAIKO_SLIM_PGD_PORT_INT_CLR_RX_0 +
-					    (j / 8),
-					    1 << (j % 8));
-	}
-
-	return IRQ_HANDLED;
-}
-
-static int taiko_handle_pdata(struct taiko_priv *taiko)
-{
-	struct snd_soc_codec *codec = taiko->codec;
-	struct wcd9xxx_pdata *pdata = taiko->resmgr.pdata;
-	int k1, k2, k3, rc = 0;
-	u8 leg_mode, txfe_bypass, txfe_buff, flag;
-	u8 i = 0, j = 0;
-	u8 val_txfe = 0, value = 0;
-	u8 dmic_sample_rate_value = 0;
-	u8 dmic_b1_ctl_value = 0, dmic_b2_ctl_value = 0;
-	u8 anc_ctl_value = 0;
-
-	if (!pdata) {
-		pr_err("%s: NULL pdata\n", __func__);
-		rc = -ENODEV;
-		goto done;
-	}
-
-	leg_mode = pdata->amic_settings.legacy_mode;
-	txfe_bypass = pdata->amic_settings.txfe_enable;
-	txfe_buff = pdata->amic_settings.txfe_buff;
-	flag = pdata->amic_settings.use_pdata;
-
-	/* Make sure settings are correct */
-	if ((pdata->micbias.ldoh_v > WCD9XXX_LDOH_3P0_V) ||
-	    (pdata->micbias.bias1_cfilt_sel > WCD9XXX_CFILT3_SEL) ||
-	    (pdata->micbias.bias2_cfilt_sel > WCD9XXX_CFILT3_SEL) ||
-	    (pdata->micbias.bias3_cfilt_sel > WCD9XXX_CFILT3_SEL) ||
-	    (pdata->micbias.bias4_cfilt_sel > WCD9XXX_CFILT3_SEL)) {
-		rc = -EINVAL;
-		goto done;
-	}
-	/* figure out k value */
-	k1 = wcd9xxx_resmgr_get_k_val(&taiko->resmgr, pdata->micbias.cfilt1_mv);
-	k2 = wcd9xxx_resmgr_get_k_val(&taiko->resmgr, pdata->micbias.cfilt2_mv);
-	k3 = wcd9xxx_resmgr_get_k_val(&taiko->resmgr, pdata->micbias.cfilt3_mv);
-
-	if (IS_ERR_VALUE(k1) || IS_ERR_VALUE(k2) || IS_ERR_VALUE(k3)) {
-		rc = -EINVAL;
-		goto done;
-	}
-	/* Set voltage level and always use LDO */
-	snd_soc_update_bits(codec, TAIKO_A_LDO_H_MODE_1, 0x0C,
-			    (pdata->micbias.ldoh_v << 2));
-
-	snd_soc_update_bits(codec, TAIKO_A_MICB_CFILT_1_VAL, 0xFC, (k1 << 2));
-	snd_soc_update_bits(codec, TAIKO_A_MICB_CFILT_2_VAL, 0xFC, (k2 << 2));
-	snd_soc_update_bits(codec, TAIKO_A_MICB_CFILT_3_VAL, 0xFC, (k3 << 2));
-
-	snd_soc_update_bits(codec, TAIKO_A_MICB_1_CTL, 0x60,
-			    (pdata->micbias.bias1_cfilt_sel << 5));
-	snd_soc_update_bits(codec, TAIKO_A_MICB_2_CTL, 0x60,
-			    (pdata->micbias.bias2_cfilt_sel << 5));
-	snd_soc_update_bits(codec, TAIKO_A_MICB_3_CTL, 0x60,
-			    (pdata->micbias.bias3_cfilt_sel << 5));
-	snd_soc_update_bits(codec, taiko->resmgr.reg_addr->micb_4_ctl, 0x60,
-			    (pdata->micbias.bias4_cfilt_sel << 5));
-
-	for (i = 0; i < 6; j++, i += 2) {
-		if (flag & (0x01 << i)) {
-			value = (leg_mode & (0x01 << i)) ? 0x10 : 0x00;
-			val_txfe = (txfe_bypass & (0x01 << i)) ? 0x20 : 0x00;
-			val_txfe = val_txfe |
-				((txfe_buff & (0x01 << i)) ? 0x10 : 0x00);
-			snd_soc_update_bits(codec, TAIKO_A_TX_1_2_EN + j * 10,
-				0x10, value);
-			snd_soc_update_bits(codec,
-				TAIKO_A_TX_1_2_TEST_EN + j * 10,
-				0x30, val_txfe);
-		}
-		if (flag & (0x01 << (i + 1))) {
-			value = (leg_mode & (0x01 << (i + 1))) ? 0x01 : 0x00;
-			val_txfe = (txfe_bypass &
-					(0x01 << (i + 1))) ? 0x02 : 0x00;
-			val_txfe |= (txfe_buff &
-					(0x01 << (i + 1))) ? 0x01 : 0x00;
-			snd_soc_update_bits(codec, TAIKO_A_TX_1_2_EN + j * 10,
-				0x01, value);
-			snd_soc_update_bits(codec,
-				TAIKO_A_TX_1_2_TEST_EN + j * 10,
-				0x03, val_txfe);
-		}
-	}
-	if (flag & 0x40) {
-		value = (leg_mode & 0x40) ? 0x10 : 0x00;
-		value = value | ((txfe_bypass & 0x40) ? 0x02 : 0x00);
-		value = value | ((txfe_buff & 0x40) ? 0x01 : 0x00);
-		snd_soc_update_bits(codec, TAIKO_A_TX_7_MBHC_EN,
-			0x13, value);
-	}
-
-	if (pdata->ocp.use_pdata) {
-		/* not defined in CODEC specification */
-		if (pdata->ocp.hph_ocp_limit == 1 ||
-			pdata->ocp.hph_ocp_limit == 5) {
-			rc = -EINVAL;
-			goto done;
-		}
-		snd_soc_update_bits(codec, TAIKO_A_RX_COM_OCP_CTL,
-			0x0F, pdata->ocp.num_attempts);
-		snd_soc_write(codec, TAIKO_A_RX_COM_OCP_COUNT,
-			((pdata->ocp.run_time << 4) | pdata->ocp.wait_time));
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_OCP_CTL,
-			0xE0, (pdata->ocp.hph_ocp_limit << 5));
-	}
-
-	for (i = 0; i < ARRAY_SIZE(pdata->regulator); i++) {
-		if (pdata->regulator[i].name &&
-		    !strncmp(pdata->regulator[i].name, "CDC_VDDA_RX", 11)) {
-			if (pdata->regulator[i].min_uV == 1800000 &&
-			    pdata->regulator[i].max_uV == 1800000) {
-				snd_soc_write(codec, TAIKO_A_BIAS_REF_CTL,
-					      0x1C);
-			} else if (pdata->regulator[i].min_uV == 2200000 &&
-				   pdata->regulator[i].max_uV == 2200000) {
-				snd_soc_write(codec, TAIKO_A_BIAS_REF_CTL,
-					      0x1E);
-			} else {
-				pr_err("%s: unsupported CDC_VDDA_RX voltage\n"
-				       "min %d, max %d\n", __func__,
-				       pdata->regulator[i].min_uV,
-				       pdata->regulator[i].max_uV);
-				rc = -EINVAL;
-			}
-			break;
-		}
-	}
-
-	/* Set micbias capless mode with tail current */
-	value = (pdata->micbias.bias1_cap_mode == MICBIAS_EXT_BYP_CAP ?
-		 0x00 : 0x16);
-	snd_soc_update_bits(codec, TAIKO_A_MICB_1_CTL, 0x1E, value);
-	value = (pdata->micbias.bias2_cap_mode == MICBIAS_EXT_BYP_CAP ?
-		 0x00 : 0x16);
-	snd_soc_update_bits(codec, TAIKO_A_MICB_2_CTL, 0x1E, value);
-	value = (pdata->micbias.bias3_cap_mode == MICBIAS_EXT_BYP_CAP ?
-		 0x00 : 0x16);
-	snd_soc_update_bits(codec, TAIKO_A_MICB_3_CTL, 0x1E, value);
-	value = (pdata->micbias.bias4_cap_mode == MICBIAS_EXT_BYP_CAP ?
-		 0x00 : 0x16);
-	snd_soc_update_bits(codec, TAIKO_A_MICB_4_CTL, 0x1E, value);
-
-	/* Set the DMIC sample rate */
-	if (pdata->mclk_rate == TAIKO_MCLK_CLK_9P6MHZ) {
-		switch (pdata->dmic_sample_rate) {
-		case WCD9XXX_DMIC_SAMPLE_RATE_2P4MHZ:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_4;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_4;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_4;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_OFF;
-			break;
-		case WCD9XXX_DMIC_SAMPLE_RATE_4P8MHZ:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_2;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_2;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_2;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_ON;
-			break;
-		case WCD9XXX_DMIC_SAMPLE_RATE_3P2MHZ:
-		case WCD9XXX_DMIC_SAMPLE_RATE_UNDEFINED:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_3;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_3;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_3;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_OFF;
-			break;
-		default:
-			pr_err("%s Invalid sample rate %d for mclk %d\n",
-			__func__, pdata->dmic_sample_rate, pdata->mclk_rate);
-			rc = -EINVAL;
-			goto done;
-			break;
-		}
-	} else if (pdata->mclk_rate == TAIKO_MCLK_CLK_12P288MHZ) {
-		switch (pdata->dmic_sample_rate) {
-		case WCD9XXX_DMIC_SAMPLE_RATE_3P072MHZ:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_4;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_4;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_4;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_OFF;
-			break;
-		case WCD9XXX_DMIC_SAMPLE_RATE_6P144MHZ:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_2;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_2;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_2;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_ON;
-			break;
-		case WCD9XXX_DMIC_SAMPLE_RATE_4P096MHZ:
-		case WCD9XXX_DMIC_SAMPLE_RATE_UNDEFINED:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_3;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_3;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_3;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_OFF;
-			break;
-		default:
-			pr_err("%s Invalid sample rate %d for mclk %d\n",
-			__func__, pdata->dmic_sample_rate, pdata->mclk_rate);
-			rc = -EINVAL;
-			goto done;
-			break;
-		}
-	} else {
-		pr_err("%s MCLK is not set!\n", __func__);
-		rc = -EINVAL;
-		goto done;
-	}
-
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX1_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX2_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX3_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX4_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX5_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX6_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX7_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX8_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX9_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX10_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_DMIC_B1_CTL,
-		0xEE, dmic_b1_ctl_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_DMIC_B2_CTL,
-		0xE, dmic_b2_ctl_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_ANC1_B2_CTL,
-		0x1, anc_ctl_value);
-
-done:
-	return rc;
-}
-
-static const struct wcd9xxx_reg_mask_val taiko_reg_defaults[] = {
-
-	/* set MCLk to 9.6 */
-	TAIKO_REG_VAL(TAIKO_A_CHIP_CTL, 0x02),
-	TAIKO_REG_VAL(TAIKO_A_CDC_CLK_POWER_CTL, 0x03),
-
-	/* EAR PA deafults  */
-	TAIKO_REG_VAL(TAIKO_A_RX_EAR_CMBUFF, 0x05),
-
-	/* RX deafults */
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX1_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX2_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX3_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX4_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX5_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX6_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX7_B5_CTL, 0x78),
-
-	/* RX1 and RX2 defaults */
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX1_B6_CTL, 0xA0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX2_B6_CTL, 0xA0),
-
-	/* RX3 to RX7 defaults */
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX3_B6_CTL, 0x80),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX4_B6_CTL, 0x80),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX5_B6_CTL, 0x80),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX6_B6_CTL, 0x80),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX7_B6_CTL, 0x80),
-
-	/* MAD registers */
-	TAIKO_REG_VAL(TAIKO_A_MAD_ANA_CTRL, 0xF1),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_MAIN_CTL_1, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_MAIN_CTL_2, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_1, 0x00),
-	/* Set SAMPLE_TX_EN bit */
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_2, 0x03),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_3, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_4, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_5, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_6, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_7, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_8, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_IIR_CTL_PTR, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_IIR_CTL_VAL, 0x40),
-	TAIKO_REG_VAL(TAIKO_A_CDC_DEBUG_B7_CTL, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_CLK_OTHR_RESET_B1_CTL, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_CLK_OTHR_CTL, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_CONN_MAD, 0x01),
-#if !defined(CONFIG_MACH_VIENNA_LTE) && !defined(CONFIG_MACH_LT03_LTE) && !defined(CONFIG_MACH_PICASSO_LTE) && !defined(CONFIG_SEC_H_PROJECT) && !defined(CONFIG_SEC_FRESCO_PROJECT) && !defined(CONFIG_MACH_KS01EUR)
-	/* Set HPH Path to low power mode */
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_BIAS_PA, 0x55),
-#endif
-	/* BUCK default */
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_CTRL_CCL_4, 0x51),
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_CTRL_CCL_1, 0x5B),
-};
-
-static const struct wcd9xxx_reg_mask_val taiko_1_0_reg_defaults[] = {
-	/*
-	 * The following only need to be written for Taiko 1.0 parts.
-	 * Taiko 2.0 will have appropriate defaults for these registers.
-	 */
-
-	/* Required defaults for class H operation */
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_CHOP_CTL, 0xF4),
-	TAIKO_REG_VAL(TAIKO_A_BIAS_CURR_CTL_2, 0x08),
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_CTRL_CCL_3, 0x60),
-
-	/* Choose max non-overlap time for NCP */
-	TAIKO_REG_VAL(TAIKO_A_NCP_CLK, 0xFC),
-	/* Use 25mV/50mV for deltap/m to reduce ripple */
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_CTRL_VCL_1, 0x08),
-	/*
-	 * Set DISABLE_MODE_SEL<1:0> to 0b10 (disable PWM in auto mode).
-	 * Note that the other bits of this register will be changed during
-	 * Rx PA bring up.
-	 */
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_MODE_3, 0xCE),
-	/*Reduce EAR DAC bias to 70% */
-	TAIKO_REG_VAL(TAIKO_A_RX_EAR_BIAS_PA, 0x76),
-	/* Reduce LINE DAC bias to 70% */
-#if !defined(CONFIG_MACH_VIENNA_LTE) && !defined(CONFIG_MACH_LT03_LTE) && !defined(CONFIG_MACH_PICASSO_LTE) && !defined(CONFIG_SEC_H_PROJECT) && !defined(CONFIG_SEC_FRESCO_PROJECT) && !defined(CONFIG_MACH_KS01EUR)
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_BIAS_PA, 0x78),
-#else
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_BIAS_PA, 0x7A),
-	/* Reduce HPH DAC bias to 70% */
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_BIAS_PA, 0x7A),
-#endif
-
-	/*
-	 * There is a diode to pull down the micbias while doing
-	 * insertion detection.  This diode can cause leakage.
-	 * Set bit 0 to 1 to prevent leakage.
-	 * Setting this bit of micbias 2 prevents leakage for all other micbias.
-	 */
-	TAIKO_REG_VAL(TAIKO_A_MICB_2_MBHC, 0x41),
-
-	/* Disable TX7 internal biasing path which can cause leakage */
-	TAIKO_REG_VAL(TAIKO_A_TX_SUP_SWITCH_CTRL_1, 0xBF),
-	/* Enable MICB 4 VDDIO switch to prevent leakage */
-	TAIKO_REG_VAL(TAIKO_A_MICB_4_MBHC, 0x81),
-
-	/* Close leakage on the spkdrv */
-	TAIKO_REG_VAL(TAIKO_A_SPKR_DRV_DBG_PWRSTG, 0x24),
-};
-
-/*
- * Don't update TAIKO_A_CHIP_CTL, TAIKO_A_BUCK_CTRL_CCL_1 and
- * TAIKO_A_RX_EAR_CMBUFF as those are updated in taiko_reg_defaults
- */
-static const struct wcd9xxx_reg_mask_val taiko_2_0_reg_defaults[] = {
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_1_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_2_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_1_2_ADC_IB, 0x44),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_3_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_4_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_3_4_ADC_IB, 0x44),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_5_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_6_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_5_6_ADC_IB, 0x44),
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_MODE_3, 0xCE),
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_CTRL_VCL_1, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_BUCK_CTRL_CCL_4, 0x51),
-	TAIKO_REG_VAL(TAIKO_A_NCP_DTEST, 0x10),
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_CHOP_CTL, 0xA4),
-#if !defined(CONFIG_MACH_VIENNA_LTE) && !defined(CONFIG_MACH_LT03_LTE) && !defined(CONFIG_MACH_PICASSO_LTE) && !defined(CONFIG_SEC_H_PROJECT) && !defined(CONFIG_SEC_FRESCO_PROJECT) && !defined(CONFIG_MACH_KS01EUR)
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_OCP_CTL, 0x6B),
-#else
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_BIAS_PA, 0x7A),
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_OCP_CTL, 0x6B),
-#endif
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_CNP_WG_CTL, 0xDA),
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_CNP_WG_TIME, 0x15),
-	TAIKO_REG_VAL(TAIKO_A_RX_EAR_BIAS_PA, 0x76),
-	TAIKO_REG_VAL(TAIKO_A_RX_EAR_CNP, 0xC0),
-#if !defined(CONFIG_MACH_VIENNA_LTE) && !defined(CONFIG_MACH_LT03_LTE) && !defined(CONFIG_MACH_PICASSO_LTE) && !defined(CONFIG_SEC_H_PROJECT) && !defined(CONFIG_SEC_FRESCO_PROJECT) && !defined(CONFIG_MACH_KS01EUR)
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_BIAS_PA, 0x78),
-#else
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_BIAS_PA, 0x7A),
-#endif
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_1_TEST, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_2_TEST, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_3_TEST, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_4_TEST, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_SPKR_DRV_OCP_CTL, 0x97),
-	TAIKO_REG_VAL(TAIKO_A_SPKR_DRV_CLIP_DET, 0x1),
-	TAIKO_REG_VAL(TAIKO_A_SPKR_DRV_IEC, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX1_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX2_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX3_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX4_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX5_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX6_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX7_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX8_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX9_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX10_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX1_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX2_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX3_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX4_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX5_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX6_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX7_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_VBAT_GAIN_UPD_MON, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_PA_RAMP_B1_CTL, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_PA_RAMP_B2_CTL, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_PA_RAMP_B3_CTL, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_PA_RAMP_B4_CTL, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_SPKR_CLIPDET_B1_CTL, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_COMP0_B4_CTL, 0x37),
-	TAIKO_REG_VAL(TAIKO_A_CDC_COMP0_B5_CTL, 0x7f),
-	TAIKO_REG_VAL(TAIKO_A_CDC_COMP0_B5_CTL, 0x7f),
-};
-
-static void taiko_update_reg_defaults(struct snd_soc_codec *codec)
-{
-	u32 i;
-	struct wcd9xxx *taiko_core = dev_get_drvdata(codec->dev->parent);
-
-	for (i = 0; i < ARRAY_SIZE(taiko_reg_defaults); i++)
-		snd_soc_write(codec, taiko_reg_defaults[i].reg,
-			      taiko_reg_defaults[i].val);
-
-	if (TAIKO_IS_1_0(taiko_core->version)) {
-		for (i = 0; i < ARRAY_SIZE(taiko_1_0_reg_defaults); i++)
-			snd_soc_write(codec, taiko_1_0_reg_defaults[i].reg,
-				      taiko_1_0_reg_defaults[i].val);
-		if (spkr_drv_wrnd == 1)
-			snd_soc_write(codec, TAIKO_A_SPKR_DRV_EN, 0xEF);
-	} else {
-		for (i = 0; i < ARRAY_SIZE(taiko_2_0_reg_defaults); i++)
-			snd_soc_write(codec, taiko_2_0_reg_defaults[i].reg,
-				      taiko_2_0_reg_defaults[i].val);
-		spkr_drv_wrnd = -1;
-	}
-}
-
-static const struct wcd9xxx_reg_mask_val taiko_codec_reg_init_val[] = {
-	/* Initialize current threshold to 350MA
-	 * number of wait and run cycles to 4096
-	 */
-	{TAIKO_A_RX_HPH_OCP_CTL, 0xE1, 0x61},
-	{TAIKO_A_RX_COM_OCP_COUNT, 0xFF, 0xFF},
-	{TAIKO_A_RX_HPH_L_TEST, 0x01, 0x01},
-	{TAIKO_A_RX_HPH_R_TEST, 0x01, 0x01},
-
-	/* Initialize gain registers to use register gain */
-	{TAIKO_A_RX_HPH_L_GAIN, 0x20, 0x20},
-	{TAIKO_A_RX_HPH_R_GAIN, 0x20, 0x20},
-	{TAIKO_A_RX_LINE_1_GAIN, 0x20, 0x20},
-	{TAIKO_A_RX_LINE_2_GAIN, 0x20, 0x20},
-	{TAIKO_A_RX_LINE_3_GAIN, 0x20, 0x20},
-	{TAIKO_A_RX_LINE_4_GAIN, 0x20, 0x20},
-	{TAIKO_A_SPKR_DRV_GAIN, 0x04, 0x04},
-
-	/* Use 16 bit sample size for TX1 to TX6 */
-	{TAIKO_A_CDC_CONN_TX_SB_B1_CTL, 0x30, 0x20},
-	{TAIKO_A_CDC_CONN_TX_SB_B2_CTL, 0x30, 0x20},
-	{TAIKO_A_CDC_CONN_TX_SB_B3_CTL, 0x30, 0x20},
-	{TAIKO_A_CDC_CONN_TX_SB_B4_CTL, 0x30, 0x20},
-	{TAIKO_A_CDC_CONN_TX_SB_B5_CTL, 0x30, 0x20},
-	{TAIKO_A_CDC_CONN_TX_SB_B6_CTL, 0x30, 0x20},
-
-	/* Use 16 bit sample size for TX7 to TX10 */
-	{TAIKO_A_CDC_CONN_TX_SB_B7_CTL, 0x60, 0x40},
-	{TAIKO_A_CDC_CONN_TX_SB_B8_CTL, 0x60, 0x40},
-	{TAIKO_A_CDC_CONN_TX_SB_B9_CTL, 0x60, 0x40},
-	{TAIKO_A_CDC_CONN_TX_SB_B10_CTL, 0x60, 0x40},
-
-	/*enable HPF filter for TX paths */
-	{TAIKO_A_CDC_TX1_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX2_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX3_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX4_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX5_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX6_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX7_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX8_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX9_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX10_MUX_CTL, 0x8, 0x0},
-
-	/* Compander zone selection */
-	{TAIKO_A_CDC_COMP0_B4_CTL, 0x3F, 0x37},
-	{TAIKO_A_CDC_COMP1_B4_CTL, 0x3F, 0x37},
-	{TAIKO_A_CDC_COMP2_B4_CTL, 0x3F, 0x37},
-	{TAIKO_A_CDC_COMP0_B5_CTL, 0x7F, 0x7F},
-	{TAIKO_A_CDC_COMP1_B5_CTL, 0x7F, 0x7F},
-	{TAIKO_A_CDC_COMP2_B5_CTL, 0x7F, 0x7F},
-
-	/*
-	 * Setup wavegen timer to 20msec and disable chopper
-	 * as default. This corresponds to Compander OFF
-	 */
-	{TAIKO_A_RX_HPH_CNP_WG_CTL, 0xFF, 0xDB},
-	{TAIKO_A_RX_HPH_CNP_WG_TIME, 0xFF, 0x58},
-	{TAIKO_A_RX_HPH_BIAS_WG_OCP, 0xFF, 0x1A},
-	{TAIKO_A_RX_HPH_CHOP_CTL, 0xFF, 0x24},
-
-	/* Choose max non-overlap time for NCP */
-	{TAIKO_A_NCP_CLK, 0xFF, 0xFC},
-
-	/* Program the 0.85 volt VBG_REFERENCE */
-	{TAIKO_A_BIAS_CURR_CTL_2, 0xFF, 0x04},
-
-	/* set MAD input MIC to DMIC1 */
-	{TAIKO_A_CDC_CONN_MAD, 0x0F, 0x08},
-
-};
-
-static void taiko_codec_init_reg(struct snd_soc_codec *codec)
-{
-	u32 i;
-
-	for (i = 0; i < ARRAY_SIZE(taiko_codec_reg_init_val); i++)
-		snd_soc_update_bits(codec, taiko_codec_reg_init_val[i].reg,
-				taiko_codec_reg_init_val[i].mask,
-				taiko_codec_reg_init_val[i].val);
-}
-
-static void taiko_slim_interface_init_reg(struct snd_soc_codec *codec)
-{
-	int i;
-
-	for (i = 0; i < WCD9XXX_SLIM_NUM_PORT_REG; i++)
-		wcd9xxx_interface_reg_write(codec->control_data,
-					    TAIKO_SLIM_PGD_PORT_INT_EN0 + i,
-					    0xFF);
-}
-
-static int taiko_setup_irqs(struct taiko_priv *taiko)
-{
-	int ret = 0;
-	struct snd_soc_codec *codec = taiko->codec;
-	struct wcd9xxx *wcd9xxx = codec->control_data;
-	struct wcd9xxx_core_resource *core_res =
-				&wcd9xxx->core_res;
-
-	ret = wcd9xxx_request_irq(core_res, WCD9XXX_IRQ_SLIMBUS,
-				  taiko_slimbus_irq, "SLIMBUS Slave", taiko);
-	if (ret)
-		pr_err("%s: Failed to request irq %d\n", __func__,
-		       WCD9XXX_IRQ_SLIMBUS);
-	else
-		taiko_slim_interface_init_reg(codec);
-
-	return ret;
-}
-
-static void taiko_cleanup_irqs(struct taiko_priv *taiko)
-{
-	struct snd_soc_codec *codec = taiko->codec;
-	struct wcd9xxx *wcd9xxx = codec->control_data;
-	struct wcd9xxx_core_resource *core_res =
-				&wcd9xxx->core_res;
-
-	wcd9xxx_free_irq(core_res, WCD9XXX_IRQ_SLIMBUS, taiko);
-}
-static
-struct firmware_cal *taiko_get_hwdep_fw_cal(struct snd_soc_codec *codec,
-			enum wcd_cal_type type)
-{
-	struct taiko_priv *taiko;
-	struct firmware_cal *hwdep_cal;
-
-	if (!codec) {
-		pr_err("%s: NULL codec pointer\n", __func__);
-		return NULL;
-	}
-	taiko = snd_soc_codec_get_drvdata(codec);
-	hwdep_cal = wcdcal_get_fw_cal(taiko->fw_data, type);
-	if (!hwdep_cal) {
-		dev_err(codec->dev, "%s: cal not sent by %d\n",
-				 __func__, type);
-		return NULL;
-	}
-
-	return hwdep_cal;
-}
-
-int taiko_hs_detect(struct snd_soc_codec *codec,
-		    struct wcd9xxx_mbhc_config *mbhc_cfg)
-{
-	int rc;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	rc = wcd9xxx_mbhc_start(&taiko->mbhc, mbhc_cfg);
-	if (!rc)
-		taiko->mbhc_started = true;
-	return rc;
-}
-EXPORT_SYMBOL(taiko_hs_detect);
-
-void taiko_hs_detect_exit(struct snd_soc_codec *codec)
-{
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	wcd9xxx_mbhc_stop(&taiko->mbhc);
-	taiko->mbhc_started = false;
-}
-EXPORT_SYMBOL(taiko_hs_detect_exit);
-
-void taiko_event_register(
-	int (*machine_event_cb)(struct snd_soc_codec *codec,
-				enum wcd9xxx_codec_event),
-	struct snd_soc_codec *codec)
-{
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	taiko->machine_codec_event_cb = machine_event_cb;
-}
-EXPORT_SYMBOL(taiko_event_register);
-
-static void taiko_init_slim_slave_cfg(struct snd_soc_codec *codec)
-{
-	struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-	struct afe_param_cdc_slimbus_slave_cfg *cfg;
-	struct wcd9xxx *wcd9xxx = codec->control_data;
-	uint64_t eaddr = 0;
-
-	cfg = &priv->slimbus_slave_cfg;
-	cfg->minor_version = 1;
-	cfg->tx_slave_port_offset = 0;
-	cfg->rx_slave_port_offset = 16;
-
-	memcpy(&eaddr, &wcd9xxx->slim->e_addr, sizeof(wcd9xxx->slim->e_addr));
-	WARN_ON(sizeof(wcd9xxx->slim->e_addr) != 6);
-	cfg->device_enum_addr_lsw = eaddr & 0xFFFFFFFF;
-	cfg->device_enum_addr_msw = eaddr >> 32;
-
-	pr_debug("%s: slimbus logical address 0x%llx\n", __func__, eaddr);
-}
-
-static int taiko_device_down(struct wcd9xxx *wcd9xxx)
-{
-	struct snd_soc_codec *codec;
-
-	codec = (struct snd_soc_codec *)(wcd9xxx->ssr_priv);
-	snd_soc_card_change_online_state(codec->card, 0);
-
-	return 0;
-}
-
-static int wcd9xxx_prepare_static_pa(struct wcd9xxx_mbhc *mbhc,
-				     struct list_head *lh)
-{
-	int i;
-	struct snd_soc_codec *codec = mbhc->codec;
-
-	const struct wcd9xxx_reg_mask_val reg_set_paon[] = {
-		{WCD9XXX_A_RX_HPH_OCP_CTL, 0x18, 0x00},
-		{WCD9XXX_A_RX_HPH_L_TEST, 0x1, 0x0},
-		{WCD9XXX_A_RX_HPH_R_TEST, 0x1, 0x0},
-		{WCD9XXX_A_RX_HPH_BIAS_WG_OCP, 0xff, 0x1A},
-		{WCD9XXX_A_RX_HPH_CNP_WG_CTL, 0xff, 0xDB},
-		{WCD9XXX_A_RX_HPH_CNP_WG_TIME, 0xff, 0x15},
-		{WCD9XXX_A_CDC_RX1_B6_CTL, 0xff, 0x81},
-		{WCD9XXX_A_CDC_CLK_RX_B1_CTL, 0x01, 0x01},
-		{WCD9XXX_A_RX_HPH_CHOP_CTL, 0xff, 0xA4},
-		{WCD9XXX_A_RX_HPH_L_GAIN, 0xff, 0x2C},
-		{WCD9XXX_A_CDC_RX2_B6_CTL, 0xff, 0x81},
-		{WCD9XXX_A_CDC_CLK_RX_B1_CTL, 0x02, 0x02},
-		{WCD9XXX_A_RX_HPH_R_GAIN, 0xff, 0x2C},
-		{WCD9XXX_A_NCP_CLK, 0xff, 0xFC},
-		{WCD9XXX_A_BUCK_CTRL_CCL_3, 0xff, 0x60},
-		{WCD9XXX_A_RX_COM_BIAS, 0xff, 0x80},
-		{WCD9XXX_A_BUCK_MODE_3, 0xff, 0xC6},
-		{WCD9XXX_A_BUCK_MODE_4, 0xff, 0xE6},
-		{WCD9XXX_A_BUCK_MODE_5, 0xff, 0x02},
-		{WCD9XXX_A_BUCK_MODE_1, 0xff, 0xA1},
-		{WCD9XXX_A_NCP_EN, 0xff, 0xFF},
-		{WCD9XXX_A_BUCK_MODE_5, 0xff, 0x7B},
-		{WCD9XXX_A_CDC_CLSH_B1_CTL, 0xff, 0xE6},
-		{WCD9XXX_A_RX_HPH_L_DAC_CTL, 0xff, 0xC0},
-		{WCD9XXX_A_RX_HPH_R_DAC_CTL, 0xff, 0xC0},
-	};
-
-	for (i = 0; i < ARRAY_SIZE(reg_set_paon); i++)
-		wcd9xxx_soc_update_bits_push(codec, lh,
-					     reg_set_paon[i].reg,
-					     reg_set_paon[i].mask,
-					     reg_set_paon[i].val, 0);
-	pr_debug("%s: PAs are prepared\n", __func__);
-
-	return 0;
-}
-
-static int wcd9xxx_enable_static_pa(struct wcd9xxx_mbhc *mbhc, bool enable)
-{
-	struct snd_soc_codec *codec = mbhc->codec;
-	const int wg_time = snd_soc_read(codec, WCD9XXX_A_RX_HPH_CNP_WG_TIME) *
-			    TAIKO_WG_TIME_FACTOR_US;
-
-	snd_soc_update_bits(codec, WCD9XXX_A_RX_HPH_CNP_EN, 0x30,
-			    enable ? 0x30 : 0x0);
-	/* Wait for wave gen time to avoid pop noise */
-	usleep_range(wg_time, wg_time + WCD9XXX_USLEEP_RANGE_MARGIN_US);
-	pr_debug("%s: PAs are %s as static mode (wg_time %d)\n", __func__,
-		 enable ? "enabled" : "disabled", wg_time);
-	return 0;
-}
-
-static int taiko_setup_zdet(struct wcd9xxx_mbhc *mbhc,
-			    enum mbhc_impedance_detect_stages stage)
-{
-	int ret = 0;
-	struct snd_soc_codec *codec = mbhc->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	const int ramp_wait_us = 18 * 1000;
-
-#define __wr(reg, mask, value)						  \
-	do {								  \
-		ret = wcd9xxx_soc_update_bits_push(codec,		  \
-						   &taiko->reg_save_restore, \
-						   reg, mask, value, 0);  \
-		if (ret < 0)						  \
-			return ret;					  \
-	} while (0)
-
-	switch (stage) {
-
-	case PRE_MEAS:
-		INIT_LIST_HEAD(&taiko->reg_save_restore);
-		wcd9xxx_prepare_static_pa(mbhc, &taiko->reg_save_restore);
-		wcd9xxx_enable_static_pa(mbhc, true);
-
-		/*
-		 * save old value of registers and write the new value to
-		 * restore old value back, WCD9XXX_A_CDC_PA_RAMP_B{1,2,3,4}_CTL
-		 * registers don't need to be restored as those are solely used
-		 * by impedance detection.
-		 */
-		/* Phase 1 */
-		/* Reset the PA Ramp */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B1_CTL, 0x1C);
-		/*
-		 * Connect the PA Ramp to PA chain and release reset with
-		 * keep it connected.
-		 */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B1_CTL, 0x1F);
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B1_CTL, 0x03);
-		/*
-		 * Program the PA Ramp to FS_48K, L shift 1 and sample
-		 * num to 24
-		 */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B3_CTL,
-			      0x3 << 4 | 0x6);
-		/* 0x56 for 10mv.  0xC0 is for 50mv */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B4_CTL, 0xC0);
-		/* Enable MBHC MUX, Set MUX current to 37.5uA and ADC7 */
-		__wr(WCD9XXX_A_MBHC_SCALING_MUX_1, 0xFF, 0xC0);
-		__wr(WCD9XXX_A_MBHC_SCALING_MUX_2, 0xFF, 0xF0);
-		__wr(WCD9XXX_A_TX_7_MBHC_TEST_CTL, 0xFF, 0x78);
-		__wr(WCD9XXX_A_TX_7_MBHC_EN, 0xFF, 0x8C);
-		/* Change NSA and NAVG */
-		__wr(WCD9XXX_A_CDC_MBHC_TIMER_B4_CTL, 0x4 << 4, 0x4 << 4);
-		__wr(WCD9XXX_A_CDC_MBHC_TIMER_B5_CTL, 0xFF, 0x10);
-		/* Reset MBHC and set it up for STA */
-		__wr(WCD9XXX_A_CDC_MBHC_CLK_CTL, 0xFF, 0x0A);
-		snd_soc_write(codec, WCD9XXX_A_CDC_MBHC_EN_CTL, 0x2);
-		__wr(WCD9XXX_A_CDC_MBHC_CLK_CTL, 0xFF, 0x02);
-
-		/* Set HPH_MBHC for zdet */
-		__wr(WCD9XXX_A_MBHC_HPH, 0xB3, 0x80);
-		break;
-	case POST_MEAS:
-		/* Phase 2 */
-		/* Start the PA ramp on HPH L and R */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B2_CTL, 0x05);
-		/* Ramp generator takes ~17ms */
-		usleep_range(ramp_wait_us,
-				ramp_wait_us + WCD9XXX_USLEEP_RANGE_MARGIN_US);
-
-		/* Disable Ical */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B2_CTL, 0x00);
-		/* Ramp generator takes ~17ms */
-		usleep_range(ramp_wait_us,
-				ramp_wait_us + WCD9XXX_USLEEP_RANGE_MARGIN_US);
-		break;
-	case PA_DISABLE:
-		/* Ramp HPH L & R back to Zero */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B2_CTL, 0x0A);
-		/* Ramp generator takes ~17ms */
-		usleep_range(ramp_wait_us,
-				ramp_wait_us + WCD9XXX_USLEEP_RANGE_MARGIN_US);
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B2_CTL, 0x00);
-
-		/* Clean up starts */
-		/* Turn off PA ramp generator */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B1_CTL, 0x0);
-		if (!mbhc->hph_pa_dac_state &&
-		    (!(test_bit(MBHC_EVENT_PA_HPHL, &mbhc->event_state) ||
-		       test_bit(MBHC_EVENT_PA_HPHR, &mbhc->event_state))))
-			wcd9xxx_enable_static_pa(mbhc, false);
-		wcd9xxx_restore_registers(codec, &taiko->reg_save_restore);
-		break;
-	}
-#undef __wr
-
-	return ret;
-}
-
-static void taiko_compute_impedance(s16 *l, s16 *r, uint32_t *zl, uint32_t *zr)
-{
-
-	int64_t rl, rr = 0; /* milliohm */
-	const int alphal = 364; /* 0.005555 * 65536 = 364.05 */
-	const int alphar = 364; /* 0.005555 * 65536 = 364.05 */
-	const int beta = 3855; /* 0.011765 * 5 * 65536 = 3855.15 */
-	const int rref = 11333; /* not scaled up */
-	const int shift = 16;
-
-	rl = (int)(l[0] - l[1]) * 1000 / (l[0] - l[2]);
-	rl = rl * rref * alphal;
-	rl = rl >> shift;
-	rl = rl * beta;
-	rl = rl >> shift;
-	*zl = rl;
-
-	rr = (int)(r[0] - r[1]) * 1000 / (r[0] - r[2]);
-	rr = rr * rref  * alphar;
-	rr = rr >> shift;
-	rr = rr * beta;
-	rr = rr >> shift;
-	*zr = rr;
-}
-
-static enum wcd9xxx_cdc_type taiko_get_cdc_type(void)
-{
-	return WCD9XXX_CDC_TYPE_TAIKO;
-}
-
-static const struct wcd9xxx_mbhc_cb mbhc_cb = {
-	.get_cdc_type = taiko_get_cdc_type,
-	.setup_zdet = taiko_setup_zdet,
-	.compute_impedance = taiko_compute_impedance,
-	.get_hwdep_fw_cal = taiko_get_hwdep_fw_cal,
-};
-
-static const struct wcd9xxx_mbhc_intr cdc_intr_ids = {
-	.poll_plug_rem = WCD9XXX_IRQ_MBHC_REMOVAL,
-	.shortavg_complete = WCD9XXX_IRQ_MBHC_SHORT_TERM,
-	.potential_button_press = WCD9XXX_IRQ_MBHC_PRESS,
-	.button_release = WCD9XXX_IRQ_MBHC_RELEASE,
-	.dce_est_complete = WCD9XXX_IRQ_MBHC_POTENTIAL,
-	.insertion = WCD9XXX_IRQ_MBHC_INSERTION,
-	.hph_left_ocp = WCD9XXX_IRQ_HPH_PA_OCPL_FAULT,
-	.hph_right_ocp = WCD9XXX_IRQ_HPH_PA_OCPR_FAULT,
-	.hs_jack_switch = WCD9320_IRQ_MBHC_JACK_SWITCH,
-};
-
-static int taiko_post_reset_cb(struct wcd9xxx *wcd9xxx)
-{
-	int ret = 0;
-	struct snd_soc_codec *codec;
-	struct taiko_priv *taiko;
-	int rco_clk_rate;
-	int count;
-
-	codec = (struct snd_soc_codec *)(wcd9xxx->ssr_priv);
-	taiko = snd_soc_codec_get_drvdata(codec);
-
-	snd_soc_card_change_online_state(codec->card, 1);
-
-	mutex_lock(&codec->mutex);
-
-        if (codec->reg_def_copy) {
-            pr_debug("%s: Update ASOC cache", __func__);
-            kfree(codec->reg_cache);
-            codec->reg_cache = kmemdup(codec->reg_def_copy,
-                                            codec->reg_size, GFP_KERNEL);
-            if (!codec->reg_cache) {
-                pr_err("%s: Cache update failed!\n", __func__);
-                mutex_unlock(&codec->mutex);
-                return -ENOMEM;
-            }
-        }
-
-	taiko_update_reg_defaults(codec);
-	if (wcd9xxx->mclk_rate == TAIKO_MCLK_CLK_12P288MHZ)
-		snd_soc_update_bits(codec, TAIKO_A_CHIP_CTL, 0x06, 0x0);
-	else if (wcd9xxx->mclk_rate == TAIKO_MCLK_CLK_9P6MHZ)
-		snd_soc_update_bits(codec, TAIKO_A_CHIP_CTL, 0x06, 0x2);
-	taiko_codec_init_reg(codec);
-
-	if (spkr_drv_wrnd == 1)
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80, 0x80);
-
-	codec->cache_sync = true;
-	snd_soc_cache_sync(codec);
-	codec->cache_sync = false;
-
-	ret = taiko_handle_pdata(taiko);
-	if (IS_ERR_VALUE(ret))
-		pr_err("%s: bad pdata\n", __func__);
-
-	taiko_init_slim_slave_cfg(codec);
-	taiko_slim_interface_init_reg(codec);
-
-	wcd9xxx_resmgr_post_ssr(&taiko->resmgr);
-
-	if (taiko->mbhc_started) {
-		wcd9xxx_mbhc_deinit(&taiko->mbhc);
-		taiko->mbhc_started = false;
-
-		if (TAIKO_IS_1_0(wcd9xxx->version))
-			rco_clk_rate = TAIKO_MCLK_CLK_12P288MHZ;
-		else
-			rco_clk_rate = TAIKO_MCLK_CLK_9P6MHZ;
-
-		ret = wcd9xxx_mbhc_init(&taiko->mbhc, &taiko->resmgr, codec,
-					taiko_enable_mbhc_micbias,
-					&mbhc_cb, &cdc_intr_ids,
-					rco_clk_rate, false);
-		if (ret)
-			pr_err("%s: mbhc init failed %d\n", __func__, ret);
-		else
-			taiko_hs_detect(codec, taiko->mbhc.mbhc_cfg);
-	}
-	taiko->machine_codec_event_cb(codec, WCD9XXX_CODEC_EVENT_CODEC_UP);
-
-	taiko_cleanup_irqs(taiko);
-	ret = taiko_setup_irqs(taiko);
-	if (ret)
-		pr_err("%s: Failed to setup irq: %d\n", __func__, ret);
-
-	for (count = 0; count < NUM_CODEC_DAIS; count++)
-		taiko->dai[count].bus_down_in_recovery = true;
-
-	mutex_unlock(&codec->mutex);
-	return ret;
-}
-
-void *taiko_get_afe_config(struct snd_soc_codec *codec,
-			   enum afe_config_type config_type)
-{
-	struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-	struct wcd9xxx *taiko_core = dev_get_drvdata(codec->dev->parent);
-
-	switch (config_type) {
-	case AFE_SLIMBUS_SLAVE_CONFIG:
-		return &priv->slimbus_slave_cfg;
-	case AFE_CDC_REGISTERS_CONFIG:
-		return &taiko_audio_reg_cfg;
-	case AFE_SLIMBUS_SLAVE_PORT_CONFIG:
-		return &taiko_slimbus_slave_port_cfg;
-	case AFE_AANC_VERSION:
-		return &taiko_cdc_aanc_version;
-	case AFE_CLIP_BANK_SEL:
-		if (!TAIKO_IS_1_0(taiko_core->version))
-			return &clip_bank_sel;
-		else
-			return NULL;
-	case AFE_CDC_CLIP_REGISTERS_CONFIG:
-		if (!TAIKO_IS_1_0(taiko_core->version))
-			return &taiko_clip_reg_cfg;
-		else
-			return NULL;
-	default:
-		pr_err("%s: Unknown config_type 0x%x\n", __func__, config_type);
-		return NULL;
-	}
-}
-
-static struct wcd9xxx_reg_address taiko_reg_address = {
-	.micb_4_mbhc = TAIKO_A_MICB_4_MBHC,
-	.micb_4_int_rbias = TAIKO_A_MICB_4_INT_RBIAS,
-	.micb_4_ctl = TAIKO_A_MICB_4_CTL,
-};
-
-static int wcd9xxx_ssr_register(struct wcd9xxx *control,
-				int (*device_down_cb)(struct wcd9xxx *wcd9xxx),
-				int (*device_up_cb)(struct wcd9xxx *wcd9xxx),
-				void *priv)
-{
-	control->dev_down = device_down_cb;
-	control->post_reset = device_up_cb;
-	control->ssr_priv = priv;
-	return 0;
-}
-
-static const struct snd_soc_dapm_widget taiko_1_dapm_widgets[] = {
-	SND_SOC_DAPM_ADC_E("ADC1", NULL, TAIKO_A_TX_1_2_EN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU |
-			   SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC2", NULL, TAIKO_A_TX_1_2_EN, 3, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU |
-			   SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC3", NULL, TAIKO_A_TX_3_4_EN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			   SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC4", NULL, TAIKO_A_TX_3_4_EN, 3, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			   SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC5", NULL, TAIKO_A_TX_5_6_EN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_ADC_E("ADC6", NULL, TAIKO_A_TX_5_6_EN, 3, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_POST_PMU),
-};
-
-static const struct snd_soc_dapm_widget taiko_2_dapm_widgets[] = {
-	SND_SOC_DAPM_ADC_E("ADC1", NULL, TAIKO_A_CDC_TX_1_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU |
-			   SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC2", NULL, TAIKO_A_CDC_TX_2_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU |
-			   SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC3", NULL, TAIKO_A_CDC_TX_3_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			   SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC4", NULL, TAIKO_A_CDC_TX_4_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			   SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC5", NULL, TAIKO_A_CDC_TX_5_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_ADC_E("ADC6", NULL, TAIKO_A_CDC_TX_6_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_POST_PMU),
-};
-
-static struct regulator *taiko_codec_find_regulator(struct snd_soc_codec *codec,
-						    const char *name)
-{
-	int i;
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-
-	for (i = 0; i < core->num_of_supplies; i++) {
-		if (core->supplies[i].supply &&
-		    !strcmp(core->supplies[i].supply, name))
-			return core->supplies[i].consumer;
-	}
-
-	return NULL;
-}
-
-static int taiko_codec_probe(struct snd_soc_codec *codec)
-{
-	struct wcd9xxx *control;
-	struct taiko_priv *taiko;
-	struct wcd9xxx_pdata *pdata;
-	struct wcd9xxx *wcd9xxx;
-	struct snd_soc_dapm_context *dapm = &codec->dapm;
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-	extern unsigned int system_rev;
-#endif
-	int ret = 0;
-	int i, rco_clk_rate;
-	void *ptr = NULL;
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-	struct wcd9xxx_core_resource *core_res;
-
-	codec->control_data = dev_get_drvdata(codec->dev->parent);
-	control = codec->control_data;
-
-	wcd9xxx_ssr_register(control, taiko_device_down,
-			     taiko_post_reset_cb, (void *)codec);
-
-	dev_info(codec->dev, "%s()\n", __func__);
-
-	taiko = kzalloc(sizeof(struct taiko_priv), GFP_KERNEL);
-	if (!taiko) {
-		dev_err(codec->dev, "Failed to allocate private data\n");
-		return -ENOMEM;
-	}
-	for (i = 0 ; i < NUM_DECIMATORS; i++) {
-		tx_hpf_work[i].taiko = taiko;
-		tx_hpf_work[i].decimator = i + 1;
-		INIT_DELAYED_WORK(&tx_hpf_work[i].dwork,
-			tx_hpf_corner_freq_callback);
-	}
-
-	snd_soc_codec_set_drvdata(codec, taiko);
-
-	/* codec resmgr module init */
-	wcd9xxx = codec->control_data;
-	core_res = &wcd9xxx->core_res;
-	pdata = dev_get_platdata(codec->dev->parent);
-	ret = wcd9xxx_resmgr_init(&taiko->resmgr, codec, core_res, pdata,
-				  &pdata->micbias, &taiko_reg_address,
-				  WCD9XXX_CDC_TYPE_TAIKO);
-	if (ret) {
-		pr_err("%s: wcd9xxx init failed %d\n", __func__, ret);
-		goto err_nomem_slimch;
-	}
-
-	taiko->clsh_d.buck_mv = taiko_codec_get_buck_mv(codec);
-	/* Taiko does not support dynamic switching of vdd_cp */
-	taiko->clsh_d.is_dynamic_vdd_cp = false;
-	wcd9xxx_clsh_init(&taiko->clsh_d, &taiko->resmgr);
-
-	if (TAIKO_IS_1_0(core->version))
-		rco_clk_rate = TAIKO_MCLK_CLK_12P288MHZ;
-	else
-		rco_clk_rate = TAIKO_MCLK_CLK_9P6MHZ;
-	taiko->fw_data = kzalloc(sizeof(*(taiko->fw_data)), GFP_KERNEL);
-	if (!taiko->fw_data) {
-		dev_err(codec->dev, "Failed to allocate fw_data\n");
-		goto err_nomem_slimch;
-	}
-	set_bit(WCD9XXX_ANC_CAL, taiko->fw_data->cal_bit);
-	set_bit(WCD9XXX_MAD_CAL, taiko->fw_data->cal_bit);
-	set_bit(WCD9XXX_MBHC_CAL, taiko->fw_data->cal_bit);
-	ret = wcd_cal_create_hwdep(taiko->fw_data,
-					WCD9XXX_CODEC_HWDEP_NODE, codec);
-	if (ret < 0) {
-		dev_err(codec->dev, "%s hwdep failed %d\n", __func__, ret);
-		goto err_hwdep;
-	}
-
-#if defined(CONFIG_MACH_KLTE_KOR)
-	if (system_rev >= 13) {
-		/* init and start mbhc */
-		ret = wcd9xxx_mbhc_init(&taiko->mbhc, &taiko->resmgr, codec,
-					taiko_enable_mbhc_micbias,
-					&mbhc_cb, &cdc_intr_ids,
-					rco_clk_rate, false);
-		if (ret) {
-			pr_err("%s: mbhc init failed %d\n", __func__, ret);
-			goto err_hwdep;
-		}
-	}
-#elif defined(CONFIG_MACH_KLTE_JPN)
-	if (system_rev >= 11) {
-		/* init and start mbhc */
-		ret = wcd9xxx_mbhc_init(&taiko->mbhc, &taiko->resmgr, codec,
-					taiko_enable_mbhc_micbias,
-					&mbhc_cb, &cdc_intr_ids,
-					rco_clk_rate, false);
-		if (ret) {
-			pr_err("%s: mbhc init failed %d\n", __func__, ret);
-			goto err_hwdep;
-		}
-	}
-#else
-#if !defined(CONFIG_SAMSUNG_JACK) && !defined(CONFIG_MUIC_DET_JACK)
-	/* init and start mbhc */
-	ret = wcd9xxx_mbhc_init(&taiko->mbhc, &taiko->resmgr, codec,
-				taiko_enable_mbhc_micbias,
-				&mbhc_cb, &cdc_intr_ids,
-				rco_clk_rate, false);
-	if (ret) {
-		pr_err("%s: mbhc init failed %d\n", __func__, ret);
-		goto err_hwdep;
-	}
-#elif defined(CONFIG_SEC_JACTIVE_PROJECT)
-/* init and start mbhc */
-	pr_info("taiko_codec_probe system_rev %d",system_rev);
-	if(system_rev < 3)
-	{
-        ret = wcd9xxx_mbhc_init(&taiko->mbhc, &taiko->resmgr, codec,
-                    taiko_enable_mbhc_micbias,
-                    &mbhc_cb, &cdc_intr_ids,
-                    rco_clk_rate, false);
-        if (ret) {
-            pr_err("%s: mbhc init failed %d\n", __func__, ret);
-            goto err_hwdep;
-        }
-	}
-#endif
-#endif
-
-	taiko->codec = codec;
-	for (i = 0; i < COMPANDER_MAX; i++) {
-		taiko->comp_enabled[i] = 0;
-		taiko->comp_fs[i] = COMPANDER_FS_48KHZ;
-	}
-	taiko->intf_type = wcd9xxx_get_intf_type();
-	taiko->aux_pga_cnt = 0;
-	taiko->aux_l_gain = 0x1F;
-	taiko->aux_r_gain = 0x1F;
-	taiko->ldo_h_users = 0;
-	taiko->micb_2_users = 0;
-	taiko_update_reg_defaults(codec);
-	pr_debug("%s: MCLK Rate = %x\n", __func__, wcd9xxx->mclk_rate);
-	if (wcd9xxx->mclk_rate == TAIKO_MCLK_CLK_12P288MHZ)
-		snd_soc_update_bits(codec, TAIKO_A_CHIP_CTL, 0x06, 0x0);
-	else if (wcd9xxx->mclk_rate == TAIKO_MCLK_CLK_9P6MHZ)
-		snd_soc_update_bits(codec, TAIKO_A_CHIP_CTL, 0x06, 0x2);
-	taiko_codec_init_reg(codec);
-	ret = taiko_handle_pdata(taiko);
-	if (IS_ERR_VALUE(ret)) {
-		pr_err("%s: bad pdata\n", __func__);
-		goto err_hwdep;
-	}
-
-	taiko->spkdrv_reg = taiko_codec_find_regulator(codec,
-						       WCD9XXX_VDD_SPKDRV_NAME);
-
-	if (spkr_drv_wrnd > 0) {
-		WCD9XXX_BG_CLK_LOCK(&taiko->resmgr);
-		wcd9xxx_resmgr_get_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		WCD9XXX_BG_CLK_UNLOCK(&taiko->resmgr);
-	}
-
-#if defined(CONFIG_SND_SOC_ESXXX)
-	remote_add_codec_controls(codec);
-#elif defined(CONFIG_SND_SOC_ES325)
-	es325_remote_add_codec_controls(codec);
-#endif
-
-	ptr = kmalloc((sizeof(taiko_rx_chs) +
-		       sizeof(taiko_tx_chs)), GFP_KERNEL);
-	if (!ptr) {
-		pr_err("%s: no mem for slim chan ctl data\n", __func__);
-		ret = -ENOMEM;
-		goto err_hwdep;
-	}
-
-	if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_I2C) {
-		snd_soc_dapm_new_controls(dapm, taiko_dapm_i2s_widgets,
-			ARRAY_SIZE(taiko_dapm_i2s_widgets));
-		snd_soc_dapm_add_routes(dapm, audio_i2s_map,
-			ARRAY_SIZE(audio_i2s_map));
-		if (TAIKO_IS_1_0(core->version))
-			snd_soc_dapm_add_routes(dapm, audio_i2s_map_1_0,
-						ARRAY_SIZE(audio_i2s_map_1_0));
-		else
-			snd_soc_dapm_add_routes(dapm, audio_i2s_map_2_0,
-						ARRAY_SIZE(audio_i2s_map_2_0));
-		for (i = 0; i < ARRAY_SIZE(taiko_i2s_dai); i++)
-			INIT_LIST_HEAD(&taiko->dai[i].wcd9xxx_ch_list);
-	} else if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_SLIMBUS) {
-		for (i = 0; i < NUM_CODEC_DAIS; i++) {
-			INIT_LIST_HEAD(&taiko->dai[i].wcd9xxx_ch_list);
-			init_waitqueue_head(&taiko->dai[i].dai_wait);
-		}
-		taiko_slimbus_slave_port_cfg.slave_dev_intfdev_la =
-		    control->slim_slave->laddr;
-		taiko_slimbus_slave_port_cfg.slave_dev_pgd_la =
-		    control->slim->laddr;
-		taiko_slimbus_slave_port_cfg.slave_port_mapping[0] =
-		    TAIKO_MAD_SLIMBUS_TX_PORT;
-
-		taiko_init_slim_slave_cfg(codec);
-	}
-
-	if (TAIKO_IS_1_0(control->version)) {
-		snd_soc_dapm_new_controls(dapm, taiko_1_dapm_widgets,
-					  ARRAY_SIZE(taiko_1_dapm_widgets));
-		snd_soc_add_codec_controls(codec,
-			taiko_1_x_analog_gain_controls,
-			ARRAY_SIZE(taiko_1_x_analog_gain_controls));
-	} else {
-		snd_soc_dapm_new_controls(dapm, taiko_2_dapm_widgets,
-					  ARRAY_SIZE(taiko_2_dapm_widgets));
-		snd_soc_add_codec_controls(codec,
-			taiko_2_x_analog_gain_controls,
-			ARRAY_SIZE(taiko_2_x_analog_gain_controls));
-	}
-
-	snd_soc_add_codec_controls(codec, impedance_detect_controls,
-				   ARRAY_SIZE(impedance_detect_controls));
-
-	control->num_rx_port = TAIKO_RX_MAX;
-	control->rx_chs = ptr;
-	memcpy(control->rx_chs, taiko_rx_chs, sizeof(taiko_rx_chs));
-	control->num_tx_port = TAIKO_TX_MAX;
-	control->tx_chs = ptr + sizeof(taiko_rx_chs);
-	memcpy(control->tx_chs, taiko_tx_chs, sizeof(taiko_tx_chs));
-
-	snd_soc_dapm_sync(dapm);
-
-	ret = taiko_setup_irqs(taiko);
-	if (ret) {
-		pr_err("%s: taiko irq setup failed %d\n", __func__, ret);
-		goto err_irq;
-	}
-
-	atomic_set(&kp_taiko_priv, (unsigned long)taiko);
-	mutex_lock(&dapm->codec->mutex);
-	snd_soc_dapm_disable_pin(dapm, "ANC HPHL");
-	snd_soc_dapm_disable_pin(dapm, "ANC HPHR");
-	snd_soc_dapm_disable_pin(dapm, "ANC HEADPHONE");
-	snd_soc_dapm_disable_pin(dapm, "ANC EAR PA");
-	snd_soc_dapm_disable_pin(dapm, "ANC EAR");
-	snd_soc_dapm_sync(dapm);
-	mutex_unlock(&dapm->codec->mutex);
-
-	codec->ignore_pmdown_time = 1;
-	
-#ifdef CONFIG_BOEFFLA_SOUND
-	// Boeffla Sound probe hook
-	boeffla_sound_hook_taiko_codec_probe(codec);
-#endif
-	
-	return ret;
-
-err_irq:
-	taiko_cleanup_irqs(taiko);
-        kfree(ptr);
-err_hwdep:
-	kfree(taiko->fw_data);
-err_nomem_slimch:
-	kfree(taiko);
-	return ret;
-}
-static int taiko_codec_remove(struct snd_soc_codec *codec)
-{
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-	extern unsigned int system_rev;
-#endif
-	WCD9XXX_BG_CLK_LOCK(&taiko->resmgr);
-	atomic_set(&kp_taiko_priv, 0);
-
-	if (spkr_drv_wrnd > 0)
-		wcd9xxx_resmgr_put_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-	WCD9XXX_BG_CLK_UNLOCK(&taiko->resmgr);
-
-	taiko_cleanup_irqs(taiko);
-
-#if defined(CONFIG_MACH_KLTE_KOR)
-	if (system_rev >= 13) {
-		/* cleanup MBHC */
-		wcd9xxx_mbhc_deinit(&taiko->mbhc);
-	}
-#elif defined(CONFIG_MACH_KLTE_JPN)
-	if (system_rev >= 11) {
-		/* cleanup MBHC */
-		wcd9xxx_mbhc_deinit(&taiko->mbhc);
-	}
-#else
-#if !defined(CONFIG_SAMSUNG_JACK) && !defined(CONFIG_MUIC_DET_JACK)
-	/* cleanup MBHC */
-	wcd9xxx_mbhc_deinit(&taiko->mbhc);
-#elif defined(CONFIG_SEC_JACTIVE_PROJECT)
-	pr_info("taiko_codec_remove system_rev %d",system_rev);
-	if(system_rev < 3)
-	{
-		wcd9xxx_mbhc_deinit(&taiko->mbhc);
-	}
-#endif
-#endif
-	/* cleanup resmgr */
-	wcd9xxx_resmgr_deinit(&taiko->resmgr);
-
-	taiko->spkdrv_reg = NULL;
-
-	kfree(taiko->fw_data);
-	kfree(taiko);
-	return 0;
-}
-static struct snd_soc_codec_driver soc_codec_dev_taiko = {
-	.probe	= taiko_codec_probe,
-	.remove	= taiko_codec_remove,
-
-	.read = taiko_read,
-	.write = taiko_write,
-
-	.readable_register = taiko_readable,
-	.volatile_register = taiko_volatile,
-
-	.reg_cache_size = TAIKO_CACHE_SIZE,
-	.reg_cache_default = taiko_reset_reg_defaults,
-	.reg_word_size = 1,
-
-	.controls = taiko_snd_controls,
-	.num_controls = ARRAY_SIZE(taiko_snd_controls),
-	.dapm_widgets = taiko_dapm_widgets,
-	.num_dapm_widgets = ARRAY_SIZE(taiko_dapm_widgets),
-	.dapm_routes = audio_map,
-	.num_dapm_routes = ARRAY_SIZE(audio_map),
-};
-
-#ifdef CONFIG_PM
-static int taiko_suspend(struct device *dev)
-{
-	dev_dbg(dev, "%s: system suspend\n", __func__);
-	return 0;
-}
-
-static int taiko_resume(struct device *dev)
-{
-	struct platform_device *pdev = to_platform_device(dev);
-	struct taiko_priv *taiko = platform_get_drvdata(pdev);
-
-	if (!taiko) {
-		dev_err(dev, "%s: taiko private data is NULL\n", __func__);
-		return -EINVAL;
-	}
-	dev_dbg(dev, "%s: system resume\n", __func__);
-	/* Notify */
-	wcd9xxx_resmgr_notifier_call(&taiko->resmgr, WCD9XXX_EVENT_POST_RESUME);
-	return 0;
-}
-
-static const struct dev_pm_ops taiko_pm_ops = {
-	.suspend	= taiko_suspend,
-	.resume		= taiko_resume,
-};
-#endif
-
-static int __devinit taiko_probe(struct platform_device *pdev)
-{
-	int ret = 0;
-	if (wcd9xxx_get_intf_type() == WCD9XXX_INTERFACE_TYPE_SLIMBUS)
-		ret = snd_soc_register_codec(&pdev->dev, &soc_codec_dev_taiko,
-			taiko_dai, ARRAY_SIZE(taiko_dai));
-	else if (wcd9xxx_get_intf_type() == WCD9XXX_INTERFACE_TYPE_I2C)
-		ret = snd_soc_register_codec(&pdev->dev, &soc_codec_dev_taiko,
-			taiko_i2s_dai, ARRAY_SIZE(taiko_i2s_dai));
-	return ret;
-}
-static int __devexit taiko_remove(struct platform_device *pdev)
-{
-	snd_soc_unregister_codec(&pdev->dev);
-	return 0;
-}
-static struct platform_driver taiko_codec_driver = {
-	.probe = taiko_probe,
-	.remove = taiko_remove,
-	.driver = {
-		.name = "taiko_codec",
-		.owner = THIS_MODULE,
-#ifdef CONFIG_PM
-		.pm = &taiko_pm_ops,
-#endif
-	},
-};
-
-static int __init taiko_codec_init(void)
-{
-	return platform_driver_register(&taiko_codec_driver);
-}
-
-static void __exit taiko_codec_exit(void)
-{
-	platform_driver_unregister(&taiko_codec_driver);
-}
-
-module_init(taiko_codec_init);
-module_exit(taiko_codec_exit);
-
-MODULE_DESCRIPTION("Taiko codec driver");
-MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/codecs/wcd9320.o_shipped b/sound/soc/codecs/wcd9320.o_shipped
new file mode 100644
index 0000000000000000000000000000000000000000..6f1f1d820a65c1a408fad4bae646c8f9b578ff18
GIT binary patch
literal 164524
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

literal 0
HcmV?d00001

-- 
2.11.0

